Parser---
let rec (xor: T) ((x: T), (y: T)) = if x then
  not(y)
else
  y in
  let rec (sgn: T) ((x: T)) = if fiszero(x) then
  0.
else
  if fispos(x) then
    1.
  else
    -1. in
    let rec (fneg_cond: T) ((cond: T), (x: T)) = if cond then
  x
else
  fneg(x) in
      let rec (add_mod5: T) ((x: T), (y: T)) = let sum: T = (x + y) in
  if 5 <= sum then
    (sum - 5)
  else
    sum in
        let rec (vecset: T) ((v: T), (x: T), (y: T), (z: T)) = let Tu2: Unit = v.(0) <- x in
  let Tu1: Unit = v.(1) <- y in
    v.(2) <- z in
          let rec (vecfill: T) ((v: T), (elem: T)) = let Tu4: Unit = v.(0) <- elem in
  let Tu3: Unit = v.(1) <- elem in
    v.(2) <- elem in
            let rec (vecbzero: T) ((v: T)) = vecfill(v, 0.) in
              let rec (veccpy: T) ((dest: T), (src: T)) = let Tu6: Unit = dest.(0) <- src.(0) in
  let Tu5: Unit = dest.(1) <- src.(1) in
    dest.(2) <- src.(2) in
                let rec (vecdist2: T) ((p: T), (q: T)) = ((fsqr((p.(0) - q.(0))) + fsqr((p.(1) - q.(1)))) + fsqr((p.(2) - q.(2)))) in
                  let rec (vecunit: T) ((v: T)) = let il: T = (1. / sqrt(((fsqr(v.(0)) + fsqr(v.(1))) + fsqr(v.(2))))) in
  let Tu8: Unit = v.(0) <- (v.(0) * il) in
    let Tu7: Unit = v.(1) <- (v.(1) * il) in
      v.(2) <- (v.(2) * il) in
                    let rec (vecunit_sgn: T) ((v: T), (inv: T)) = let l: T = sqrt(((fsqr(v.(0)) + fsqr(v.(1))) + fsqr(v.(2)))) in
  let il: T = if fiszero(l) then
  1.
else
  if inv then
    (-1. /     l)
  else
    (1. /     l) in
    let Tu10: Unit = v.(0) <- (v.(0) * il) in
      let Tu9: Unit = v.(1) <- (v.(1) * il) in
        v.(2) <- (v.(2) * il) in
                      let rec (veciprod: T) ((v: T), (w: T)) = (((v.(0) * w.(0)) + (v.(1) * w.(1))) + (v.(2) * w.(2))) in
                        let rec (veciprod2: T) ((v: T), (w0: T), (w1: T), (w2: T)) = (((v.(0) * w0) + (v.(1) * w1)) + (v.(2) * w2)) in
                          let rec (vecaccum: T) ((dest: T), (scale: T), (v: T)) = let Tu12: Unit = dest.(0) <- (dest.(0) + (scale * v.(0))) in
  let Tu11: Unit = dest.(1) <- (dest.(1) + (scale * v.(1))) in
    dest.(2) <- (dest.(2) + (scale * v.(2))) in
                            let rec (vecadd: T) ((dest: T), (v: T)) = let Tu14: Unit = dest.(0) <- (dest.(0) + v.(0)) in
  let Tu13: Unit = dest.(1) <- (dest.(1) + v.(1)) in
    dest.(2) <- (dest.(2) + v.(2)) in
                              let rec (vecmul: T) ((dest: T), (v: T)) = let Tu16: Unit = dest.(0) <- (dest.(0) * v.(0)) in
  let Tu15: Unit = dest.(1) <- (dest.(1) * v.(1)) in
    dest.(2) <- (dest.(2) * v.(2)) in
                                let rec (vecscale: T) ((dest: T), (scale: T)) = let Tu18: Unit = dest.(0) <- (dest.(0) * scale) in
  let Tu17: Unit = dest.(1) <- (dest.(1) * scale) in
    dest.(2) <- (dest.(2) * scale) in
                                  let rec (vecaccumv: T) ((dest: T), (v: T), (w: T)) = let Tu20: Unit = dest.(0) <- (dest.(0) + (v.(0) * w.(0))) in
  let Tu19: Unit = dest.(1) <- (dest.(1) + (v.(1) * w.(1))) in
    dest.(2) <- (dest.(2) + (v.(2) * w.(2))) in
                                    let rec (o_texturetype: T) ((m: T)) = let ((m_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_tex in
                                      let rec (o_form: T) ((m: T)) = let ((xm_tex: T), (m_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_shape in
                                        let rec (o_reflectiontype: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (m_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_surface in
                                          let rec (o_isinvert: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (m_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_invert in
                                            let rec (o_isrot: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (m_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_isrot in
                                              let rec (o_param_a: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (m_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_abc.(0) in
                                                let rec (o_param_b: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (m_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_abc.(1) in
                                                  let rec (o_param_c: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (m_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_abc.(2) in
                                                    let rec (o_param_abc: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (m_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_abc in
                                                      let rec (o_param_x: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (m_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_xyz.(0) in
                                                        let rec (o_param_y: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (m_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_xyz.(1) in
                                                          let rec (o_param_z: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (m_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_xyz.(2) in
                                                            let rec (o_diffuse: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (m_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_surfparams.(0) in
                                                              let rec (o_hilight: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (m_surfparams: T), (xm_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_surfparams.(1) in
                                                                let rec (o_color_red: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (m_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (m_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_color.(0) in
                                                                  let rec (o_color_green: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (m_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (m_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_color.(1) in
                                                                    let rec (o_color_blue: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (m_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (m_color: T), (xm_rot123: T), (xm_ctbl: T)) = m in
  m_color.(2) in
                                                                      let rec (o_param_r1: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (m_rot123: T), (xm_ctbl: T)) = m in
  m_rot123.(0) in
                                                                        let rec (o_param_r2: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (m_rot123: T), (xm_ctbl: T)) = m in
  m_rot123.(1) in
                                                                          let rec (o_param_r3: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (m_rot123: T), (xm_ctbl: T)) = m in
  m_rot123.(2) in
                                                                            let rec (o_param_ctbl: T) ((m: T)) = let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T), (m_ctbl: T)) = m in
  m_ctbl in
                                                                              let rec (p_rgb: T) ((pixel: T)) = let ((m_rgb: T), (xm_isect_ps: T), (xm_sids: T), (xm_cdif: T), (xm_engy: T), (xm_r20p: T), (xm_gid: T), (xm_nvectors: T)) = pixel in
  m_rgb in
                                                                                let rec (p_intersection_points: T) ((pixel: T)) = let ((xm_rgb: T), (m_isect_ps: T), (xm_sids: T), (xm_cdif: T), (xm_engy: T), (xm_r20p: T), (xm_gid: T), (xm_nvectors: T)) = pixel in
  m_isect_ps in
                                                                                  let rec (p_surface_ids: T) ((pixel: T)) = let ((xm_rgb: T), (xm_isect_ps: T), (m_sids: T), (xm_cdif: T), (xm_engy: T), (xm_r20p: T), (xm_gid: T), (xm_nvectors: T)) = pixel in
  m_sids in
                                                                                    let rec (p_calc_diffuse: T) ((pixel: T)) = let ((xm_rgb: T), (xm_isect_ps: T), (xm_sids: T), (m_cdif: T), (xm_engy: T), (xm_r20p: T), (xm_gid: T), (xm_nvectors: T)) = pixel in
  m_cdif in
                                                                                      let rec (p_energy: T) ((pixel: T)) = let ((xm_rgb: T), (xm_isect_ps: T), (xm_sids: T), (xm_cdif: T), (m_engy: T), (xm_r20p: T), (xm_gid: T), (xm_nvectors: T)) = pixel in
  m_engy in
                                                                                        let rec (p_received_ray_20percent: T) ((pixel: T)) = let ((xm_rgb: T), (xm_isect_ps: T), (xm_sids: T), (xm_cdif: T), (xm_engy: T), (m_r20p: T), (xm_gid: T), (xm_nvectors: T)) = pixel in
  m_r20p in
                                                                                          let rec (p_group_id: T) ((pixel: T)) = let ((xm_rgb: T), (xm_isect_ps: T), (xm_sids: T), (xm_cdif: T), (xm_engy: T), (xm_r20p: T), (m_gid: T), (xm_nvectors: T)) = pixel in
  m_gid.(0) in
                                                                                            let rec (p_set_group_id: T) ((pixel: T), (id: T)) = let ((xm_rgb: T), (xm_isect_ps: T), (xm_sids: T), (xm_cdif: T), (xm_engy: T), (xm_r20p: T), (m_gid: T), (xm_nvectors: T)) = pixel in
  m_gid.(0) <- id in
                                                                                              let rec (p_nvectors: T) ((pixel: T)) = let ((xm_rgb: T), (xm_isect_ps: T), (xm_sids: T), (xm_cdif: T), (xm_engy: T), (xm_r20p: T), (xm_gid: T), (m_nvectors: T)) = pixel in
  m_nvectors in
                                                                                                let rec (d_vec: T) ((d: T)) = let ((m_vec: T), (xm_const: T)) = d in
  m_vec in
                                                                                                  let rec (d_const: T) ((d: T)) = let ((dm_vec: T), (m_const: T)) = d in
  m_const in
                                                                                                    let rec (r_surface_id: T) ((r: T)) = let ((m_sid: T), (xm_dvec: T), (xm_br: T)) = r in
  m_sid in
                                                                                                      let rec (r_dvec: T) ((r: T)) = let ((xm_sid: T), (m_dvec: T), (xm_br: T)) = r in
  m_dvec in
                                                                                                        let rec (r_bright: T) ((r: T)) = let ((xm_sid: T), (xm_dvec: T), (m_br: T)) = r in
  m_br in
                                                                                                          let rec (rad: T) ((x: T)) = (x * 0.017453293) in
                                                                                                            let rec (read_screen_settings: T) ((Tu21: T)) = let Tu35: Unit = screen.(0) <- read_float(()) in
  let Tu34: Unit = screen.(1) <- read_float(()) in
    let Tu33: Unit = screen.(2) <- read_float(()) in
      let v1: T = rad(read_float(())) in
        let cos_v1: T = cos(v1) in
          let sin_v1: T = sin(v1) in
            let v2: T = rad(read_float(())) in
              let cos_v2: T = cos(v2) in
                let sin_v2: T = sin(v2) in
                  let Tu32: Unit = screenz_dir.(0) <- ((cos_v1 * sin_v2) * 200.) in
                    let Tu31: Unit = screenz_dir.(1) <- (sin_v1 * -200.) in
                      let Tu30: Unit = screenz_dir.(2) <- ((cos_v1 * cos_v2) * 200.) in
                        let Tu29: Unit = screenx_dir.(0) <- cos_v2 in
                          let Tu28: Unit = screenx_dir.(1) <- 0. in
                            let Tu27: Unit = screenx_dir.(2) <- fneg(sin_v2) in
                              let Tu26: Unit = screeny_dir.(0) <- (fneg(sin_v1) * sin_v2) in
                                let Tu25: Unit = screeny_dir.(1) <- fneg(cos_v1) in
                                  let Tu24: Unit = screeny_dir.(2) <- (fneg(sin_v1) * cos_v2) in
                                    let Tu23: Unit = viewpoint.(0) <- (screen.(0) - screenz_dir.(0)) in
                                      let Tu22: Unit = viewpoint.(1) <- (screen.(1) - screenz_dir.(1)) in
                                        viewpoint.(2) <- (screen.(2) - screenz_dir.(2)) in
                                                                                                              let rec (read_light: T) ((Tu36: T)) = let nl: T = read_int(()) in
  let l1: T = rad(read_float(())) in
    let sl1: T = sin(l1) in
      let Tu39: Unit = light.(1) <- fneg(sl1) in
        let l2: T = rad(read_float(())) in
          let cl1: T = cos(l1) in
            let sl2: T = sin(l2) in
              let Tu38: Unit = light.(0) <- (cl1 * sl2) in
                let cl2: T = cos(l2) in
                  let Tu37: Unit = light.(2) <- (cl1 * cl2) in
                    beam.(0) <- read_float(()) in
                                                                                                                let rec (rotate_quadratic_matrix: T) ((abc: T), (rot: T)) = let cos_x: T = cos(rot.(0)) in
  let sin_x: T = sin(rot.(0)) in
    let cos_y: T = cos(rot.(1)) in
      let sin_y: T = sin(rot.(1)) in
        let cos_z: T = cos(rot.(2)) in
          let sin_z: T = sin(rot.(2)) in
            let m00: T = (cos_y * cos_z) in
              let m01: T = (((sin_x * sin_y) * cos_z) - (cos_x * sin_z)) in
                let m02: T = (((cos_x * sin_y) * cos_z) + (sin_x * sin_z)) in
                  let m10: T = (cos_y * sin_z) in
                    let m11: T = (((sin_x * sin_y) * sin_z) + (cos_x * cos_z)) in
                      let m12: T = (((cos_x * sin_y) * sin_z) - (sin_x * cos_z)) in
                        let m20: T = fneg(sin_y) in
                          let m21: T = (sin_x * cos_y) in
                            let m22: T = (cos_x * cos_y) in
                              let ao: T = abc.(0) in
                                let bo: T = abc.(1) in
                                  let co: T = abc.(2) in
                                    let Tu44: Unit = abc.(0) <- (((ao * fsqr(m00)) + (bo * fsqr(m10))) + (co * fsqr(m20))) in
                                      let Tu43: Unit = abc.(1) <- (((ao * fsqr(m01)) + (bo * fsqr(m11))) + (co * fsqr(m21))) in
                                        let Tu42: Unit = abc.(2) <- (((ao * fsqr(m02)) + (bo * fsqr(m12))) + (co * fsqr(m22))) in
                                          let Tu41: Unit = rot.(0) <- (2. * ((((ao * m01) * m02) + ((bo * m11) * m12)) + ((co * m21) * m22))) in
                                            let Tu40: Unit = rot.(1) <- (2. * ((((ao * m00) * m02) + ((bo * m10) * m12)) + ((co * m20) * m22))) in
                                              rot.(2) <- (2. * ((((ao * m00) * m01) + ((bo * m10) * m11)) + ((co * m20) * m21))) in
                                                                                                                  let rec (read_nth_object: T) ((n: T)) = let texture: T = read_int(()) in
  if not(texture == -(1)) then
    let form: T = read_int(()) in
      let refltype: T = read_int(()) in
        let isrot_p: T = read_int(()) in
          let abc: T = Array.create 3 0. in
            let Tu63: Unit = abc.(0) <- read_float(()) in
              let Tu62: Unit = abc.(1) <- read_float(()) in
                let Tu61: Unit = abc.(2) <- read_float(()) in
                  let xyz: T = Array.create 3 0. in
                    let Tu60: Unit = xyz.(0) <- read_float(()) in
                      let Tu59: Unit = xyz.(1) <- read_float(()) in
                        let Tu58: Unit = xyz.(2) <- read_float(()) in
                          let m_invert: T = fisneg(read_float(())) in
                            let reflparam: T = Array.create 2 0. in
                              let Tu57: Unit = reflparam.(0) <- read_float(()) in
                                let Tu56: Unit = reflparam.(1) <- read_float(()) in
                                  let color: T = Array.create 3 0. in
                                    let Tu55: Unit = color.(0) <- read_float(()) in
                                      let Tu54: Unit = color.(1) <- read_float(()) in
                                        let Tu53: Unit = color.(2) <- read_float(()) in
                                          let rotation: T = Array.create 3 0. in
                                            let Tu52: Unit = if not(isrot_p == 0) then
  let Tu46: Unit = rotation.(0) <- rad(read_float(())) in
    let Tu45: Unit = rotation.(1) <- rad(read_float(())) in
      rotation.(2) <- rad(read_float(()))
else
  () in
                                              let m_invert2: T = if form == 2 then
  true
else
  m_invert in
                                                let ctbl: T = Array.create 4 0. in
                                                  let obj: T = (texture, form, refltype, isrot_p, abc, xyz, m_invert2, reflparam, color, rotation, ctbl) in
                                                    let Tu51: Unit = objects.(n) <- obj in
                                                      let Tu50: Unit = if form == 3 then
  let a: T = abc.(0) in
    let Tu48: Unit = abc.(0) <- if fiszero(a) then
  0.
else
  (sgn(a) /   fsqr(a)) in
      let b: T = abc.(1) in
        let Tu47: Unit = abc.(1) <- if fiszero(b) then
  0.
else
  (sgn(b) /   fsqr(b)) in
          let c: T = abc.(2) in
            abc.(2) <- if fiszero(c) then
  0.
else
  (sgn(c) /   fsqr(c))
else
  if form == 2 then
    vecunit_sgn(abc, not(m_invert))
  else
    () in
                                                        let Tu49: Unit = if not(isrot_p == 0) then
  rotate_quadratic_matrix(abc, rotation)
else
  () in
                                                          true
  else
    false in
                                                                                                                    let rec (read_object: T) ((n: T)) = if not(60 <= n) then
  if read_nth_object(n) then
    read_object((n + 1))
  else
    n_objects.(0) <- n
else
  () in
                                                                                                                      let rec (read_all_object: T) ((Tu64: T)) = read_object(0) in
                                                                                                                        let rec (read_net_item: T) ((length: T)) = let item: T = read_int(()) in
  if item == -(1) then
    Array.create (length + 1) -(1)
  else
    let v: T = read_net_item((length + 1)) in
      let Tu65: Unit = v.(length) <- item in
        v in
                                                                                                                          let rec (read_or_network: T) ((length: T)) = let net: T = read_net_item(0) in
  if net.(0) == -(1) then
    Array.create (length + 1) net
  else
    let v: T = read_or_network((length + 1)) in
      let Tu66: Unit = v.(length) <- net in
        v in
                                                                                                                            let rec (read_and_network: T) ((n: T)) = let net: T = read_net_item(0) in
  if net.(0) == -(1) then
    ()
  else
    let Tu67: Unit = and_net.(n) <- net in
      read_and_network((n + 1)) in
                                                                                                                              let rec (read_parameter: T) ((Tu68: T)) = let Tu72: Unit = read_screen_settings(()) in
  let Tu71: Unit = read_light(()) in
    let Tu70: Unit = read_all_object(()) in
      let Tu69: Unit = read_and_network(0) in
        or_net.(0) <- read_or_network(0) in
                                                                                                                                let rec (solver_rect_surface: T) ((m: T), (dirvec: T), (b0: T), (b1: T), (b2: T), (i0: T), (i1: T), (i2: T)) = if fiszero(dirvec.(i0)) then
  false
else
  let abc: T = o_param_abc(m) in
    let d: T = fneg_cond(xor(o_isinvert(m), fisneg(dirvec.(i0))), abc.(i0)) in
      let d2: T = ((d - b0) / dirvec.(i0)) in
        if fless(fabs(((d2 * dirvec.(i1)) + b1)), abc.(i1)) then
          if fless(fabs(((d2 * dirvec.(i2)) + b2)), abc.(i2)) then
            let Tu73: Unit = solver_dist.(0) <- d2 in
              true
          else
            false
        else
          false in
                                                                                                                                  let rec (solver_rect: T) ((m: T), (dirvec: T), (b0: T), (b1: T), (b2: T)) = if solver_rect_surface(m, dirvec, b0, b1, b2, 0, 1, 2) then
  1
else
  if solver_rect_surface(m, dirvec, b1, b2, b0, 1, 2, 0) then
    2
  else
    if solver_rect_surface(m, dirvec, b2, b0, b1, 2, 0, 1) then
      3
    else
      0 in
                                                                                                                                    let rec (solver_surface: T) ((m: T), (dirvec: T), (b0: T), (b1: T), (b2: T)) = let abc: T = o_param_abc(m) in
  let d: T = veciprod(dirvec, abc) in
    if fispos(d) then
      let Tu74: Unit = solver_dist.(0) <- (fneg(veciprod2(abc, b0, b1, b2)) / d) in
        1
    else
      0 in
                                                                                                                                      let rec (quadratic: T) ((m: T), (v0: T), (v1: T), (v2: T)) = let diag_part: T = (((fsqr(v0) * o_param_a(m)) + (fsqr(v1) * o_param_b(m))) + (fsqr(v2) * o_param_c(m))) in
  if o_isrot(m) == 0 then
    diag_part
  else
    (((diag_part + ((v1 * v2) * o_param_r1(m))) + ((v2 * v0) * o_param_r2(m))) + ((v0 * v1) * o_param_r3(m))) in
                                                                                                                                        let rec (bilinear: T) ((m: T), (v0: T), (v1: T), (v2: T), (w0: T), (w1: T), (w2: T)) = let diag_part: T = ((((v0 * w0) * o_param_a(m)) + ((v1 * w1) * o_param_b(m))) + ((v2 * w2) * o_param_c(m))) in
  if o_isrot(m) == 0 then
    diag_part
  else
    (diag_part + fhalf((((((v2 * w1) + (v1 * w2)) * o_param_r1(m)) + (((v0 * w2) + (v2 * w0)) * o_param_r2(m))) + (((v0 * w1) + (v1 * w0)) * o_param_r3(m))))) in
                                                                                                                                          let rec (solver_second: T) ((m: T), (dirvec: T), (b0: T), (b1: T), (b2: T)) = let aa: T = quadratic(m, dirvec.(0), dirvec.(1), dirvec.(2)) in
  if fiszero(aa) then
    0
  else
    let bb: T = bilinear(m, dirvec.(0), dirvec.(1), dirvec.(2), b0, b1, b2) in
      let cc0: T = quadratic(m, b0, b1, b2) in
        let cc: T = if o_form(m) == 3 then
  (cc0 - 1.)
else
  cc0 in
          let d: T = (fsqr(bb) - (aa * cc)) in
            if fispos(d) then
              let sd: T = sqrt(d) in
                let t1: T = if o_isinvert(m) then
  sd
else
  fneg(sd) in
                  let Tu75: Unit = solver_dist.(0) <- ((t1 - bb) / aa) in
                    1
            else
              0 in
                                                                                                                                            let rec (solver: T) ((index: T), (dirvec: T), (org: T)) = let m: T = objects.(index) in
  let b0: T = (org.(0) - o_param_x(m)) in
    let b1: T = (org.(1) - o_param_y(m)) in
      let b2: T = (org.(2) - o_param_z(m)) in
        let m_shape: T = o_form(m) in
          if m_shape == 1 then
            solver_rect(m, dirvec, b0, b1, b2)
          else
            if m_shape == 2 then
              solver_surface(m, dirvec, b0, b1, b2)
            else
              solver_second(m, dirvec, b0, b1, b2) in
                                                                                                                                              let rec (solver_rect_fast: T) ((m: T), (v: T), (dconst: T), (b0: T), (b1: T), (b2: T)) = let d0: T = ((dconst.(0) - b0) * dconst.(1)) in
  if if fless(fabs(((d0 * v.(1)) + b1)), o_param_b(m)) then
  if fless(fabs(((d0 * v.(2)) + b2)), o_param_c(m)) then
    not(fiszero(dconst.(1)))
  else
    false
else
  false then
    let Tu76: Unit = solver_dist.(0) <- d0 in
      1
  else
    let d1: T = ((dconst.(2) - b1) * dconst.(3)) in
      if if fless(fabs(((d1 * v.(0)) + b0)), o_param_a(m)) then
  if fless(fabs(((d1 * v.(2)) + b2)), o_param_c(m)) then
    not(fiszero(dconst.(3)))
  else
    false
else
  false then
        let Tu77: Unit = solver_dist.(0) <- d1 in
          2
      else
        let d2: T = ((dconst.(4) - b2) * dconst.(5)) in
          if if fless(fabs(((d2 * v.(0)) + b0)), o_param_a(m)) then
  if fless(fabs(((d2 * v.(1)) + b1)), o_param_b(m)) then
    not(fiszero(dconst.(5)))
  else
    false
else
  false then
            let Tu78: Unit = solver_dist.(0) <- d2 in
              3
          else
            0 in
                                                                                                                                                let rec (solver_surface_fast: T) ((m: T), (dconst: T), (b0: T), (b1: T), (b2: T)) = if fisneg(dconst.(0)) then
  let Tu79: Unit = solver_dist.(0) <- (((dconst.(1) * b0) + (dconst.(2) * b1)) + (dconst.(3) * b2)) in
    1
else
  0 in
                                                                                                                                                  let rec (solver_second_fast: T) ((m: T), (dconst: T), (b0: T), (b1: T), (b2: T)) = let aa: T = dconst.(0) in
  if fiszero(aa) then
    0
  else
    let neg_bb: T = (((dconst.(1) * b0) + (dconst.(2) * b1)) + (dconst.(3) * b2)) in
      let cc0: T = quadratic(m, b0, b1, b2) in
        let cc: T = if o_form(m) == 3 then
  (cc0 - 1.)
else
  cc0 in
          let d: T = (fsqr(neg_bb) - (aa * cc)) in
            if fispos(d) then
              let Tu80: Unit = if o_isinvert(m) then
  solver_dist.(0) <- ((neg_bb + sqrt(d)) * dconst.(4))
else
  solver_dist.(0) <- ((neg_bb - sqrt(d)) * dconst.(4)) in
                1
            else
              0 in
                                                                                                                                                    let rec (solver_fast: T) ((index: T), (dirvec: T), (org: T)) = let m: T = objects.(index) in
  let b0: T = (org.(0) - o_param_x(m)) in
    let b1: T = (org.(1) - o_param_y(m)) in
      let b2: T = (org.(2) - o_param_z(m)) in
        let dconsts: T = d_const(dirvec) in
          let dconst: T = dconsts.(index) in
            let m_shape: T = o_form(m) in
              if m_shape == 1 then
                solver_rect_fast(m, d_vec(dirvec), dconst, b0, b1, b2)
              else
                if m_shape == 2 then
                  solver_surface_fast(m, dconst, b0, b1, b2)
                else
                  solver_second_fast(m, dconst, b0, b1, b2) in
                                                                                                                                                      let rec (solver_surface_fast2: T) ((m: T), (dconst: T), (sconst: T), (b0: T), (b1: T), (b2: T)) = if fisneg(dconst.(0)) then
  let Tu81: Unit = solver_dist.(0) <- (dconst.(0) * sconst.(3)) in
    1
else
  0 in
                                                                                                                                                        let rec (solver_second_fast2: T) ((m: T), (dconst: T), (sconst: T), (b0: T), (b1: T), (b2: T)) = let aa: T = dconst.(0) in
  if fiszero(aa) then
    0
  else
    let neg_bb: T = (((dconst.(1) * b0) + (dconst.(2) * b1)) + (dconst.(3) * b2)) in
      let cc: T = sconst.(3) in
        let d: T = (fsqr(neg_bb) - (aa * cc)) in
          if fispos(d) then
            let Tu82: Unit = if o_isinvert(m) then
  solver_dist.(0) <- ((neg_bb + sqrt(d)) * dconst.(4))
else
  solver_dist.(0) <- ((neg_bb - sqrt(d)) * dconst.(4)) in
              1
          else
            0 in
                                                                                                                                                          let rec (solver_fast2: T) ((index: T), (dirvec: T)) = let m: T = objects.(index) in
  let sconst: T = o_param_ctbl(m) in
    let b0: T = sconst.(0) in
      let b1: T = sconst.(1) in
        let b2: T = sconst.(2) in
          let dconsts: T = d_const(dirvec) in
            let dconst: T = dconsts.(index) in
              let m_shape: T = o_form(m) in
                if m_shape == 1 then
                  solver_rect_fast(m, d_vec(dirvec), dconst, b0, b1, b2)
                else
                  if m_shape == 2 then
                    solver_surface_fast2(m, dconst, sconst, b0, b1, b2)
                  else
                    solver_second_fast2(m, dconst, sconst, b0, b1, b2) in
                                                                                                                                                            let rec (setup_rect_table: T) ((vec: T), (m: T)) = let const: T = Array.create 6 0. in
  let Tu88: Unit = if fiszero(vec.(0)) then
  const.(1) <- 0.
else
  let Tu83: Unit = const.(0) <- fneg_cond(xor(o_isinvert(m), fisneg(vec.(0))), o_param_a(m)) in
    const.(1) <- (1. / vec.(0)) in
    let Tu87: Unit = if fiszero(vec.(1)) then
  const.(3) <- 0.
else
  let Tu84: Unit = const.(2) <- fneg_cond(xor(o_isinvert(m), fisneg(vec.(1))), o_param_b(m)) in
    const.(3) <- (1. / vec.(1)) in
      let Tu86: Unit = if fiszero(vec.(2)) then
  const.(5) <- 0.
else
  let Tu85: Unit = const.(4) <- fneg_cond(xor(o_isinvert(m), fisneg(vec.(2))), o_param_c(m)) in
    const.(5) <- (1. / vec.(2)) in
        const in
                                                                                                                                                              let rec (setup_surface_table: T) ((vec: T), (m: T)) = let const: T = Array.create 4 0. in
  let d: T = (((vec.(0) * o_param_a(m)) + (vec.(1) * o_param_b(m))) + (vec.(2) * o_param_c(m))) in
    let Tu92: Unit = if fispos(d) then
  let Tu91: Unit = const.(0) <- (-1. / d) in
    let Tu90: Unit = const.(1) <- fneg((o_param_a(m) / d)) in
      let Tu89: Unit = const.(2) <- fneg((o_param_b(m) / d)) in
        const.(3) <- fneg((o_param_c(m) / d))
else
  const.(0) <- 0. in
      const in
                                                                                                                                                                let rec (setup_second_table: T) ((v: T), (m: T)) = let const: T = Array.create 5 0. in
  let aa: T = quadratic(m, v.(0), v.(1), v.(2)) in
    let c1: T = fneg((v.(0) * o_param_a(m))) in
      let c2: T = fneg((v.(1) * o_param_b(m))) in
        let c3: T = fneg((v.(2) * o_param_c(m))) in
          let Tu99: Unit = const.(0) <- aa in
            let Tu98: Unit = if not(o_isrot(m) == 0) then
  let Tu94: Unit = const.(1) <- (c1 - fhalf(((v.(2) * o_param_r2(m)) + (v.(1) * o_param_r3(m))))) in
    let Tu93: Unit = const.(2) <- (c2 - fhalf(((v.(2) * o_param_r1(m)) + (v.(0) * o_param_r3(m))))) in
      const.(3) <- (c3 - fhalf(((v.(1) * o_param_r1(m)) + (v.(0) * o_param_r2(m)))))
else
  let Tu96: Unit = const.(1) <- c1 in
    let Tu95: Unit = const.(2) <- c2 in
      const.(3) <- c3 in
              let Tu97: Unit = if not(fiszero(aa)) then
  const.(4) <- (1. / aa)
else
  () in
                const in
                                                                                                                                                                  let rec (iter_setup_dirvec_constants: T) ((dirvec: T), (index: T)) = if 0 <= index then
  let m: T = objects.(index) in
    let dconst: T = d_const(dirvec) in
      let v: T = d_vec(dirvec) in
        let m_shape: T = o_form(m) in
          let Tu100: Unit = if m_shape == 1 then
  dconst.(index) <- setup_rect_table(v, m)
else
  if m_shape == 2 then
    dconst.(index) <- setup_surface_table(v, m)
  else
    dconst.(index) <- setup_second_table(v, m) in
            iter_setup_dirvec_constants(dirvec, (index - 1))
else
  () in
                                                                                                                                                                    let rec (setup_dirvec_constants: T) ((dirvec: T)) = iter_setup_dirvec_constants(dirvec, (n_objects.(0) - 1)) in
                                                                                                                                                                      let rec (setup_startp_constants: T) ((p: T), (index: T)) = if 0 <= index then
  let obj: T = objects.(index) in
    let sconst: T = o_param_ctbl(obj) in
      let m_shape: T = o_form(obj) in
        let Tu104: Unit = sconst.(0) <- (p.(0) - o_param_x(obj)) in
          let Tu103: Unit = sconst.(1) <- (p.(1) - o_param_y(obj)) in
            let Tu102: Unit = sconst.(2) <- (p.(2) - o_param_z(obj)) in
              let Tu101: Unit = if m_shape == 2 then
  sconst.(3) <- veciprod2(o_param_abc(obj), sconst.(0), sconst.(1), sconst.(2))
else
  if not(m_shape <= 2) then
    let cc0: T = quadratic(obj, sconst.(0), sconst.(1), sconst.(2)) in
      sconst.(3) <- if m_shape == 3 then
  (cc0 - 1.)
else
  cc0
  else
    () in
                setup_startp_constants(p, (index - 1))
else
  () in
                                                                                                                                                                        let rec (setup_startp: T) ((p: T)) = let Tu105: Unit = veccpy(startp_fast, p) in
  setup_startp_constants(p, (n_objects.(0) - 1)) in
                                                                                                                                                                          let rec (is_rect_outside: T) ((m: T), (p0: T), (p1: T), (p2: T)) = if if fless(fabs(p0), o_param_a(m)) then
  if fless(fabs(p1), o_param_b(m)) then
    fless(fabs(p2), o_param_c(m))
  else
    false
else
  false then
  o_isinvert(m)
else
  not(o_isinvert(m)) in
                                                                                                                                                                            let rec (is_plane_outside: T) ((m: T), (p0: T), (p1: T), (p2: T)) = let w: T = veciprod2(o_param_abc(m), p0, p1, p2) in
  not(xor(o_isinvert(m), fisneg(w))) in
                                                                                                                                                                              let rec (is_second_outside: T) ((m: T), (p0: T), (p1: T), (p2: T)) = let w: T = quadratic(m, p0, p1, p2) in
  let w2: T = if o_form(m) == 3 then
  (w - 1.)
else
  w in
    not(xor(o_isinvert(m), fisneg(w2))) in
                                                                                                                                                                                let rec (is_outside: T) ((m: T), (q0: T), (q1: T), (q2: T)) = let p0: T = (q0 - o_param_x(m)) in
  let p1: T = (q1 - o_param_y(m)) in
    let p2: T = (q2 - o_param_z(m)) in
      let m_shape: T = o_form(m) in
        if m_shape == 1 then
          is_rect_outside(m, p0, p1, p2)
        else
          if m_shape == 2 then
            is_plane_outside(m, p0, p1, p2)
          else
            is_second_outside(m, p0, p1, p2) in
                                                                                                                                                                                  let rec (check_all_inside: T) ((ofs: T), (iand: T), (q0: T), (q1: T), (q2: T)) = let head: T = iand.(ofs) in
  if head == -(1) then
    true
  else
    if is_outside(objects.(head), q0, q1, q2) then
      false
    else
      check_all_inside((ofs + 1), iand, q0, q1, q2) in
                                                                                                                                                                                    let rec (shadow_check_and_group: T) ((iand_ofs: T), (and_group: T)) = if and_group.(iand_ofs) == -(1) then
  false
else
  let obj: T = and_group.(iand_ofs) in
    let t0: T = solver_fast(obj, light_dirvec, intersection_point) in
      let t0p: T = solver_dist.(0) in
        if if not(t0 == 0) then
  fless(t0p, -0.2)
else
  false then
          let t: T = (t0p + 0.01) in
            let q0: T = ((light.(0) * t) + intersection_point.(0)) in
              let q1: T = ((light.(1) * t) + intersection_point.(1)) in
                let q2: T = ((light.(2) * t) + intersection_point.(2)) in
                  if check_all_inside(0, and_group, q0, q1, q2) then
                    true
                  else
                    shadow_check_and_group((iand_ofs + 1), and_group)
        else
          if o_isinvert(objects.(obj)) then
            shadow_check_and_group((iand_ofs + 1), and_group)
          else
            false in
                                                                                                                                                                                      let rec (shadow_check_one_or_group: T) ((ofs: T), (or_group: T)) = let head: T = or_group.(ofs) in
  if head == -(1) then
    false
  else
    let and_group: T = and_net.(head) in
      let shadow_p: T = shadow_check_and_group(0, and_group) in
        if shadow_p then
          true
        else
          shadow_check_one_or_group((ofs + 1), or_group) in
                                                                                                                                                                                        let rec (shadow_check_one_or_matrix: T) ((ofs: T), (or_matrix: T)) = let head: T = or_matrix.(ofs) in
  let range_primitive: T = head.(0) in
    if range_primitive == -(1) then
      false
    else
      if if range_primitive == 99 then
  true
else
  let t: T = solver_fast(range_primitive, light_dirvec, intersection_point) in
    if not(t == 0) then
      if fless(solver_dist.(0), -0.1) then
        if shadow_check_one_or_group(1, head) then
          true
        else
          false
      else
        false
    else
      false then
        if shadow_check_one_or_group(1, head) then
          true
        else
          shadow_check_one_or_matrix((ofs + 1), or_matrix)
      else
        shadow_check_one_or_matrix((ofs + 1), or_matrix) in
                                                                                                                                                                                          let rec (solve_each_element: T) ((iand_ofs: T), (and_group: T), (dirvec: T)) = let iobj: T = and_group.(iand_ofs) in
  if iobj == -(1) then
    ()
  else
    let t0: T = solver(iobj, dirvec, startp) in
      if not(t0 == 0) then
        let t0p: T = solver_dist.(0) in
          let Tu109: Unit = if fless(0., t0p) then
  if fless(t0p, tmin.(0)) then
    let t: T = (t0p + 0.01) in
      let q0: T = ((dirvec.(0) * t) + startp.(0)) in
        let q1: T = ((dirvec.(1) * t) + startp.(1)) in
          let q2: T = ((dirvec.(2) * t) + startp.(2)) in
            if check_all_inside(0, and_group, q0, q1, q2) then
              let Tu108: Unit = tmin.(0) <- t in
                let Tu107: Unit = vecset(intersection_point, q0, q1, q2) in
                  let Tu106: Unit = intersected_object_id.(0) <- iobj in
                    intsec_rectside.(0) <- t0
            else
              ()
  else
    ()
else
  () in
            solve_each_element((iand_ofs + 1), and_group, dirvec)
      else
        if o_isinvert(objects.(iobj)) then
          solve_each_element((iand_ofs + 1), and_group, dirvec)
        else
          () in
                                                                                                                                                                                            let rec (solve_one_or_network: T) ((ofs: T), (or_group: T), (dirvec: T)) = let head: T = or_group.(ofs) in
  if not(head == -(1)) then
    let and_group: T = and_net.(head) in
      let Tu110: Unit = solve_each_element(0, and_group, dirvec) in
        solve_one_or_network((ofs + 1), or_group, dirvec)
  else
    () in
                                                                                                                                                                                              let rec (trace_or_matrix: T) ((ofs: T), (or_network: T), (dirvec: T)) = let head: T = or_network.(ofs) in
  let range_primitive: T = head.(0) in
    if range_primitive == -(1) then
      ()
    else
      let Tu111: Unit = if range_primitive == 99 then
  solve_one_or_network(1, head, dirvec)
else
  let t: T = solver(range_primitive, dirvec, startp) in
    if not(t == 0) then
      let tp: T = solver_dist.(0) in
        if fless(tp, tmin.(0)) then
          solve_one_or_network(1, head, dirvec)
        else
          ()
    else
      () in
        trace_or_matrix((ofs + 1), or_network, dirvec) in
                                                                                                                                                                                                let rec (judge_intersection: T) ((dirvec: T)) = let Tu113: Unit = tmin.(0) <- 1000000000. in
  let Tu112: Unit = trace_or_matrix(0, or_net.(0), dirvec) in
    let t: T = tmin.(0) in
      if fless(-0.1, t) then
        fless(t, 100000000.)
      else
        false in
                                                                                                                                                                                                  let rec (solve_each_element_fast: T) ((iand_ofs: T), (and_group: T), (dirvec: T)) = let vec: T = d_vec(dirvec) in
  let iobj: T = and_group.(iand_ofs) in
    if iobj == -(1) then
      ()
    else
      let t0: T = solver_fast2(iobj, dirvec) in
        if not(t0 == 0) then
          let t0p: T = solver_dist.(0) in
            let Tu117: Unit = if fless(0., t0p) then
  if fless(t0p, tmin.(0)) then
    let t: T = (t0p + 0.01) in
      let q0: T = ((vec.(0) * t) + startp_fast.(0)) in
        let q1: T = ((vec.(1) * t) + startp_fast.(1)) in
          let q2: T = ((vec.(2) * t) + startp_fast.(2)) in
            if check_all_inside(0, and_group, q0, q1, q2) then
              let Tu116: Unit = tmin.(0) <- t in
                let Tu115: Unit = vecset(intersection_point, q0, q1, q2) in
                  let Tu114: Unit = intersected_object_id.(0) <- iobj in
                    intsec_rectside.(0) <- t0
            else
              ()
  else
    ()
else
  () in
              solve_each_element_fast((iand_ofs + 1), and_group, dirvec)
        else
          if o_isinvert(objects.(iobj)) then
            solve_each_element_fast((iand_ofs + 1), and_group, dirvec)
          else
            () in
                                                                                                                                                                                                    let rec (solve_one_or_network_fast: T) ((ofs: T), (or_group: T), (dirvec: T)) = let head: T = or_group.(ofs) in
  if not(head == -(1)) then
    let and_group: T = and_net.(head) in
      let Tu118: Unit = solve_each_element_fast(0, and_group, dirvec) in
        solve_one_or_network_fast((ofs + 1), or_group, dirvec)
  else
    () in
                                                                                                                                                                                                      let rec (trace_or_matrix_fast: T) ((ofs: T), (or_network: T), (dirvec: T)) = let head: T = or_network.(ofs) in
  let range_primitive: T = head.(0) in
    if range_primitive == -(1) then
      ()
    else
      let Tu119: Unit = if range_primitive == 99 then
  solve_one_or_network_fast(1, head, dirvec)
else
  let t: T = solver_fast2(range_primitive, dirvec) in
    if not(t == 0) then
      let tp: T = solver_dist.(0) in
        if fless(tp, tmin.(0)) then
          solve_one_or_network_fast(1, head, dirvec)
        else
          ()
    else
      () in
        trace_or_matrix_fast((ofs + 1), or_network, dirvec) in
                                                                                                                                                                                                        let rec (judge_intersection_fast: T) ((dirvec: T)) = let Tu121: Unit = tmin.(0) <- 1000000000. in
  let Tu120: Unit = trace_or_matrix_fast(0, or_net.(0), dirvec) in
    let t: T = tmin.(0) in
      if fless(-0.1, t) then
        fless(t, 100000000.)
      else
        false in
                                                                                                                                                                                                          let rec (get_nvector_rect: T) ((dirvec: T)) = let rectside: T = intsec_rectside.(0) in
  let Tu122: Unit = vecbzero(nvector) in
    nvector.((rectside - 1)) <- fneg(sgn(dirvec.((rectside - 1)))) in
                                                                                                                                                                                                            let rec (get_nvector_plane: T) ((m: T)) = let Tu124: Unit = nvector.(0) <- fneg(o_param_a(m)) in
  let Tu123: Unit = nvector.(1) <- fneg(o_param_b(m)) in
    nvector.(2) <- fneg(o_param_c(m)) in
                                                                                                                                                                                                              let rec (get_nvector_second: T) ((m: T)) = let p0: T = (intersection_point.(0) - o_param_x(m)) in
  let p1: T = (intersection_point.(1) - o_param_y(m)) in
    let p2: T = (intersection_point.(2) - o_param_z(m)) in
      let d0: T = (p0 * o_param_a(m)) in
        let d1: T = (p1 * o_param_b(m)) in
          let d2: T = (p2 * o_param_c(m)) in
            let Tu129: Unit = if o_isrot(m) == 0 then
  let Tu126: Unit = nvector.(0) <- d0 in
    let Tu125: Unit = nvector.(1) <- d1 in
      nvector.(2) <- d2
else
  let Tu128: Unit = nvector.(0) <- (d0 + fhalf(((p1 * o_param_r3(m)) + (p2 * o_param_r2(m))))) in
    let Tu127: Unit = nvector.(1) <- (d1 + fhalf(((p0 * o_param_r3(m)) + (p2 * o_param_r1(m))))) in
      nvector.(2) <- (d2 + fhalf(((p0 * o_param_r2(m)) + (p1 * o_param_r1(m))))) in
              vecunit_sgn(nvector, o_isinvert(m)) in
                                                                                                                                                                                                                let rec (get_nvector: T) ((m: T), (dirvec: T)) = let m_shape: T = o_form(m) in
  if m_shape == 1 then
    get_nvector_rect(dirvec)
  else
    if m_shape == 2 then
      get_nvector_plane(m)
    else
      get_nvector_second(m) in
                                                                                                                                                                                                                  let rec (utexture: T) ((m: T), (p: T)) = let m_tex: T = o_texturetype(m) in
  let Tu134: Unit = texture_color.(0) <- o_color_red(m) in
    let Tu133: Unit = texture_color.(1) <- o_color_green(m) in
      let Tu132: Unit = texture_color.(2) <- o_color_blue(m) in
        if m_tex == 1 then
          let w1: T = (p.(0) - o_param_x(m)) in
            let flag1: T = let d1: T = (floor((w1 * 0.05)) * 20.) in
  fless((w1 - d1), 10.) in
              let w3: T = (p.(2) - o_param_z(m)) in
                let flag2: T = let d2: T = (floor((w3 * 0.05)) * 20.) in
  fless((w3 - d2), 10.) in
                  texture_color.(1) <- if flag1 then
  if flag2 then
    255.
  else
    0.
else
  if flag2 then
    0.
  else
    255.
        else
          if m_tex == 2 then
            let w2: T = fsqr(sin((p.(1) * 0.25))) in
              let Tu130: Unit = texture_color.(0) <- (255. * w2) in
                texture_color.(1) <- (255. * (1. - w2))
          else
            if m_tex == 3 then
              let w1: T = (p.(0) - o_param_x(m)) in
                let w3: T = (p.(2) - o_param_z(m)) in
                  let w2: T = (sqrt((fsqr(w1) + fsqr(w3))) / 10.) in
                    let w4: T = ((w2 - floor(w2)) * 3.1415927) in
                      let cws: T = fsqr(cos(w4)) in
                        let Tu131: Unit = texture_color.(1) <- (cws * 255.) in
                          texture_color.(2) <- ((1. - cws) * 255.)
            else
              if m_tex == 4 then
                let w1: T = ((p.(0) - o_param_x(m)) * sqrt(o_param_a(m))) in
                  let w3: T = ((p.(2) - o_param_z(m)) * sqrt(o_param_c(m))) in
                    let w4: T = (fsqr(w1) + fsqr(w3)) in
                      let w7: T = if fless(fabs(w1), 0.0001) then
  15.
else
  let w5: T = fabs((w3 / w1)) in
    ((atan(w5) * 30.) /     3.1415927) in
                        let w9: T = (w7 - floor(w7)) in
                          let w2: T = ((p.(1) - o_param_y(m)) * sqrt(o_param_b(m))) in
                            let w8: T = if fless(fabs(w4), 0.0001) then
  15.
else
  let w6: T = fabs((w2 / w4)) in
    ((atan(w6) * 30.) /     3.1415927) in
                              let w10: T = (w8 - floor(w8)) in
                                let w11: T = ((0.15 - fsqr((0.5 - w9))) - fsqr((0.5 - w10))) in
                                  let w12: T = if fisneg(w11) then
  0.
else
  w11 in
                                    texture_color.(2) <- ((255. * w12) / 0.3)
              else
                () in
                                                                                                                                                                                                                    let rec (add_light: T) ((bright: T), (hilight: T), (hilight_scale: T)) = let Tu137: Unit = if fispos(bright) then
  vecaccum(rgb, bright, texture_color)
else
  () in
  if fispos(hilight) then
    let ihl: T = (fsqr(fsqr(hilight)) * hilight_scale) in
      let Tu136: Unit = rgb.(0) <- (rgb.(0) + ihl) in
        let Tu135: Unit = rgb.(1) <- (rgb.(1) + ihl) in
          rgb.(2) <- (rgb.(2) + ihl)
  else
    () in
                                                                                                                                                                                                                      let rec (trace_reflections: T) ((index: T), (diffuse: T), (hilight_scale: T), (dirvec: T)) = if 0 <= index then
  let rinfo: T = reflections.(index) in
    let dvec: T = r_dvec(rinfo) in
      let Tu138: Unit = if judge_intersection_fast(dvec) then
  let surface_id: T = ((intersected_object_id.(0) * 4) + intsec_rectside.(0)) in
    if surface_id == r_surface_id(rinfo) then
      if not(shadow_check_one_or_matrix(0, or_net.(0))) then
        let p: T = veciprod(nvector, d_vec(dvec)) in
          let scale: T = r_bright(rinfo) in
            let bright: T = ((scale * diffuse) * p) in
              let hilight: T = (scale * veciprod(dirvec, d_vec(dvec))) in
                add_light(bright, hilight, hilight_scale)
      else
        ()
    else
      ()
else
  () in
        trace_reflections((index - 1), diffuse, hilight_scale, dirvec)
else
  () in
                                                                                                                                                                                                                        let rec (trace_ray: T) ((nref: T), (energy: T), (dirvec: T), (pixel: T), (dist: T)) = if nref <= 4 then
  let surface_ids: T = p_surface_ids(pixel) in
    if judge_intersection(dirvec) then
      let obj_id: T = intersected_object_id.(0) in
        let obj: T = objects.(obj_id) in
          let m_surface: T = o_reflectiontype(obj) in
            let diffuse: T = (o_diffuse(obj) * energy) in
              let Tu152: Unit = get_nvector(obj, dirvec) in
                let Tu151: Unit = veccpy(startp, intersection_point) in
                  let Tu150: Unit = utexture(obj, intersection_point) in
                    let Tu149: Unit = surface_ids.(nref) <- ((obj_id * 4) + intsec_rectside.(0)) in
                      let intersection_points: T = p_intersection_points(pixel) in
                        let Tu148: Unit = veccpy(intersection_points.(nref), intersection_point) in
                          let calc_diffuse: T = p_calc_diffuse(pixel) in
                            let Tu147: Unit = if fless(o_diffuse(obj), 0.5) then
  calc_diffuse.(nref) <- false
else
  let Tu141: Unit = calc_diffuse.(nref) <- true in
    let energya: T = p_energy(pixel) in
      let Tu140: Unit = veccpy(energya.(nref), texture_color) in
        let Tu139: Unit = vecscale(energya.(nref), ((1. / 256.) * diffuse)) in
          let nvectors: T = p_nvectors(pixel) in
            veccpy(nvectors.(nref), nvector) in
                              let w: T = (-2. * veciprod(dirvec, nvector)) in
                                let Tu146: Unit = vecaccum(dirvec, w, nvector) in
                                  let hilight_scale: T = (energy * o_hilight(obj)) in
                                    let Tu145: Unit = if not(shadow_check_one_or_matrix(0, or_net.(0))) then
  let bright: T = (fneg(veciprod(nvector, light)) * diffuse) in
    let hilight: T = fneg(veciprod(dirvec, light)) in
      add_light(bright, hilight, hilight_scale)
else
  () in
                                      let Tu144: Unit = setup_startp(intersection_point) in
                                        let Tu143: Unit = trace_reflections((n_reflections.(0) - 1), diffuse, hilight_scale, dirvec) in
                                          if fless(0.1, energy) then
                                            let Tu142: Unit = if not(4 <= nref) then
  surface_ids.((nref + 1)) <- -(1)
else
  () in
                                              if m_surface == 2 then
                                                let energy2: T = (energy * (1. - o_diffuse(obj))) in
                                                  trace_ray((nref + 1), energy2, dirvec, pixel, (dist + tmin.(0)))
                                              else
                                                ()
                                          else
                                            ()
    else
      let Tu155: Unit = surface_ids.(nref) <- -(1) in
        if not(nref == 0) then
          let hl: T = fneg(veciprod(dirvec, light)) in
            if fispos(hl) then
              let ihl: T = (((fsqr(hl) * hl) * energy) * beam.(0)) in
                let Tu154: Unit = rgb.(0) <- (rgb.(0) + ihl) in
                  let Tu153: Unit = rgb.(1) <- (rgb.(1) + ihl) in
                    rgb.(2) <- (rgb.(2) + ihl)
            else
              ()
        else
          ()
else
  () in
                                                                                                                                                                                                                          let rec (trace_diffuse_ray: T) ((dirvec: T), (energy: T)) = if judge_intersection_fast(dirvec) then
  let obj: T = objects.(intersected_object_id.(0)) in
    let Tu157: Unit = get_nvector(obj, d_vec(dirvec)) in
      let Tu156: Unit = utexture(obj, intersection_point) in
        if not(shadow_check_one_or_matrix(0, or_net.(0))) then
          let br: T = fneg(veciprod(nvector, light)) in
            let bright: T = if fispos(br) then
  br
else
  0. in
              vecaccum(diffuse_ray, ((energy * bright) * o_diffuse(obj)), texture_color)
        else
          ()
else
  () in
                                                                                                                                                                                                                            let rec (iter_trace_diffuse_rays: T) ((dirvec_group: T), (nvector: T), (org: T), (index: T)) = if 0 <= index then
  let p: T = veciprod(d_vec(dirvec_group.(index)), nvector) in
    let Tu158: Unit = if fisneg(p) then
  trace_diffuse_ray(dirvec_group.((index + 1)), (p / -150.))
else
  trace_diffuse_ray(dirvec_group.(index), (p / 150.)) in
      iter_trace_diffuse_rays(dirvec_group, nvector, org, (index - 2))
else
  () in
                                                                                                                                                                                                                              let rec (trace_diffuse_rays: T) ((dirvec_group: T), (nvector: T), (org: T)) = let Tu159: Unit = setup_startp(org) in
  iter_trace_diffuse_rays(dirvec_group, nvector, org, 118) in
                                                                                                                                                                                                                                let rec (trace_diffuse_ray_80percent: T) ((group_id: T), (nvector: T), (org: T)) = let Tu163: Unit = if not(group_id == 0) then
  trace_diffuse_rays(dirvecs.(0), nvector, org)
else
  () in
  let Tu162: Unit = if not(group_id == 1) then
  trace_diffuse_rays(dirvecs.(1), nvector, org)
else
  () in
    let Tu161: Unit = if not(group_id == 2) then
  trace_diffuse_rays(dirvecs.(2), nvector, org)
else
  () in
      let Tu160: Unit = if not(group_id == 3) then
  trace_diffuse_rays(dirvecs.(3), nvector, org)
else
  () in
        if not(group_id == 4) then
          trace_diffuse_rays(dirvecs.(4), nvector, org)
        else
          () in
                                                                                                                                                                                                                                  let rec (calc_diffuse_using_1point: T) ((pixel: T), (nref: T)) = let ray20p: T = p_received_ray_20percent(pixel) in
  let nvectors: T = p_nvectors(pixel) in
    let intersection_points: T = p_intersection_points(pixel) in
      let energya: T = p_energy(pixel) in
        let Tu165: Unit = veccpy(diffuse_ray, ray20p.(nref)) in
          let Tu164: Unit = trace_diffuse_ray_80percent(p_group_id(pixel), nvectors.(nref), intersection_points.(nref)) in
            vecaccumv(rgb, energya.(nref), diffuse_ray) in
                                                                                                                                                                                                                                    let rec (calc_diffuse_using_5points: T) ((x: T), (prev: T), (cur: T), (next: T), (nref: T)) = let r_up: T = p_received_ray_20percent(prev.(x)) in
  let r_left: T = p_received_ray_20percent(cur.((x - 1))) in
    let r_center: T = p_received_ray_20percent(cur.(x)) in
      let r_right: T = p_received_ray_20percent(cur.((x + 1))) in
        let r_down: T = p_received_ray_20percent(next.(x)) in
          let Tu170: Unit = veccpy(diffuse_ray, r_up.(nref)) in
            let Tu169: Unit = vecadd(diffuse_ray, r_left.(nref)) in
              let Tu168: Unit = vecadd(diffuse_ray, r_center.(nref)) in
                let Tu167: Unit = vecadd(diffuse_ray, r_right.(nref)) in
                  let Tu166: Unit = vecadd(diffuse_ray, r_down.(nref)) in
                    let energya: T = p_energy(cur.(x)) in
                      vecaccumv(rgb, energya.(nref), diffuse_ray) in
                                                                                                                                                                                                                                      let rec (do_without_neighbors: T) ((pixel: T), (nref: T)) = if nref <= 4 then
  let surface_ids: T = p_surface_ids(pixel) in
    if 0 <= surface_ids.(nref) then
      let calc_diffuse: T = p_calc_diffuse(pixel) in
        let Tu171: Unit = if calc_diffuse.(nref) then
  calc_diffuse_using_1point(pixel, nref)
else
  () in
          do_without_neighbors(pixel, (nref + 1))
    else
      ()
else
  () in
                                                                                                                                                                                                                                        let rec (neighbors_exist: T) ((x: T), (y: T), (next: T)) = if not(image_size.(1) <= (y + 1)) then
  if not(y <= 0) then
    if not(image_size.(0) <= (x + 1)) then
      if not(x <= 0) then
        true
      else
        false
    else
      false
  else
    false
else
  false in
                                                                                                                                                                                                                                          let rec (get_surface_id: T) ((pixel: T), (index: T)) = let surface_ids: T = p_surface_ids(pixel) in
  surface_ids.(index) in
                                                                                                                                                                                                                                            let rec (neighbors_are_available: T) ((x: T), (prev: T), (cur: T), (next: T), (nref: T)) = let sid_center: T = get_surface_id(cur.(x), nref) in
  if get_surface_id(prev.(x), nref) == sid_center then
    if get_surface_id(next.(x), nref) == sid_center then
      if get_surface_id(cur.((x - 1)), nref) == sid_center then
        if get_surface_id(cur.((x + 1)), nref) == sid_center then
          true
        else
          false
      else
        false
    else
      false
  else
    false in
                                                                                                                                                                                                                                              let rec (try_exploit_neighbors: T) ((x: T), (y: T), (prev: T), (cur: T), (next: T), (nref: T)) = let pixel: T = cur.(x) in
  if nref <= 4 then
    if 0 <= get_surface_id(pixel, nref) then
      if neighbors_are_available(x, prev, cur, next, nref) then
        let calc_diffuse: T = p_calc_diffuse(pixel) in
          let Tu172: Unit = if calc_diffuse.(nref) then
  calc_diffuse_using_5points(x, prev, cur, next, nref)
else
  () in
            try_exploit_neighbors(x, y, prev, cur, next, (nref + 1))
      else
        do_without_neighbors(cur.(x), nref)
    else
      ()
  else
    () in
                                                                                                                                                                                                                                                let rec (write_ppm_header: T) ((Tu173: T)) = let Tu181: Unit = print_char(80) in
  let Tu180: Unit = print_char((48 + 3)) in
    let Tu179: Unit = print_char(10) in
      let Tu178: Unit = print_int(image_size.(0)) in
        let Tu177: Unit = print_char(32) in
          let Tu176: Unit = print_int(image_size.(1)) in
            let Tu175: Unit = print_char(32) in
              let Tu174: Unit = print_int(255) in
                print_char(10) in
                                                                                                                                                                                                                                                  let rec (write_rgb_element: T) ((x: T)) = let ix: T = int_of_float(x) in
  let elem: T = if not(ix <= 255) then
  255
else
  if not(0 <= ix) then
    0
  else
    ix in
    print_int(elem) in
                                                                                                                                                                                                                                                    let rec (write_rgb: T) ((Tu182: T)) = let Tu187: Unit = write_rgb_element(rgb.(0)) in
  let Tu186: Unit = print_char(32) in
    let Tu185: Unit = write_rgb_element(rgb.(1)) in
      let Tu184: Unit = print_char(32) in
        let Tu183: Unit = write_rgb_element(rgb.(2)) in
          print_char(10) in
                                                                                                                                                                                                                                                      let rec (pretrace_diffuse_rays: T) ((pixel: T), (nref: T)) = if nref <= 4 then
  let sid: T = get_surface_id(pixel, nref) in
    if 0 <= sid then
      let calc_diffuse: T = p_calc_diffuse(pixel) in
        let Tu190: Unit = if calc_diffuse.(nref) then
  let group_id: T = p_group_id(pixel) in
    let Tu189: Unit = vecbzero(diffuse_ray) in
      let nvectors: T = p_nvectors(pixel) in
        let intersection_points: T = p_intersection_points(pixel) in
          let Tu188: Unit = trace_diffuse_rays(dirvecs.(group_id), nvectors.(nref), intersection_points.(nref)) in
            let ray20p: T = p_received_ray_20percent(pixel) in
              veccpy(ray20p.(nref), diffuse_ray)
else
  () in
          pretrace_diffuse_rays(pixel, (nref + 1))
    else
      ()
else
  () in
                                                                                                                                                                                                                                                        let rec (pretrace_pixels: T) ((line: T), (x: T), (group_id: T), (lc0: T), (lc1: T), (lc2: T)) = if 0 <= x then
  let xdisp: T = (scan_pitch.(0) * float_of_int((x - image_center.(0)))) in
    let Tu200: Unit = ptrace_dirvec.(0) <- ((xdisp * screenx_dir.(0)) + lc0) in
      let Tu199: Unit = ptrace_dirvec.(1) <- ((xdisp * screenx_dir.(1)) + lc1) in
        let Tu198: Unit = ptrace_dirvec.(2) <- ((xdisp * screenx_dir.(2)) + lc2) in
          let Tu197: Unit = vecunit_sgn(ptrace_dirvec, false) in
            let Tu196: Unit = vecbzero(rgb) in
              let Tu195: Unit = veccpy(startp, viewpoint) in
                let Tu194: Unit = trace_ray(0, 1., ptrace_dirvec, line.(x), 0.) in
                  let Tu193: Unit = veccpy(p_rgb(line.(x)), rgb) in
                    let Tu192: Unit = p_set_group_id(line.(x), group_id) in
                      let Tu191: Unit = pretrace_diffuse_rays(line.(x), 0) in
                        pretrace_pixels(line, (x - 1), add_mod5(group_id, 1), lc0, lc1, lc2)
else
  () in
                                                                                                                                                                                                                                                          let rec (pretrace_line: T) ((line: T), (y: T), (group_id: T)) = let ydisp: T = (scan_pitch.(0) * float_of_int((y - image_center.(1)))) in
  let lc0: T = ((ydisp * screeny_dir.(0)) + screenz_dir.(0)) in
    let lc1: T = ((ydisp * screeny_dir.(1)) + screenz_dir.(1)) in
      let lc2: T = ((ydisp * screeny_dir.(2)) + screenz_dir.(2)) in
        pretrace_pixels(line, (image_size.(0) - 1), group_id, lc0, lc1, lc2) in
                                                                                                                                                                                                                                                            let rec (scan_pixel: T) ((x: T), (y: T), (prev: T), (cur: T), (next: T)) = if not(image_size.(0) <= x) then
  let Tu203: Unit = veccpy(rgb, p_rgb(cur.(x))) in
    let Tu202: Unit = if neighbors_exist(x, y, next) then
  try_exploit_neighbors(x, y, prev, cur, next, 0)
else
  do_without_neighbors(cur.(x), 0) in
      let Tu201: Unit = write_rgb(()) in
        scan_pixel((x + 1), y, prev, cur, next)
else
  () in
                                                                                                                                                                                                                                                              let rec (scan_line: T) ((y: T), (prev: T), (cur: T), (next: T), (group_id: T)) = if not(image_size.(1) <= y) then
  let Tu205: Unit = if not((image_size.(1) - 1) <= y) then
  pretrace_line(next, (y + 1), group_id)
else
  () in
    let Tu204: Unit = scan_pixel(0, y, prev, cur, next) in
      scan_line((y + 1), cur, next, prev, add_mod5(group_id, 2))
else
  () in
                                                                                                                                                                                                                                                                let rec (create_float5x3array: T) ((Tu206: T)) = let vec: T = Array.create 3 0. in
  let array: T = Array.create 5 vec in
    let Tu210: Unit = array.(1) <- Array.create 3 0. in
      let Tu209: Unit = array.(2) <- Array.create 3 0. in
        let Tu208: Unit = array.(3) <- Array.create 3 0. in
          let Tu207: Unit = array.(4) <- Array.create 3 0. in
            array in
                                                                                                                                                                                                                                                                  let rec (create_pixel: T) ((Tu211: T)) = let m_rgb: T = Array.create 3 0. in
  let m_isect_ps: T = create_float5x3array(()) in
    let m_sids: T = Array.create 5 0 in
      let m_cdif: T = Array.create 5 false in
        let m_engy: T = create_float5x3array(()) in
          let m_r20p: T = create_float5x3array(()) in
            let m_gid: T = Array.create 1 0 in
              let m_nvectors: T = create_float5x3array(()) in
                (m_rgb, m_isect_ps, m_sids, m_cdif, m_engy, m_r20p, m_gid, m_nvectors) in
                                                                                                                                                                                                                                                                    let rec (init_line_elements: T) ((line: T), (n: T)) = if 0 <= n then
  let Tu212: Unit = line.(n) <- create_pixel(()) in
    init_line_elements(line, (n - 1))
else
  line in
                                                                                                                                                                                                                                                                      let rec (create_pixelline: T) ((Tu213: T)) = let line: T = Array.create image_size.(0) create_pixel(()) in
  init_line_elements(line, (image_size.(0) - 2)) in
                                                                                                                                                                                                                                                                        let rec (tan: T) ((x: T)) = (sin(x) / cos(x)) in
                                                                                                                                                                                                                                                                          let rec (adjust_position: T) ((h: T), (ratio: T)) = let l: T = sqrt(((h * h) + 0.1)) in
  let tan_h: T = (1. / l) in
    let theta_h: T = atan(tan_h) in
      let tan_m: T = tan((theta_h * ratio)) in
        (tan_m * l) in
                                                                                                                                                                                                                                                                            let rec (calc_dirvec: T) ((icount: T), (x: T), (y: T), (rx: T), (ry: T), (group_id: T), (index: T)) = if 5 <= icount then
  let l: T = sqrt(((fsqr(x) + fsqr(y)) + 1.)) in
    let vx: T = (x / l) in
      let vy: T = (y / l) in
        let vz: T = (1. / l) in
          let dgroup: T = dirvecs.(group_id) in
            let Tu218: Unit = vecset(d_vec(dgroup.(index)), vx, vy, vz) in
              let Tu217: Unit = vecset(d_vec(dgroup.((index + 40))), vx, vz, fneg(vy)) in
                let Tu216: Unit = vecset(d_vec(dgroup.((index + 80))), vz, fneg(vx), fneg(vy)) in
                  let Tu215: Unit = vecset(d_vec(dgroup.((index + 1))), fneg(vx), fneg(vy), fneg(vz)) in
                    let Tu214: Unit = vecset(d_vec(dgroup.((index + 41))), fneg(vx), fneg(vz), vy) in
                      vecset(d_vec(dgroup.((index + 81))), fneg(vz), vx, vy)
else
  let x2: T = adjust_position(y, rx) in
    calc_dirvec((icount + 1), x2, adjust_position(x2, ry), rx, ry, group_id, index) in
                                                                                                                                                                                                                                                                              let rec (calc_dirvecs: T) ((col: T), (ry: T), (group_id: T), (index: T)) = if 0 <= col then
  let rx: T = ((float_of_int(col) * 0.2) - 0.9) in
    let Tu220: Unit = calc_dirvec(0, 0., 0., rx, ry, group_id, index) in
      let rx2: T = ((float_of_int(col) * 0.2) + 0.1) in
        let Tu219: Unit = calc_dirvec(0, 0., 0., rx2, ry, group_id, (index + 2)) in
          calc_dirvecs((col - 1), ry, add_mod5(group_id, 1), index)
else
  () in
                                                                                                                                                                                                                                                                                let rec (calc_dirvec_rows: T) ((row: T), (group_id: T), (index: T)) = if 0 <= row then
  let ry: T = ((float_of_int(row) * 0.2) - 0.9) in
    let Tu221: Unit = calc_dirvecs(4, ry, group_id, index) in
      calc_dirvec_rows((row - 1), add_mod5(group_id, 2), (index + 4))
else
  () in
                                                                                                                                                                                                                                                                                  let rec (create_dirvec: T) ((Tu222: T)) = let v3: T = Array.create 3 0. in
  let consts: T = Array.create n_objects.(0) v3 in
    (v3, consts) in
                                                                                                                                                                                                                                                                                    let rec (create_dirvec_elements: T) ((d: T), (index: T)) = if 0 <= index then
  let Tu223: Unit = d.(index) <- create_dirvec(()) in
    create_dirvec_elements(d, (index - 1))
else
  () in
                                                                                                                                                                                                                                                                                      let rec (create_dirvecs: T) ((index: T)) = if 0 <= index then
  let Tu225: Unit = dirvecs.(index) <- Array.create 120 create_dirvec(()) in
    let Tu224: Unit = create_dirvec_elements(dirvecs.(index), 118) in
      create_dirvecs((index - 1))
else
  () in
                                                                                                                                                                                                                                                                                        let rec (init_dirvec_constants: T) ((vecset: T), (index: T)) = if 0 <= index then
  let Tu226: Unit = setup_dirvec_constants(vecset.(index)) in
    init_dirvec_constants(vecset, (index - 1))
else
  () in
                                                                                                                                                                                                                                                                                          let rec (init_vecset_constants: T) ((index: T)) = if 0 <= index then
  let Tu227: Unit = init_dirvec_constants(dirvecs.(index), 119) in
    init_vecset_constants((index - 1))
else
  () in
                                                                                                                                                                                                                                                                                            let rec (init_dirvecs: T) ((Tu228: T)) = let Tu230: Unit = create_dirvecs(4) in
  let Tu229: Unit = calc_dirvec_rows(9, 0, 0) in
    init_vecset_constants(4) in
                                                                                                                                                                                                                                                                                              let rec (add_reflection: T) ((index: T), (surface_id: T), (bright: T), (v0: T), (v1: T), (v2: T)) = let dvec: T = create_dirvec(()) in
  let Tu232: Unit = vecset(d_vec(dvec), v0, v1, v2) in
    let Tu231: Unit = setup_dirvec_constants(dvec) in
      reflections.(index) <- (surface_id, dvec, bright) in
                                                                                                                                                                                                                                                                                                let rec (setup_rect_reflection: T) ((obj_id: T), (obj: T)) = let sid: T = (obj_id * 4) in
  let nr: T = n_reflections.(0) in
    let br: T = (1. - o_diffuse(obj)) in
      let n0: T = fneg(light.(0)) in
        let n1: T = fneg(light.(1)) in
          let n2: T = fneg(light.(2)) in
            let Tu235: Unit = add_reflection(nr, (sid + 1), br, light.(0), n1, n2) in
              let Tu234: Unit = add_reflection((nr + 1), (sid + 2), br, n0, light.(1), n2) in
                let Tu233: Unit = add_reflection((nr + 2), (sid + 3), br, n0, n1, light.(2)) in
                  n_reflections.(0) <- (nr + 3) in
                                                                                                                                                                                                                                                                                                  let rec (setup_surface_reflection: T) ((obj_id: T), (obj: T)) = let sid: T = ((obj_id * 4) + 1) in
  let nr: T = n_reflections.(0) in
    let br: T = (1. - o_diffuse(obj)) in
      let p: T = veciprod(light, o_param_abc(obj)) in
        let Tu236: Unit = add_reflection(nr, sid, br, (((2. * o_param_a(obj)) * p) - light.(0)), (((2. * o_param_b(obj)) * p) - light.(1)), (((2. * o_param_c(obj)) * p) - light.(2))) in
          n_reflections.(0) <- (nr + 1) in
                                                                                                                                                                                                                                                                                                    let rec (setup_reflections: T) ((obj_id: T)) = if 0 <= obj_id then
  let obj: T = objects.(obj_id) in
    if o_reflectiontype(obj) == 2 then
      if fless(o_diffuse(obj), 1.) then
        let m_shape: T = o_form(obj) in
          if m_shape == 1 then
            setup_rect_reflection(obj_id, obj)
          else
            if m_shape == 2 then
              setup_surface_reflection(obj_id, obj)
            else
              ()
      else
        ()
    else
      ()
else
  () in
                                                                                                                                                                                                                                                                                                      let rec (rt: T) ((size_x: T), (size_y: T)) = let Tu248: Unit = image_size.(0) <- size_x in
  let Tu247: Unit = image_size.(1) <- size_y in
    let Tu246: Unit = image_center.(0) <- (size_x / 2) in
      let Tu245: Unit = image_center.(1) <- (size_y / 2) in
        let Tu244: Unit = scan_pitch.(0) <- (128. / float_of_int(size_x)) in
          let prev: T = create_pixelline(()) in
            let cur: T = create_pixelline(()) in
              let next: T = create_pixelline(()) in
                let Tu243: Unit = read_parameter(()) in
                  let Tu242: Unit = write_ppm_header(()) in
                    let Tu241: Unit = init_dirvecs(()) in
                      let Tu240: Unit = veccpy(d_vec(light_dirvec), light) in
                        let Tu239: Unit = setup_dirvec_constants(light_dirvec) in
                          let Tu238: Unit = setup_reflections((n_objects.(0) - 1)) in
                            let Tu237: Unit = pretrace_line(cur, 0, 0) in
                              scan_line(0, prev, cur, next, 2) in
                                                                                                                                                                                                                                                                                                        rt(128, 128)

kNormal---
let rec (xor: (Bool, Bool) -> Bool) ((x: Bool), (y: Bool)) = let Ti2597: Int = 0 in
  if x == Ti2597 then
    y
  else
    let Ti2598: Int = 0 in
      if y == Ti2598 then
        1
      else
        0 in
  let rec (sgn: (Float) -> Float) ((x: Float)) = let Tb2593: Bool = fiszero(x) in
  let Ti2594: Int = 0 in
    if Tb2593 == Ti2594 then
      let Tb2595: Bool = fispos(x) in
        let Ti2596: Int = 0 in
          if Tb2595 == Ti2596 then
            -1.
          else
            1.
    else
      0. in
    let rec (fneg_cond: (Bool, Float) -> Float) ((cond: Bool), (x: Float)) = let Ti2592: Int = 0 in
  if cond == Ti2592 then
    fneg(x)
  else
    x in
      let rec (add_mod5: (Int, Int) -> Int) ((x: Int), (y: Int)) = let sum: Int = (x + y) in
  let Ti2590: Int = 5 in
    if Ti2590 <= sum then
      let Ti2591: Int = 5 in
        (sum - Ti2591)
    else
      sum in
        let rec (vecset: ([Float], Float, Float, Float) -> Unit) ((v: [Float]), (x: Float), (y: Float), (z: Float)) = let Tu2: Unit = let Ti2587: Int = 0 in
  v.(Ti2587) <- x in
  let Tu1: Unit = let Ti2588: Int = 1 in
  v.(Ti2588) <- y in
    let Ti2589: Int = 2 in
      v.(Ti2589) <- z in
          let rec (vecfill: ([Float], Float) -> Unit) ((v: [Float]), (elem: Float)) = let Tu4: Unit = let Ti2584: Int = 0 in
  v.(Ti2584) <- elem in
  let Tu3: Unit = let Ti2585: Int = 1 in
  v.(Ti2585) <- elem in
    let Ti2586: Int = 2 in
      v.(Ti2586) <- elem in
            let rec (vecbzero: ([Float]) -> Unit) ((v: [Float])) = let Td2583: Float = 0. in
  vecfill(v, Td2583) in
              let rec (veccpy: ([Float], [Float]) -> Unit) ((dest: [Float]), (src: [Float])) = let Tu6: Unit = let Ti2574: Int = 0 in
  let Td2576: Float = let Ti2575: Int = 0 in
  src.(Ti2575) in
    dest.(Ti2574) <- Td2576 in
  let Tu5: Unit = let Ti2577: Int = 1 in
  let Td2579: Float = let Ti2578: Int = 1 in
  src.(Ti2578) in
    dest.(Ti2577) <- Td2579 in
    let Ti2580: Int = 2 in
      let Td2582: Float = let Ti2581: Int = 2 in
  src.(Ti2581) in
        dest.(Ti2580) <- Td2582 in
                let rec (vecdist2: ([Float], [Float]) -> Float) ((p: [Float]), (q: [Float])) = let Td2567: Float = let Td2560: Float = let Td2559: Float = let Td2556: Float = let Ti2555: Int = 0 in
  p.(Ti2555) in
  let Td2558: Float = let Ti2557: Int = 0 in
  q.(Ti2557) in
    (Td2556 - Td2558) in
  fsqr(Td2559) in
  let Td2566: Float = let Td2565: Float = let Td2562: Float = let Ti2561: Int = 1 in
  p.(Ti2561) in
  let Td2564: Float = let Ti2563: Int = 1 in
  q.(Ti2563) in
    (Td2562 - Td2564) in
  fsqr(Td2565) in
    (Td2560 + Td2566) in
  let Td2573: Float = let Td2572: Float = let Td2569: Float = let Ti2568: Int = 2 in
  p.(Ti2568) in
  let Td2571: Float = let Ti2570: Int = 2 in
  q.(Ti2570) in
    (Td2569 - Td2571) in
  fsqr(Td2572) in
    (Td2567 + Td2573) in
                  let rec (vecunit: ([Float]) -> Unit) ((v: [Float])) = let il: Float = let Td2530: Float = 1. in
  let Td2542: Float = let Td2541: Float = let Td2537: Float = let Td2533: Float = let Td2532: Float = let Ti2531: Int = 0 in
  v.(Ti2531) in
  fsqr(Td2532) in
  let Td2536: Float = let Td2535: Float = let Ti2534: Int = 1 in
  v.(Ti2534) in
  fsqr(Td2535) in
    (Td2533 + Td2536) in
  let Td2540: Float = let Td2539: Float = let Ti2538: Int = 2 in
  v.(Ti2538) in
  fsqr(Td2539) in
    (Td2537 + Td2540) in
  sqrt(Td2541) in
    (Td2530 / Td2542) in
  let Tu8: Unit = let Ti2543: Int = 0 in
  let Td2546: Float = let Td2545: Float = let Ti2544: Int = 0 in
  v.(Ti2544) in
  (Td2545 * il) in
    v.(Ti2543) <- Td2546 in
    let Tu7: Unit = let Ti2547: Int = 1 in
  let Td2550: Float = let Td2549: Float = let Ti2548: Int = 1 in
  v.(Ti2548) in
  (Td2549 * il) in
    v.(Ti2547) <- Td2550 in
      let Ti2551: Int = 2 in
        let Td2554: Float = let Td2553: Float = let Ti2552: Int = 2 in
  v.(Ti2552) in
  (Td2553 * il) in
          v.(Ti2551) <- Td2554 in
                    let rec (vecunit_sgn: ([Float], Bool) -> Unit) ((v: [Float]), (inv: Bool)) = let l: Float = let Td2512: Float = let Td2508: Float = let Td2504: Float = let Td2503: Float = let Ti2502: Int = 0 in
  v.(Ti2502) in
  fsqr(Td2503) in
  let Td2507: Float = let Td2506: Float = let Ti2505: Int = 1 in
  v.(Ti2505) in
  fsqr(Td2506) in
    (Td2504 + Td2507) in
  let Td2511: Float = let Td2510: Float = let Ti2509: Int = 2 in
  v.(Ti2509) in
  fsqr(Td2510) in
    (Td2508 + Td2511) in
  sqrt(Td2512) in
  let il: Float = let Tb2513: Bool = fiszero(l) in
  let Ti2514: Int = 0 in
    if Tb2513 == Ti2514 then
      let Ti2515: Int = 0 in
        if inv == Ti2515 then
          let Td2516: Float = 1. in
            (Td2516 / l)
        else
          let Td2517: Float = -1. in
            (Td2517 / l)
    else
      1. in
    let Tu10: Unit = let Ti2518: Int = 0 in
  let Td2521: Float = let Td2520: Float = let Ti2519: Int = 0 in
  v.(Ti2519) in
  (Td2520 * il) in
    v.(Ti2518) <- Td2521 in
      let Tu9: Unit = let Ti2522: Int = 1 in
  let Td2525: Float = let Td2524: Float = let Ti2523: Int = 1 in
  v.(Ti2523) in
  (Td2524 * il) in
    v.(Ti2522) <- Td2525 in
        let Ti2526: Int = 2 in
          let Td2529: Float = let Td2528: Float = let Ti2527: Int = 2 in
  v.(Ti2527) in
  (Td2528 * il) in
            v.(Ti2526) <- Td2529 in
                      let rec (veciprod: ([Float], [Float]) -> Float) ((v: [Float]), (w: [Float])) = let Td2496: Float = let Td2490: Float = let Td2487: Float = let Ti2486: Int = 0 in
  v.(Ti2486) in
  let Td2489: Float = let Ti2488: Int = 0 in
  w.(Ti2488) in
    (Td2487 * Td2489) in
  let Td2495: Float = let Td2492: Float = let Ti2491: Int = 1 in
  v.(Ti2491) in
  let Td2494: Float = let Ti2493: Int = 1 in
  w.(Ti2493) in
    (Td2492 * Td2494) in
    (Td2490 + Td2495) in
  let Td2501: Float = let Td2498: Float = let Ti2497: Int = 2 in
  v.(Ti2497) in
  let Td2500: Float = let Ti2499: Int = 2 in
  w.(Ti2499) in
    (Td2498 * Td2500) in
    (Td2496 + Td2501) in
                        let rec (veciprod2: ([Float], Float, Float, Float) -> Float) ((v: [Float]), (w0: Float), (w1: Float), (w2: Float)) = let Td2482: Float = let Td2478: Float = let Td2477: Float = let Ti2476: Int = 0 in
  v.(Ti2476) in
  (Td2477 * w0) in
  let Td2481: Float = let Td2480: Float = let Ti2479: Int = 1 in
  v.(Ti2479) in
  (Td2480 * w1) in
    (Td2478 + Td2481) in
  let Td2485: Float = let Td2484: Float = let Ti2483: Int = 2 in
  v.(Ti2483) in
  (Td2484 * w2) in
    (Td2482 + Td2485) in
                          let rec (vecaccum: ([Float], Float, [Float]) -> Unit) ((dest: [Float]), (scale: Float), (v: [Float])) = let Tu12: Unit = let Ti2455: Int = 0 in
  let Td2461: Float = let Td2457: Float = let Ti2456: Int = 0 in
  dest.(Ti2456) in
  let Td2460: Float = let Td2459: Float = let Ti2458: Int = 0 in
  v.(Ti2458) in
  (scale * Td2459) in
    (Td2457 + Td2460) in
    dest.(Ti2455) <- Td2461 in
  let Tu11: Unit = let Ti2462: Int = 1 in
  let Td2468: Float = let Td2464: Float = let Ti2463: Int = 1 in
  dest.(Ti2463) in
  let Td2467: Float = let Td2466: Float = let Ti2465: Int = 1 in
  v.(Ti2465) in
  (scale * Td2466) in
    (Td2464 + Td2467) in
    dest.(Ti2462) <- Td2468 in
    let Ti2469: Int = 2 in
      let Td2475: Float = let Td2471: Float = let Ti2470: Int = 2 in
  dest.(Ti2470) in
  let Td2474: Float = let Td2473: Float = let Ti2472: Int = 2 in
  v.(Ti2472) in
  (scale * Td2473) in
    (Td2471 + Td2474) in
        dest.(Ti2469) <- Td2475 in
                            let rec (vecadd: ([Float], [Float]) -> Unit) ((dest: [Float]), (v: [Float])) = let Tu14: Unit = let Ti2437: Int = 0 in
  let Td2442: Float = let Td2439: Float = let Ti2438: Int = 0 in
  dest.(Ti2438) in
  let Td2441: Float = let Ti2440: Int = 0 in
  v.(Ti2440) in
    (Td2439 + Td2441) in
    dest.(Ti2437) <- Td2442 in
  let Tu13: Unit = let Ti2443: Int = 1 in
  let Td2448: Float = let Td2445: Float = let Ti2444: Int = 1 in
  dest.(Ti2444) in
  let Td2447: Float = let Ti2446: Int = 1 in
  v.(Ti2446) in
    (Td2445 + Td2447) in
    dest.(Ti2443) <- Td2448 in
    let Ti2449: Int = 2 in
      let Td2454: Float = let Td2451: Float = let Ti2450: Int = 2 in
  dest.(Ti2450) in
  let Td2453: Float = let Ti2452: Int = 2 in
  v.(Ti2452) in
    (Td2451 + Td2453) in
        dest.(Ti2449) <- Td2454 in
                              let rec (vecmul: ([Float], [Float]) -> Unit) ((dest: [Float]), (v: [Float])) = let Tu16: Unit = let Ti2419: Int = 0 in
  let Td2424: Float = let Td2421: Float = let Ti2420: Int = 0 in
  dest.(Ti2420) in
  let Td2423: Float = let Ti2422: Int = 0 in
  v.(Ti2422) in
    (Td2421 * Td2423) in
    dest.(Ti2419) <- Td2424 in
  let Tu15: Unit = let Ti2425: Int = 1 in
  let Td2430: Float = let Td2427: Float = let Ti2426: Int = 1 in
  dest.(Ti2426) in
  let Td2429: Float = let Ti2428: Int = 1 in
  v.(Ti2428) in
    (Td2427 * Td2429) in
    dest.(Ti2425) <- Td2430 in
    let Ti2431: Int = 2 in
      let Td2436: Float = let Td2433: Float = let Ti2432: Int = 2 in
  dest.(Ti2432) in
  let Td2435: Float = let Ti2434: Int = 2 in
  v.(Ti2434) in
    (Td2433 * Td2435) in
        dest.(Ti2431) <- Td2436 in
                                let rec (vecscale: ([Float], Float) -> Unit) ((dest: [Float]), (scale: Float)) = let Tu18: Unit = let Ti2407: Int = 0 in
  let Td2410: Float = let Td2409: Float = let Ti2408: Int = 0 in
  dest.(Ti2408) in
  (Td2409 * scale) in
    dest.(Ti2407) <- Td2410 in
  let Tu17: Unit = let Ti2411: Int = 1 in
  let Td2414: Float = let Td2413: Float = let Ti2412: Int = 1 in
  dest.(Ti2412) in
  (Td2413 * scale) in
    dest.(Ti2411) <- Td2414 in
    let Ti2415: Int = 2 in
      let Td2418: Float = let Td2417: Float = let Ti2416: Int = 2 in
  dest.(Ti2416) in
  (Td2417 * scale) in
        dest.(Ti2415) <- Td2418 in
                                  let rec (vecaccumv: ([Float], [Float], [Float]) -> Unit) ((dest: [Float]), (v: [Float]), (w: [Float])) = let Tu20: Unit = let Ti2380: Int = 0 in
  let Td2388: Float = let Td2382: Float = let Ti2381: Int = 0 in
  dest.(Ti2381) in
  let Td2387: Float = let Td2384: Float = let Ti2383: Int = 0 in
  v.(Ti2383) in
  let Td2386: Float = let Ti2385: Int = 0 in
  w.(Ti2385) in
    (Td2384 * Td2386) in
    (Td2382 + Td2387) in
    dest.(Ti2380) <- Td2388 in
  let Tu19: Unit = let Ti2389: Int = 1 in
  let Td2397: Float = let Td2391: Float = let Ti2390: Int = 1 in
  dest.(Ti2390) in
  let Td2396: Float = let Td2393: Float = let Ti2392: Int = 1 in
  v.(Ti2392) in
  let Td2395: Float = let Ti2394: Int = 1 in
  w.(Ti2394) in
    (Td2393 * Td2395) in
    (Td2391 + Td2396) in
    dest.(Ti2389) <- Td2397 in
    let Ti2398: Int = 2 in
      let Td2406: Float = let Td2400: Float = let Ti2399: Int = 2 in
  dest.(Ti2399) in
  let Td2405: Float = let Td2402: Float = let Ti2401: Int = 2 in
  v.(Ti2401) in
  let Td2404: Float = let Ti2403: Int = 2 in
  w.(Ti2403) in
    (Td2402 * Td2404) in
    (Td2400 + Td2405) in
        dest.(Ti2398) <- Td2406 in
                                    let rec (o_texturetype: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (m_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
m_tex in
                                      let rec (o_form: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (m_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
m_shape in
                                        let rec (o_reflectiontype: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (m_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
m_surface in
                                          let rec (o_isinvert: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Bool) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (m_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
m_invert in
                                            let rec (o_isrot: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (m_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
m_isrot in
                                              let rec (o_param_a: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (m_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2379: Int = 0 in
  m_abc.(Ti2379) in
                                                let rec (o_param_b: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (m_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2378: Int = 1 in
  m_abc.(Ti2378) in
                                                  let rec (o_param_c: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (m_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2377: Int = 2 in
  m_abc.(Ti2377) in
                                                    let rec (o_param_abc: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (m_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
m_abc in
                                                      let rec (o_param_x: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (m_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2376: Int = 0 in
  m_xyz.(Ti2376) in
                                                        let rec (o_param_y: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (m_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2375: Int = 1 in
  m_xyz.(Ti2375) in
                                                          let rec (o_param_z: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (m_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2374: Int = 2 in
  m_xyz.(Ti2374) in
                                                            let rec (o_diffuse: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (m_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2373: Int = 0 in
  m_surfparams.(Ti2373) in
                                                              let rec (o_hilight: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (m_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2372: Int = 1 in
  m_surfparams.(Ti2372) in
                                                                let rec (o_color_red: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (m_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (m_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2371: Int = 0 in
  m_color.(Ti2371) in
                                                                  let rec (o_color_green: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (m_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (m_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2370: Int = 1 in
  m_color.(Ti2370) in
                                                                    let rec (o_color_blue: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (m_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (m_color: [Int]), (xm_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2369: Int = 2 in
  m_color.(Ti2369) in
                                                                      let rec (o_param_r1: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (m_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2368: Int = 0 in
  m_rot123.(Ti2368) in
                                                                        let rec (o_param_r2: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (m_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2367: Int = 1 in
  m_rot123.(Ti2367) in
                                                                          let rec (o_param_r3: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (m_rot123: [Float]), (xm_ctbl: [Float])) = m in
let Ti2366: Int = 2 in
  m_rot123.(Ti2366) in
                                                                            let rec (o_param_ctbl: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float]), (m_ctbl: [Float])) = m in
m_ctbl in
                                                                              let rec (p_rgb: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [Float]) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (m_rgb: [Float]), (xm_isect_ps: [[Float]]), (xm_sids: [Int]), (xm_cdif: [Bool]), (xm_engy: [[Float]]), (xm_r20p: [[Float]]), (xm_gid: [Int]), (xm_nvectors: [[Float]])) = pixel in
m_rgb in
                                                                                let rec (p_intersection_points: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [[Float]]) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb: [Float]), (m_isect_ps: [[Float]]), (xm_sids: [Int]), (xm_cdif: [Bool]), (xm_engy: [[Float]]), (xm_r20p: [[Float]]), (xm_gid: [Int]), (xm_nvectors: [[Float]])) = pixel in
m_isect_ps in
                                                                                  let rec (p_surface_ids: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [Int]) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb: [Float]), (xm_isect_ps: [[Float]]), (m_sids: [Int]), (xm_cdif: [Bool]), (xm_engy: [[Float]]), (xm_r20p: [[Float]]), (xm_gid: [Int]), (xm_nvectors: [[Float]])) = pixel in
m_sids in
                                                                                    let rec (p_calc_diffuse: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [Bool]) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb: [Float]), (xm_isect_ps: [[Float]]), (xm_sids: [Int]), (m_cdif: [Bool]), (xm_engy: [[Float]]), (xm_r20p: [[Float]]), (xm_gid: [Int]), (xm_nvectors: [[Float]])) = pixel in
m_cdif in
                                                                                      let rec (p_energy: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [[Float]]) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb: [Float]), (xm_isect_ps: [[Float]]), (xm_sids: [Int]), (xm_cdif: [Bool]), (m_engy: [[Float]]), (xm_r20p: [[Float]]), (xm_gid: [Int]), (xm_nvectors: [[Float]])) = pixel in
m_engy in
                                                                                        let rec (p_received_ray_20percent: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [[Float]]) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb: [Float]), (xm_isect_ps: [[Float]]), (xm_sids: [Int]), (xm_cdif: [Bool]), (xm_engy: [[Float]]), (m_r20p: [[Float]]), (xm_gid: [Int]), (xm_nvectors: [[Float]])) = pixel in
m_r20p in
                                                                                          let rec (p_group_id: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> Int) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb: [Float]), (xm_isect_ps: [[Float]]), (xm_sids: [Int]), (xm_cdif: [Bool]), (xm_engy: [[Float]]), (xm_r20p: [[Float]]), (m_gid: [Int]), (xm_nvectors: [[Float]])) = pixel in
let Ti2365: Int = 0 in
  m_gid.(Ti2365) in
                                                                                            let rec (p_set_group_id: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Unit) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (id: Int)) = let (xm_rgb: [Float]), (xm_isect_ps: [[Float]]), (xm_sids: [Int]), (xm_cdif: [Bool]), (xm_engy: [[Float]]), (xm_r20p: [[Float]]), (m_gid: [Int]), (xm_nvectors: [[Float]])) = pixel in
let Ti2364: Int = 0 in
  m_gid.(Ti2364) <- id in
                                                                                              let rec (p_nvectors: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [[Float]]) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb: [Float]), (xm_isect_ps: [[Float]]), (xm_sids: [Int]), (xm_cdif: [Bool]), (xm_engy: [[Float]]), (xm_r20p: [[Float]]), (xm_gid: [Int]), (m_nvectors: [[Float]])) = pixel in
m_nvectors in
                                                                                                let rec (d_vec: (([Float], [[Float]])) -> [Float]) ((d: ([Float], [[Float]]))) = let (m_vec: [Float]), (xm_const: [[Float]])) = d in
m_vec in
                                                                                                  let rec (d_const: (([Float], [[Float]])) -> [[Float]]) ((d: ([Float], [[Float]]))) = let (dm_vec: [Float]), (m_const: [[Float]])) = d in
m_const in
                                                                                                    let rec (r_surface_id: ((Int, ([Float], [[Float]]), Float)) -> Int) ((r: (Int, ([Float], [[Float]]), Float))) = let (m_sid: Int), (xm_dvec: ([Float], [[Float]])), (xm_br: Float)) = r in
m_sid in
                                                                                                      let rec (r_dvec: ((Int, ([Float], [[Float]]), Float)) -> ([Float], [[Float]])) ((r: (Int, ([Float], [[Float]]), Float))) = let (xm_sid: Int), (m_dvec: ([Float], [[Float]])), (xm_br: Float)) = r in
m_dvec in
                                                                                                        let rec (r_bright: ((Int, ([Float], [[Float]]), Float)) -> Float) ((r: (Int, ([Float], [[Float]]), Float))) = let (xm_sid: Int), (xm_dvec: ([Float], [[Float]])), (m_br: Float)) = r in
m_br in
                                                                                                          let rec (rad: (Float) -> Float) ((x: Float)) = let Td2363: Float = 0.017453293 in
  (x * Td2363) in
                                                                                                            let rec (read_screen_settings: (Unit) -> Unit) ((Tu21: Unit)) = let Tu35: Unit = let Ta2287: [Float] = [screen] in
  let Ti2288: Int = 0 in
    let Td2290: Float = let Tu2289: Unit = () in
  read_float(Tu2289) in
      Ta2287.(Ti2288) <- Td2290 in
  let Tu34: Unit = let Ta2291: [Float] = [screen] in
  let Ti2292: Int = 1 in
    let Td2294: Float = let Tu2293: Unit = () in
  read_float(Tu2293) in
      Ta2291.(Ti2292) <- Td2294 in
    let Tu33: Unit = let Ta2295: [Float] = [screen] in
  let Ti2296: Int = 2 in
    let Td2298: Float = let Tu2297: Unit = () in
  read_float(Tu2297) in
      Ta2295.(Ti2296) <- Td2298 in
      let v1: Float = let Td2300: Float = let Tu2299: Unit = () in
  read_float(Tu2299) in
  rad(Td2300) in
        let cos_v1: Float = cos(v1) in
          let sin_v1: Float = sin(v1) in
            let v2: Float = let Td2302: Float = let Tu2301: Unit = () in
  read_float(Tu2301) in
  rad(Td2302) in
              let cos_v2: Float = cos(v2) in
                let sin_v2: Float = sin(v2) in
                  let Tu32: Unit = let Ta2303: [Float] = [screenz_dir] in
  let Ti2304: Int = 0 in
    let Td2307: Float = let Td2305: Float = (cos_v1 * sin_v2) in
  let Td2306: Float = 200. in
    (Td2305 * Td2306) in
      Ta2303.(Ti2304) <- Td2307 in
                    let Tu31: Unit = let Ta2308: [Float] = [screenz_dir] in
  let Ti2309: Int = 1 in
    let Td2311: Float = let Td2310: Float = -200. in
  (sin_v1 * Td2310) in
      Ta2308.(Ti2309) <- Td2311 in
                      let Tu30: Unit = let Ta2312: [Float] = [screenz_dir] in
  let Ti2313: Int = 2 in
    let Td2316: Float = let Td2314: Float = (cos_v1 * cos_v2) in
  let Td2315: Float = 200. in
    (Td2314 * Td2315) in
      Ta2312.(Ti2313) <- Td2316 in
                        let Tu29: Unit = let Ta2317: [Float] = [screenx_dir] in
  let Ti2318: Int = 0 in
    Ta2317.(Ti2318) <- cos_v2 in
                          let Tu28: Unit = let Ta2319: [Float] = [screenx_dir] in
  let Ti2320: Int = 1 in
    let Td2321: Float = 0. in
      Ta2319.(Ti2320) <- Td2321 in
                            let Tu27: Unit = let Ta2322: [Float] = [screenx_dir] in
  let Ti2323: Int = 2 in
    let Td2324: Float = fneg(sin_v2) in
      Ta2322.(Ti2323) <- Td2324 in
                              let Tu26: Unit = let Ta2325: [Float] = [screeny_dir] in
  let Ti2326: Int = 0 in
    let Td2328: Float = let Td2327: Float = fneg(sin_v1) in
  (Td2327 * sin_v2) in
      Ta2325.(Ti2326) <- Td2328 in
                                let Tu25: Unit = let Ta2329: [Float] = [screeny_dir] in
  let Ti2330: Int = 1 in
    let Td2331: Float = fneg(cos_v1) in
      Ta2329.(Ti2330) <- Td2331 in
                                  let Tu24: Unit = let Ta2332: [Float] = [screeny_dir] in
  let Ti2333: Int = 2 in
    let Td2335: Float = let Td2334: Float = fneg(sin_v1) in
  (Td2334 * cos_v2) in
      Ta2332.(Ti2333) <- Td2335 in
                                    let Tu23: Unit = let Ta2336: [Float] = [viewpoint] in
  let Ti2337: Int = 0 in
    let Td2344: Float = let Td2340: Float = let Ta2338: [Float] = [screen] in
  let Ti2339: Int = 0 in
    Ta2338.(Ti2339) in
  let Td2343: Float = let Ta2341: [Float] = [screenz_dir] in
  let Ti2342: Int = 0 in
    Ta2341.(Ti2342) in
    (Td2340 - Td2343) in
      Ta2336.(Ti2337) <- Td2344 in
                                      let Tu22: Unit = let Ta2345: [Float] = [viewpoint] in
  let Ti2346: Int = 1 in
    let Td2353: Float = let Td2349: Float = let Ta2347: [Float] = [screen] in
  let Ti2348: Int = 1 in
    Ta2347.(Ti2348) in
  let Td2352: Float = let Ta2350: [Float] = [screenz_dir] in
  let Ti2351: Int = 1 in
    Ta2350.(Ti2351) in
    (Td2349 - Td2352) in
      Ta2345.(Ti2346) <- Td2353 in
                                        let Ta2354: [Float] = [viewpoint] in
                                          let Ti2355: Int = 2 in
                                            let Td2362: Float = let Td2358: Float = let Ta2356: [Float] = [screen] in
  let Ti2357: Int = 2 in
    Ta2356.(Ti2357) in
  let Td2361: Float = let Ta2359: [Float] = [screenz_dir] in
  let Ti2360: Int = 2 in
    Ta2359.(Ti2360) in
    (Td2358 - Td2361) in
                                              Ta2354.(Ti2355) <- Td2362 in
                                                                                                              let rec (read_light: (Unit) -> Unit) ((Tu36: Unit)) = let nl: Int = let Tu2269: Unit = () in
  read_int(Tu2269) in
  let l1: Float = let Td2271: Float = let Tu2270: Unit = () in
  read_float(Tu2270) in
  rad(Td2271) in
    let sl1: Int = sin(l1) in
      let Tu39: Unit = let Ta2272: [Float] = [light] in
  let Ti2273: Int = 1 in
    let Td2274: Float = fneg(sl1) in
      Ta2272.(Ti2273) <- Td2274 in
        let l2: Float = let Td2276: Float = let Tu2275: Unit = () in
  read_float(Tu2275) in
  rad(Td2276) in
          let cl1: Float = cos(l1) in
            let sl2: Float = sin(l2) in
              let Tu38: Unit = let Ta2277: [Float] = [light] in
  let Ti2278: Int = 0 in
    let Td2279: Float = (cl1 * sl2) in
      Ta2277.(Ti2278) <- Td2279 in
                let cl2: Float = cos(l2) in
                  let Tu37: Unit = let Ta2280: [Float] = [light] in
  let Ti2281: Int = 2 in
    let Td2282: Float = (cl1 * cl2) in
      Ta2280.(Ti2281) <- Td2282 in
                    let Ta2283: [Float] = [beam] in
                      let Ti2284: Int = 0 in
                        let Td2286: Float = let Tu2285: Unit = () in
  read_float(Tu2285) in
                          Ta2283.(Ti2284) <- Td2286 in
                                                                                                                let rec (rotate_quadratic_matrix: ([Float], [Float]) -> Unit) ((abc: [Float]), (rot: [Float])) = let cos_x: Float = let Td2183: Float = let Ti2182: Int = 0 in
  rot.(Ti2182) in
  cos(Td2183) in
  let sin_x: Float = let Td2185: Float = let Ti2184: Int = 0 in
  rot.(Ti2184) in
  sin(Td2185) in
    let cos_y: Float = let Td2187: Float = let Ti2186: Int = 1 in
  rot.(Ti2186) in
  cos(Td2187) in
      let sin_y: Float = let Td2189: Float = let Ti2188: Int = 1 in
  rot.(Ti2188) in
  sin(Td2189) in
        let cos_z: Float = let Td2191: Float = let Ti2190: Int = 2 in
  rot.(Ti2190) in
  cos(Td2191) in
          let sin_z: Float = let Td2193: Float = let Ti2192: Int = 2 in
  rot.(Ti2192) in
  sin(Td2193) in
            let m00: Float = (cos_y * cos_z) in
              let m01: Float = let Td2195: Float = let Td2194: Float = (sin_x * sin_y) in
  (Td2194 * cos_z) in
  let Td2196: Float = (cos_x * sin_z) in
    (Td2195 - Td2196) in
                let m02: Float = let Td2198: Float = let Td2197: Float = (cos_x * sin_y) in
  (Td2197 * cos_z) in
  let Td2199: Float = (sin_x * sin_z) in
    (Td2198 + Td2199) in
                  let m10: Float = (cos_y * sin_z) in
                    let m11: Float = let Td2201: Float = let Td2200: Float = (sin_x * sin_y) in
  (Td2200 * sin_z) in
  let Td2202: Float = (cos_x * cos_z) in
    (Td2201 + Td2202) in
                      let m12: Float = let Td2204: Float = let Td2203: Float = (cos_x * sin_y) in
  (Td2203 * sin_z) in
  let Td2205: Float = (sin_x * cos_z) in
    (Td2204 - Td2205) in
                        let m20: Float = fneg(sin_y) in
                          let m21: Float = (sin_x * cos_y) in
                            let m22: Float = (cos_x * cos_y) in
                              let ao: Float = let Ti2206: Int = 0 in
  abc.(Ti2206) in
                                let bo: Float = let Ti2207: Int = 1 in
  abc.(Ti2207) in
                                  let co: Float = let Ti2208: Int = 2 in
  abc.(Ti2208) in
                                    let Tu44: Unit = let Ti2209: Int = 0 in
  let Td2217: Float = let Td2214: Float = let Td2211: Float = let Td2210: Float = fsqr(m00) in
  (ao * Td2210) in
  let Td2213: Float = let Td2212: Float = fsqr(m10) in
  (bo * Td2212) in
    (Td2211 + Td2213) in
  let Td2216: Float = let Td2215: Float = fsqr(m20) in
  (co * Td2215) in
    (Td2214 + Td2216) in
    abc.(Ti2209) <- Td2217 in
                                      let Tu43: Unit = let Ti2218: Int = 1 in
  let Td2226: Float = let Td2223: Float = let Td2220: Float = let Td2219: Float = fsqr(m01) in
  (ao * Td2219) in
  let Td2222: Float = let Td2221: Float = fsqr(m11) in
  (bo * Td2221) in
    (Td2220 + Td2222) in
  let Td2225: Float = let Td2224: Float = fsqr(m21) in
  (co * Td2224) in
    (Td2223 + Td2225) in
    abc.(Ti2218) <- Td2226 in
                                        let Tu42: Unit = let Ti2227: Int = 2 in
  let Td2235: Float = let Td2232: Float = let Td2229: Float = let Td2228: Float = fsqr(m02) in
  (ao * Td2228) in
  let Td2231: Float = let Td2230: Float = fsqr(m12) in
  (bo * Td2230) in
    (Td2229 + Td2231) in
  let Td2234: Float = let Td2233: Float = fsqr(m22) in
  (co * Td2233) in
    (Td2232 + Td2234) in
    abc.(Ti2227) <- Td2235 in
                                          let Tu41: Unit = let Ti2236: Int = 0 in
  let Td2246: Float = let Td2237: Float = 2. in
  let Td2245: Float = let Td2242: Float = let Td2239: Float = let Td2238: Float = (ao * m01) in
  (Td2238 * m02) in
  let Td2241: Float = let Td2240: Float = (bo * m11) in
  (Td2240 * m12) in
    (Td2239 + Td2241) in
  let Td2244: Float = let Td2243: Float = (co * m21) in
  (Td2243 * m22) in
    (Td2242 + Td2244) in
    (Td2237 * Td2245) in
    rot.(Ti2236) <- Td2246 in
                                            let Tu40: Unit = let Ti2247: Int = 1 in
  let Td2257: Float = let Td2248: Float = 2. in
  let Td2256: Float = let Td2253: Float = let Td2250: Float = let Td2249: Float = (ao * m00) in
  (Td2249 * m02) in
  let Td2252: Float = let Td2251: Float = (bo * m10) in
  (Td2251 * m12) in
    (Td2250 + Td2252) in
  let Td2255: Float = let Td2254: Float = (co * m20) in
  (Td2254 * m22) in
    (Td2253 + Td2255) in
    (Td2248 * Td2256) in
    rot.(Ti2247) <- Td2257 in
                                              let Ti2258: Int = 2 in
                                                let Td2268: Float = let Td2259: Float = 2. in
  let Td2267: Float = let Td2264: Float = let Td2261: Float = let Td2260: Float = (ao * m00) in
  (Td2260 * m01) in
  let Td2263: Float = let Td2262: Float = (bo * m10) in
  (Td2262 * m11) in
    (Td2261 + Td2263) in
  let Td2266: Float = let Td2265: Float = (co * m20) in
  (Td2265 * m21) in
    (Td2264 + Td2266) in
    (Td2259 * Td2267) in
                                                  rot.(Ti2258) <- Td2268 in
                                                                                                                  let rec (read_nth_object: (Int) -> Bool) ((n: Int)) = let texture: Int = let Tu2088: Unit = () in
  read_int(Tu2088) in
  let Ti2090: Int = let Ti2089: Int = 1 in
  -(Ti2089) in
    if texture == Ti2090 then
      0
    else
      let form: Int = let Tu2091: Unit = () in
  read_int(Tu2091) in
        let refltype: Int = let Tu2092: Unit = () in
  read_int(Tu2092) in
          let isrot_p: Int = let Tu2093: Unit = () in
  read_int(Tu2093) in
            let abc: [Float] = let Ti2094: Int = 3 in
  let Td2095: Float = 0. in
    create_float_array(Ti2094, Td2095) in
              let Tu63: Unit = let Ti2096: Int = 0 in
  let Td2098: Float = let Tu2097: Unit = () in
  read_float(Tu2097) in
    abc.(Ti2096) <- Td2098 in
                let Tu62: Unit = let Ti2099: Int = 1 in
  let Td2101: Float = let Tu2100: Unit = () in
  read_float(Tu2100) in
    abc.(Ti2099) <- Td2101 in
                  let Tu61: Unit = let Ti2102: Int = 2 in
  let Td2104: Float = let Tu2103: Unit = () in
  read_float(Tu2103) in
    abc.(Ti2102) <- Td2104 in
                    let xyz: [Float] = let Ti2105: Int = 3 in
  let Td2106: Float = 0. in
    create_float_array(Ti2105, Td2106) in
                      let Tu60: Unit = let Ti2107: Int = 0 in
  let Td2109: Float = let Tu2108: Unit = () in
  read_float(Tu2108) in
    xyz.(Ti2107) <- Td2109 in
                        let Tu59: Unit = let Ti2110: Int = 1 in
  let Td2112: Float = let Tu2111: Unit = () in
  read_float(Tu2111) in
    xyz.(Ti2110) <- Td2112 in
                          let Tu58: Unit = let Ti2113: Int = 2 in
  let Td2115: Float = let Tu2114: Unit = () in
  read_float(Tu2114) in
    xyz.(Ti2113) <- Td2115 in
                            let m_invert: Bool = let Td2117: Float = let Tu2116: Unit = () in
  read_float(Tu2116) in
  fisneg(Td2117) in
                              let reflparam: [Float] = let Ti2118: Int = 2 in
  let Td2119: Float = 0. in
    create_float_array(Ti2118, Td2119) in
                                let Tu57: Unit = let Ti2120: Int = 0 in
  let Td2122: Float = let Tu2121: Unit = () in
  read_float(Tu2121) in
    reflparam.(Ti2120) <- Td2122 in
                                  let Tu56: Unit = let Ti2123: Int = 1 in
  let Td2125: Float = let Tu2124: Unit = () in
  read_float(Tu2124) in
    reflparam.(Ti2123) <- Td2125 in
                                    let color: [Float] = let Ti2126: Int = 3 in
  let Td2127: Float = 0. in
    create_float_array(Ti2126, Td2127) in
                                      let Tu55: Unit = let Ti2128: Int = 0 in
  let Td2130: Float = let Tu2129: Unit = () in
  read_float(Tu2129) in
    color.(Ti2128) <- Td2130 in
                                        let Tu54: Unit = let Ti2131: Int = 1 in
  let Td2133: Float = let Tu2132: Unit = () in
  read_float(Tu2132) in
    color.(Ti2131) <- Td2133 in
                                          let Tu53: Unit = let Ti2134: Int = 2 in
  let Td2136: Float = let Tu2135: Unit = () in
  read_float(Tu2135) in
    color.(Ti2134) <- Td2136 in
                                            let rotation: [Float] = let Ti2137: Int = 3 in
  let Td2138: Float = 0. in
    create_float_array(Ti2137, Td2138) in
                                              let Tu52: Unit = let Ti2139: Int = 0 in
  if isrot_p == Ti2139 then
    ()
  else
    let Tu46: Unit = let Ti2140: Int = 0 in
  let Td2143: Float = let Td2142: Float = let Tu2141: Unit = () in
  read_float(Tu2141) in
  rad(Td2142) in
    rotation.(Ti2140) <- Td2143 in
      let Tu45: Unit = let Ti2144: Int = 1 in
  let Td2147: Float = let Td2146: Float = let Tu2145: Unit = () in
  read_float(Tu2145) in
  rad(Td2146) in
    rotation.(Ti2144) <- Td2147 in
        let Ti2148: Int = 2 in
          let Td2151: Float = let Td2150: Float = let Tu2149: Unit = () in
  read_float(Tu2149) in
  rad(Td2150) in
            rotation.(Ti2148) <- Td2151 in
                                                let m_invert2: Bool = let Ti2152: Int = 2 in
  if form == Ti2152 then
    1
  else
    m_invert in
                                                  let ctbl: [Float] = let Ti2153: Int = 4 in
  let Td2154: Float = 0. in
    create_float_array(Ti2153, Td2154) in
                                                    let obj: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Float], [Float], [Float]) = (texture, form, refltype, isrot_p, abc, xyz, m_invert2, reflparam, color, rotation, ctbl) in
                                                      let Tu51: Unit = let Ta2155: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta2155.(n) <- obj in
                                                        let Tu50: Unit = let Ti2156: Int = 3 in
  if form == Ti2156 then
    let a: Float = let Ti2157: Int = 0 in
  abc.(Ti2157) in
      let Tu48: Unit = let Ti2158: Int = 0 in
  let Td2163: Float = let Tb2159: Bool = fiszero(a) in
  let Ti2160: Int = 0 in
    if Tb2159 == Ti2160 then
      let Td2161: Float = sgn(a) in
        let Td2162: Float = fsqr(a) in
          (Td2161 / Td2162)
    else
      0. in
    abc.(Ti2158) <- Td2163 in
        let b: Float = let Ti2164: Int = 1 in
  abc.(Ti2164) in
          let Tu47: Unit = let Ti2165: Int = 1 in
  let Td2170: Float = let Tb2166: Bool = fiszero(b) in
  let Ti2167: Int = 0 in
    if Tb2166 == Ti2167 then
      let Td2168: Float = sgn(b) in
        let Td2169: Float = fsqr(b) in
          (Td2168 / Td2169)
    else
      0. in
    abc.(Ti2165) <- Td2170 in
            let c: Float = let Ti2171: Int = 2 in
  abc.(Ti2171) in
              let Ti2172: Int = 2 in
                let Td2177: Float = let Tb2173: Bool = fiszero(c) in
  let Ti2174: Int = 0 in
    if Tb2173 == Ti2174 then
      let Td2175: Float = sgn(c) in
        let Td2176: Float = fsqr(c) in
          (Td2175 / Td2176)
    else
      0. in
                  abc.(Ti2172) <- Td2177
  else
    let Ti2178: Int = 2 in
      if form == Ti2178 then
        let Ti2180: Int = let Ti2179: Int = 0 in
  if m_invert == Ti2179 then
    1
  else
    0 in
          vecunit_sgn(abc, Ti2180)
      else
        () in
                                                          let Tu49: Unit = let Ti2181: Int = 0 in
  if isrot_p == Ti2181 then
    ()
  else
    rotate_quadratic_matrix(abc, rotation) in
                                                            1 in
                                                                                                                    let rec (read_object: (Int) -> Unit) ((n: Int)) = let Ti2081: Int = 60 in
  if Ti2081 <= n then
    ()
  else
    let Tb2082: Bool = read_nth_object(n) in
      let Ti2083: Int = 0 in
        if Tb2082 == Ti2083 then
          let Ta2084: [Int] = [n_objects] in
            let Ti2085: Int = 0 in
              Ta2084.(Ti2085) <- n
        else
          let Ti2087: Int = let Ti2086: Int = 1 in
  (n + Ti2086) in
            read_object(Ti2087) in
                                                                                                                      let rec (read_all_object: (Unit) -> Unit) ((Tu64: Unit)) = let Ti2080: Int = 0 in
  read_object(Ti2080) in
                                                                                                                        let rec (read_net_item: (Int) -> [Int]) ((length: Int)) = let item: Int = let Tu2071: Unit = () in
  read_int(Tu2071) in
  let Ti2073: Int = let Ti2072: Int = 1 in
  -(Ti2072) in
    if item == Ti2073 then
      let Ti2075: Int = let Ti2074: Int = 1 in
  (length + Ti2074) in
        let Ti2077: Int = let Ti2076: Int = 1 in
  -(Ti2076) in
          create_array(Ti2075, Ti2077)
    else
      let v: [Int] = let Ti2079: Int = let Ti2078: Int = 1 in
  (length + Ti2078) in
  read_net_item(Ti2079) in
        let Tu65: Unit = v.(length) <- item in
          v in
                                                                                                                          let rec (read_or_network: (Int) -> [[Int]]) ((length: Int)) = let net: [Int] = let Ti2062: Int = 0 in
  read_net_item(Ti2062) in
  let Ti2064: Int = let Ti2063: Int = 0 in
  net.(Ti2063) in
    let Ti2066: Int = let Ti2065: Int = 1 in
  -(Ti2065) in
      if Ti2064 == Ti2066 then
        let Ti2068: Int = let Ti2067: Int = 1 in
  (length + Ti2067) in
          create_array(Ti2068, net)
      else
        let v: [[Int]] = let Ti2070: Int = let Ti2069: Int = 1 in
  (length + Ti2069) in
  read_or_network(Ti2070) in
          let Tu66: Unit = v.(length) <- net in
            v in
                                                                                                                            let rec (read_and_network: (Int) -> Unit) ((n: Int)) = let net: [Int] = let Ti2054: Int = 0 in
  read_net_item(Ti2054) in
  let Ti2056: Int = let Ti2055: Int = 0 in
  net.(Ti2055) in
    let Ti2058: Int = let Ti2057: Int = 1 in
  -(Ti2057) in
      if Ti2056 == Ti2058 then
        ()
      else
        let Tu67: Unit = let Ta2059: [[Int]] = [and_net] in
  Ta2059.(n) <- net in
          let Ti2061: Int = let Ti2060: Int = 1 in
  (n + Ti2060) in
            read_and_network(Ti2061) in
                                                                                                                              let rec (read_parameter: (Unit) -> Unit) ((Tu68: Unit)) = let Tu72: Unit = let Tu2046: Unit = () in
  read_screen_settings(Tu2046) in
  let Tu71: Unit = let Tu2047: Unit = () in
  read_light(Tu2047) in
    let Tu70: Unit = let Tu2048: Unit = () in
  read_all_object(Tu2048) in
      let Tu69: Unit = let Ti2049: Int = 0 in
  read_and_network(Ti2049) in
        let Ta2050: [[[Int]]] = [or_net] in
          let Ti2051: Int = 0 in
            let Ta2053: [[Int]] = let Ti2052: Int = 0 in
  read_or_network(Ti2052) in
              Ta2050.(Ti2051) <- Ta2053 in
                                                                                                                                let rec (solver_rect_surface: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float, Int, Int, Int) -> Bool) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec: [Float]), (b0: Float), (b1: Float), (b2: Float), (i0: Int), (i1: Int), (i2: Int)) = let Tb2021: Bool = let Td2020: Float = dirvec.(i0) in
  fiszero(Td2020) in
  let Ti2022: Int = 0 in
    if Tb2021 == Ti2022 then
      let abc: [Float] = o_param_abc(m) in
        let d: Float = let Tb2026: Bool = let Tb2023: Bool = o_isinvert(m) in
  let Tb2025: Bool = let Td2024: Float = dirvec.(i0) in
  fisneg(Td2024) in
    xor(Tb2023, Tb2025) in
  let Td2027: Float = abc.(i0) in
    fneg_cond(Tb2026, Td2027) in
          let d2: Float = let Td2028: Float = (d - b0) in
  let Td2029: Float = dirvec.(i0) in
    (Td2028 / Td2029) in
            let Tb2035: Bool = let Ti2033: Int = let Td2032: Float = let Td2031: Float = let Td2030: Float = dirvec.(i1) in
  (d2 * Td2030) in
  (Td2031 + b1) in
  fabs(Td2032) in
  let Td2034: Float = abc.(i1) in
    fless(Ti2033, Td2034) in
              let Ti2036: Int = 0 in
                if Tb2035 == Ti2036 then
                  0
                else
                  let Tb2042: Bool = let Ti2040: Int = let Td2039: Float = let Td2038: Float = let Td2037: Float = dirvec.(i2) in
  (d2 * Td2037) in
  (Td2038 + b2) in
  fabs(Td2039) in
  let Td2041: Float = abc.(i2) in
    fless(Ti2040, Td2041) in
                    let Ti2043: Int = 0 in
                      if Tb2042 == Ti2043 then
                        0
                      else
                        let Tu73: Unit = let Ta2044: [Int] = [solver_dist] in
  let Ti2045: Int = 0 in
    Ta2044.(Ti2045) <- d2 in
                          1
    else
      0 in
                                                                                                                                  let rec (solver_rect: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec: [Float]), (b0: Float), (b1: Float), (b2: Float)) = let Tb2008: Bool = let Ti2005: Int = 0 in
  let Ti2006: Int = 1 in
    let Ti2007: Int = 2 in
      solver_rect_surface(m, dirvec, b0, b1, b2, Ti2005, Ti2006, Ti2007) in
  let Ti2009: Int = 0 in
    if Tb2008 == Ti2009 then
      let Tb2013: Bool = let Ti2010: Int = 1 in
  let Ti2011: Int = 2 in
    let Ti2012: Int = 0 in
      solver_rect_surface(m, dirvec, b1, b2, b0, Ti2010, Ti2011, Ti2012) in
        let Ti2014: Int = 0 in
          if Tb2013 == Ti2014 then
            let Tb2018: Bool = let Ti2015: Int = 2 in
  let Ti2016: Int = 0 in
    let Ti2017: Int = 1 in
      solver_rect_surface(m, dirvec, b2, b0, b1, Ti2015, Ti2016, Ti2017) in
              let Ti2019: Int = 0 in
                if Tb2018 == Ti2019 then
                  0
                else
                  3
          else
            2
    else
      1 in
                                                                                                                                    let rec (solver_surface: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec: [Float]), (b0: Float), (b1: Float), (b2: Float)) = let abc: [Float] = o_param_abc(m) in
  let d: Float = veciprod(dirvec, abc) in
    let Tb1998: Bool = fispos(d) in
      let Ti1999: Int = 0 in
        if Tb1998 == Ti1999 then
          0
        else
          let Tu74: Unit = let Ta2000: [Int] = [solver_dist] in
  let Ti2001: Int = 0 in
    let Td2004: Float = let Td2003: Float = let Td2002: Float = veciprod2(abc, b0, b1, b2) in
  fneg(Td2002) in
  (Td2003 / d) in
      Ta2000.(Ti2001) <- Td2004 in
            1 in
                                                                                                                                      let rec (quadratic: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (v0: Float), (v1: Float), (v2: Float)) = let diag_part: Float = let Td1981: Float = let Td1977: Float = let Td1975: Float = fsqr(v0) in
  let Td1976: Float = o_param_a(m) in
    (Td1975 * Td1976) in
  let Td1980: Float = let Td1978: Float = fsqr(v1) in
  let Td1979: Float = o_param_b(m) in
    (Td1978 * Td1979) in
    (Td1977 + Td1980) in
  let Td1984: Float = let Td1982: Float = fsqr(v2) in
  let Td1983: Float = o_param_c(m) in
    (Td1982 * Td1983) in
    (Td1981 + Td1984) in
  let Ti1985: Int = o_isrot(m) in
    let Ti1986: Int = 0 in
      if Ti1985 == Ti1986 then
        diag_part
      else
        let Td1994: Float = let Td1990: Float = let Td1989: Float = let Td1987: Float = (v1 * v2) in
  let Td1988: Float = o_param_r1(m) in
    (Td1987 * Td1988) in
  (diag_part + Td1989) in
  let Td1993: Float = let Td1991: Float = (v2 * v0) in
  let Td1992: Float = o_param_r2(m) in
    (Td1991 * Td1992) in
    (Td1990 + Td1993) in
          let Td1997: Float = let Td1995: Float = (v0 * v1) in
  let Td1996: Float = o_param_r3(m) in
    (Td1995 * Td1996) in
            (Td1994 + Td1997) in
                                                                                                                                        let rec (bilinear: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float, Float, Float, Float) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (v0: Float), (v1: Float), (v2: Float), (w0: Float), (w1: Float), (w2: Float)) = let diag_part: Float = let Td1951: Float = let Td1947: Float = let Td1945: Float = (v0 * w0) in
  let Td1946: Float = o_param_a(m) in
    (Td1945 * Td1946) in
  let Td1950: Float = let Td1948: Float = (v1 * w1) in
  let Td1949: Float = o_param_b(m) in
    (Td1948 * Td1949) in
    (Td1947 + Td1950) in
  let Td1954: Float = let Td1952: Float = (v2 * w2) in
  let Td1953: Float = o_param_c(m) in
    (Td1952 * Td1953) in
    (Td1951 + Td1954) in
  let Ti1955: Int = o_isrot(m) in
    let Ti1956: Int = 0 in
      if Ti1955 == Ti1956 then
        diag_part
      else
        let Td1974: Float = let Td1973: Float = let Td1967: Float = let Td1961: Float = let Td1959: Float = let Td1957: Float = (v2 * w1) in
  let Td1958: Float = (v1 * w2) in
    (Td1957 + Td1958) in
  let Td1960: Float = o_param_r1(m) in
    (Td1959 * Td1960) in
  let Td1966: Float = let Td1964: Float = let Td1962: Float = (v0 * w2) in
  let Td1963: Float = (v2 * w0) in
    (Td1962 + Td1963) in
  let Td1965: Float = o_param_r2(m) in
    (Td1964 * Td1965) in
    (Td1961 + Td1966) in
  let Td1972: Float = let Td1970: Float = let Td1968: Float = (v0 * w1) in
  let Td1969: Float = (v1 * w0) in
    (Td1968 + Td1969) in
  let Td1971: Float = o_param_r3(m) in
    (Td1970 * Td1971) in
    (Td1967 + Td1972) in
  fhalf(Td1973) in
          (diag_part + Td1974) in
                                                                                                                                          let rec (solver_second: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec: [Float]), (b0: Float), (b1: Float), (b2: Float)) = let aa: Float = let Td1919: Float = let Ti1918: Int = 0 in
  dirvec.(Ti1918) in
  let Td1921: Float = let Ti1920: Int = 1 in
  dirvec.(Ti1920) in
    let Td1923: Float = let Ti1922: Int = 2 in
  dirvec.(Ti1922) in
      quadratic(m, Td1919, Td1921, Td1923) in
  let Tb1924: Bool = fiszero(aa) in
    let Ti1925: Int = 0 in
      if Tb1924 == Ti1925 then
        let bb: Float = let Td1927: Float = let Ti1926: Int = 0 in
  dirvec.(Ti1926) in
  let Td1929: Float = let Ti1928: Int = 1 in
  dirvec.(Ti1928) in
    let Td1931: Float = let Ti1930: Int = 2 in
  dirvec.(Ti1930) in
      bilinear(m, Td1927, Td1929, Td1931, b0, b1, b2) in
          let cc0: Float = quadratic(m, b0, b1, b2) in
            let cc: Float = let Ti1932: Int = o_form(m) in
  let Ti1933: Int = 3 in
    if Ti1932 == Ti1933 then
      let Td1934: Float = 1. in
        (cc0 - Td1934)
    else
      cc0 in
              let d: Float = let Td1935: Float = fsqr(bb) in
  let Td1936: Float = (aa * cc) in
    (Td1935 - Td1936) in
                let Tb1937: Bool = fispos(d) in
                  let Ti1938: Int = 0 in
                    if Tb1937 == Ti1938 then
                      0
                    else
                      let sd: Float = sqrt(d) in
                        let t1: Float = let Tb1939: Bool = o_isinvert(m) in
  let Ti1940: Int = 0 in
    if Tb1939 == Ti1940 then
      fneg(sd)
    else
      sd in
                          let Tu75: Unit = let Ta1941: [Int] = [solver_dist] in
  let Ti1942: Int = 0 in
    let Td1944: Float = let Td1943: Float = (t1 - bb) in
  (Td1943 / aa) in
      Ta1941.(Ti1942) <- Td1944 in
                            1
      else
        0 in
                                                                                                                                            let rec (solver: (Int, [Float], [Float]) -> Int) ((index: Int), (dirvec: [Float]), (org: [Float])) = let m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1906: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1906.(index) in
  let b0: Float = let Td1908: Float = let Ti1907: Int = 0 in
  org.(Ti1907) in
  let Td1909: Float = o_param_x(m) in
    (Td1908 - Td1909) in
    let b1: Float = let Td1911: Float = let Ti1910: Int = 1 in
  org.(Ti1910) in
  let Td1912: Float = o_param_y(m) in
    (Td1911 - Td1912) in
      let b2: Float = let Td1914: Float = let Ti1913: Int = 2 in
  org.(Ti1913) in
  let Td1915: Float = o_param_z(m) in
    (Td1914 - Td1915) in
        let m_shape: Int = o_form(m) in
          let Ti1916: Int = 1 in
            if m_shape == Ti1916 then
              solver_rect(m, dirvec, b0, b1, b2)
            else
              let Ti1917: Int = 2 in
                if m_shape == Ti1917 then
                  solver_surface(m, dirvec, b0, b1, b2)
                else
                  solver_second(m, dirvec, b0, b1, b2) in
                                                                                                                                              let rec (solver_rect_fast: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], [Float], Float, Float, Float) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (v: [Float]), (dconst: [Float]), (b0: Float), (b1: Float), (b2: Float)) = let d0: Float = let Td1821: Float = let Td1820: Float = let Ti1819: Int = 0 in
  dconst.(Ti1819) in
  (Td1820 - b0) in
  let Td1823: Float = let Ti1822: Int = 1 in
  dconst.(Ti1822) in
    (Td1821 * Td1823) in
  let Ti1844: Int = let Tb1830: Bool = let Ti1828: Int = let Td1827: Float = let Td1826: Float = let Td1825: Float = let Ti1824: Int = 1 in
  v.(Ti1824) in
  (d0 * Td1825) in
  (Td1826 + b1) in
  fabs(Td1827) in
  let Td1829: Float = o_param_b(m) in
    fless(Ti1828, Td1829) in
  let Ti1831: Int = 0 in
    if Tb1830 == Ti1831 then
      0
    else
      let Tb1838: Bool = let Ti1836: Int = let Td1835: Float = let Td1834: Float = let Td1833: Float = let Ti1832: Int = 2 in
  v.(Ti1832) in
  (d0 * Td1833) in
  (Td1834 + b2) in
  fabs(Td1835) in
  let Td1837: Float = o_param_c(m) in
    fless(Ti1836, Td1837) in
        let Ti1839: Int = 0 in
          if Tb1838 == Ti1839 then
            0
          else
            let Tb1842: Bool = let Td1841: Float = let Ti1840: Int = 1 in
  dconst.(Ti1840) in
  fiszero(Td1841) in
              let Ti1843: Int = 0 in
                if Tb1842 == Ti1843 then
                  1
                else
                  0 in
    let Ti1845: Int = 0 in
      if Ti1844 == Ti1845 then
        let d1: Float = let Td1848: Float = let Td1847: Float = let Ti1846: Int = 2 in
  dconst.(Ti1846) in
  (Td1847 - b1) in
  let Td1850: Float = let Ti1849: Int = 3 in
  dconst.(Ti1849) in
    (Td1848 * Td1850) in
          let Ti1871: Int = let Tb1857: Bool = let Ti1855: Int = let Td1854: Float = let Td1853: Float = let Td1852: Float = let Ti1851: Int = 0 in
  v.(Ti1851) in
  (d1 * Td1852) in
  (Td1853 + b0) in
  fabs(Td1854) in
  let Td1856: Float = o_param_a(m) in
    fless(Ti1855, Td1856) in
  let Ti1858: Int = 0 in
    if Tb1857 == Ti1858 then
      0
    else
      let Tb1865: Bool = let Ti1863: Int = let Td1862: Float = let Td1861: Float = let Td1860: Float = let Ti1859: Int = 2 in
  v.(Ti1859) in
  (d1 * Td1860) in
  (Td1861 + b2) in
  fabs(Td1862) in
  let Td1864: Float = o_param_c(m) in
    fless(Ti1863, Td1864) in
        let Ti1866: Int = 0 in
          if Tb1865 == Ti1866 then
            0
          else
            let Tb1869: Bool = let Td1868: Float = let Ti1867: Int = 3 in
  dconst.(Ti1867) in
  fiszero(Td1868) in
              let Ti1870: Int = 0 in
                if Tb1869 == Ti1870 then
                  1
                else
                  0 in
            let Ti1872: Int = 0 in
              if Ti1871 == Ti1872 then
                let d2: Float = let Td1875: Float = let Td1874: Float = let Ti1873: Int = 4 in
  dconst.(Ti1873) in
  (Td1874 - b2) in
  let Td1877: Float = let Ti1876: Int = 5 in
  dconst.(Ti1876) in
    (Td1875 * Td1877) in
                  let Ti1898: Int = let Tb1884: Bool = let Ti1882: Int = let Td1881: Float = let Td1880: Float = let Td1879: Float = let Ti1878: Int = 0 in
  v.(Ti1878) in
  (d2 * Td1879) in
  (Td1880 + b0) in
  fabs(Td1881) in
  let Td1883: Float = o_param_a(m) in
    fless(Ti1882, Td1883) in
  let Ti1885: Int = 0 in
    if Tb1884 == Ti1885 then
      0
    else
      let Tb1892: Bool = let Ti1890: Int = let Td1889: Float = let Td1888: Float = let Td1887: Float = let Ti1886: Int = 1 in
  v.(Ti1886) in
  (d2 * Td1887) in
  (Td1888 + b1) in
  fabs(Td1889) in
  let Td1891: Float = o_param_b(m) in
    fless(Ti1890, Td1891) in
        let Ti1893: Int = 0 in
          if Tb1892 == Ti1893 then
            0
          else
            let Tb1896: Bool = let Td1895: Float = let Ti1894: Int = 5 in
  dconst.(Ti1894) in
  fiszero(Td1895) in
              let Ti1897: Int = 0 in
                if Tb1896 == Ti1897 then
                  1
                else
                  0 in
                    let Ti1899: Int = 0 in
                      if Ti1898 == Ti1899 then
                        0
                      else
                        let Tu78: Unit = let Ta1900: [Int] = [solver_dist] in
  let Ti1901: Int = 0 in
    Ta1900.(Ti1901) <- d2 in
                          3
              else
                let Tu77: Unit = let Ta1902: [Int] = [solver_dist] in
  let Ti1903: Int = 0 in
    Ta1902.(Ti1903) <- d1 in
                  2
      else
        let Tu76: Unit = let Ta1904: [Int] = [solver_dist] in
  let Ti1905: Int = 0 in
    Ta1904.(Ti1905) <- d0 in
          1 in
                                                                                                                                                let rec (solver_surface_fast: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dconst: [Float]), (b0: Float), (b1: Float), (b2: Float)) = let Tb1804: Bool = let Td1803: Float = let Ti1802: Int = 0 in
  dconst.(Ti1802) in
  fisneg(Td1803) in
  let Ti1805: Int = 0 in
    if Tb1804 == Ti1805 then
      0
    else
      let Tu79: Unit = let Ta1806: [Int] = [solver_dist] in
  let Ti1807: Int = 0 in
    let Td1818: Float = let Td1814: Float = let Td1810: Float = let Td1809: Float = let Ti1808: Int = 1 in
  dconst.(Ti1808) in
  (Td1809 * b0) in
  let Td1813: Float = let Td1812: Float = let Ti1811: Int = 2 in
  dconst.(Ti1811) in
  (Td1812 * b1) in
    (Td1810 + Td1813) in
  let Td1817: Float = let Td1816: Float = let Ti1815: Int = 3 in
  dconst.(Ti1815) in
  (Td1816 * b2) in
    (Td1814 + Td1817) in
      Ta1806.(Ti1807) <- Td1818 in
        1 in
                                                                                                                                                  let rec (solver_second_fast: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dconst: [Float]), (b0: Float), (b1: Float), (b2: Float)) = let aa: Float = let Ti1766: Int = 0 in
  dconst.(Ti1766) in
  let Tb1767: Bool = fiszero(aa) in
    let Ti1768: Int = 0 in
      if Tb1767 == Ti1768 then
        let neg_bb: Float = let Td1775: Float = let Td1771: Float = let Td1770: Float = let Ti1769: Int = 1 in
  dconst.(Ti1769) in
  (Td1770 * b0) in
  let Td1774: Float = let Td1773: Float = let Ti1772: Int = 2 in
  dconst.(Ti1772) in
  (Td1773 * b1) in
    (Td1771 + Td1774) in
  let Td1778: Float = let Td1777: Float = let Ti1776: Int = 3 in
  dconst.(Ti1776) in
  (Td1777 * b2) in
    (Td1775 + Td1778) in
          let cc0: Float = quadratic(m, b0, b1, b2) in
            let cc: Float = let Ti1779: Int = o_form(m) in
  let Ti1780: Int = 3 in
    if Ti1779 == Ti1780 then
      let Td1781: Float = 1. in
        (cc0 - Td1781)
    else
      cc0 in
              let d: Float = let Td1782: Float = fsqr(neg_bb) in
  let Td1783: Float = (aa * cc) in
    (Td1782 - Td1783) in
                let Tb1784: Bool = fispos(d) in
                  let Ti1785: Int = 0 in
                    if Tb1784 == Ti1785 then
                      0
                    else
                      let Tu80: Unit = let Tb1786: Bool = o_isinvert(m) in
  let Ti1787: Int = 0 in
    if Tb1786 == Ti1787 then
      let Ta1788: [Int] = [solver_dist] in
        let Ti1789: Int = 0 in
          let Td1794: Float = let Td1791: Float = let Td1790: Float = sqrt(d) in
  (neg_bb - Td1790) in
  let Td1793: Float = let Ti1792: Int = 4 in
  dconst.(Ti1792) in
    (Td1791 * Td1793) in
            Ta1788.(Ti1789) <- Td1794
    else
      let Ta1795: [Int] = [solver_dist] in
        let Ti1796: Int = 0 in
          let Td1801: Float = let Td1798: Float = let Td1797: Float = sqrt(d) in
  (neg_bb + Td1797) in
  let Td1800: Float = let Ti1799: Int = 4 in
  dconst.(Ti1799) in
    (Td1798 * Td1800) in
            Ta1795.(Ti1796) <- Td1801 in
                        1
      else
        0 in
                                                                                                                                                    let rec (solver_fast: (Int, ([Float], [[Float]]), [Float]) -> Int) ((index: Int), (dirvec: ([Float], [[Float]])), (org: [Float])) = let m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1753: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1753.(index) in
  let b0: Float = let Td1755: Float = let Ti1754: Int = 0 in
  org.(Ti1754) in
  let Td1756: Float = o_param_x(m) in
    (Td1755 - Td1756) in
    let b1: Float = let Td1758: Float = let Ti1757: Int = 1 in
  org.(Ti1757) in
  let Td1759: Float = o_param_y(m) in
    (Td1758 - Td1759) in
      let b2: Float = let Td1761: Float = let Ti1760: Int = 2 in
  org.(Ti1760) in
  let Td1762: Float = o_param_z(m) in
    (Td1761 - Td1762) in
        let dconsts: [[Float]] = d_const(dirvec) in
          let dconst: [Float] = dconsts.(index) in
            let m_shape: Int = o_form(m) in
              let Ti1763: Int = 1 in
                if m_shape == Ti1763 then
                  let Ta1764: [Float] = d_vec(dirvec) in
                    solver_rect_fast(m, Ta1764, dconst, b0, b1, b2)
                else
                  let Ti1765: Int = 2 in
                    if m_shape == Ti1765 then
                      solver_surface_fast(m, dconst, b0, b1, b2)
                    else
                      solver_second_fast(m, dconst, b0, b1, b2) in
                                                                                                                                                      let rec (solver_surface_fast2: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], [Float], Float, Float, Float) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dconst: [Float]), (sconst: [Float]), (b0: Float), (b1: Float), (b2: Float)) = let Tb1744: Bool = let Td1743: Float = let Ti1742: Int = 0 in
  dconst.(Ti1742) in
  fisneg(Td1743) in
  let Ti1745: Int = 0 in
    if Tb1744 == Ti1745 then
      0
    else
      let Tu81: Unit = let Ta1746: [Int] = [solver_dist] in
  let Ti1747: Int = 0 in
    let Td1752: Float = let Td1749: Float = let Ti1748: Int = 0 in
  dconst.(Ti1748) in
  let Td1751: Float = let Ti1750: Int = 3 in
  sconst.(Ti1750) in
    (Td1749 * Td1751) in
      Ta1746.(Ti1747) <- Td1752 in
        1 in
                                                                                                                                                        let rec (solver_second_fast2: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], [Float], Float, Float, Float) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dconst: [Float]), (sconst: [Float]), (b0: Float), (b1: Float), (b2: Float)) = let aa: Float = let Ti1708: Int = 0 in
  dconst.(Ti1708) in
  let Tb1709: Bool = fiszero(aa) in
    let Ti1710: Int = 0 in
      if Tb1709 == Ti1710 then
        let neg_bb: Float = let Td1717: Float = let Td1713: Float = let Td1712: Float = let Ti1711: Int = 1 in
  dconst.(Ti1711) in
  (Td1712 * b0) in
  let Td1716: Float = let Td1715: Float = let Ti1714: Int = 2 in
  dconst.(Ti1714) in
  (Td1715 * b1) in
    (Td1713 + Td1716) in
  let Td1720: Float = let Td1719: Float = let Ti1718: Int = 3 in
  dconst.(Ti1718) in
  (Td1719 * b2) in
    (Td1717 + Td1720) in
          let cc: Float = let Ti1721: Int = 3 in
  sconst.(Ti1721) in
            let d: Float = let Td1722: Float = fsqr(neg_bb) in
  let Td1723: Float = (aa * cc) in
    (Td1722 - Td1723) in
              let Tb1724: Bool = fispos(d) in
                let Ti1725: Int = 0 in
                  if Tb1724 == Ti1725 then
                    0
                  else
                    let Tu82: Unit = let Tb1726: Bool = o_isinvert(m) in
  let Ti1727: Int = 0 in
    if Tb1726 == Ti1727 then
      let Ta1728: [Int] = [solver_dist] in
        let Ti1729: Int = 0 in
          let Td1734: Float = let Td1731: Float = let Td1730: Float = sqrt(d) in
  (neg_bb - Td1730) in
  let Td1733: Float = let Ti1732: Int = 4 in
  dconst.(Ti1732) in
    (Td1731 * Td1733) in
            Ta1728.(Ti1729) <- Td1734
    else
      let Ta1735: [Int] = [solver_dist] in
        let Ti1736: Int = 0 in
          let Td1741: Float = let Td1738: Float = let Td1737: Float = sqrt(d) in
  (neg_bb + Td1737) in
  let Td1740: Float = let Ti1739: Int = 4 in
  dconst.(Ti1739) in
    (Td1738 * Td1740) in
            Ta1735.(Ti1736) <- Td1741 in
                      1
      else
        0 in
                                                                                                                                                          let rec (solver_fast2: (Int, ([Float], [[Float]])) -> Int) ((index: Int), (dirvec: ([Float], [[Float]]))) = let m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1701: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1701.(index) in
  let sconst: [Float] = o_param_ctbl(m) in
    let b0: Float = let Ti1702: Int = 0 in
  sconst.(Ti1702) in
      let b1: Float = let Ti1703: Int = 1 in
  sconst.(Ti1703) in
        let b2: Float = let Ti1704: Int = 2 in
  sconst.(Ti1704) in
          let dconsts: [[Float]] = d_const(dirvec) in
            let dconst: [Float] = dconsts.(index) in
              let m_shape: Int = o_form(m) in
                let Ti1705: Int = 1 in
                  if m_shape == Ti1705 then
                    let Ta1706: [Float] = d_vec(dirvec) in
                      solver_rect_fast(m, Ta1706, dconst, b0, b1, b2)
                  else
                    let Ti1707: Int = 2 in
                      if m_shape == Ti1707 then
                        solver_surface_fast2(m, dconst, sconst, b0, b1, b2)
                      else
                        solver_second_fast2(m, dconst, sconst, b0, b1, b2) in
                                                                                                                                                            let rec (setup_rect_table: ([Float], (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((vec: [Float]), (m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let const: [Float] = let Ti1642: Int = 6 in
  let Td1643: Float = 0. in
    create_float_array(Ti1642, Td1643) in
  let Tu88: Unit = let Tb1646: Bool = let Td1645: Float = let Ti1644: Int = 0 in
  vec.(Ti1644) in
  fiszero(Td1645) in
  let Ti1647: Int = 0 in
    if Tb1646 == Ti1647 then
      let Tu83: Unit = let Ti1648: Int = 0 in
  let Td1655: Float = let Tb1653: Bool = let Tb1649: Bool = o_isinvert(m) in
  let Tb1652: Bool = let Td1651: Float = let Ti1650: Int = 0 in
  vec.(Ti1650) in
  fisneg(Td1651) in
    xor(Tb1649, Tb1652) in
  let Td1654: Float = o_param_a(m) in
    fneg_cond(Tb1653, Td1654) in
    const.(Ti1648) <- Td1655 in
        let Ti1656: Int = 1 in
          let Td1660: Float = let Td1657: Float = 1. in
  let Td1659: Float = let Ti1658: Int = 0 in
  vec.(Ti1658) in
    (Td1657 / Td1659) in
            const.(Ti1656) <- Td1660
    else
      let Ti1661: Int = 1 in
        let Td1662: Float = 0. in
          const.(Ti1661) <- Td1662 in
    let Tu87: Unit = let Tb1665: Bool = let Td1664: Float = let Ti1663: Int = 1 in
  vec.(Ti1663) in
  fiszero(Td1664) in
  let Ti1666: Int = 0 in
    if Tb1665 == Ti1666 then
      let Tu84: Unit = let Ti1667: Int = 2 in
  let Td1674: Float = let Tb1672: Bool = let Tb1668: Bool = o_isinvert(m) in
  let Tb1671: Bool = let Td1670: Float = let Ti1669: Int = 1 in
  vec.(Ti1669) in
  fisneg(Td1670) in
    xor(Tb1668, Tb1671) in
  let Td1673: Float = o_param_b(m) in
    fneg_cond(Tb1672, Td1673) in
    const.(Ti1667) <- Td1674 in
        let Ti1675: Int = 3 in
          let Td1679: Float = let Td1676: Float = 1. in
  let Td1678: Float = let Ti1677: Int = 1 in
  vec.(Ti1677) in
    (Td1676 / Td1678) in
            const.(Ti1675) <- Td1679
    else
      let Ti1680: Int = 3 in
        let Td1681: Float = 0. in
          const.(Ti1680) <- Td1681 in
      let Tu86: Unit = let Tb1684: Bool = let Td1683: Float = let Ti1682: Int = 2 in
  vec.(Ti1682) in
  fiszero(Td1683) in
  let Ti1685: Int = 0 in
    if Tb1684 == Ti1685 then
      let Tu85: Unit = let Ti1686: Int = 4 in
  let Td1693: Float = let Tb1691: Bool = let Tb1687: Bool = o_isinvert(m) in
  let Tb1690: Bool = let Td1689: Float = let Ti1688: Int = 2 in
  vec.(Ti1688) in
  fisneg(Td1689) in
    xor(Tb1687, Tb1690) in
  let Td1692: Float = o_param_c(m) in
    fneg_cond(Tb1691, Td1692) in
    const.(Ti1686) <- Td1693 in
        let Ti1694: Int = 5 in
          let Td1698: Float = let Td1695: Float = 1. in
  let Td1697: Float = let Ti1696: Int = 2 in
  vec.(Ti1696) in
    (Td1695 / Td1697) in
            const.(Ti1694) <- Td1698
    else
      let Ti1699: Int = 5 in
        let Td1700: Float = 0. in
          const.(Ti1699) <- Td1700 in
        const in
                                                                                                                                                              let rec (setup_surface_table: ([Float], (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((vec: [Float]), (m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let const: [Float] = let Ti1608: Int = 4 in
  let Td1609: Float = 0. in
    create_float_array(Ti1608, Td1609) in
  let d: Float = let Td1618: Float = let Td1613: Float = let Td1611: Float = let Ti1610: Int = 0 in
  vec.(Ti1610) in
  let Td1612: Float = o_param_a(m) in
    (Td1611 * Td1612) in
  let Td1617: Float = let Td1615: Float = let Ti1614: Int = 1 in
  vec.(Ti1614) in
  let Td1616: Float = o_param_b(m) in
    (Td1615 * Td1616) in
    (Td1613 + Td1617) in
  let Td1622: Float = let Td1620: Float = let Ti1619: Int = 2 in
  vec.(Ti1619) in
  let Td1621: Float = o_param_c(m) in
    (Td1620 * Td1621) in
    (Td1618 + Td1622) in
    let Tu92: Unit = let Tb1623: Bool = fispos(d) in
  let Ti1624: Int = 0 in
    if Tb1623 == Ti1624 then
      let Ti1625: Int = 0 in
        let Td1626: Float = 0. in
          const.(Ti1625) <- Td1626
    else
      let Tu91: Unit = let Ti1627: Int = 0 in
  let Td1629: Float = let Td1628: Float = -1. in
  (Td1628 / d) in
    const.(Ti1627) <- Td1629 in
        let Tu90: Unit = let Ti1630: Int = 1 in
  let Td1633: Float = let Td1632: Float = let Td1631: Float = o_param_a(m) in
  (Td1631 / d) in
  fneg(Td1632) in
    const.(Ti1630) <- Td1633 in
          let Tu89: Unit = let Ti1634: Int = 2 in
  let Td1637: Float = let Td1636: Float = let Td1635: Float = o_param_b(m) in
  (Td1635 / d) in
  fneg(Td1636) in
    const.(Ti1634) <- Td1637 in
            let Ti1638: Int = 3 in
              let Td1641: Float = let Td1640: Float = let Td1639: Float = o_param_c(m) in
  (Td1639 / d) in
  fneg(Td1640) in
                const.(Ti1638) <- Td1641 in
      const in
                                                                                                                                                                let rec (setup_second_table: ([Float], (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((v: [Float]), (m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let const: [Float] = let Ti1541: Int = 5 in
  let Td1542: Float = 0. in
    create_float_array(Ti1541, Td1542) in
  let aa: Float = let Td1544: Float = let Ti1543: Int = 0 in
  v.(Ti1543) in
  let Td1546: Float = let Ti1545: Int = 1 in
  v.(Ti1545) in
    let Td1548: Float = let Ti1547: Int = 2 in
  v.(Ti1547) in
      quadratic(m, Td1544, Td1546, Td1548) in
    let c1: Float = let Td1552: Float = let Td1550: Float = let Ti1549: Int = 0 in
  v.(Ti1549) in
  let Td1551: Float = o_param_a(m) in
    (Td1550 * Td1551) in
  fneg(Td1552) in
      let c2: Float = let Td1556: Float = let Td1554: Float = let Ti1553: Int = 1 in
  v.(Ti1553) in
  let Td1555: Float = o_param_b(m) in
    (Td1554 * Td1555) in
  fneg(Td1556) in
        let c3: Float = let Td1560: Float = let Td1558: Float = let Ti1557: Int = 2 in
  v.(Ti1557) in
  let Td1559: Float = o_param_c(m) in
    (Td1558 * Td1559) in
  fneg(Td1560) in
          let Tu99: Unit = let Ti1561: Int = 0 in
  const.(Ti1561) <- aa in
            let Tu98: Unit = let Ti1562: Int = o_isrot(m) in
  let Ti1563: Int = 0 in
    if Ti1562 == Ti1563 then
      let Tu96: Unit = let Ti1564: Int = 1 in
  const.(Ti1564) <- c1 in
        let Tu95: Unit = let Ti1565: Int = 2 in
  const.(Ti1565) <- c2 in
          let Ti1566: Int = 3 in
            const.(Ti1566) <- c3
    else
      let Tu94: Unit = let Ti1567: Int = 1 in
  let Td1578: Float = let Td1577: Float = let Td1576: Float = let Td1571: Float = let Td1569: Float = let Ti1568: Int = 2 in
  v.(Ti1568) in
  let Td1570: Float = o_param_r2(m) in
    (Td1569 * Td1570) in
  let Td1575: Float = let Td1573: Float = let Ti1572: Int = 1 in
  v.(Ti1572) in
  let Td1574: Float = o_param_r3(m) in
    (Td1573 * Td1574) in
    (Td1571 + Td1575) in
  fhalf(Td1576) in
  (c1 - Td1577) in
    const.(Ti1567) <- Td1578 in
        let Tu93: Unit = let Ti1579: Int = 2 in
  let Td1590: Float = let Td1589: Float = let Td1588: Float = let Td1583: Float = let Td1581: Float = let Ti1580: Int = 2 in
  v.(Ti1580) in
  let Td1582: Float = o_param_r1(m) in
    (Td1581 * Td1582) in
  let Td1587: Float = let Td1585: Float = let Ti1584: Int = 0 in
  v.(Ti1584) in
  let Td1586: Float = o_param_r3(m) in
    (Td1585 * Td1586) in
    (Td1583 + Td1587) in
  fhalf(Td1588) in
  (c2 - Td1589) in
    const.(Ti1579) <- Td1590 in
          let Ti1591: Int = 3 in
            let Td1602: Float = let Td1601: Float = let Td1600: Float = let Td1595: Float = let Td1593: Float = let Ti1592: Int = 1 in
  v.(Ti1592) in
  let Td1594: Float = o_param_r1(m) in
    (Td1593 * Td1594) in
  let Td1599: Float = let Td1597: Float = let Ti1596: Int = 0 in
  v.(Ti1596) in
  let Td1598: Float = o_param_r2(m) in
    (Td1597 * Td1598) in
    (Td1595 + Td1599) in
  fhalf(Td1600) in
  (c3 - Td1601) in
              const.(Ti1591) <- Td1602 in
              let Tu97: Unit = let Tb1603: Bool = fiszero(aa) in
  let Ti1604: Int = 0 in
    if Tb1603 == Ti1604 then
      let Ti1605: Int = 4 in
        let Td1607: Float = let Td1606: Float = 1. in
  (Td1606 / aa) in
          const.(Ti1605) <- Td1607
    else
      () in
                const in
                                                                                                                                                                  let rec (iter_setup_dirvec_constants: (([Float], [[Float]]), Int) -> Unit) ((dirvec: ([Float], [[Float]])), (index: Int)) = let Ti1532: Int = 0 in
  if Ti1532 <= index then
    let m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1533: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1533.(index) in
      let dconst: [[Float]] = d_const(dirvec) in
        let v: [Float] = d_vec(dirvec) in
          let m_shape: Int = o_form(m) in
            let Tu100: Unit = let Ti1534: Int = 1 in
  if m_shape == Ti1534 then
    let Ta1535: [Float] = setup_rect_table(v, m) in
      dconst.(index) <- Ta1535
  else
    let Ti1536: Int = 2 in
      if m_shape == Ti1536 then
        let Ta1537: [Float] = setup_surface_table(v, m) in
          dconst.(index) <- Ta1537
      else
        let Ta1538: [Float] = setup_second_table(v, m) in
          dconst.(index) <- Ta1538 in
              let Ti1540: Int = let Ti1539: Int = 1 in
  (index - Ti1539) in
                iter_setup_dirvec_constants(dirvec, Ti1540)
  else
    () in
                                                                                                                                                                    let rec (setup_dirvec_constants: (([Float], [[Float]])) -> Unit) ((dirvec: ([Float], [[Float]]))) = let Ti1531: Int = let Ti1529: Int = let Ta1527: [Int] = [n_objects] in
  let Ti1528: Int = 0 in
    Ta1527.(Ti1528) in
  let Ti1530: Int = 1 in
    (Ti1529 - Ti1530) in
  iter_setup_dirvec_constants(dirvec, Ti1531) in
                                                                                                                                                                      let rec (setup_startp_constants: ([Float], Int) -> Unit) ((p: [Float]), (index: Int)) = let Ti1487: Int = 0 in
  if Ti1487 <= index then
    let obj: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1488: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1488.(index) in
      let sconst: [Float] = o_param_ctbl(obj) in
        let m_shape: Int = o_form(obj) in
          let Tu104: Unit = let Ti1489: Int = 0 in
  let Td1493: Float = let Td1491: Float = let Ti1490: Int = 0 in
  p.(Ti1490) in
  let Td1492: Float = o_param_x(obj) in
    (Td1491 - Td1492) in
    sconst.(Ti1489) <- Td1493 in
            let Tu103: Unit = let Ti1494: Int = 1 in
  let Td1498: Float = let Td1496: Float = let Ti1495: Int = 1 in
  p.(Ti1495) in
  let Td1497: Float = o_param_y(obj) in
    (Td1496 - Td1497) in
    sconst.(Ti1494) <- Td1498 in
              let Tu102: Unit = let Ti1499: Int = 2 in
  let Td1503: Float = let Td1501: Float = let Ti1500: Int = 2 in
  p.(Ti1500) in
  let Td1502: Float = o_param_z(obj) in
    (Td1501 - Td1502) in
    sconst.(Ti1499) <- Td1503 in
                let Tu101: Unit = let Ti1504: Int = 2 in
  if m_shape == Ti1504 then
    let Ti1505: Int = 3 in
      let Td1513: Float = let Ta1506: [Float] = o_param_abc(obj) in
  let Td1508: Float = let Ti1507: Int = 0 in
  sconst.(Ti1507) in
    let Td1510: Float = let Ti1509: Int = 1 in
  sconst.(Ti1509) in
      let Td1512: Float = let Ti1511: Int = 2 in
  sconst.(Ti1511) in
        veciprod2(Ta1506, Td1508, Td1510, Td1512) in
        sconst.(Ti1505) <- Td1513
  else
    let Ti1514: Int = 2 in
      if m_shape <= Ti1514 then
        ()
      else
        let cc0: Float = let Td1516: Float = let Ti1515: Int = 0 in
  sconst.(Ti1515) in
  let Td1518: Float = let Ti1517: Int = 1 in
  sconst.(Ti1517) in
    let Td1520: Float = let Ti1519: Int = 2 in
  sconst.(Ti1519) in
      quadratic(obj, Td1516, Td1518, Td1520) in
          let Ti1521: Int = 3 in
            let Td1524: Float = let Ti1522: Int = 3 in
  if m_shape == Ti1522 then
    let Td1523: Float = 1. in
      (cc0 - Td1523)
  else
    cc0 in
              sconst.(Ti1521) <- Td1524 in
                  let Ti1526: Int = let Ti1525: Int = 1 in
  (index - Ti1525) in
                    setup_startp_constants(p, Ti1526)
  else
    () in
                                                                                                                                                                        let rec (setup_startp: ([Float]) -> Unit) ((p: [Float])) = let Tu105: Unit = let Ta1481: [Float] = [startp_fast] in
  veccpy(Ta1481, p) in
  let Ti1486: Int = let Ti1484: Int = let Ta1482: [Int] = [n_objects] in
  let Ti1483: Int = 0 in
    Ta1482.(Ti1483) in
  let Ti1485: Int = 1 in
    (Ti1484 - Ti1485) in
    setup_startp_constants(p, Ti1486) in
                                                                                                                                                                          let rec (is_rect_outside: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Bool) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (p0: Float), (p1: Float), (p2: Float)) = let Ti1477: Int = let Tb1469: Bool = let Ti1467: Int = fabs(p0) in
  let Td1468: Float = o_param_a(m) in
    fless(Ti1467, Td1468) in
  let Ti1470: Int = 0 in
    if Tb1469 == Ti1470 then
      0
    else
      let Tb1473: Bool = let Ti1471: Int = fabs(p1) in
  let Td1472: Float = o_param_b(m) in
    fless(Ti1471, Td1472) in
        let Ti1474: Int = 0 in
          if Tb1473 == Ti1474 then
            0
          else
            let Ti1475: Int = fabs(p2) in
              let Td1476: Float = o_param_c(m) in
                fless(Ti1475, Td1476) in
  let Ti1478: Int = 0 in
    if Ti1477 == Ti1478 then
      let Tb1479: Bool = o_isinvert(m) in
        let Ti1480: Int = 0 in
          if Tb1479 == Ti1480 then
            1
          else
            0
    else
      o_isinvert(m) in
                                                                                                                                                                            let rec (is_plane_outside: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Bool) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (p0: Float), (p1: Float), (p2: Float)) = let w: Float = let Ta1462: [Float] = o_param_abc(m) in
  veciprod2(Ta1462, p0, p1, p2) in
  let Tb1465: Bool = let Tb1463: Bool = o_isinvert(m) in
  let Tb1464: Bool = fisneg(w) in
    xor(Tb1463, Tb1464) in
    let Ti1466: Int = 0 in
      if Tb1465 == Ti1466 then
        1
      else
        0 in
                                                                                                                                                                              let rec (is_second_outside: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Bool) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (p0: Float), (p1: Float), (p2: Float)) = let w: Float = quadratic(m, p0, p1, p2) in
  let w2: Float = let Ti1455: Int = o_form(m) in
  let Ti1456: Int = 3 in
    if Ti1455 == Ti1456 then
      let Td1457: Float = 1. in
        (w - Td1457)
    else
      w in
    let Tb1460: Bool = let Tb1458: Bool = o_isinvert(m) in
  let Tb1459: Bool = fisneg(w2) in
    xor(Tb1458, Tb1459) in
      let Ti1461: Int = 0 in
        if Tb1460 == Ti1461 then
          1
        else
          0 in
                                                                                                                                                                                let rec (is_outside: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Bool) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (q0: Float), (q1: Float), (q2: Float)) = let p0: Float = let Td1450: Float = o_param_x(m) in
  (q0 - Td1450) in
  let p1: Float = let Td1451: Float = o_param_y(m) in
  (q1 - Td1451) in
    let p2: Float = let Td1452: Float = o_param_z(m) in
  (q2 - Td1452) in
      let m_shape: Int = o_form(m) in
        let Ti1453: Int = 1 in
          if m_shape == Ti1453 then
            is_rect_outside(m, p0, p1, p2)
          else
            let Ti1454: Int = 2 in
              if m_shape == Ti1454 then
                is_plane_outside(m, p0, p1, p2)
              else
                is_second_outside(m, p0, p1, p2) in
                                                                                                                                                                                  let rec (check_all_inside: (Int, [Int], Float, Float, Float) -> Bool) ((ofs: Int), (iand: [Int]), (q0: Float), (q1: Float), (q2: Float)) = let head: Int = iand.(ofs) in
  let Ti1443: Int = let Ti1442: Int = 1 in
  -(Ti1442) in
    if head == Ti1443 then
      1
    else
      let Tb1446: Bool = let Tt1445: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1444: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1444.(head) in
  is_outside(Tt1445, q0, q1, q2) in
        let Ti1447: Int = 0 in
          if Tb1446 == Ti1447 then
            let Ti1449: Int = let Ti1448: Int = 1 in
  (ofs + Ti1448) in
              check_all_inside(Ti1449, iand, q0, q1, q2)
          else
            0 in
                                                                                                                                                                                    let rec (shadow_check_and_group: (Int, [Int]) -> Bool) ((iand_ofs: Int), (and_group: [Int])) = let Ti1398: Int = and_group.(iand_ofs) in
  let Ti1400: Int = let Ti1399: Int = 1 in
  -(Ti1399) in
    if Ti1398 == Ti1400 then
      0
    else
      let obj: Int = and_group.(iand_ofs) in
        let t0: Int = let Tt1401: ([Float], [[Float]]) = light_dirvec: ([Float], [[Float]]) in
  let Ta1402: [Float] = [intersection_point] in
    solver_fast(obj, Tt1401, Ta1402) in
          let t0p: Float = let Ta1403: [Int] = [solver_dist] in
  let Ti1404: Int = 0 in
    Ta1403.(Ti1404) in
            let Ti1407: Int = let Ti1405: Int = 0 in
  if t0 == Ti1405 then
    0
  else
    let Td1406: Float = -0.2 in
      fless(t0p, Td1406) in
              let Ti1408: Int = 0 in
                if Ti1407 == Ti1408 then
                  let Tb1411: Bool = let Tt1410: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1409: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1409.(obj) in
  o_isinvert(Tt1410) in
                    let Ti1412: Int = 0 in
                      if Tb1411 == Ti1412 then
                        0
                      else
                        let Ti1414: Int = let Ti1413: Int = 1 in
  (iand_ofs + Ti1413) in
                          shadow_check_and_group(Ti1414, and_group)
                else
                  let t: Float = let Td1415: Float = 0.01 in
  (t0p + Td1415) in
                    let q0: Float = let Td1419: Float = let Td1418: Float = let Ta1416: [Float] = [light] in
  let Ti1417: Int = 0 in
    Ta1416.(Ti1417) in
  (Td1418 * t) in
  let Td1422: Float = let Ta1420: [Float] = [intersection_point] in
  let Ti1421: Int = 0 in
    Ta1420.(Ti1421) in
    (Td1419 + Td1422) in
                      let q1: Float = let Td1426: Float = let Td1425: Float = let Ta1423: [Float] = [light] in
  let Ti1424: Int = 1 in
    Ta1423.(Ti1424) in
  (Td1425 * t) in
  let Td1429: Float = let Ta1427: [Float] = [intersection_point] in
  let Ti1428: Int = 1 in
    Ta1427.(Ti1428) in
    (Td1426 + Td1429) in
                        let q2: Float = let Td1433: Float = let Td1432: Float = let Ta1430: [Float] = [light] in
  let Ti1431: Int = 2 in
    Ta1430.(Ti1431) in
  (Td1432 * t) in
  let Td1436: Float = let Ta1434: [Float] = [intersection_point] in
  let Ti1435: Int = 2 in
    Ta1434.(Ti1435) in
    (Td1433 + Td1436) in
                          let Tb1438: Bool = let Ti1437: Int = 0 in
  check_all_inside(Ti1437, and_group, q0, q1, q2) in
                            let Ti1439: Int = 0 in
                              if Tb1438 == Ti1439 then
                                let Ti1441: Int = let Ti1440: Int = 1 in
  (iand_ofs + Ti1440) in
                                  shadow_check_and_group(Ti1441, and_group)
                              else
                                1 in
                                                                                                                                                                                      let rec (shadow_check_one_or_group: (Int, [Int]) -> Bool) ((ofs: Int), (or_group: [Int])) = let head: Int = or_group.(ofs) in
  let Ti1392: Int = let Ti1391: Int = 1 in
  -(Ti1391) in
    if head == Ti1392 then
      0
    else
      let and_group: [Int] = let Ta1393: [[Int]] = [and_net] in
  Ta1393.(head) in
        let shadow_p: Bool = let Ti1394: Int = 0 in
  shadow_check_and_group(Ti1394, and_group) in
          let Ti1395: Int = 0 in
            if shadow_p == Ti1395 then
              let Ti1397: Int = let Ti1396: Int = 1 in
  (ofs + Ti1396) in
                shadow_check_one_or_group(Ti1397, or_group)
            else
              1 in
                                                                                                                                                                                        let rec (shadow_check_one_or_matrix: (Int, [[Int]]) -> Bool) ((ofs: Int), (or_matrix: [[Int]])) = let head: [Int] = or_matrix.(ofs) in
  let range_primitive: Int = let Ti1366: Int = 0 in
  head.(Ti1366) in
    let Ti1368: Int = let Ti1367: Int = 1 in
  -(Ti1367) in
      if range_primitive == Ti1368 then
        0
      else
        let Ti1382: Int = let Ti1369: Int = 99 in
  if range_primitive == Ti1369 then
    1
  else
    let t: Int = let Tt1370: ([Float], [[Float]]) = light_dirvec: ([Float], [[Float]]) in
  let Ta1371: [Float] = [intersection_point] in
    solver_fast(range_primitive, Tt1370, Ta1371) in
      let Ti1372: Int = 0 in
        if t == Ti1372 then
          0
        else
          let Tb1377: Bool = let Ti1375: Int = let Ta1373: [Int] = [solver_dist] in
  let Ti1374: Int = 0 in
    Ta1373.(Ti1374) in
  let Td1376: Float = -0.1 in
    fless(Ti1375, Td1376) in
            let Ti1378: Int = 0 in
              if Tb1377 == Ti1378 then
                0
              else
                let Tb1380: Bool = let Ti1379: Int = 1 in
  shadow_check_one_or_group(Ti1379, head) in
                  let Ti1381: Int = 0 in
                    if Tb1380 == Ti1381 then
                      0
                    else
                      1 in
          let Ti1383: Int = 0 in
            if Ti1382 == Ti1383 then
              let Ti1385: Int = let Ti1384: Int = 1 in
  (ofs + Ti1384) in
                shadow_check_one_or_matrix(Ti1385, or_matrix)
            else
              let Tb1387: Bool = let Ti1386: Int = 1 in
  shadow_check_one_or_group(Ti1386, head) in
                let Ti1388: Int = 0 in
                  if Tb1387 == Ti1388 then
                    let Ti1390: Int = let Ti1389: Int = 1 in
  (ofs + Ti1389) in
                      shadow_check_one_or_matrix(Ti1390, or_matrix)
                  else
                    1 in
                                                                                                                                                                                          let rec (solve_each_element: (Int, [Int], [Float]) -> Unit) ((iand_ofs: Int), (and_group: [Int]), (dirvec: [Float])) = let iobj: Int = and_group.(iand_ofs) in
  let Ti1316: Int = let Ti1315: Int = 1 in
  -(Ti1315) in
    if iobj == Ti1316 then
      ()
    else
      let t0: Int = let Ta1317: [Float] = [startp] in
  solver(iobj, dirvec, Ta1317) in
        let Ti1318: Int = 0 in
          if t0 == Ti1318 then
            let Tb1321: Bool = let Tt1320: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1319: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1319.(iobj) in
  o_isinvert(Tt1320) in
              let Ti1322: Int = 0 in
                if Tb1321 == Ti1322 then
                  ()
                else
                  let Ti1324: Int = let Ti1323: Int = 1 in
  (iand_ofs + Ti1323) in
                    solve_each_element(Ti1324, and_group, dirvec)
          else
            let t0p: Float = let Ta1325: [Int] = [solver_dist] in
  let Ti1326: Int = 0 in
    Ta1325.(Ti1326) in
              let Tu109: Unit = let Tb1328: Bool = let Td1327: Float = 0. in
  fless(Td1327, t0p) in
  let Ti1329: Int = 0 in
    if Tb1328 == Ti1329 then
      ()
    else
      let Tb1333: Bool = let Td1332: Float = let Ta1330: [Float] = [tmin] in
  let Ti1331: Int = 0 in
    Ta1330.(Ti1331) in
  fless(t0p, Td1332) in
        let Ti1334: Int = 0 in
          if Tb1333 == Ti1334 then
            ()
          else
            let t: Float = let Td1335: Float = 0.01 in
  (t0p + Td1335) in
              let q0: Float = let Td1338: Float = let Td1337: Float = let Ti1336: Int = 0 in
  dirvec.(Ti1336) in
  (Td1337 * t) in
  let Td1341: Float = let Ta1339: [Float] = [startp] in
  let Ti1340: Int = 0 in
    Ta1339.(Ti1340) in
    (Td1338 + Td1341) in
                let q1: Float = let Td1344: Float = let Td1343: Float = let Ti1342: Int = 1 in
  dirvec.(Ti1342) in
  (Td1343 * t) in
  let Td1347: Float = let Ta1345: [Float] = [startp] in
  let Ti1346: Int = 1 in
    Ta1345.(Ti1346) in
    (Td1344 + Td1347) in
                  let q2: Float = let Td1350: Float = let Td1349: Float = let Ti1348: Int = 2 in
  dirvec.(Ti1348) in
  (Td1349 * t) in
  let Td1353: Float = let Ta1351: [Float] = [startp] in
  let Ti1352: Int = 2 in
    Ta1351.(Ti1352) in
    (Td1350 + Td1353) in
                    let Tb1355: Bool = let Ti1354: Int = 0 in
  check_all_inside(Ti1354, and_group, q0, q1, q2) in
                      let Ti1356: Int = 0 in
                        if Tb1355 == Ti1356 then
                          ()
                        else
                          let Tu108: Unit = let Ta1357: [Float] = [tmin] in
  let Ti1358: Int = 0 in
    Ta1357.(Ti1358) <- t in
                            let Tu107: Unit = let Ta1359: [Float] = [intersection_point] in
  vecset(Ta1359, q0, q1, q2) in
                              let Tu106: Unit = let Ta1360: [Int] = [intersected_object_id] in
  let Ti1361: Int = 0 in
    Ta1360.(Ti1361) <- iobj in
                                let Ta1362: [Int] = [intsec_rectside] in
                                  let Ti1363: Int = 0 in
                                    Ta1362.(Ti1363) <- t0 in
                let Ti1365: Int = let Ti1364: Int = 1 in
  (iand_ofs + Ti1364) in
                  solve_each_element(Ti1365, and_group, dirvec) in
                                                                                                                                                                                            let rec (solve_one_or_network: (Int, [Int], [Float]) -> Unit) ((ofs: Int), (or_group: [Int]), (dirvec: [Float])) = let head: Int = or_group.(ofs) in
  let Ti1310: Int = let Ti1309: Int = 1 in
  -(Ti1309) in
    if head == Ti1310 then
      ()
    else
      let and_group: [Int] = let Ta1311: [[Int]] = [and_net] in
  Ta1311.(head) in
        let Tu110: Unit = let Ti1312: Int = 0 in
  solve_each_element(Ti1312, and_group, dirvec) in
          let Ti1314: Int = let Ti1313: Int = 1 in
  (ofs + Ti1313) in
            solve_one_or_network(Ti1314, or_group, dirvec) in
                                                                                                                                                                                              let rec (trace_or_matrix: (Int, [[Int]], [Float]) -> Unit) ((ofs: Int), (or_network: [[Int]]), (dirvec: [Float])) = let head: [Int] = or_network.(ofs) in
  let range_primitive: Int = let Ti1292: Int = 0 in
  head.(Ti1292) in
    let Ti1294: Int = let Ti1293: Int = 1 in
  -(Ti1293) in
      if range_primitive == Ti1294 then
        ()
      else
        let Tu111: Unit = let Ti1295: Int = 99 in
  if range_primitive == Ti1295 then
    let Ti1296: Int = 1 in
      solve_one_or_network(Ti1296, head, dirvec)
  else
    let t: Int = let Ta1297: [Float] = [startp] in
  solver(range_primitive, dirvec, Ta1297) in
      let Ti1298: Int = 0 in
        if t == Ti1298 then
          ()
        else
          let tp: Int = let Ta1299: [Int] = [solver_dist] in
  let Ti1300: Int = 0 in
    Ta1299.(Ti1300) in
            let Tb1304: Bool = let Td1303: Float = let Ta1301: [Float] = [tmin] in
  let Ti1302: Int = 0 in
    Ta1301.(Ti1302) in
  fless(tp, Td1303) in
              let Ti1305: Int = 0 in
                if Tb1304 == Ti1305 then
                  ()
                else
                  let Ti1306: Int = 1 in
                    solve_one_or_network(Ti1306, head, dirvec) in
          let Ti1308: Int = let Ti1307: Int = 1 in
  (ofs + Ti1307) in
            trace_or_matrix(Ti1308, or_network, dirvec) in
                                                                                                                                                                                                let rec (judge_intersection: ([Float]) -> Bool) ((dirvec: [Float])) = let Tu113: Unit = let Ta1279: [Float] = [tmin] in
  let Ti1280: Int = 0 in
    let Td1281: Float = 1000000000. in
      Ta1279.(Ti1280) <- Td1281 in
  let Tu112: Unit = let Ti1282: Int = 0 in
  let Ta1285: [[Int]] = let Ta1283: [[[Int]]] = [or_net] in
  let Ti1284: Int = 0 in
    Ta1283.(Ti1284) in
    trace_or_matrix(Ti1282, Ta1285, dirvec) in
    let t: Int = let Ta1286: [Float] = [tmin] in
  let Ti1287: Int = 0 in
    Ta1286.(Ti1287) in
      let Tb1289: Bool = let Td1288: Float = -0.1 in
  fless(Td1288, t) in
        let Ti1290: Int = 0 in
          if Tb1289 == Ti1290 then
            0
          else
            let Td1291: Float = 100000000. in
              fless(t, Td1291) in
                                                                                                                                                                                                  let rec (solve_each_element_fast: (Int, [Int], ([Float], [[Float]])) -> Unit) ((iand_ofs: Int), (and_group: [Int]), (dirvec: ([Float], [[Float]]))) = let vec: [Float] = d_vec(dirvec) in
  let iobj: Int = and_group.(iand_ofs) in
    let Ti1230: Int = let Ti1229: Int = 1 in
  -(Ti1229) in
      if iobj == Ti1230 then
        ()
      else
        let t0: Int = solver_fast2(iobj, dirvec) in
          let Ti1231: Int = 0 in
            if t0 == Ti1231 then
              let Tb1234: Bool = let Tt1233: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1232: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1232.(iobj) in
  o_isinvert(Tt1233) in
                let Ti1235: Int = 0 in
                  if Tb1234 == Ti1235 then
                    ()
                  else
                    let Ti1237: Int = let Ti1236: Int = 1 in
  (iand_ofs + Ti1236) in
                      solve_each_element_fast(Ti1237, and_group, dirvec)
            else
              let t0p: Float = let Ta1238: [Int] = [solver_dist] in
  let Ti1239: Int = 0 in
    Ta1238.(Ti1239) in
                let Tu117: Unit = let Tb1241: Bool = let Td1240: Float = 0. in
  fless(Td1240, t0p) in
  let Ti1242: Int = 0 in
    if Tb1241 == Ti1242 then
      ()
    else
      let Tb1246: Bool = let Td1245: Float = let Ta1243: [Float] = [tmin] in
  let Ti1244: Int = 0 in
    Ta1243.(Ti1244) in
  fless(t0p, Td1245) in
        let Ti1247: Int = 0 in
          if Tb1246 == Ti1247 then
            ()
          else
            let t: Float = let Td1248: Float = 0.01 in
  (t0p + Td1248) in
              let q0: Float = let Td1251: Float = let Td1250: Float = let Ti1249: Int = 0 in
  vec.(Ti1249) in
  (Td1250 * t) in
  let Td1254: Float = let Ta1252: [Float] = [startp_fast] in
  let Ti1253: Int = 0 in
    Ta1252.(Ti1253) in
    (Td1251 + Td1254) in
                let q1: Float = let Td1257: Float = let Td1256: Float = let Ti1255: Int = 1 in
  vec.(Ti1255) in
  (Td1256 * t) in
  let Td1260: Float = let Ta1258: [Float] = [startp_fast] in
  let Ti1259: Int = 1 in
    Ta1258.(Ti1259) in
    (Td1257 + Td1260) in
                  let q2: Float = let Td1263: Float = let Td1262: Float = let Ti1261: Int = 2 in
  vec.(Ti1261) in
  (Td1262 * t) in
  let Td1266: Float = let Ta1264: [Float] = [startp_fast] in
  let Ti1265: Int = 2 in
    Ta1264.(Ti1265) in
    (Td1263 + Td1266) in
                    let Tb1268: Bool = let Ti1267: Int = 0 in
  check_all_inside(Ti1267, and_group, q0, q1, q2) in
                      let Ti1269: Int = 0 in
                        if Tb1268 == Ti1269 then
                          ()
                        else
                          let Tu116: Unit = let Ta1270: [Float] = [tmin] in
  let Ti1271: Int = 0 in
    Ta1270.(Ti1271) <- t in
                            let Tu115: Unit = let Ta1272: [Float] = [intersection_point] in
  vecset(Ta1272, q0, q1, q2) in
                              let Tu114: Unit = let Ta1273: [Int] = [intersected_object_id] in
  let Ti1274: Int = 0 in
    Ta1273.(Ti1274) <- iobj in
                                let Ta1275: [Int] = [intsec_rectside] in
                                  let Ti1276: Int = 0 in
                                    Ta1275.(Ti1276) <- t0 in
                  let Ti1278: Int = let Ti1277: Int = 1 in
  (iand_ofs + Ti1277) in
                    solve_each_element_fast(Ti1278, and_group, dirvec) in
                                                                                                                                                                                                    let rec (solve_one_or_network_fast: (Int, [Int], ([Float], [[Float]])) -> Unit) ((ofs: Int), (or_group: [Int]), (dirvec: ([Float], [[Float]]))) = let head: Int = or_group.(ofs) in
  let Ti1224: Int = let Ti1223: Int = 1 in
  -(Ti1223) in
    if head == Ti1224 then
      ()
    else
      let and_group: [Int] = let Ta1225: [[Int]] = [and_net] in
  Ta1225.(head) in
        let Tu118: Unit = let Ti1226: Int = 0 in
  solve_each_element_fast(Ti1226, and_group, dirvec) in
          let Ti1228: Int = let Ti1227: Int = 1 in
  (ofs + Ti1227) in
            solve_one_or_network_fast(Ti1228, or_group, dirvec) in
                                                                                                                                                                                                      let rec (trace_or_matrix_fast: (Int, [[Int]], ([Float], [[Float]])) -> Unit) ((ofs: Int), (or_network: [[Int]]), (dirvec: ([Float], [[Float]]))) = let head: [Int] = or_network.(ofs) in
  let range_primitive: Int = let Ti1207: Int = 0 in
  head.(Ti1207) in
    let Ti1209: Int = let Ti1208: Int = 1 in
  -(Ti1208) in
      if range_primitive == Ti1209 then
        ()
      else
        let Tu119: Unit = let Ti1210: Int = 99 in
  if range_primitive == Ti1210 then
    let Ti1211: Int = 1 in
      solve_one_or_network_fast(Ti1211, head, dirvec)
  else
    let t: Int = solver_fast2(range_primitive, dirvec) in
      let Ti1212: Int = 0 in
        if t == Ti1212 then
          ()
        else
          let tp: Int = let Ta1213: [Int] = [solver_dist] in
  let Ti1214: Int = 0 in
    Ta1213.(Ti1214) in
            let Tb1218: Bool = let Td1217: Float = let Ta1215: [Float] = [tmin] in
  let Ti1216: Int = 0 in
    Ta1215.(Ti1216) in
  fless(tp, Td1217) in
              let Ti1219: Int = 0 in
                if Tb1218 == Ti1219 then
                  ()
                else
                  let Ti1220: Int = 1 in
                    solve_one_or_network_fast(Ti1220, head, dirvec) in
          let Ti1222: Int = let Ti1221: Int = 1 in
  (ofs + Ti1221) in
            trace_or_matrix_fast(Ti1222, or_network, dirvec) in
                                                                                                                                                                                                        let rec (judge_intersection_fast: (([Float], [[Float]])) -> Bool) ((dirvec: ([Float], [[Float]]))) = let Tu121: Unit = let Ta1194: [Float] = [tmin] in
  let Ti1195: Int = 0 in
    let Td1196: Float = 1000000000. in
      Ta1194.(Ti1195) <- Td1196 in
  let Tu120: Unit = let Ti1197: Int = 0 in
  let Ta1200: [[Int]] = let Ta1198: [[[Int]]] = [or_net] in
  let Ti1199: Int = 0 in
    Ta1198.(Ti1199) in
    trace_or_matrix_fast(Ti1197, Ta1200, dirvec) in
    let t: Int = let Ta1201: [Float] = [tmin] in
  let Ti1202: Int = 0 in
    Ta1201.(Ti1202) in
      let Tb1204: Bool = let Td1203: Float = -0.1 in
  fless(Td1203, t) in
        let Ti1205: Int = 0 in
          if Tb1204 == Ti1205 then
            0
          else
            let Td1206: Float = 100000000. in
              fless(t, Td1206) in
                                                                                                                                                                                                          let rec (get_nvector_rect: ([Float]) -> Unit) ((dirvec: [Float])) = let rectside: Int = let Ta1183: [Int] = [intsec_rectside] in
  let Ti1184: Int = 0 in
    Ta1183.(Ti1184) in
  let Tu122: Unit = let Ta1185: [Float] = [nvector] in
  vecbzero(Ta1185) in
    let Ta1186: [Float] = [nvector] in
      let Ti1188: Int = let Ti1187: Int = 1 in
  (rectside - Ti1187) in
        let Td1193: Float = let Td1192: Float = let Td1191: Float = let Ti1190: Int = let Ti1189: Int = 1 in
  (rectside - Ti1189) in
  dirvec.(Ti1190) in
  sgn(Td1191) in
  fneg(Td1192) in
          Ta1186.(Ti1188) <- Td1193 in
                                                                                                                                                                                                            let rec (get_nvector_plane: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Unit) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let Tu124: Unit = let Ta1171: [Float] = [nvector] in
  let Ti1172: Int = 0 in
    let Td1174: Float = let Td1173: Float = o_param_a(m) in
  fneg(Td1173) in
      Ta1171.(Ti1172) <- Td1174 in
  let Tu123: Unit = let Ta1175: [Float] = [nvector] in
  let Ti1176: Int = 1 in
    let Td1178: Float = let Td1177: Float = o_param_b(m) in
  fneg(Td1177) in
      Ta1175.(Ti1176) <- Td1178 in
    let Ta1179: [Float] = [nvector] in
      let Ti1180: Int = 2 in
        let Td1182: Float = let Td1181: Float = o_param_c(m) in
  fneg(Td1181) in
          Ta1179.(Ti1180) <- Td1182 in
                                                                                                                                                                                                              let rec (get_nvector_second: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Unit) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let p0: Float = let Td1121: Float = let Ta1119: [Float] = [intersection_point] in
  let Ti1120: Int = 0 in
    Ta1119.(Ti1120) in
  let Td1122: Float = o_param_x(m) in
    (Td1121 - Td1122) in
  let p1: Float = let Td1125: Float = let Ta1123: [Float] = [intersection_point] in
  let Ti1124: Int = 1 in
    Ta1123.(Ti1124) in
  let Td1126: Float = o_param_y(m) in
    (Td1125 - Td1126) in
    let p2: Float = let Td1129: Float = let Ta1127: [Float] = [intersection_point] in
  let Ti1128: Int = 2 in
    Ta1127.(Ti1128) in
  let Td1130: Float = o_param_z(m) in
    (Td1129 - Td1130) in
      let d0: Float = let Td1131: Float = o_param_a(m) in
  (p0 * Td1131) in
        let d1: Float = let Td1132: Float = o_param_b(m) in
  (p1 * Td1132) in
          let d2: Float = let Td1133: Float = o_param_c(m) in
  (p2 * Td1133) in
            let Tu129: Unit = let Ti1134: Int = o_isrot(m) in
  let Ti1135: Int = 0 in
    if Ti1134 == Ti1135 then
      let Tu126: Unit = let Ta1136: [Float] = [nvector] in
  let Ti1137: Int = 0 in
    Ta1136.(Ti1137) <- d0 in
        let Tu125: Unit = let Ta1138: [Float] = [nvector] in
  let Ti1139: Int = 1 in
    Ta1138.(Ti1139) <- d1 in
          let Ta1140: [Float] = [nvector] in
            let Ti1141: Int = 2 in
              Ta1140.(Ti1141) <- d2
    else
      let Tu128: Unit = let Ta1142: [Float] = [nvector] in
  let Ti1143: Int = 0 in
    let Td1150: Float = let Td1149: Float = let Td1148: Float = let Td1145: Float = let Td1144: Float = o_param_r3(m) in
  (p1 * Td1144) in
  let Td1147: Float = let Td1146: Float = o_param_r2(m) in
  (p2 * Td1146) in
    (Td1145 + Td1147) in
  fhalf(Td1148) in
  (d0 + Td1149) in
      Ta1142.(Ti1143) <- Td1150 in
        let Tu127: Unit = let Ta1151: [Float] = [nvector] in
  let Ti1152: Int = 1 in
    let Td1159: Float = let Td1158: Float = let Td1157: Float = let Td1154: Float = let Td1153: Float = o_param_r3(m) in
  (p0 * Td1153) in
  let Td1156: Float = let Td1155: Float = o_param_r1(m) in
  (p2 * Td1155) in
    (Td1154 + Td1156) in
  fhalf(Td1157) in
  (d1 + Td1158) in
      Ta1151.(Ti1152) <- Td1159 in
          let Ta1160: [Float] = [nvector] in
            let Ti1161: Int = 2 in
              let Td1168: Float = let Td1167: Float = let Td1166: Float = let Td1163: Float = let Td1162: Float = o_param_r2(m) in
  (p0 * Td1162) in
  let Td1165: Float = let Td1164: Float = o_param_r1(m) in
  (p1 * Td1164) in
    (Td1163 + Td1165) in
  fhalf(Td1166) in
  (d2 + Td1167) in
                Ta1160.(Ti1161) <- Td1168 in
              let Ta1169: [Float] = [nvector] in
                let Tb1170: Bool = o_isinvert(m) in
                  vecunit_sgn(Ta1169, Tb1170) in
                                                                                                                                                                                                                let rec (get_nvector: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float]) -> Unit) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec: [Float])) = let m_shape: Int = o_form(m) in
  let Ti1117: Int = 1 in
    if m_shape == Ti1117 then
      get_nvector_rect(dirvec)
    else
      let Ti1118: Int = 2 in
        if m_shape == Ti1118 then
          get_nvector_plane(m)
        else
          get_nvector_second(m) in
                                                                                                                                                                                                                  let rec (utexture: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float]) -> Unit) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (p: [Float])) = let m_tex: Int = o_texturetype(m) in
  let Tu134: Unit = let Ta984: [Float] = [texture_color] in
  let Ti985: Int = 0 in
    let Ti986: Int = o_color_red(m) in
      Ta984.(Ti985) <- Ti986 in
    let Tu133: Unit = let Ta987: [Float] = [texture_color] in
  let Ti988: Int = 1 in
    let Ti989: Int = o_color_green(m) in
      Ta987.(Ti988) <- Ti989 in
      let Tu132: Unit = let Ta990: [Float] = [texture_color] in
  let Ti991: Int = 2 in
    let Ti992: Int = o_color_blue(m) in
      Ta990.(Ti991) <- Ti992 in
        let Ti993: Int = 1 in
          if m_tex == Ti993 then
            let w1: Float = let Td995: Float = let Ti994: Int = 0 in
  p.(Ti994) in
  let Td996: Float = o_param_x(m) in
    (Td995 - Td996) in
              let flag1: Bool = let d1: Float = let Td999: Float = let Td998: Float = let Td997: Float = 0.05 in
  (w1 * Td997) in
  floor(Td998) in
  let Td1000: Float = 20. in
    (Td999 * Td1000) in
  let Td1001: Float = (w1 - d1) in
    let Td1002: Float = 10. in
      fless(Td1001, Td1002) in
                let w3: Float = let Td1004: Float = let Ti1003: Int = 2 in
  p.(Ti1003) in
  let Td1005: Float = o_param_z(m) in
    (Td1004 - Td1005) in
                  let flag2: Bool = let d2: Float = let Td1008: Float = let Td1007: Float = let Td1006: Float = 0.05 in
  (w3 * Td1006) in
  floor(Td1007) in
  let Td1009: Float = 20. in
    (Td1008 * Td1009) in
  let Td1010: Float = (w3 - d2) in
    let Td1011: Float = 10. in
      fless(Td1010, Td1011) in
                    let Ta1012: [Float] = [texture_color] in
                      let Ti1013: Int = 1 in
                        let Td1017: Float = let Ti1014: Int = 0 in
  if flag1 == Ti1014 then
    let Ti1015: Int = 0 in
      if flag2 == Ti1015 then
        255.
      else
        0.
  else
    let Ti1016: Int = 0 in
      if flag2 == Ti1016 then
        0.
      else
        255. in
                          Ta1012.(Ti1013) <- Td1017
          else
            let Ti1018: Int = 2 in
              if m_tex == Ti1018 then
                let w2: Float = let Td1023: Float = let Td1022: Float = let Td1020: Float = let Ti1019: Int = 1 in
  p.(Ti1019) in
  let Td1021: Float = 0.25 in
    (Td1020 * Td1021) in
  sin(Td1022) in
  fsqr(Td1023) in
                  let Tu130: Unit = let Ta1024: [Float] = [texture_color] in
  let Ti1025: Int = 0 in
    let Td1027: Float = let Td1026: Float = 255. in
  (Td1026 * w2) in
      Ta1024.(Ti1025) <- Td1027 in
                    let Ta1028: [Float] = [texture_color] in
                      let Ti1029: Int = 1 in
                        let Td1033: Float = let Td1030: Float = 255. in
  let Td1032: Float = let Td1031: Float = 1. in
  (Td1031 - w2) in
    (Td1030 * Td1032) in
                          Ta1028.(Ti1029) <- Td1033
              else
                let Ti1034: Int = 3 in
                  if m_tex == Ti1034 then
                    let w1: Float = let Td1036: Float = let Ti1035: Int = 0 in
  p.(Ti1035) in
  let Td1037: Float = o_param_x(m) in
    (Td1036 - Td1037) in
                      let w3: Float = let Td1039: Float = let Ti1038: Int = 2 in
  p.(Ti1038) in
  let Td1040: Float = o_param_z(m) in
    (Td1039 - Td1040) in
                        let w2: Float = let Td1044: Float = let Td1043: Float = let Td1041: Float = fsqr(w1) in
  let Td1042: Float = fsqr(w3) in
    (Td1041 + Td1042) in
  sqrt(Td1043) in
  let Td1045: Float = 10. in
    (Td1044 / Td1045) in
                          let w4: Float = let Td1047: Float = let Td1046: Float = floor(w2) in
  (w2 - Td1046) in
  let Td1048: Float = 3.1415927 in
    (Td1047 * Td1048) in
                            let cws: Float = let Td1049: Float = cos(w4) in
  fsqr(Td1049) in
                              let Tu131: Unit = let Ta1050: [Float] = [texture_color] in
  let Ti1051: Int = 1 in
    let Td1053: Float = let Td1052: Float = 255. in
  (cws * Td1052) in
      Ta1050.(Ti1051) <- Td1053 in
                                let Ta1054: [Float] = [texture_color] in
                                  let Ti1055: Int = 2 in
                                    let Td1059: Float = let Td1057: Float = let Td1056: Float = 1. in
  (Td1056 - cws) in
  let Td1058: Float = 255. in
    (Td1057 * Td1058) in
                                      Ta1054.(Ti1055) <- Td1059
                  else
                    let Ti1060: Int = 4 in
                      if m_tex == Ti1060 then
                        let w1: Float = let Td1064: Float = let Td1062: Float = let Ti1061: Int = 0 in
  p.(Ti1061) in
  let Td1063: Float = o_param_x(m) in
    (Td1062 - Td1063) in
  let Td1066: Float = let Td1065: Float = o_param_a(m) in
  sqrt(Td1065) in
    (Td1064 * Td1066) in
                          let w3: Float = let Td1070: Float = let Td1068: Float = let Ti1067: Int = 2 in
  p.(Ti1067) in
  let Td1069: Float = o_param_z(m) in
    (Td1068 - Td1069) in
  let Td1072: Float = let Td1071: Float = o_param_c(m) in
  sqrt(Td1071) in
    (Td1070 * Td1072) in
                            let w4: Float = let Td1073: Float = fsqr(w1) in
  let Td1074: Float = fsqr(w3) in
    (Td1073 + Td1074) in
                              let w7: Float = let Tb1077: Bool = let Ti1075: Int = fabs(w1) in
  let Td1076: Float = 0.0001 in
    fless(Ti1075, Td1076) in
  let Ti1078: Int = 0 in
    if Tb1077 == Ti1078 then
      let w5: Int = let Td1079: Float = (w3 / w1) in
  fabs(Td1079) in
        let Td1082: Float = let Td1080: Float = atan(w5) in
  let Td1081: Float = 30. in
    (Td1080 * Td1081) in
          let Td1083: Float = 3.1415927 in
            (Td1082 / Td1083)
    else
      15. in
                                let w9: Float = let Td1084: Float = floor(w7) in
  (w7 - Td1084) in
                                  let w2: Float = let Td1088: Float = let Td1086: Float = let Ti1085: Int = 1 in
  p.(Ti1085) in
  let Td1087: Float = o_param_y(m) in
    (Td1086 - Td1087) in
  let Td1090: Float = let Td1089: Float = o_param_b(m) in
  sqrt(Td1089) in
    (Td1088 * Td1090) in
                                    let w8: Float = let Tb1093: Bool = let Ti1091: Int = fabs(w4) in
  let Td1092: Float = 0.0001 in
    fless(Ti1091, Td1092) in
  let Ti1094: Int = 0 in
    if Tb1093 == Ti1094 then
      let w6: Int = let Td1095: Float = (w2 / w4) in
  fabs(Td1095) in
        let Td1098: Float = let Td1096: Float = atan(w6) in
  let Td1097: Float = 30. in
    (Td1096 * Td1097) in
          let Td1099: Float = 3.1415927 in
            (Td1098 / Td1099)
    else
      15. in
                                      let w10: Float = let Td1100: Float = floor(w8) in
  (w8 - Td1100) in
                                        let w11: Float = let Td1105: Float = let Td1101: Float = 0.15 in
  let Td1104: Float = let Td1103: Float = let Td1102: Float = 0.5 in
  (Td1102 - w9) in
  fsqr(Td1103) in
    (Td1101 - Td1104) in
  let Td1108: Float = let Td1107: Float = let Td1106: Float = 0.5 in
  (Td1106 - w10) in
  fsqr(Td1107) in
    (Td1105 - Td1108) in
                                          let w12: Float = let Tb1109: Bool = fisneg(w11) in
  let Ti1110: Int = 0 in
    if Tb1109 == Ti1110 then
      w11
    else
      0. in
                                            let Ta1111: [Float] = [texture_color] in
                                              let Ti1112: Int = 2 in
                                                let Td1116: Float = let Td1114: Float = let Td1113: Float = 255. in
  (Td1113 * w12) in
  let Td1115: Float = 0.3 in
    (Td1114 / Td1115) in
                                                  Ta1111.(Ti1112) <- Td1116
                      else
                        () in
                                                                                                                                                                                                                    let rec (add_light: (Float, Float, Float) -> Unit) ((bright: Float), (hilight: Float), (hilight_scale: Float)) = let Tu137: Unit = let Tb958: Bool = fispos(bright) in
  let Ti959: Int = 0 in
    if Tb958 == Ti959 then
      ()
    else
      let Ta960: [Float] = [rgb] in
        let Ta961: [Float] = [texture_color] in
          vecaccum(Ta960, bright, Ta961) in
  let Tb962: Bool = fispos(hilight) in
    let Ti963: Int = 0 in
      if Tb962 == Ti963 then
        ()
      else
        let ihl: Float = let Td965: Float = let Td964: Float = fsqr(hilight) in
  fsqr(Td964) in
  (Td965 * hilight_scale) in
          let Tu136: Unit = let Ta966: [Float] = [rgb] in
  let Ti967: Int = 0 in
    let Td971: Float = let Td970: Float = let Ta968: [Float] = [rgb] in
  let Ti969: Int = 0 in
    Ta968.(Ti969) in
  (Td970 + ihl) in
      Ta966.(Ti967) <- Td971 in
            let Tu135: Unit = let Ta972: [Float] = [rgb] in
  let Ti973: Int = 1 in
    let Td977: Float = let Td976: Float = let Ta974: [Float] = [rgb] in
  let Ti975: Int = 1 in
    Ta974.(Ti975) in
  (Td976 + ihl) in
      Ta972.(Ti973) <- Td977 in
              let Ta978: [Float] = [rgb] in
                let Ti979: Int = 2 in
                  let Td983: Float = let Td982: Float = let Ta980: [Float] = [rgb] in
  let Ti981: Int = 2 in
    Ta980.(Ti981) in
  (Td982 + ihl) in
                    Ta978.(Ti979) <- Td983 in
                                                                                                                                                                                                                      let rec (trace_reflections: (Int, Float, Float, [Float]) -> Unit) ((index: Int), (diffuse: Float), (hilight_scale: Float), (dirvec: [Float])) = let Ti932: Int = 0 in
  if Ti932 <= index then
    let rinfo: (Int, ([Float], [[Float]]), Float) = let Ta933: [(Int, ([Float], [[Float]]), Float)] = [reflections] in
  Ta933.(index) in
      let dvec: ([Float], [[Float]]) = r_dvec(rinfo) in
        let Tu138: Unit = let Tb934: Bool = judge_intersection_fast(dvec) in
  let Ti935: Int = 0 in
    if Tb934 == Ti935 then
      ()
    else
      let surface_id: Int = let Ti940: Int = let Ti938: Int = let Ta936: [Int] = [intersected_object_id] in
  let Ti937: Int = 0 in
    Ta936.(Ti937) in
  let Ti939: Int = 4 in
    (Ti938 * Ti939) in
  let Ti943: Int = let Ta941: [Int] = [intsec_rectside] in
  let Ti942: Int = 0 in
    Ta941.(Ti942) in
    (Ti940 + Ti943) in
        let Ti944: Int = r_surface_id(rinfo) in
          if surface_id == Ti944 then
            let Tb949: Bool = let Ti945: Int = 0 in
  let Ta948: [[Int]] = let Ta946: [[[Int]]] = [or_net] in
  let Ti947: Int = 0 in
    Ta946.(Ti947) in
    shadow_check_one_or_matrix(Ti945, Ta948) in
              let Ti950: Int = 0 in
                if Tb949 == Ti950 then
                  let p: Float = let Ta951: [Float] = [nvector] in
  let Ta952: [Float] = d_vec(dvec) in
    veciprod(Ta951, Ta952) in
                    let scale: Float = r_bright(rinfo) in
                      let bright: Float = let Td953: Float = (scale * diffuse) in
  (Td953 * p) in
                        let hilight: Float = let Td955: Float = let Ta954: [Float] = d_vec(dvec) in
  veciprod(dirvec, Ta954) in
  (scale * Td955) in
                          add_light(bright, hilight, hilight_scale)
                else
                  ()
          else
            () in
          let Ti957: Int = let Ti956: Int = 1 in
  (index - Ti956) in
            trace_reflections(Ti957, diffuse, hilight_scale, dirvec)
  else
    () in
                                                                                                                                                                                                                        let rec (trace_ray: (Int, Float, [Float], ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Float) -> Unit) ((nref: Int), (energy: Float), (dirvec: [Float]), (pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (dist: Float)) = let Ti827: Int = 4 in
  if nref <= Ti827 then
    let surface_ids: [Int] = p_surface_ids(pixel) in
      let Tb828: Bool = judge_intersection(dirvec) in
        let Ti829: Int = 0 in
          if Tb828 == Ti829 then
            let Tu155: Unit = let Ti831: Int = let Ti830: Int = 1 in
  -(Ti830) in
  surface_ids.(nref) <- Ti831 in
              let Ti832: Int = 0 in
                if nref == Ti832 then
                  ()
                else
                  let hl: Float = let Td834: Float = let Ta833: [Float] = [light] in
  veciprod(dirvec, Ta833) in
  fneg(Td834) in
                    let Tb835: Bool = fispos(hl) in
                      let Ti836: Int = 0 in
                        if Tb835 == Ti836 then
                          ()
                        else
                          let ihl: Float = let Td839: Float = let Td838: Float = let Td837: Float = fsqr(hl) in
  (Td837 * hl) in
  (Td838 * energy) in
  let Td842: Float = let Ta840: [Float] = [beam] in
  let Ti841: Int = 0 in
    Ta840.(Ti841) in
    (Td839 * Td842) in
                            let Tu154: Unit = let Ta843: [Float] = [rgb] in
  let Ti844: Int = 0 in
    let Td848: Float = let Td847: Float = let Ta845: [Float] = [rgb] in
  let Ti846: Int = 0 in
    Ta845.(Ti846) in
  (Td847 + ihl) in
      Ta843.(Ti844) <- Td848 in
                              let Tu153: Unit = let Ta849: [Float] = [rgb] in
  let Ti850: Int = 1 in
    let Td854: Float = let Td853: Float = let Ta851: [Float] = [rgb] in
  let Ti852: Int = 1 in
    Ta851.(Ti852) in
  (Td853 + ihl) in
      Ta849.(Ti850) <- Td854 in
                                let Ta855: [Float] = [rgb] in
                                  let Ti856: Int = 2 in
                                    let Td860: Float = let Td859: Float = let Ta857: [Float] = [rgb] in
  let Ti858: Int = 2 in
    Ta857.(Ti858) in
  (Td859 + ihl) in
                                      Ta855.(Ti856) <- Td860
          else
            let obj_id: Int = let Ta861: [Int] = [intersected_object_id] in
  let Ti862: Int = 0 in
    Ta861.(Ti862) in
              let obj: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta863: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta863.(obj_id) in
                let m_surface: Int = o_reflectiontype(obj) in
                  let diffuse: Float = let Td864: Float = o_diffuse(obj) in
  (Td864 * energy) in
                    let Tu152: Unit = get_nvector(obj, dirvec) in
                      let Tu151: Unit = let Ta865: [Float] = [startp] in
  let Ta866: [Float] = [intersection_point] in
    veccpy(Ta865, Ta866) in
                        let Tu150: Unit = let Ta867: [Float] = [intersection_point] in
  utexture(obj, Ta867) in
                          let Tu149: Unit = let Ti873: Int = let Ti869: Int = let Ti868: Int = 4 in
  (obj_id * Ti868) in
  let Ti872: Int = let Ta870: [Int] = [intsec_rectside] in
  let Ti871: Int = 0 in
    Ta870.(Ti871) in
    (Ti869 + Ti872) in
  surface_ids.(nref) <- Ti873 in
                            let intersection_points: [[Float]] = p_intersection_points(pixel) in
                              let Tu148: Unit = let Ta874: [Float] = intersection_points.(nref) in
  let Ta875: [Float] = [intersection_point] in
    veccpy(Ta874, Ta875) in
                                let calc_diffuse: [Bool] = p_calc_diffuse(pixel) in
                                  let Tu147: Unit = let Tb878: Bool = let Td876: Float = o_diffuse(obj) in
  let Td877: Float = 0.5 in
    fless(Td876, Td877) in
  let Ti879: Int = 0 in
    if Tb878 == Ti879 then
      let Tu141: Unit = let Ti880: Int = 1 in
  calc_diffuse.(nref) <- Ti880 in
        let energya: [[Float]] = p_energy(pixel) in
          let Tu140: Unit = let Ta881: [Float] = energya.(nref) in
  let Ta882: [Float] = [texture_color] in
    veccpy(Ta881, Ta882) in
            let Tu139: Unit = let Ta883: [Float] = energya.(nref) in
  let Td887: Float = let Td886: Float = let Td884: Float = 1. in
  let Td885: Float = 256. in
    (Td884 / Td885) in
  (Td886 * diffuse) in
    vecscale(Ta883, Td887) in
              let nvectors: [[Float]] = p_nvectors(pixel) in
                let Ta888: [Float] = nvectors.(nref) in
                  let Ta889: [Float] = [nvector] in
                    veccpy(Ta888, Ta889)
    else
      let Ti890: Int = 0 in
        calc_diffuse.(nref) <- Ti890 in
                                    let w: Float = let Td891: Float = -2. in
  let Td893: Float = let Ta892: [Float] = [nvector] in
  veciprod(dirvec, Ta892) in
    (Td891 * Td893) in
                                      let Tu146: Unit = let Ta894: [Float] = [nvector] in
  vecaccum(dirvec, w, Ta894) in
                                        let hilight_scale: Float = let Td895: Float = o_hilight(obj) in
  (energy * Td895) in
                                          let Tu145: Unit = let Tb900: Bool = let Ti896: Int = 0 in
  let Ta899: [[Int]] = let Ta897: [[[Int]]] = [or_net] in
  let Ti898: Int = 0 in
    Ta897.(Ti898) in
    shadow_check_one_or_matrix(Ti896, Ta899) in
  let Ti901: Int = 0 in
    if Tb900 == Ti901 then
      let bright: Float = let Td905: Float = let Td904: Float = let Ta902: [Float] = [nvector] in
  let Ta903: [Float] = [light] in
    veciprod(Ta902, Ta903) in
  fneg(Td904) in
  (Td905 * diffuse) in
        let hilight: Float = let Td907: Float = let Ta906: [Float] = [light] in
  veciprod(dirvec, Ta906) in
  fneg(Td907) in
          add_light(bright, hilight, hilight_scale)
    else
      () in
                                            let Tu144: Unit = let Ta908: [Float] = [intersection_point] in
  setup_startp(Ta908) in
                                              let Tu143: Unit = let Ti913: Int = let Ti911: Int = let Ta909: [Int] = [n_reflections] in
  let Ti910: Int = 0 in
    Ta909.(Ti910) in
  let Ti912: Int = 1 in
    (Ti911 - Ti912) in
  trace_reflections(Ti913, diffuse, hilight_scale, dirvec) in
                                                let Tb915: Bool = let Td914: Float = 0.1 in
  fless(Td914, energy) in
                                                  let Ti916: Int = 0 in
                                                    if Tb915 == Ti916 then
                                                      ()
                                                    else
                                                      let Tu142: Unit = let Ti917: Int = 4 in
  if Ti917 <= nref then
    ()
  else
    let Ti919: Int = let Ti918: Int = 1 in
  (nref + Ti918) in
      let Ti921: Int = let Ti920: Int = 1 in
  -(Ti920) in
        surface_ids.(Ti919) <- Ti921 in
                                                        let Ti922: Int = 2 in
                                                          if m_surface == Ti922 then
                                                            let energy2: Float = let Td925: Float = let Td923: Float = 1. in
  let Td924: Float = o_diffuse(obj) in
    (Td923 - Td924) in
  (energy * Td925) in
                                                              let Ti927: Int = let Ti926: Int = 1 in
  (nref + Ti926) in
                                                                let Td931: Float = let Td930: Float = let Ta928: [Float] = [tmin] in
  let Ti929: Int = 0 in
    Ta928.(Ti929) in
  (dist + Td930) in
                                                                  trace_ray(Ti927, energy2, dirvec, pixel, Td931)
                                                          else
                                                            ()
  else
    () in
                                                                                                                                                                                                                          let rec (trace_diffuse_ray: (([Float], [[Float]]), Float) -> Unit) ((dirvec: ([Float], [[Float]])), (energy: Float)) = let Tb803: Bool = judge_intersection_fast(dirvec) in
  let Ti804: Int = 0 in
    if Tb803 == Ti804 then
      ()
    else
      let obj: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta805: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  let Ti808: Int = let Ta806: [Int] = [intersected_object_id] in
  let Ti807: Int = 0 in
    Ta806.(Ti807) in
    Ta805.(Ti808) in
        let Tu157: Unit = let Ta809: [Float] = d_vec(dirvec) in
  get_nvector(obj, Ta809) in
          let Tu156: Unit = let Ta810: [Float] = [intersection_point] in
  utexture(obj, Ta810) in
            let Tb815: Bool = let Ti811: Int = 0 in
  let Ta814: [[Int]] = let Ta812: [[[Int]]] = [or_net] in
  let Ti813: Int = 0 in
    Ta812.(Ti813) in
    shadow_check_one_or_matrix(Ti811, Ta814) in
              let Ti816: Int = 0 in
                if Tb815 == Ti816 then
                  let br: Float = let Td819: Float = let Ta817: [Float] = [nvector] in
  let Ta818: [Float] = [light] in
    veciprod(Ta817, Ta818) in
  fneg(Td819) in
                    let bright: Float = let Tb820: Bool = fispos(br) in
  let Ti821: Int = 0 in
    if Tb820 == Ti821 then
      0.
    else
      br in
                      let Ta822: [Float] = [diffuse_ray] in
                        let Td825: Float = let Td823: Float = (energy * bright) in
  let Td824: Float = o_diffuse(obj) in
    (Td823 * Td824) in
                          let Ta826: [Float] = [texture_color] in
                            vecaccum(Ta822, Td825, Ta826)
                else
                  () in
                                                                                                                                                                                                                            let rec (iter_trace_diffuse_rays: ([([Float], [[Float]])], [Float], [Float], Int) -> Unit) ((dirvec_group: [([Float], [[Float]])]), (nvector: [Float]), (org: [Float]), (index: Int)) = let Ti788: Int = 0 in
  if Ti788 <= index then
    let p: Float = let Ta790: [Float] = let Tt789: ([Float], [[Float]]) = dirvec_group.(index) in
  d_vec(Tt789) in
  veciprod(Ta790, nvector) in
      let Tu158: Unit = let Tb791: Bool = fisneg(p) in
  let Ti792: Int = 0 in
    if Tb791 == Ti792 then
      let Tt793: ([Float], [[Float]]) = dirvec_group.(index) in
        let Td795: Float = let Td794: Float = 150. in
  (p / Td794) in
          trace_diffuse_ray(Tt793, Td795)
    else
      let Tt798: ([Float], [[Float]]) = let Ti797: Int = let Ti796: Int = 1 in
  (index + Ti796) in
  dirvec_group.(Ti797) in
        let Td800: Float = let Td799: Float = -150. in
  (p / Td799) in
          trace_diffuse_ray(Tt798, Td800) in
        let Ti802: Int = let Ti801: Int = 2 in
  (index - Ti801) in
          iter_trace_diffuse_rays(dirvec_group, nvector, org, Ti802)
  else
    () in
                                                                                                                                                                                                                              let rec (trace_diffuse_rays: ([([Float], [[Float]])], [Float], [Float]) -> Unit) ((dirvec_group: [([Float], [[Float]])]), (nvector: [Float]), (org: [Float])) = let Tu159: Unit = setup_startp(org) in
  let Ti787: Int = 118 in
    iter_trace_diffuse_rays(dirvec_group, nvector, org, Ti787) in
                                                                                                                                                                                                                                let rec (trace_diffuse_ray_80percent: (Int, [Float], [Float]) -> Unit) ((group_id: Int), (nvector: [Float]), (org: [Float])) = let Tu163: Unit = let Ti767: Int = 0 in
  if group_id == Ti767 then
    ()
  else
    let Ta770: [([Float], [[Float]])] = let Ta768: [[([Float], [[Float]])]] = [dirvecs] in
  let Ti769: Int = 0 in
    Ta768.(Ti769) in
      trace_diffuse_rays(Ta770, nvector, org) in
  let Tu162: Unit = let Ti771: Int = 1 in
  if group_id == Ti771 then
    ()
  else
    let Ta774: [([Float], [[Float]])] = let Ta772: [[([Float], [[Float]])]] = [dirvecs] in
  let Ti773: Int = 1 in
    Ta772.(Ti773) in
      trace_diffuse_rays(Ta774, nvector, org) in
    let Tu161: Unit = let Ti775: Int = 2 in
  if group_id == Ti775 then
    ()
  else
    let Ta778: [([Float], [[Float]])] = let Ta776: [[([Float], [[Float]])]] = [dirvecs] in
  let Ti777: Int = 2 in
    Ta776.(Ti777) in
      trace_diffuse_rays(Ta778, nvector, org) in
      let Tu160: Unit = let Ti779: Int = 3 in
  if group_id == Ti779 then
    ()
  else
    let Ta782: [([Float], [[Float]])] = let Ta780: [[([Float], [[Float]])]] = [dirvecs] in
  let Ti781: Int = 3 in
    Ta780.(Ti781) in
      trace_diffuse_rays(Ta782, nvector, org) in
        let Ti783: Int = 4 in
          if group_id == Ti783 then
            ()
          else
            let Ta786: [([Float], [[Float]])] = let Ta784: [[([Float], [[Float]])]] = [dirvecs] in
  let Ti785: Int = 4 in
    Ta784.(Ti785) in
              trace_diffuse_rays(Ta786, nvector, org) in
                                                                                                                                                                                                                                  let rec (calc_diffuse_using_1point: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Unit) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (nref: Int)) = let ray20p: [[Float]] = p_received_ray_20percent(pixel) in
  let nvectors: [[Float]] = p_nvectors(pixel) in
    let intersection_points: [[Float]] = p_intersection_points(pixel) in
      let energya: [[Float]] = p_energy(pixel) in
        let Tu165: Unit = let Ta759: [Float] = [diffuse_ray] in
  let Ta760: [Float] = ray20p.(nref) in
    veccpy(Ta759, Ta760) in
          let Tu164: Unit = let Ti761: Int = p_group_id(pixel) in
  let Ta762: [Float] = nvectors.(nref) in
    let Ta763: [Float] = intersection_points.(nref) in
      trace_diffuse_ray_80percent(Ti761, Ta762, Ta763) in
            let Ta764: [Float] = [rgb] in
              let Ta765: [Float] = energya.(nref) in
                let Ta766: [Float] = [diffuse_ray] in
                  vecaccumv(Ta764, Ta765, Ta766) in
                                                                                                                                                                                                                                    let rec (calc_diffuse_using_5points: (Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> Unit) ((x: Int), (prev: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (nref: Int)) = let r_up: [[Float]] = let Tt736: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = prev.(x) in
  p_received_ray_20percent(Tt736) in
  let r_left: [[Float]] = let Tt739: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = let Ti738: Int = let Ti737: Int = 1 in
  (x - Ti737) in
  cur.(Ti738) in
  p_received_ray_20percent(Tt739) in
    let r_center: [[Float]] = let Tt740: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.(x) in
  p_received_ray_20percent(Tt740) in
      let r_right: [[Float]] = let Tt743: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = let Ti742: Int = let Ti741: Int = 1 in
  (x + Ti741) in
  cur.(Ti742) in
  p_received_ray_20percent(Tt743) in
        let r_down: [[Float]] = let Tt744: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = next.(x) in
  p_received_ray_20percent(Tt744) in
          let Tu170: Unit = let Ta745: [Float] = [diffuse_ray] in
  let Ta746: [Float] = r_up.(nref) in
    veccpy(Ta745, Ta746) in
            let Tu169: Unit = let Ta747: [Float] = [diffuse_ray] in
  let Ta748: [Float] = r_left.(nref) in
    vecadd(Ta747, Ta748) in
              let Tu168: Unit = let Ta749: [Float] = [diffuse_ray] in
  let Ta750: [Float] = r_center.(nref) in
    vecadd(Ta749, Ta750) in
                let Tu167: Unit = let Ta751: [Float] = [diffuse_ray] in
  let Ta752: [Float] = r_right.(nref) in
    vecadd(Ta751, Ta752) in
                  let Tu166: Unit = let Ta753: [Float] = [diffuse_ray] in
  let Ta754: [Float] = r_down.(nref) in
    vecadd(Ta753, Ta754) in
                    let energya: [[Float]] = let Tt755: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.(x) in
  p_energy(Tt755) in
                      let Ta756: [Float] = [rgb] in
                        let Ta757: [Float] = energya.(nref) in
                          let Ta758: [Float] = [diffuse_ray] in
                            vecaccumv(Ta756, Ta757, Ta758) in
                                                                                                                                                                                                                                      let rec (do_without_neighbors: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Unit) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (nref: Int)) = let Ti729: Int = 4 in
  if nref <= Ti729 then
    let surface_ids: [Int] = p_surface_ids(pixel) in
      let Ti730: Int = 0 in
        let Ti731: Int = surface_ids.(nref) in
          if Ti730 <= Ti731 then
            let calc_diffuse: [Bool] = p_calc_diffuse(pixel) in
              let Tu171: Unit = let Tb732: Bool = calc_diffuse.(nref) in
  let Ti733: Int = 0 in
    if Tb732 == Ti733 then
      ()
    else
      calc_diffuse_using_1point(pixel, nref) in
                let Ti735: Int = let Ti734: Int = 1 in
  (nref + Ti734) in
                  do_without_neighbors(pixel, Ti735)
          else
            ()
  else
    () in
                                                                                                                                                                                                                                        let rec (neighbors_exist: (Int, Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]) -> Bool) ((x: Int), (y: Int), (next: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])])) = let Ti719: Int = let Ta717: [Int] = [image_size] in
  let Ti718: Int = 1 in
    Ta717.(Ti718) in
  let Ti721: Int = let Ti720: Int = 1 in
  (y + Ti720) in
    if Ti719 <= Ti721 then
      0
    else
      let Ti722: Int = 0 in
        if y <= Ti722 then
          0
        else
          let Ti725: Int = let Ta723: [Int] = [image_size] in
  let Ti724: Int = 0 in
    Ta723.(Ti724) in
            let Ti727: Int = let Ti726: Int = 1 in
  (x + Ti726) in
              if Ti725 <= Ti727 then
                0
              else
                let Ti728: Int = 0 in
                  if x <= Ti728 then
                    0
                  else
                    1 in
                                                                                                                                                                                                                                          let rec (get_surface_id: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Int) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (index: Int)) = let surface_ids: [Int] = p_surface_ids(pixel) in
  surface_ids.(index) in
                                                                                                                                                                                                                                            let rec (neighbors_are_available: (Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> Bool) ((x: Int), (prev: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (nref: Int)) = let sid_center: Int = let Tt704: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.(x) in
  get_surface_id(Tt704, nref) in
  let Ti706: Int = let Tt705: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = prev.(x) in
  get_surface_id(Tt705, nref) in
    if Ti706 == sid_center then
      let Ti708: Int = let Tt707: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = next.(x) in
  get_surface_id(Tt707, nref) in
        if Ti708 == sid_center then
          let Ti712: Int = let Tt711: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = let Ti710: Int = let Ti709: Int = 1 in
  (x - Ti709) in
  cur.(Ti710) in
  get_surface_id(Tt711, nref) in
            if Ti712 == sid_center then
              let Ti716: Int = let Tt715: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = let Ti714: Int = let Ti713: Int = 1 in
  (x + Ti713) in
  cur.(Ti714) in
  get_surface_id(Tt715, nref) in
                if Ti716 == sid_center then
                  1
                else
                  0
            else
              0
        else
          0
    else
      0 in
                                                                                                                                                                                                                                              let rec (try_exploit_neighbors: (Int, Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> Unit) ((x: Int), (y: Int), (prev: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (nref: Int)) = let pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.(x) in
  let Ti694: Int = 4 in
    if nref <= Ti694 then
      let Ti695: Int = 0 in
        let Ti696: Int = get_surface_id(pixel, nref) in
          if Ti695 <= Ti696 then
            let Tb697: Bool = neighbors_are_available(x, prev, cur, next, nref) in
              let Ti698: Int = 0 in
                if Tb697 == Ti698 then
                  let Tt699: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.(x) in
                    do_without_neighbors(Tt699, nref)
                else
                  let calc_diffuse: [Bool] = p_calc_diffuse(pixel) in
                    let Tu172: Unit = let Tb700: Bool = calc_diffuse.(nref) in
  let Ti701: Int = 0 in
    if Tb700 == Ti701 then
      ()
    else
      calc_diffuse_using_5points(x, prev, cur, next, nref) in
                      let Ti703: Int = let Ti702: Int = 1 in
  (nref + Ti702) in
                        try_exploit_neighbors(x, y, prev, cur, next, Ti703)
          else
            ()
    else
      () in
                                                                                                                                                                                                                                                let rec (write_ppm_header: (Unit) -> Unit) ((Tu173: Unit)) = let Tu181: Unit = let Ti679: Int = 80 in
  print_char(Ti679) in
  let Tu180: Unit = let Ti682: Int = let Ti680: Int = 48 in
  let Ti681: Int = 3 in
    (Ti680 + Ti681) in
  print_char(Ti682) in
    let Tu179: Unit = let Ti683: Int = 10 in
  print_char(Ti683) in
      let Tu178: Unit = let Ti686: Int = let Ta684: [Int] = [image_size] in
  let Ti685: Int = 0 in
    Ta684.(Ti685) in
  print_int(Ti686) in
        let Tu177: Unit = let Ti687: Int = 32 in
  print_char(Ti687) in
          let Tu176: Unit = let Ti690: Int = let Ta688: [Int] = [image_size] in
  let Ti689: Int = 1 in
    Ta688.(Ti689) in
  print_int(Ti690) in
            let Tu175: Unit = let Ti691: Int = 32 in
  print_char(Ti691) in
              let Tu174: Unit = let Ti692: Int = 255 in
  print_int(Ti692) in
                let Ti693: Int = 10 in
                  print_char(Ti693) in
                                                                                                                                                                                                                                                  let rec (write_rgb_element: (Int) -> Unit) ((x: Int)) = let ix: Int = int_of_float(x) in
  let elem: Int = let Ti677: Int = 255 in
  if ix <= Ti677 then
    let Ti678: Int = 0 in
      if Ti678 <= ix then
        ix
      else
        0
  else
    255 in
    print_int(elem) in
                                                                                                                                                                                                                                                    let rec (write_rgb: (Unit) -> Unit) ((Tu182: Unit)) = let Tu187: Unit = let Td667: Float = let Ta665: [Float] = [rgb] in
  let Ti666: Int = 0 in
    Ta665.(Ti666) in
  write_rgb_element(Td667) in
  let Tu186: Unit = let Ti668: Int = 32 in
  print_char(Ti668) in
    let Tu185: Unit = let Td671: Float = let Ta669: [Float] = [rgb] in
  let Ti670: Int = 1 in
    Ta669.(Ti670) in
  write_rgb_element(Td671) in
      let Tu184: Unit = let Ti672: Int = 32 in
  print_char(Ti672) in
        let Tu183: Unit = let Td675: Float = let Ta673: [Float] = [rgb] in
  let Ti674: Int = 2 in
    Ta673.(Ti674) in
  write_rgb_element(Td675) in
          let Ti676: Int = 10 in
            print_char(Ti676) in
                                                                                                                                                                                                                                                      let rec (pretrace_diffuse_rays: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Unit) ((pixel: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (nref: Int)) = let Ti652: Int = 4 in
  if nref <= Ti652 then
    let sid: Int = get_surface_id(pixel, nref) in
      let Ti653: Int = 0 in
        if Ti653 <= sid then
          let calc_diffuse: [Bool] = p_calc_diffuse(pixel) in
            let Tu190: Unit = let Tb654: Bool = calc_diffuse.(nref) in
  let Ti655: Int = 0 in
    if Tb654 == Ti655 then
      ()
    else
      let group_id: Int = p_group_id(pixel) in
        let Tu189: Unit = let Ta656: [Float] = [diffuse_ray] in
  vecbzero(Ta656) in
          let nvectors: [[Float]] = p_nvectors(pixel) in
            let intersection_points: [[Float]] = p_intersection_points(pixel) in
              let Tu188: Unit = let Ta658: [([Float], [[Float]])] = let Ta657: [[([Float], [[Float]])]] = [dirvecs] in
  Ta657.(group_id) in
  let Ta659: [Float] = nvectors.(nref) in
    let Ta660: [Float] = intersection_points.(nref) in
      trace_diffuse_rays(Ta658, Ta659, Ta660) in
                let ray20p: [[Float]] = p_received_ray_20percent(pixel) in
                  let Ta661: [Float] = ray20p.(nref) in
                    let Ta662: [Float] = [diffuse_ray] in
                      veccpy(Ta661, Ta662) in
              let Ti664: Int = let Ti663: Int = 1 in
  (nref + Ti663) in
                pretrace_diffuse_rays(pixel, Ti664)
        else
          ()
  else
    () in
                                                                                                                                                                                                                                                        let rec (pretrace_pixels: ([([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int, Int, Float, Float, Float) -> Unit) ((line: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (x: Int), (group_id: Int), (lc0: Float), (lc1: Float), (lc2: Float)) = let Ti602: Int = 0 in
  if Ti602 <= x then
    let xdisp: Float = let Td605: Float = let Ta603: [Float] = [scan_pitch] in
  let Ti604: Int = 0 in
    Ta603.(Ti604) in
  let Td610: Float = let Ti609: Int = let Ti608: Int = let Ta606: [Int] = [image_center] in
  let Ti607: Int = 0 in
    Ta606.(Ti607) in
  (x - Ti608) in
  float_of_int(Ti609) in
    (Td605 * Td610) in
      let Tu200: Unit = let Ta611: [Float] = [ptrace_dirvec] in
  let Ti612: Int = 0 in
    let Td617: Float = let Td616: Float = let Td615: Float = let Ta613: [Float] = [screenx_dir] in
  let Ti614: Int = 0 in
    Ta613.(Ti614) in
  (xdisp * Td615) in
  (Td616 + lc0) in
      Ta611.(Ti612) <- Td617 in
        let Tu199: Unit = let Ta618: [Float] = [ptrace_dirvec] in
  let Ti619: Int = 1 in
    let Td624: Float = let Td623: Float = let Td622: Float = let Ta620: [Float] = [screenx_dir] in
  let Ti621: Int = 1 in
    Ta620.(Ti621) in
  (xdisp * Td622) in
  (Td623 + lc1) in
      Ta618.(Ti619) <- Td624 in
          let Tu198: Unit = let Ta625: [Float] = [ptrace_dirvec] in
  let Ti626: Int = 2 in
    let Td631: Float = let Td630: Float = let Td629: Float = let Ta627: [Float] = [screenx_dir] in
  let Ti628: Int = 2 in
    Ta627.(Ti628) in
  (xdisp * Td629) in
  (Td630 + lc2) in
      Ta625.(Ti626) <- Td631 in
            let Tu197: Unit = let Ta632: [Float] = [ptrace_dirvec] in
  let Ti633: Int = 0 in
    vecunit_sgn(Ta632, Ti633) in
              let Tu196: Unit = let Ta634: [Float] = [rgb] in
  vecbzero(Ta634) in
                let Tu195: Unit = let Ta635: [Float] = [startp] in
  let Ta636: [Float] = [viewpoint] in
    veccpy(Ta635, Ta636) in
                  let Tu194: Unit = let Ti637: Int = 0 in
  let Td638: Float = 1. in
    let Ta639: [Float] = [ptrace_dirvec] in
      let Tt640: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = line.(x) in
        let Td641: Float = 0. in
          trace_ray(Ti637, Td638, Ta639, Tt640, Td641) in
                    let Tu193: Unit = let Ta643: [Float] = let Tt642: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = line.(x) in
  p_rgb(Tt642) in
  let Ta644: [Float] = [rgb] in
    veccpy(Ta643, Ta644) in
                      let Tu192: Unit = let Tt645: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = line.(x) in
  p_set_group_id(Tt645, group_id) in
                        let Tu191: Unit = let Tt646: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = line.(x) in
  let Ti647: Int = 0 in
    pretrace_diffuse_rays(Tt646, Ti647) in
                          let Ti649: Int = let Ti648: Int = 1 in
  (x - Ti648) in
                            let Ti651: Int = let Ti650: Int = 1 in
  add_mod5(group_id, Ti650) in
                              pretrace_pixels(line, Ti649, Ti651, lc0, lc1, lc2)
  else
    () in
                                                                                                                                                                                                                                                          let rec (pretrace_line: ([([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int, Int) -> Unit) ((line: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (y: Int), (group_id: Int)) = let ydisp: Float = let Td570: Float = let Ta568: [Float] = [scan_pitch] in
  let Ti569: Int = 0 in
    Ta568.(Ti569) in
  let Td575: Float = let Ti574: Int = let Ti573: Int = let Ta571: [Int] = [image_center] in
  let Ti572: Int = 1 in
    Ta571.(Ti572) in
  (y - Ti573) in
  float_of_int(Ti574) in
    (Td570 * Td575) in
  let lc0: Float = let Td579: Float = let Td578: Float = let Ta576: [Float] = [screeny_dir] in
  let Ti577: Int = 0 in
    Ta576.(Ti577) in
  (ydisp * Td578) in
  let Td582: Float = let Ta580: [Float] = [screenz_dir] in
  let Ti581: Int = 0 in
    Ta580.(Ti581) in
    (Td579 + Td582) in
    let lc1: Float = let Td586: Float = let Td585: Float = let Ta583: [Float] = [screeny_dir] in
  let Ti584: Int = 1 in
    Ta583.(Ti584) in
  (ydisp * Td585) in
  let Td589: Float = let Ta587: [Float] = [screenz_dir] in
  let Ti588: Int = 1 in
    Ta587.(Ti588) in
    (Td586 + Td589) in
      let lc2: Float = let Td593: Float = let Td592: Float = let Ta590: [Float] = [screeny_dir] in
  let Ti591: Int = 2 in
    Ta590.(Ti591) in
  (ydisp * Td592) in
  let Td596: Float = let Ta594: [Float] = [screenz_dir] in
  let Ti595: Int = 2 in
    Ta594.(Ti595) in
    (Td593 + Td596) in
        let Ti601: Int = let Ti599: Int = let Ta597: [Int] = [image_size] in
  let Ti598: Int = 0 in
    Ta597.(Ti598) in
  let Ti600: Int = 1 in
    (Ti599 - Ti600) in
          pretrace_pixels(line, Ti601, group_id, lc0, lc1, lc2) in
                                                                                                                                                                                                                                                            let rec (scan_pixel: (Int, Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]) -> Unit) ((x: Int), (y: Int), (prev: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])])) = let Ti556: Int = let Ta554: [Int] = [image_size] in
  let Ti555: Int = 0 in
    Ta554.(Ti555) in
  if Ti556 <= x then
    ()
  else
    let Tu203: Unit = let Ta557: [Float] = [rgb] in
  let Ta559: [Float] = let Tt558: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.(x) in
  p_rgb(Tt558) in
    veccpy(Ta557, Ta559) in
      let Tu202: Unit = let Tb560: Bool = neighbors_exist(x, y, next) in
  let Ti561: Int = 0 in
    if Tb560 == Ti561 then
      let Tt562: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.(x) in
        let Ti563: Int = 0 in
          do_without_neighbors(Tt562, Ti563)
    else
      let Ti564: Int = 0 in
        try_exploit_neighbors(x, y, prev, cur, next, Ti564) in
        let Tu201: Unit = let Tu565: Unit = () in
  write_rgb(Tu565) in
          let Ti567: Int = let Ti566: Int = 1 in
  (x + Ti566) in
            scan_pixel(Ti567, y, prev, cur, next) in
                                                                                                                                                                                                                                                              let rec (scan_line: (Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> Unit) ((y: Int), (prev: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (group_id: Int)) = let Ti541: Int = let Ta539: [Int] = [image_size] in
  let Ti540: Int = 1 in
    Ta539.(Ti540) in
  if Ti541 <= y then
    ()
  else
    let Tu205: Unit = let Ti546: Int = let Ti544: Int = let Ta542: [Int] = [image_size] in
  let Ti543: Int = 1 in
    Ta542.(Ti543) in
  let Ti545: Int = 1 in
    (Ti544 - Ti545) in
  if Ti546 <= y then
    ()
  else
    let Ti548: Int = let Ti547: Int = 1 in
  (y + Ti547) in
      pretrace_line(next, Ti548, group_id) in
      let Tu204: Unit = let Ti549: Int = 0 in
  scan_pixel(Ti549, y, prev, cur, next) in
        let Ti551: Int = let Ti550: Int = 1 in
  (y + Ti550) in
          let Ti553: Int = let Ti552: Int = 2 in
  add_mod5(group_id, Ti552) in
            scan_line(Ti551, cur, next, prev, Ti553) in
                                                                                                                                                                                                                                                                let rec (create_float5x3array: (Unit) -> [[Float]]) ((Tu206: Unit)) = let vec: [Float] = let Ti520: Int = 3 in
  let Td521: Float = 0. in
    create_float_array(Ti520, Td521) in
  let array: [[Float]] = let Ti522: Int = 5 in
  create_array(Ti522, vec) in
    let Tu210: Unit = let Ti523: Int = 1 in
  let Ta526: [Float] = let Ti524: Int = 3 in
  let Td525: Float = 0. in
    create_float_array(Ti524, Td525) in
    array.(Ti523) <- Ta526 in
      let Tu209: Unit = let Ti527: Int = 2 in
  let Ta530: [Float] = let Ti528: Int = 3 in
  let Td529: Float = 0. in
    create_float_array(Ti528, Td529) in
    array.(Ti527) <- Ta530 in
        let Tu208: Unit = let Ti531: Int = 3 in
  let Ta534: [Float] = let Ti532: Int = 3 in
  let Td533: Float = 0. in
    create_float_array(Ti532, Td533) in
    array.(Ti531) <- Ta534 in
          let Tu207: Unit = let Ti535: Int = 4 in
  let Ta538: [Float] = let Ti536: Int = 3 in
  let Td537: Float = 0. in
    create_float_array(Ti536, Td537) in
    array.(Ti535) <- Ta538 in
            array in
                                                                                                                                                                                                                                                                  let rec (create_pixel: (Unit) -> ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) ((Tu211: Unit)) = let m_rgb: [Float] = let Ti508: Int = 3 in
  let Td509: Float = 0. in
    create_float_array(Ti508, Td509) in
  let m_isect_ps: [[Float]] = let Tu510: Unit = () in
  create_float5x3array(Tu510) in
    let m_sids: [Int] = let Ti511: Int = 5 in
  let Ti512: Int = 0 in
    create_array(Ti511, Ti512) in
      let m_cdif: [Bool] = let Ti513: Int = 5 in
  let Ti514: Int = 0 in
    create_array(Ti513, Ti514) in
        let m_engy: [[Float]] = let Tu515: Unit = () in
  create_float5x3array(Tu515) in
          let m_r20p: [[Float]] = let Tu516: Unit = () in
  create_float5x3array(Tu516) in
            let m_gid: [Int] = let Ti517: Int = 1 in
  let Ti518: Int = 0 in
    create_array(Ti517, Ti518) in
              let m_nvectors: [[Float]] = let Tu519: Unit = () in
  create_float5x3array(Tu519) in
                (m_rgb, m_isect_ps, m_sids, m_cdif, m_engy, m_r20p, m_gid, m_nvectors) in
                                                                                                                                                                                                                                                                    let rec (init_line_elements: ([([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]) ((line: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (n: Int)) = let Ti503: Int = 0 in
  if Ti503 <= n then
    let Tu212: Unit = let Tt505: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = let Tu504: Unit = () in
  create_pixel(Tu504) in
  line.(n) <- Tt505 in
      let Ti507: Int = let Ti506: Int = 1 in
  (n - Ti506) in
        init_line_elements(line, Ti507)
  else
    line in
                                                                                                                                                                                                                                                                      let rec (create_pixelline: (Unit) -> [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]) ((Tu213: Unit)) = let line: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])] = let Ti495: Int = let Ta493: [Int] = [image_size] in
  let Ti494: Int = 0 in
    Ta493.(Ti494) in
  let Tt497: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = let Tu496: Unit = () in
  create_pixel(Tu496) in
    create_array(Ti495, Tt497) in
  let Ti502: Int = let Ti500: Int = let Ta498: [Int] = [image_size] in
  let Ti499: Int = 0 in
    Ta498.(Ti499) in
  let Ti501: Int = 2 in
    (Ti500 - Ti501) in
    init_line_elements(line, Ti502) in
                                                                                                                                                                                                                                                                        let rec (tan: (Float) -> Float) ((x: Float)) = let Td491: Float = sin(x) in
  let Td492: Float = cos(x) in
    (Td491 / Td492) in
                                                                                                                                                                                                                                                                          let rec (adjust_position: (Float, Float) -> Float) ((h: Float), (ratio: Float)) = let l: Float = let Td488: Float = let Td486: Float = (h * h) in
  let Td487: Float = 0.1 in
    (Td486 + Td487) in
  sqrt(Td488) in
  let tan_h: Float = let Td489: Float = 1. in
  (Td489 / l) in
    let theta_h: Float = atan(tan_h) in
      let tan_m: Float = let Td490: Float = (theta_h * ratio) in
  tan(Td490) in
        (tan_m * l) in
                                                                                                                                                                                                                                                                            let rec (calc_dirvec: (Int, Float, Float, Float, Float, Int, Int) -> Unit) ((icount: Int), (x: Float), (y: Float), (rx: Float), (ry: Float), (group_id: Int), (index: Int)) = let Ti444: Int = 5 in
  if Ti444 <= icount then
    let l: Float = let Td449: Float = let Td447: Float = let Td445: Float = fsqr(x) in
  let Td446: Float = fsqr(y) in
    (Td445 + Td446) in
  let Td448: Float = 1. in
    (Td447 + Td448) in
  sqrt(Td449) in
      let vx: Float = (x / l) in
        let vy: Float = (y / l) in
          let vz: Float = let Td450: Float = 1. in
  (Td450 / l) in
            let dgroup: [([Float], [[Float]])] = let Ta451: [[([Float], [[Float]])]] = [dirvecs] in
  Ta451.(group_id) in
              let Tu218: Unit = let Ta453: [Float] = let Tt452: ([Float], [[Float]]) = dgroup.(index) in
  d_vec(Tt452) in
  vecset(Ta453, vx, vy, vz) in
                let Tu217: Unit = let Ta457: [Float] = let Tt456: ([Float], [[Float]]) = let Ti455: Int = let Ti454: Int = 40 in
  (index + Ti454) in
  dgroup.(Ti455) in
  d_vec(Tt456) in
  let Td458: Float = fneg(vy) in
    vecset(Ta457, vx, vz, Td458) in
                  let Tu216: Unit = let Ta462: [Float] = let Tt461: ([Float], [[Float]]) = let Ti460: Int = let Ti459: Int = 80 in
  (index + Ti459) in
  dgroup.(Ti460) in
  d_vec(Tt461) in
  let Td463: Float = fneg(vx) in
    let Td464: Float = fneg(vy) in
      vecset(Ta462, vz, Td463, Td464) in
                    let Tu215: Unit = let Ta468: [Float] = let Tt467: ([Float], [[Float]]) = let Ti466: Int = let Ti465: Int = 1 in
  (index + Ti465) in
  dgroup.(Ti466) in
  d_vec(Tt467) in
  let Td469: Float = fneg(vx) in
    let Td470: Float = fneg(vy) in
      let Td471: Float = fneg(vz) in
        vecset(Ta468, Td469, Td470, Td471) in
                      let Tu214: Unit = let Ta475: [Float] = let Tt474: ([Float], [[Float]]) = let Ti473: Int = let Ti472: Int = 41 in
  (index + Ti472) in
  dgroup.(Ti473) in
  d_vec(Tt474) in
  let Td476: Float = fneg(vx) in
    let Td477: Float = fneg(vz) in
      vecset(Ta475, Td476, Td477, vy) in
                        let Ta481: [Float] = let Tt480: ([Float], [[Float]]) = let Ti479: Int = let Ti478: Int = 81 in
  (index + Ti478) in
  dgroup.(Ti479) in
  d_vec(Tt480) in
                          let Td482: Float = fneg(vz) in
                            vecset(Ta481, Td482, vx, vy)
  else
    let x2: Float = adjust_position(y, rx) in
      let Ti484: Int = let Ti483: Int = 1 in
  (icount + Ti483) in
        let Td485: Float = adjust_position(x2, ry) in
          calc_dirvec(Ti484, x2, Td485, rx, ry, group_id, index) in
                                                                                                                                                                                                                                                                              let rec (calc_dirvecs: (Int, Float, Int, Int) -> Unit) ((col: Int), (ry: Float), (group_id: Int), (index: Int)) = let Ti423: Int = 0 in
  if Ti423 <= col then
    let rx: Float = let Td426: Float = let Td424: Float = float_of_int(col) in
  let Td425: Float = 0.2 in
    (Td424 * Td425) in
  let Td427: Float = 0.9 in
    (Td426 - Td427) in
      let Tu220: Unit = let Ti428: Int = 0 in
  let Td429: Float = 0. in
    let Td430: Float = 0. in
      calc_dirvec(Ti428, Td429, Td430, rx, ry, group_id, index) in
        let rx2: Float = let Td433: Float = let Td431: Float = float_of_int(col) in
  let Td432: Float = 0.2 in
    (Td431 * Td432) in
  let Td434: Float = 0.1 in
    (Td433 + Td434) in
          let Tu219: Unit = let Ti435: Int = 0 in
  let Td436: Float = 0. in
    let Td437: Float = 0. in
      let Ti439: Int = let Ti438: Int = 2 in
  (index + Ti438) in
        calc_dirvec(Ti435, Td436, Td437, rx2, ry, group_id, Ti439) in
            let Ti441: Int = let Ti440: Int = 1 in
  (col - Ti440) in
              let Ti443: Int = let Ti442: Int = 1 in
  add_mod5(group_id, Ti442) in
                calc_dirvecs(Ti441, ry, Ti443, index)
  else
    () in
                                                                                                                                                                                                                                                                                let rec (calc_dirvec_rows: (Int, Int, Int) -> Unit) ((row: Int), (group_id: Int), (index: Int)) = let Ti411: Int = 0 in
  if Ti411 <= row then
    let ry: Float = let Td414: Float = let Td412: Float = float_of_int(row) in
  let Td413: Float = 0.2 in
    (Td412 * Td413) in
  let Td415: Float = 0.9 in
    (Td414 - Td415) in
      let Tu221: Unit = let Ti416: Int = 4 in
  calc_dirvecs(Ti416, ry, group_id, index) in
        let Ti418: Int = let Ti417: Int = 1 in
  (row - Ti417) in
          let Ti420: Int = let Ti419: Int = 2 in
  add_mod5(group_id, Ti419) in
            let Ti422: Int = let Ti421: Int = 4 in
  (index + Ti421) in
              calc_dirvec_rows(Ti418, Ti420, Ti422)
  else
    () in
                                                                                                                                                                                                                                                                                  let rec (create_dirvec: (Unit) -> ([Float], [[Float]])) ((Tu222: Unit)) = let v3: [Float] = let Ti406: Int = 3 in
  let Td407: Float = 0. in
    create_float_array(Ti406, Td407) in
  let consts: [[Float]] = let Ti410: Int = let Ta408: [Int] = [n_objects] in
  let Ti409: Int = 0 in
    Ta408.(Ti409) in
  create_array(Ti410, v3) in
    (v3, consts) in
                                                                                                                                                                                                                                                                                    let rec (create_dirvec_elements: ([([Float], [[Float]])], Int) -> Unit) ((d: [([Float], [[Float]])]), (index: Int)) = let Ti401: Int = 0 in
  if Ti401 <= index then
    let Tu223: Unit = let Tt403: ([Float], [[Float]]) = let Tu402: Unit = () in
  create_dirvec(Tu402) in
  d.(index) <- Tt403 in
      let Ti405: Int = let Ti404: Int = 1 in
  (index - Ti404) in
        create_dirvec_elements(d, Ti405)
  else
    () in
                                                                                                                                                                                                                                                                                      let rec (create_dirvecs: (Int) -> Unit) ((index: Int)) = let Ti390: Int = 0 in
  if Ti390 <= index then
    let Tu225: Unit = let Ta391: [[([Float], [[Float]])]] = [dirvecs] in
  let Ta395: [([Float], [[Float]])] = let Ti392: Int = 120 in
  let Tt394: ([Float], [[Float]]) = let Tu393: Unit = () in
  create_dirvec(Tu393) in
    create_array(Ti392, Tt394) in
    Ta391.(index) <- Ta395 in
      let Tu224: Unit = let Ta397: [([Float], [[Float]])] = let Ta396: [[([Float], [[Float]])]] = [dirvecs] in
  Ta396.(index) in
  let Ti398: Int = 118 in
    create_dirvec_elements(Ta397, Ti398) in
        let Ti400: Int = let Ti399: Int = 1 in
  (index - Ti399) in
          create_dirvecs(Ti400)
  else
    () in
                                                                                                                                                                                                                                                                                        let rec (init_dirvec_constants: ([([Float], [[Float]])], Int) -> Unit) ((vecset: [([Float], [[Float]])]), (index: Int)) = let Ti386: Int = 0 in
  if Ti386 <= index then
    let Tu226: Unit = let Tt387: ([Float], [[Float]]) = vecset.(index) in
  setup_dirvec_constants(Tt387) in
      let Ti389: Int = let Ti388: Int = 1 in
  (index - Ti388) in
        init_dirvec_constants(vecset, Ti389)
  else
    () in
                                                                                                                                                                                                                                                                                          let rec (init_vecset_constants: (Int) -> Unit) ((index: Int)) = let Ti380: Int = 0 in
  if Ti380 <= index then
    let Tu227: Unit = let Ta382: [([Float], [[Float]])] = let Ta381: [[([Float], [[Float]])]] = [dirvecs] in
  Ta381.(index) in
  let Ti383: Int = 119 in
    init_dirvec_constants(Ta382, Ti383) in
      let Ti385: Int = let Ti384: Int = 1 in
  (index - Ti384) in
        init_vecset_constants(Ti385)
  else
    () in
                                                                                                                                                                                                                                                                                            let rec (init_dirvecs: (Unit) -> Unit) ((Tu228: Unit)) = let Tu230: Unit = let Ti375: Int = 4 in
  create_dirvecs(Ti375) in
  let Tu229: Unit = let Ti376: Int = 9 in
  let Ti377: Int = 0 in
    let Ti378: Int = 0 in
      calc_dirvec_rows(Ti376, Ti377, Ti378) in
    let Ti379: Int = 4 in
      init_vecset_constants(Ti379) in
                                                                                                                                                                                                                                                                                              let rec (add_reflection: (Int, Int, Float, Float, Float, Float) -> Unit) ((index: Int), (surface_id: Int), (bright: Float), (v0: Float), (v1: Float), (v2: Float)) = let dvec: ([Float], [[Float]]) = let Tu371: Unit = () in
  create_dirvec(Tu371) in
  let Tu232: Unit = let Ta372: [Float] = d_vec(dvec) in
  vecset(Ta372, v0, v1, v2) in
    let Tu231: Unit = setup_dirvec_constants(dvec) in
      let Ta373: [(Int, ([Float], [[Float]]), Float)] = [reflections] in
        let Tt374: (Int, ([Float], [[Float]]), Float) = (surface_id, dvec, bright) in
          Ta373.(index) <- Tt374 in
                                                                                                                                                                                                                                                                                                let rec (setup_rect_reflection: (Int, (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Unit) ((obj_id: Int), (obj: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let sid: Int = let Ti334: Int = 4 in
  (obj_id * Ti334) in
  let nr: Int = let Ta335: [Int] = [n_reflections] in
  let Ti336: Int = 0 in
    Ta335.(Ti336) in
    let br: Float = let Td337: Float = 1. in
  let Td338: Float = o_diffuse(obj) in
    (Td337 - Td338) in
      let n0: Float = let Td341: Float = let Ta339: [Float] = [light] in
  let Ti340: Int = 0 in
    Ta339.(Ti340) in
  fneg(Td341) in
        let n1: Float = let Td344: Float = let Ta342: [Float] = [light] in
  let Ti343: Int = 1 in
    Ta342.(Ti343) in
  fneg(Td344) in
          let n2: Float = let Td347: Float = let Ta345: [Float] = [light] in
  let Ti346: Int = 2 in
    Ta345.(Ti346) in
  fneg(Td347) in
            let Tu235: Unit = let Ti349: Int = let Ti348: Int = 1 in
  (sid + Ti348) in
  let Td352: Float = let Ta350: [Float] = [light] in
  let Ti351: Int = 0 in
    Ta350.(Ti351) in
    add_reflection(nr, Ti349, br, Td352, n1, n2) in
              let Tu234: Unit = let Ti354: Int = let Ti353: Int = 1 in
  (nr + Ti353) in
  let Ti356: Int = let Ti355: Int = 2 in
  (sid + Ti355) in
    let Td359: Float = let Ta357: [Float] = [light] in
  let Ti358: Int = 1 in
    Ta357.(Ti358) in
      add_reflection(Ti354, Ti356, br, n0, Td359, n2) in
                let Tu233: Unit = let Ti361: Int = let Ti360: Int = 2 in
  (nr + Ti360) in
  let Ti363: Int = let Ti362: Int = 3 in
  (sid + Ti362) in
    let Td366: Float = let Ta364: [Float] = [light] in
  let Ti365: Int = 2 in
    Ta364.(Ti365) in
      add_reflection(Ti361, Ti363, br, n0, n1, Td366) in
                  let Ta367: [Int] = [n_reflections] in
                    let Ti368: Int = 0 in
                      let Ti370: Int = let Ti369: Int = 3 in
  (nr + Ti369) in
                        Ta367.(Ti368) <- Ti370 in
                                                                                                                                                                                                                                                                                                  let rec (setup_surface_reflection: (Int, (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Unit) ((obj_id: Int), (obj: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let sid: Int = let Ti298: Int = let Ti297: Int = 4 in
  (obj_id * Ti297) in
  let Ti299: Int = 1 in
    (Ti298 + Ti299) in
  let nr: Int = let Ta300: [Int] = [n_reflections] in
  let Ti301: Int = 0 in
    Ta300.(Ti301) in
    let br: Float = let Td302: Float = 1. in
  let Td303: Float = o_diffuse(obj) in
    (Td302 - Td303) in
      let p: Float = let Ta304: [Float] = [light] in
  let Ta305: [Float] = o_param_abc(obj) in
    veciprod(Ta304, Ta305) in
        let Tu236: Unit = let Td313: Float = let Td309: Float = let Td308: Float = let Td306: Float = 2. in
  let Td307: Float = o_param_a(obj) in
    (Td306 * Td307) in
  (Td308 * p) in
  let Td312: Float = let Ta310: [Float] = [light] in
  let Ti311: Int = 0 in
    Ta310.(Ti311) in
    (Td309 - Td312) in
  let Td321: Float = let Td317: Float = let Td316: Float = let Td314: Float = 2. in
  let Td315: Float = o_param_b(obj) in
    (Td314 * Td315) in
  (Td316 * p) in
  let Td320: Float = let Ta318: [Float] = [light] in
  let Ti319: Int = 1 in
    Ta318.(Ti319) in
    (Td317 - Td320) in
    let Td329: Float = let Td325: Float = let Td324: Float = let Td322: Float = 2. in
  let Td323: Float = o_param_c(obj) in
    (Td322 * Td323) in
  (Td324 * p) in
  let Td328: Float = let Ta326: [Float] = [light] in
  let Ti327: Int = 2 in
    Ta326.(Ti327) in
    (Td325 - Td328) in
      add_reflection(nr, sid, br, Td313, Td321, Td329) in
          let Ta330: [Int] = [n_reflections] in
            let Ti331: Int = 0 in
              let Ti333: Int = let Ti332: Int = 1 in
  (nr + Ti332) in
                Ta330.(Ti331) <- Ti333 in
                                                                                                                                                                                                                                                                                                    let rec (setup_reflections: (Int) -> Unit) ((obj_id: Int)) = let Ti287: Int = 0 in
  if Ti287 <= obj_id then
    let obj: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta288: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta288.(obj_id) in
      let Ti289: Int = o_reflectiontype(obj) in
        let Ti290: Int = 2 in
          if Ti289 == Ti290 then
            let Tb293: Bool = let Td291: Float = o_diffuse(obj) in
  let Td292: Float = 1. in
    fless(Td291, Td292) in
              let Ti294: Int = 0 in
                if Tb293 == Ti294 then
                  ()
                else
                  let m_shape: Int = o_form(obj) in
                    let Ti295: Int = 1 in
                      if m_shape == Ti295 then
                        setup_rect_reflection(obj_id, obj)
                      else
                        let Ti296: Int = 2 in
                          if m_shape == Ti296 then
                            setup_surface_reflection(obj_id, obj)
                          else
                            ()
          else
            ()
  else
    () in
                                                                                                                                                                                                                                                                                                      let rec (rt: (Int, Int) -> Unit) ((size_x: Int), (size_y: Int)) = let Tu248: Unit = let Ta251: [Int] = [image_size] in
  let Ti252: Int = 0 in
    Ta251.(Ti252) <- size_x in
  let Tu247: Unit = let Ta253: [Int] = [image_size] in
  let Ti254: Int = 1 in
    Ta253.(Ti254) <- size_y in
    let Tu246: Unit = let Ta255: [Int] = [image_center] in
  let Ti256: Int = 0 in
    let Ti258: Int = let Ti257: Int = 2 in
  (size_x / Ti257) in
      Ta255.(Ti256) <- Ti258 in
      let Tu245: Unit = let Ta259: [Int] = [image_center] in
  let Ti260: Int = 1 in
    let Ti262: Int = let Ti261: Int = 2 in
  (size_y / Ti261) in
      Ta259.(Ti260) <- Ti262 in
        let Tu244: Unit = let Ta263: [Float] = [scan_pitch] in
  let Ti264: Int = 0 in
    let Td267: Float = let Td265: Float = 128. in
  let Td266: Float = float_of_int(size_x) in
    (Td265 / Td266) in
      Ta263.(Ti264) <- Td267 in
          let prev: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])] = let Tu268: Unit = () in
  create_pixelline(Tu268) in
            let cur: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])] = let Tu269: Unit = () in
  create_pixelline(Tu269) in
              let next: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])] = let Tu270: Unit = () in
  create_pixelline(Tu270) in
                let Tu243: Unit = let Tu271: Unit = () in
  read_parameter(Tu271) in
                  let Tu242: Unit = let Tu272: Unit = () in
  write_ppm_header(Tu272) in
                    let Tu241: Unit = let Tu273: Unit = () in
  init_dirvecs(Tu273) in
                      let Tu240: Unit = let Ta275: [Float] = let Tt274: ([Float], [[Float]]) = light_dirvec: ([Float], [[Float]]) in
  d_vec(Tt274) in
  let Ta276: [Float] = [light] in
    veccpy(Ta275, Ta276) in
                        let Tu239: Unit = let Tt277: ([Float], [[Float]]) = light_dirvec: ([Float], [[Float]]) in
  setup_dirvec_constants(Tt277) in
                          let Tu238: Unit = let Ti282: Int = let Ti280: Int = let Ta278: [Int] = [n_objects] in
  let Ti279: Int = 0 in
    Ta278.(Ti279) in
  let Ti281: Int = 1 in
    (Ti280 - Ti281) in
  setup_reflections(Ti282) in
                            let Tu237: Unit = let Ti283: Int = 0 in
  let Ti284: Int = 0 in
    pretrace_line(cur, Ti283, Ti284) in
                              let Ti285: Int = 0 in
                                let Ti286: Int = 2 in
                                  scan_line(Ti285, prev, cur, next, Ti286) in
                                                                                                                                                                                                                                                                                                        let Ti249: Int = 128 in
                                                                                                                                                                                                                                                                                                          let Ti250: Int = 128 in
                                                                                                                                                                                                                                                                                                            rt(Ti249, Ti250)

Alpha---
let rec (xor.2599: (Bool, Bool) -> Bool) ((x.2600: Bool), (y.2601: Bool)) = let Ti2597.6287: Int = 0 in
  if x.2600 == Ti2597.6287 then
    y.2601
  else
    let Ti2598.6288: Int = 0 in
      if y.2601 == Ti2598.6288 then
        1
      else
        0 in
  let rec (sgn.2602: (Float) -> Float) ((x.2603: Float)) = let Tb2593.6283: Bool = fiszero(x.2603) in
  let Ti2594.6284: Int = 0 in
    if Tb2593.6283 == Ti2594.6284 then
      let Tb2595.6285: Bool = fispos(x.2603) in
        let Ti2596.6286: Int = 0 in
          if Tb2595.6285 == Ti2596.6286 then
            -1.
          else
            1.
    else
      0. in
    let rec (fneg_cond.2604: (Bool, Float) -> Float) ((cond.2605: Bool), (x.2606: Float)) = let Ti2592.6282: Int = 0 in
  if cond.2605 == Ti2592.6282 then
    fneg(x.2606)
  else
    x.2606 in
      let rec (add_mod5.2607: (Int, Int) -> Int) ((x.2608: Int), (y.2609: Int)) = let sum.6279: Int = (x.2608 + y.2609) in
  let Ti2590.6280: Int = 5 in
    if Ti2590.6280 <= sum.6279 then
      let Ti2591.6281: Int = 5 in
        (sum.6279 - Ti2591.6281)
    else
      sum.6279 in
        let rec (vecset.2610: ([Float], Float, Float, Float) -> Unit) ((v.2611: [Float]), (x.2612: Float), (y.2613: Float), (z.2614: Float)) = let Tu2.6274: Unit = let Ti2587.6278: Int = 0 in
  v.2611.(Ti2587.6278) <- x.2612 in
  let Tu1.6275: Unit = let Ti2588.6277: Int = 1 in
  v.2611.(Ti2588.6277) <- y.2613 in
    let Ti2589.6276: Int = 2 in
      v.2611.(Ti2589.6276) <- z.2614 in
          let rec (vecfill.2615: ([Float], Float) -> Unit) ((v.2616: [Float]), (elem.2617: Float)) = let Tu4.6269: Unit = let Ti2584.6273: Int = 0 in
  v.2616.(Ti2584.6273) <- elem.2617 in
  let Tu3.6270: Unit = let Ti2585.6272: Int = 1 in
  v.2616.(Ti2585.6272) <- elem.2617 in
    let Ti2586.6271: Int = 2 in
      v.2616.(Ti2586.6271) <- elem.2617 in
            let rec (vecbzero.2618: ([Float]) -> Unit) ((v.2619: [Float])) = let Td2583.6268: Float = 0. in
  vecfill.2615(v.2619, Td2583.6268) in
              let rec (veccpy.2620: ([Float], [Float]) -> Unit) ((dest.2621: [Float]), (src.2622: [Float])) = let Tu6.6257: Unit = let Ti2574.6265: Int = 0 in
  let Td2576.6266: Float = let Ti2575.6267: Int = 0 in
  src.2622.(Ti2575.6267) in
    dest.2621.(Ti2574.6265) <- Td2576.6266 in
  let Tu5.6258: Unit = let Ti2577.6262: Int = 1 in
  let Td2579.6263: Float = let Ti2578.6264: Int = 1 in
  src.2622.(Ti2578.6264) in
    dest.2621.(Ti2577.6262) <- Td2579.6263 in
    let Ti2580.6259: Int = 2 in
      let Td2582.6260: Float = let Ti2581.6261: Int = 2 in
  src.2622.(Ti2581.6261) in
        dest.2621.(Ti2580.6259) <- Td2582.6260 in
                let rec (vecdist2.2623: ([Float], [Float]) -> Float) ((p.2624: [Float]), (q.2625: [Float])) = let Td2567.6238: Float = let Td2560.6245: Float = let Td2559.6252: Float = let Td2556.6253: Float = let Ti2555.6256: Int = 0 in
  p.2624.(Ti2555.6256) in
  let Td2558.6254: Float = let Ti2557.6255: Int = 0 in
  q.2625.(Ti2557.6255) in
    (Td2556.6253 - Td2558.6254) in
  fsqr(Td2559.6252) in
  let Td2566.6246: Float = let Td2565.6247: Float = let Td2562.6248: Float = let Ti2561.6251: Int = 1 in
  p.2624.(Ti2561.6251) in
  let Td2564.6249: Float = let Ti2563.6250: Int = 1 in
  q.2625.(Ti2563.6250) in
    (Td2562.6248 - Td2564.6249) in
  fsqr(Td2565.6247) in
    (Td2560.6245 + Td2566.6246) in
  let Td2573.6239: Float = let Td2572.6240: Float = let Td2569.6241: Float = let Ti2568.6244: Int = 2 in
  p.2624.(Ti2568.6244) in
  let Td2571.6242: Float = let Ti2570.6243: Int = 2 in
  q.2625.(Ti2570.6243) in
    (Td2569.6241 - Td2571.6242) in
  fsqr(Td2572.6240) in
    (Td2567.6238 + Td2573.6239) in
                  let rec (vecunit.2626: ([Float]) -> Unit) ((v.2627: [Float])) = let il.6210: Float = let Td2530.6225: Float = 1. in
  let Td2542.6226: Float = let Td2541.6227: Float = let Td2537.6228: Float = let Td2533.6232: Float = let Td2532.6236: Float = let Ti2531.6237: Int = 0 in
  v.2627.(Ti2531.6237) in
  fsqr(Td2532.6236) in
  let Td2536.6233: Float = let Td2535.6234: Float = let Ti2534.6235: Int = 1 in
  v.2627.(Ti2534.6235) in
  fsqr(Td2535.6234) in
    (Td2533.6232 + Td2536.6233) in
  let Td2540.6229: Float = let Td2539.6230: Float = let Ti2538.6231: Int = 2 in
  v.2627.(Ti2538.6231) in
  fsqr(Td2539.6230) in
    (Td2537.6228 + Td2540.6229) in
  sqrt(Td2541.6227) in
    (Td2530.6225 / Td2542.6226) in
  let Tu8.6211: Unit = let Ti2543.6221: Int = 0 in
  let Td2546.6222: Float = let Td2545.6223: Float = let Ti2544.6224: Int = 0 in
  v.2627.(Ti2544.6224) in
  (Td2545.6223 * il.6210) in
    v.2627.(Ti2543.6221) <- Td2546.6222 in
    let Tu7.6212: Unit = let Ti2547.6217: Int = 1 in
  let Td2550.6218: Float = let Td2549.6219: Float = let Ti2548.6220: Int = 1 in
  v.2627.(Ti2548.6220) in
  (Td2549.6219 * il.6210) in
    v.2627.(Ti2547.6217) <- Td2550.6218 in
      let Ti2551.6213: Int = 2 in
        let Td2554.6214: Float = let Td2553.6215: Float = let Ti2552.6216: Int = 2 in
  v.2627.(Ti2552.6216) in
  (Td2553.6215 * il.6210) in
          v.2627.(Ti2551.6213) <- Td2554.6214 in
                    let rec (vecunit_sgn.2628: ([Float], Bool) -> Unit) ((v.2629: [Float]), (inv.2630: Bool)) = let l.6178: Float = let Td2512.6199: Float = let Td2508.6200: Float = let Td2504.6204: Float = let Td2503.6208: Float = let Ti2502.6209: Int = 0 in
  v.2629.(Ti2502.6209) in
  fsqr(Td2503.6208) in
  let Td2507.6205: Float = let Td2506.6206: Float = let Ti2505.6207: Int = 1 in
  v.2629.(Ti2505.6207) in
  fsqr(Td2506.6206) in
    (Td2504.6204 + Td2507.6205) in
  let Td2511.6201: Float = let Td2510.6202: Float = let Ti2509.6203: Int = 2 in
  v.2629.(Ti2509.6203) in
  fsqr(Td2510.6202) in
    (Td2508.6200 + Td2511.6201) in
  sqrt(Td2512.6199) in
  let il.6179: Float = let Tb2513.6194: Bool = fiszero(l.6178) in
  let Ti2514.6195: Int = 0 in
    if Tb2513.6194 == Ti2514.6195 then
      let Ti2515.6196: Int = 0 in
        if inv.2630 == Ti2515.6196 then
          let Td2516.6198: Float = 1. in
            (Td2516.6198 / l.6178)
        else
          let Td2517.6197: Float = -1. in
            (Td2517.6197 / l.6178)
    else
      1. in
    let Tu10.6180: Unit = let Ti2518.6190: Int = 0 in
  let Td2521.6191: Float = let Td2520.6192: Float = let Ti2519.6193: Int = 0 in
  v.2629.(Ti2519.6193) in
  (Td2520.6192 * il.6179) in
    v.2629.(Ti2518.6190) <- Td2521.6191 in
      let Tu9.6181: Unit = let Ti2522.6186: Int = 1 in
  let Td2525.6187: Float = let Td2524.6188: Float = let Ti2523.6189: Int = 1 in
  v.2629.(Ti2523.6189) in
  (Td2524.6188 * il.6179) in
    v.2629.(Ti2522.6186) <- Td2525.6187 in
        let Ti2526.6182: Int = 2 in
          let Td2529.6183: Float = let Td2528.6184: Float = let Ti2527.6185: Int = 2 in
  v.2629.(Ti2527.6185) in
  (Td2528.6184 * il.6179) in
            v.2629.(Ti2526.6182) <- Td2529.6183 in
                      let rec (veciprod.2631: ([Float], [Float]) -> Float) ((v.2632: [Float]), (w.2633: [Float])) = let Td2496.6162: Float = let Td2490.6168: Float = let Td2487.6174: Float = let Ti2486.6177: Int = 0 in
  v.2632.(Ti2486.6177) in
  let Td2489.6175: Float = let Ti2488.6176: Int = 0 in
  w.2633.(Ti2488.6176) in
    (Td2487.6174 * Td2489.6175) in
  let Td2495.6169: Float = let Td2492.6170: Float = let Ti2491.6173: Int = 1 in
  v.2632.(Ti2491.6173) in
  let Td2494.6171: Float = let Ti2493.6172: Int = 1 in
  w.2633.(Ti2493.6172) in
    (Td2492.6170 * Td2494.6171) in
    (Td2490.6168 + Td2495.6169) in
  let Td2501.6163: Float = let Td2498.6164: Float = let Ti2497.6167: Int = 2 in
  v.2632.(Ti2497.6167) in
  let Td2500.6165: Float = let Ti2499.6166: Int = 2 in
  w.2633.(Ti2499.6166) in
    (Td2498.6164 * Td2500.6165) in
    (Td2496.6162 + Td2501.6163) in
                        let rec (veciprod2.2634: ([Float], Float, Float, Float) -> Float) ((v.2635: [Float]), (w0.2636: Float), (w1.2637: Float), (w2.2638: Float)) = let Td2482.6152: Float = let Td2478.6156: Float = let Td2477.6160: Float = let Ti2476.6161: Int = 0 in
  v.2635.(Ti2476.6161) in
  (Td2477.6160 * w0.2636) in
  let Td2481.6157: Float = let Td2480.6158: Float = let Ti2479.6159: Int = 1 in
  v.2635.(Ti2479.6159) in
  (Td2480.6158 * w1.2637) in
    (Td2478.6156 + Td2481.6157) in
  let Td2485.6153: Float = let Td2484.6154: Float = let Ti2483.6155: Int = 2 in
  v.2635.(Ti2483.6155) in
  (Td2484.6154 * w2.2638) in
    (Td2482.6152 + Td2485.6153) in
                          let rec (vecaccum.2639: ([Float], Float, [Float]) -> Unit) ((dest.2640: [Float]), (scale.2641: Float), (v.2642: [Float])) = let Tu12.6129: Unit = let Ti2455.6145: Int = 0 in
  let Td2461.6146: Float = let Td2457.6147: Float = let Ti2456.6151: Int = 0 in
  dest.2640.(Ti2456.6151) in
  let Td2460.6148: Float = let Td2459.6149: Float = let Ti2458.6150: Int = 0 in
  v.2642.(Ti2458.6150) in
  (scale.2641 * Td2459.6149) in
    (Td2457.6147 + Td2460.6148) in
    dest.2640.(Ti2455.6145) <- Td2461.6146 in
  let Tu11.6130: Unit = let Ti2462.6138: Int = 1 in
  let Td2468.6139: Float = let Td2464.6140: Float = let Ti2463.6144: Int = 1 in
  dest.2640.(Ti2463.6144) in
  let Td2467.6141: Float = let Td2466.6142: Float = let Ti2465.6143: Int = 1 in
  v.2642.(Ti2465.6143) in
  (scale.2641 * Td2466.6142) in
    (Td2464.6140 + Td2467.6141) in
    dest.2640.(Ti2462.6138) <- Td2468.6139 in
    let Ti2469.6131: Int = 2 in
      let Td2475.6132: Float = let Td2471.6133: Float = let Ti2470.6137: Int = 2 in
  dest.2640.(Ti2470.6137) in
  let Td2474.6134: Float = let Td2473.6135: Float = let Ti2472.6136: Int = 2 in
  v.2642.(Ti2472.6136) in
  (scale.2641 * Td2473.6135) in
    (Td2471.6133 + Td2474.6134) in
        dest.2640.(Ti2469.6131) <- Td2475.6132 in
                            let rec (vecadd.2643: ([Float], [Float]) -> Unit) ((dest.2644: [Float]), (v.2645: [Float])) = let Tu14.6109: Unit = let Ti2437.6123: Int = 0 in
  let Td2442.6124: Float = let Td2439.6125: Float = let Ti2438.6128: Int = 0 in
  dest.2644.(Ti2438.6128) in
  let Td2441.6126: Float = let Ti2440.6127: Int = 0 in
  v.2645.(Ti2440.6127) in
    (Td2439.6125 + Td2441.6126) in
    dest.2644.(Ti2437.6123) <- Td2442.6124 in
  let Tu13.6110: Unit = let Ti2443.6117: Int = 1 in
  let Td2448.6118: Float = let Td2445.6119: Float = let Ti2444.6122: Int = 1 in
  dest.2644.(Ti2444.6122) in
  let Td2447.6120: Float = let Ti2446.6121: Int = 1 in
  v.2645.(Ti2446.6121) in
    (Td2445.6119 + Td2447.6120) in
    dest.2644.(Ti2443.6117) <- Td2448.6118 in
    let Ti2449.6111: Int = 2 in
      let Td2454.6112: Float = let Td2451.6113: Float = let Ti2450.6116: Int = 2 in
  dest.2644.(Ti2450.6116) in
  let Td2453.6114: Float = let Ti2452.6115: Int = 2 in
  v.2645.(Ti2452.6115) in
    (Td2451.6113 + Td2453.6114) in
        dest.2644.(Ti2449.6111) <- Td2454.6112 in
                              let rec (vecmul.2646: ([Float], [Float]) -> Unit) ((dest.2647: [Float]), (v.2648: [Float])) = let Tu16.6089: Unit = let Ti2419.6103: Int = 0 in
  let Td2424.6104: Float = let Td2421.6105: Float = let Ti2420.6108: Int = 0 in
  dest.2647.(Ti2420.6108) in
  let Td2423.6106: Float = let Ti2422.6107: Int = 0 in
  v.2648.(Ti2422.6107) in
    (Td2421.6105 * Td2423.6106) in
    dest.2647.(Ti2419.6103) <- Td2424.6104 in
  let Tu15.6090: Unit = let Ti2425.6097: Int = 1 in
  let Td2430.6098: Float = let Td2427.6099: Float = let Ti2426.6102: Int = 1 in
  dest.2647.(Ti2426.6102) in
  let Td2429.6100: Float = let Ti2428.6101: Int = 1 in
  v.2648.(Ti2428.6101) in
    (Td2427.6099 * Td2429.6100) in
    dest.2647.(Ti2425.6097) <- Td2430.6098 in
    let Ti2431.6091: Int = 2 in
      let Td2436.6092: Float = let Td2433.6093: Float = let Ti2432.6096: Int = 2 in
  dest.2647.(Ti2432.6096) in
  let Td2435.6094: Float = let Ti2434.6095: Int = 2 in
  v.2648.(Ti2434.6095) in
    (Td2433.6093 * Td2435.6094) in
        dest.2647.(Ti2431.6091) <- Td2436.6092 in
                                let rec (vecscale.2649: ([Float], Float) -> Unit) ((dest.2650: [Float]), (scale.2651: Float)) = let Tu18.6075: Unit = let Ti2407.6085: Int = 0 in
  let Td2410.6086: Float = let Td2409.6087: Float = let Ti2408.6088: Int = 0 in
  dest.2650.(Ti2408.6088) in
  (Td2409.6087 * scale.2651) in
    dest.2650.(Ti2407.6085) <- Td2410.6086 in
  let Tu17.6076: Unit = let Ti2411.6081: Int = 1 in
  let Td2414.6082: Float = let Td2413.6083: Float = let Ti2412.6084: Int = 1 in
  dest.2650.(Ti2412.6084) in
  (Td2413.6083 * scale.2651) in
    dest.2650.(Ti2411.6081) <- Td2414.6082 in
    let Ti2415.6077: Int = 2 in
      let Td2418.6078: Float = let Td2417.6079: Float = let Ti2416.6080: Int = 2 in
  dest.2650.(Ti2416.6080) in
  (Td2417.6079 * scale.2651) in
        dest.2650.(Ti2415.6077) <- Td2418.6078 in
                                  let rec (vecaccumv.2652: ([Float], [Float], [Float]) -> Unit) ((dest.2653: [Float]), (v.2654: [Float]), (w.2655: [Float])) = let Tu20.6046: Unit = let Ti2380.6066: Int = 0 in
  let Td2388.6067: Float = let Td2382.6068: Float = let Ti2381.6074: Int = 0 in
  dest.2653.(Ti2381.6074) in
  let Td2387.6069: Float = let Td2384.6070: Float = let Ti2383.6073: Int = 0 in
  v.2654.(Ti2383.6073) in
  let Td2386.6071: Float = let Ti2385.6072: Int = 0 in
  w.2655.(Ti2385.6072) in
    (Td2384.6070 * Td2386.6071) in
    (Td2382.6068 + Td2387.6069) in
    dest.2653.(Ti2380.6066) <- Td2388.6067 in
  let Tu19.6047: Unit = let Ti2389.6057: Int = 1 in
  let Td2397.6058: Float = let Td2391.6059: Float = let Ti2390.6065: Int = 1 in
  dest.2653.(Ti2390.6065) in
  let Td2396.6060: Float = let Td2393.6061: Float = let Ti2392.6064: Int = 1 in
  v.2654.(Ti2392.6064) in
  let Td2395.6062: Float = let Ti2394.6063: Int = 1 in
  w.2655.(Ti2394.6063) in
    (Td2393.6061 * Td2395.6062) in
    (Td2391.6059 + Td2396.6060) in
    dest.2653.(Ti2389.6057) <- Td2397.6058 in
    let Ti2398.6048: Int = 2 in
      let Td2406.6049: Float = let Td2400.6050: Float = let Ti2399.6056: Int = 2 in
  dest.2653.(Ti2399.6056) in
  let Td2405.6051: Float = let Td2402.6052: Float = let Ti2401.6055: Int = 2 in
  v.2654.(Ti2401.6055) in
  let Td2404.6053: Float = let Ti2403.6054: Int = 2 in
  w.2655.(Ti2403.6054) in
    (Td2402.6052 * Td2404.6053) in
    (Td2400.6050 + Td2405.6051) in
        dest.2653.(Ti2398.6048) <- Td2406.6049 in
                                    let rec (o_texturetype.2656: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2657: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (m_tex.6035: Int), (xm_shape.6036: Int), (xm_surface.6037: Int), (xm_isrot.6038: Int), (xm_abc.6039: [Float]), (xm_xyz.6040: [Float]), (xm_invert.6041: Bool), (xm_surfparams.6042: [Float]), (xm_color.6043: [Int]), (xm_rot123.6044: [Float]), (xm_ctbl.6045: [Float])) = m.2657 in
m_tex.6035 in
                                      let rec (o_form.2658: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2659: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.6024: Int), (m_shape.6025: Int), (xm_surface.6026: Int), (xm_isrot.6027: Int), (xm_abc.6028: [Float]), (xm_xyz.6029: [Float]), (xm_invert.6030: Bool), (xm_surfparams.6031: [Float]), (xm_color.6032: [Int]), (xm_rot123.6033: [Float]), (xm_ctbl.6034: [Float])) = m.2659 in
m_shape.6025 in
                                        let rec (o_reflectiontype.2660: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2661: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.6013: Int), (xm_shape.6014: Int), (m_surface.6015: Int), (xm_isrot.6016: Int), (xm_abc.6017: [Float]), (xm_xyz.6018: [Float]), (xm_invert.6019: Bool), (xm_surfparams.6020: [Float]), (xm_color.6021: [Int]), (xm_rot123.6022: [Float]), (xm_ctbl.6023: [Float])) = m.2661 in
m_surface.6015 in
                                          let rec (o_isinvert.2662: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Bool) ((m.2663: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.6002: Int), (xm_shape.6003: Int), (xm_surface.6004: Int), (xm_isrot.6005: Int), (xm_abc.6006: [Float]), (xm_xyz.6007: [Float]), (m_invert.6008: Bool), (xm_surfparams.6009: [Float]), (xm_color.6010: [Int]), (xm_rot123.6011: [Float]), (xm_ctbl.6012: [Float])) = m.2663 in
m_invert.6008 in
                                            let rec (o_isrot.2664: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2665: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5991: Int), (xm_shape.5992: Int), (xm_surface.5993: Int), (m_isrot.5994: Int), (xm_abc.5995: [Float]), (xm_xyz.5996: [Float]), (xm_invert.5997: Bool), (xm_surfparams.5998: [Float]), (xm_color.5999: [Int]), (xm_rot123.6000: [Float]), (xm_ctbl.6001: [Float])) = m.2665 in
m_isrot.5994 in
                                              let rec (o_param_a.2666: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2667: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5979: Int), (xm_shape.5980: Int), (xm_surface.5981: Int), (xm_isrot.5982: Int), (m_abc.5983: [Float]), (xm_xyz.5984: [Float]), (xm_invert.5985: Bool), (xm_surfparams.5986: [Float]), (xm_color.5987: [Int]), (xm_rot123.5988: [Float]), (xm_ctbl.5989: [Float])) = m.2667 in
let Ti2379.5990: Int = 0 in
  m_abc.5983.(Ti2379.5990) in
                                                let rec (o_param_b.2668: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2669: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5967: Int), (xm_shape.5968: Int), (xm_surface.5969: Int), (xm_isrot.5970: Int), (m_abc.5971: [Float]), (xm_xyz.5972: [Float]), (xm_invert.5973: Bool), (xm_surfparams.5974: [Float]), (xm_color.5975: [Int]), (xm_rot123.5976: [Float]), (xm_ctbl.5977: [Float])) = m.2669 in
let Ti2378.5978: Int = 1 in
  m_abc.5971.(Ti2378.5978) in
                                                  let rec (o_param_c.2670: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2671: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5955: Int), (xm_shape.5956: Int), (xm_surface.5957: Int), (xm_isrot.5958: Int), (m_abc.5959: [Float]), (xm_xyz.5960: [Float]), (xm_invert.5961: Bool), (xm_surfparams.5962: [Float]), (xm_color.5963: [Int]), (xm_rot123.5964: [Float]), (xm_ctbl.5965: [Float])) = m.2671 in
let Ti2377.5966: Int = 2 in
  m_abc.5959.(Ti2377.5966) in
                                                    let rec (o_param_abc.2672: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((m.2673: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5944: Int), (xm_shape.5945: Int), (xm_surface.5946: Int), (xm_isrot.5947: Int), (m_abc.5948: [Float]), (xm_xyz.5949: [Float]), (xm_invert.5950: Bool), (xm_surfparams.5951: [Float]), (xm_color.5952: [Int]), (xm_rot123.5953: [Float]), (xm_ctbl.5954: [Float])) = m.2673 in
m_abc.5948 in
                                                      let rec (o_param_x.2674: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2675: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5932: Int), (xm_shape.5933: Int), (xm_surface.5934: Int), (xm_isrot.5935: Int), (xm_abc.5936: [Float]), (m_xyz.5937: [Float]), (xm_invert.5938: Bool), (xm_surfparams.5939: [Float]), (xm_color.5940: [Int]), (xm_rot123.5941: [Float]), (xm_ctbl.5942: [Float])) = m.2675 in
let Ti2376.5943: Int = 0 in
  m_xyz.5937.(Ti2376.5943) in
                                                        let rec (o_param_y.2676: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2677: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5920: Int), (xm_shape.5921: Int), (xm_surface.5922: Int), (xm_isrot.5923: Int), (xm_abc.5924: [Float]), (m_xyz.5925: [Float]), (xm_invert.5926: Bool), (xm_surfparams.5927: [Float]), (xm_color.5928: [Int]), (xm_rot123.5929: [Float]), (xm_ctbl.5930: [Float])) = m.2677 in
let Ti2375.5931: Int = 1 in
  m_xyz.5925.(Ti2375.5931) in
                                                          let rec (o_param_z.2678: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2679: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5908: Int), (xm_shape.5909: Int), (xm_surface.5910: Int), (xm_isrot.5911: Int), (xm_abc.5912: [Float]), (m_xyz.5913: [Float]), (xm_invert.5914: Bool), (xm_surfparams.5915: [Float]), (xm_color.5916: [Int]), (xm_rot123.5917: [Float]), (xm_ctbl.5918: [Float])) = m.2679 in
let Ti2374.5919: Int = 2 in
  m_xyz.5913.(Ti2374.5919) in
                                                            let rec (o_diffuse.2680: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2681: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5896: Int), (xm_shape.5897: Int), (xm_surface.5898: Int), (xm_isrot.5899: Int), (xm_abc.5900: [Float]), (xm_xyz.5901: [Float]), (xm_invert.5902: Bool), (m_surfparams.5903: [Float]), (xm_color.5904: [Int]), (xm_rot123.5905: [Float]), (xm_ctbl.5906: [Float])) = m.2681 in
let Ti2373.5907: Int = 0 in
  m_surfparams.5903.(Ti2373.5907) in
                                                              let rec (o_hilight.2682: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2683: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5884: Int), (xm_shape.5885: Int), (xm_surface.5886: Int), (xm_isrot.5887: Int), (xm_abc.5888: [Float]), (xm_xyz.5889: [Float]), (xm_invert.5890: Bool), (m_surfparams.5891: [Float]), (xm_color.5892: [Int]), (xm_rot123.5893: [Float]), (xm_ctbl.5894: [Float])) = m.2683 in
let Ti2372.5895: Int = 1 in
  m_surfparams.5891.(Ti2372.5895) in
                                                                let rec (o_color_red.2684: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2685: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5872: Int), (xm_shape.5873: Int), (m_surface.5874: Int), (xm_isrot.5875: Int), (xm_abc.5876: [Float]), (xm_xyz.5877: [Float]), (xm_invert.5878: Bool), (xm_surfparams.5879: [Float]), (m_color.5880: [Int]), (xm_rot123.5881: [Float]), (xm_ctbl.5882: [Float])) = m.2685 in
let Ti2371.5883: Int = 0 in
  m_color.5880.(Ti2371.5883) in
                                                                  let rec (o_color_green.2686: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2687: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5860: Int), (xm_shape.5861: Int), (m_surface.5862: Int), (xm_isrot.5863: Int), (xm_abc.5864: [Float]), (xm_xyz.5865: [Float]), (xm_invert.5866: Bool), (xm_surfparams.5867: [Float]), (m_color.5868: [Int]), (xm_rot123.5869: [Float]), (xm_ctbl.5870: [Float])) = m.2687 in
let Ti2370.5871: Int = 1 in
  m_color.5868.(Ti2370.5871) in
                                                                    let rec (o_color_blue.2688: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2689: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5848: Int), (xm_shape.5849: Int), (m_surface.5850: Int), (xm_isrot.5851: Int), (xm_abc.5852: [Float]), (xm_xyz.5853: [Float]), (xm_invert.5854: Bool), (xm_surfparams.5855: [Float]), (m_color.5856: [Int]), (xm_rot123.5857: [Float]), (xm_ctbl.5858: [Float])) = m.2689 in
let Ti2369.5859: Int = 2 in
  m_color.5856.(Ti2369.5859) in
                                                                      let rec (o_param_r1.2690: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2691: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5836: Int), (xm_shape.5837: Int), (xm_surface.5838: Int), (xm_isrot.5839: Int), (xm_abc.5840: [Float]), (xm_xyz.5841: [Float]), (xm_invert.5842: Bool), (xm_surfparams.5843: [Float]), (xm_color.5844: [Int]), (m_rot123.5845: [Float]), (xm_ctbl.5846: [Float])) = m.2691 in
let Ti2368.5847: Int = 0 in
  m_rot123.5845.(Ti2368.5847) in
                                                                        let rec (o_param_r2.2692: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2693: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5824: Int), (xm_shape.5825: Int), (xm_surface.5826: Int), (xm_isrot.5827: Int), (xm_abc.5828: [Float]), (xm_xyz.5829: [Float]), (xm_invert.5830: Bool), (xm_surfparams.5831: [Float]), (xm_color.5832: [Int]), (m_rot123.5833: [Float]), (xm_ctbl.5834: [Float])) = m.2693 in
let Ti2367.5835: Int = 1 in
  m_rot123.5833.(Ti2367.5835) in
                                                                          let rec (o_param_r3.2694: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2695: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5812: Int), (xm_shape.5813: Int), (xm_surface.5814: Int), (xm_isrot.5815: Int), (xm_abc.5816: [Float]), (xm_xyz.5817: [Float]), (xm_invert.5818: Bool), (xm_surfparams.5819: [Float]), (xm_color.5820: [Int]), (m_rot123.5821: [Float]), (xm_ctbl.5822: [Float])) = m.2695 in
let Ti2366.5823: Int = 2 in
  m_rot123.5821.(Ti2366.5823) in
                                                                            let rec (o_param_ctbl.2696: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((m.2697: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5801: Int), (xm_shape.5802: Int), (xm_surface.5803: Int), (xm_isrot.5804: Int), (xm_abc.5805: [Float]), (xm_xyz.5806: [Float]), (xm_invert.5807: Bool), (xm_surfparams.5808: [Float]), (xm_color.5809: [Int]), (xm_rot123.5810: [Float]), (m_ctbl.5811: [Float])) = m.2697 in
m_ctbl.5811 in
                                                                              let rec (p_rgb.2698: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [Float]) ((pixel.2699: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (m_rgb.5793: [Float]), (xm_isect_ps.5794: [[Float]]), (xm_sids.5795: [Int]), (xm_cdif.5796: [Bool]), (xm_engy.5797: [[Float]]), (xm_r20p.5798: [[Float]]), (xm_gid.5799: [Int]), (xm_nvectors.5800: [[Float]])) = pixel.2699 in
m_rgb.5793 in
                                                                                let rec (p_intersection_points.2700: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [[Float]]) ((pixel.2701: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5785: [Float]), (m_isect_ps.5786: [[Float]]), (xm_sids.5787: [Int]), (xm_cdif.5788: [Bool]), (xm_engy.5789: [[Float]]), (xm_r20p.5790: [[Float]]), (xm_gid.5791: [Int]), (xm_nvectors.5792: [[Float]])) = pixel.2701 in
m_isect_ps.5786 in
                                                                                  let rec (p_surface_ids.2702: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [Int]) ((pixel.2703: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5777: [Float]), (xm_isect_ps.5778: [[Float]]), (m_sids.5779: [Int]), (xm_cdif.5780: [Bool]), (xm_engy.5781: [[Float]]), (xm_r20p.5782: [[Float]]), (xm_gid.5783: [Int]), (xm_nvectors.5784: [[Float]])) = pixel.2703 in
m_sids.5779 in
                                                                                    let rec (p_calc_diffuse.2704: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [Bool]) ((pixel.2705: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5769: [Float]), (xm_isect_ps.5770: [[Float]]), (xm_sids.5771: [Int]), (m_cdif.5772: [Bool]), (xm_engy.5773: [[Float]]), (xm_r20p.5774: [[Float]]), (xm_gid.5775: [Int]), (xm_nvectors.5776: [[Float]])) = pixel.2705 in
m_cdif.5772 in
                                                                                      let rec (p_energy.2706: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [[Float]]) ((pixel.2707: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5761: [Float]), (xm_isect_ps.5762: [[Float]]), (xm_sids.5763: [Int]), (xm_cdif.5764: [Bool]), (m_engy.5765: [[Float]]), (xm_r20p.5766: [[Float]]), (xm_gid.5767: [Int]), (xm_nvectors.5768: [[Float]])) = pixel.2707 in
m_engy.5765 in
                                                                                        let rec (p_received_ray_20percent.2708: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [[Float]]) ((pixel.2709: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5753: [Float]), (xm_isect_ps.5754: [[Float]]), (xm_sids.5755: [Int]), (xm_cdif.5756: [Bool]), (xm_engy.5757: [[Float]]), (m_r20p.5758: [[Float]]), (xm_gid.5759: [Int]), (xm_nvectors.5760: [[Float]])) = pixel.2709 in
m_r20p.5758 in
                                                                                          let rec (p_group_id.2710: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> Int) ((pixel.2711: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5744: [Float]), (xm_isect_ps.5745: [[Float]]), (xm_sids.5746: [Int]), (xm_cdif.5747: [Bool]), (xm_engy.5748: [[Float]]), (xm_r20p.5749: [[Float]]), (m_gid.5750: [Int]), (xm_nvectors.5751: [[Float]])) = pixel.2711 in
let Ti2365.5752: Int = 0 in
  m_gid.5750.(Ti2365.5752) in
                                                                                            let rec (p_set_group_id.2712: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Unit) ((pixel.2713: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (id.2714: Int)) = let (xm_rgb.5735: [Float]), (xm_isect_ps.5736: [[Float]]), (xm_sids.5737: [Int]), (xm_cdif.5738: [Bool]), (xm_engy.5739: [[Float]]), (xm_r20p.5740: [[Float]]), (m_gid.5741: [Int]), (xm_nvectors.5742: [[Float]])) = pixel.2713 in
let Ti2364.5743: Int = 0 in
  m_gid.5741.(Ti2364.5743) <- id.2714 in
                                                                                              let rec (p_nvectors.2715: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [[Float]]) ((pixel.2716: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5727: [Float]), (xm_isect_ps.5728: [[Float]]), (xm_sids.5729: [Int]), (xm_cdif.5730: [Bool]), (xm_engy.5731: [[Float]]), (xm_r20p.5732: [[Float]]), (xm_gid.5733: [Int]), (m_nvectors.5734: [[Float]])) = pixel.2716 in
m_nvectors.5734 in
                                                                                                let rec (d_vec.2717: (([Float], [[Float]])) -> [Float]) ((d.2718: ([Float], [[Float]]))) = let (m_vec.5725: [Float]), (xm_const.5726: [[Float]])) = d.2718 in
m_vec.5725 in
                                                                                                  let rec (d_const.2719: (([Float], [[Float]])) -> [[Float]]) ((d.2720: ([Float], [[Float]]))) = let (dm_vec.5723: [Float]), (m_const.5724: [[Float]])) = d.2720 in
m_const.5724 in
                                                                                                    let rec (r_surface_id.2721: ((Int, ([Float], [[Float]]), Float)) -> Int) ((r.2722: (Int, ([Float], [[Float]]), Float))) = let (m_sid.5720: Int), (xm_dvec.5721: ([Float], [[Float]])), (xm_br.5722: Float)) = r.2722 in
m_sid.5720 in
                                                                                                      let rec (r_dvec.2723: ((Int, ([Float], [[Float]]), Float)) -> ([Float], [[Float]])) ((r.2724: (Int, ([Float], [[Float]]), Float))) = let (xm_sid.5717: Int), (m_dvec.5718: ([Float], [[Float]])), (xm_br.5719: Float)) = r.2724 in
m_dvec.5718 in
                                                                                                        let rec (r_bright.2725: ((Int, ([Float], [[Float]]), Float)) -> Float) ((r.2726: (Int, ([Float], [[Float]]), Float))) = let (xm_sid.5714: Int), (xm_dvec.5715: ([Float], [[Float]])), (m_br.5716: Float)) = r.2726 in
m_br.5716 in
                                                                                                          let rec (rad.2727: (Float) -> Float) ((x.2728: Float)) = let Td2363.5713: Float = 0.017453293 in
  (x.2728 * Td2363.5713) in
                                                                                                            let rec (read_screen_settings.2729: (Unit) -> Unit) ((Tu21.2730: Unit)) = let Tu35.5617: Unit = let Ta2287.5709: [Float] = [screen] in
  let Ti2288.5710: Int = 0 in
    let Td2290.5711: Float = let Tu2289.5712: Unit = () in
  read_float(Tu2289.5712) in
      Ta2287.5709.(Ti2288.5710) <- Td2290.5711 in
  let Tu34.5618: Unit = let Ta2291.5705: [Float] = [screen] in
  let Ti2292.5706: Int = 1 in
    let Td2294.5707: Float = let Tu2293.5708: Unit = () in
  read_float(Tu2293.5708) in
      Ta2291.5705.(Ti2292.5706) <- Td2294.5707 in
    let Tu33.5619: Unit = let Ta2295.5701: [Float] = [screen] in
  let Ti2296.5702: Int = 2 in
    let Td2298.5703: Float = let Tu2297.5704: Unit = () in
  read_float(Tu2297.5704) in
      Ta2295.5701.(Ti2296.5702) <- Td2298.5703 in
      let v1.5620: Float = let Td2300.5699: Float = let Tu2299.5700: Unit = () in
  read_float(Tu2299.5700) in
  rad.2727(Td2300.5699) in
        let cos_v1.5621: Float = cos(v1.5620) in
          let sin_v1.5622: Float = sin(v1.5620) in
            let v2.5623: Float = let Td2302.5697: Float = let Tu2301.5698: Unit = () in
  read_float(Tu2301.5698) in
  rad.2727(Td2302.5697) in
              let cos_v2.5624: Float = cos(v2.5623) in
                let sin_v2.5625: Float = sin(v2.5623) in
                  let Tu32.5626: Unit = let Ta2303.5692: [Float] = [screenz_dir] in
  let Ti2304.5693: Int = 0 in
    let Td2307.5694: Float = let Td2305.5695: Float = (cos_v1.5621 * sin_v2.5625) in
  let Td2306.5696: Float = 200. in
    (Td2305.5695 * Td2306.5696) in
      Ta2303.5692.(Ti2304.5693) <- Td2307.5694 in
                    let Tu31.5627: Unit = let Ta2308.5688: [Float] = [screenz_dir] in
  let Ti2309.5689: Int = 1 in
    let Td2311.5690: Float = let Td2310.5691: Float = -200. in
  (sin_v1.5622 * Td2310.5691) in
      Ta2308.5688.(Ti2309.5689) <- Td2311.5690 in
                      let Tu30.5628: Unit = let Ta2312.5683: [Float] = [screenz_dir] in
  let Ti2313.5684: Int = 2 in
    let Td2316.5685: Float = let Td2314.5686: Float = (cos_v1.5621 * cos_v2.5624) in
  let Td2315.5687: Float = 200. in
    (Td2314.5686 * Td2315.5687) in
      Ta2312.5683.(Ti2313.5684) <- Td2316.5685 in
                        let Tu29.5629: Unit = let Ta2317.5681: [Float] = [screenx_dir] in
  let Ti2318.5682: Int = 0 in
    Ta2317.5681.(Ti2318.5682) <- cos_v2.5624 in
                          let Tu28.5630: Unit = let Ta2319.5678: [Float] = [screenx_dir] in
  let Ti2320.5679: Int = 1 in
    let Td2321.5680: Float = 0. in
      Ta2319.5678.(Ti2320.5679) <- Td2321.5680 in
                            let Tu27.5631: Unit = let Ta2322.5675: [Float] = [screenx_dir] in
  let Ti2323.5676: Int = 2 in
    let Td2324.5677: Float = fneg(sin_v2.5625) in
      Ta2322.5675.(Ti2323.5676) <- Td2324.5677 in
                              let Tu26.5632: Unit = let Ta2325.5671: [Float] = [screeny_dir] in
  let Ti2326.5672: Int = 0 in
    let Td2328.5673: Float = let Td2327.5674: Float = fneg(sin_v1.5622) in
  (Td2327.5674 * sin_v2.5625) in
      Ta2325.5671.(Ti2326.5672) <- Td2328.5673 in
                                let Tu25.5633: Unit = let Ta2329.5668: [Float] = [screeny_dir] in
  let Ti2330.5669: Int = 1 in
    let Td2331.5670: Float = fneg(cos_v1.5621) in
      Ta2329.5668.(Ti2330.5669) <- Td2331.5670 in
                                  let Tu24.5634: Unit = let Ta2332.5664: [Float] = [screeny_dir] in
  let Ti2333.5665: Int = 2 in
    let Td2335.5666: Float = let Td2334.5667: Float = fneg(sin_v1.5622) in
  (Td2334.5667 * cos_v2.5624) in
      Ta2332.5664.(Ti2333.5665) <- Td2335.5666 in
                                    let Tu23.5635: Unit = let Ta2336.5655: [Float] = [viewpoint] in
  let Ti2337.5656: Int = 0 in
    let Td2344.5657: Float = let Td2340.5658: Float = let Ta2338.5662: [Float] = [screen] in
  let Ti2339.5663: Int = 0 in
    Ta2338.5662.(Ti2339.5663) in
  let Td2343.5659: Float = let Ta2341.5660: [Float] = [screenz_dir] in
  let Ti2342.5661: Int = 0 in
    Ta2341.5660.(Ti2342.5661) in
    (Td2340.5658 - Td2343.5659) in
      Ta2336.5655.(Ti2337.5656) <- Td2344.5657 in
                                      let Tu22.5636: Unit = let Ta2345.5646: [Float] = [viewpoint] in
  let Ti2346.5647: Int = 1 in
    let Td2353.5648: Float = let Td2349.5649: Float = let Ta2347.5653: [Float] = [screen] in
  let Ti2348.5654: Int = 1 in
    Ta2347.5653.(Ti2348.5654) in
  let Td2352.5650: Float = let Ta2350.5651: [Float] = [screenz_dir] in
  let Ti2351.5652: Int = 1 in
    Ta2350.5651.(Ti2351.5652) in
    (Td2349.5649 - Td2352.5650) in
      Ta2345.5646.(Ti2346.5647) <- Td2353.5648 in
                                        let Ta2354.5637: [Float] = [viewpoint] in
                                          let Ti2355.5638: Int = 2 in
                                            let Td2362.5639: Float = let Td2358.5640: Float = let Ta2356.5644: [Float] = [screen] in
  let Ti2357.5645: Int = 2 in
    Ta2356.5644.(Ti2357.5645) in
  let Td2361.5641: Float = let Ta2359.5642: [Float] = [screenz_dir] in
  let Ti2360.5643: Int = 2 in
    Ta2359.5642.(Ti2360.5643) in
    (Td2358.5640 - Td2361.5641) in
                                              Ta2354.5637.(Ti2355.5638) <- Td2362.5639 in
                                                                                                              let rec (read_light.2731: (Unit) -> Unit) ((Tu36.2732: Unit)) = let nl.5589: Int = let Tu2269.5616: Unit = () in
  read_int(Tu2269.5616) in
  let l1.5590: Float = let Td2271.5614: Float = let Tu2270.5615: Unit = () in
  read_float(Tu2270.5615) in
  rad.2727(Td2271.5614) in
    let sl1.5591: Int = sin(l1.5590) in
      let Tu39.5592: Unit = let Ta2272.5611: [Float] = [light] in
  let Ti2273.5612: Int = 1 in
    let Td2274.5613: Float = fneg(sl1.5591) in
      Ta2272.5611.(Ti2273.5612) <- Td2274.5613 in
        let l2.5593: Float = let Td2276.5609: Float = let Tu2275.5610: Unit = () in
  read_float(Tu2275.5610) in
  rad.2727(Td2276.5609) in
          let cl1.5594: Float = cos(l1.5590) in
            let sl2.5595: Float = sin(l2.5593) in
              let Tu38.5596: Unit = let Ta2277.5606: [Float] = [light] in
  let Ti2278.5607: Int = 0 in
    let Td2279.5608: Float = (cl1.5594 * sl2.5595) in
      Ta2277.5606.(Ti2278.5607) <- Td2279.5608 in
                let cl2.5597: Float = cos(l2.5593) in
                  let Tu37.5598: Unit = let Ta2280.5603: [Float] = [light] in
  let Ti2281.5604: Int = 2 in
    let Td2282.5605: Float = (cl1.5594 * cl2.5597) in
      Ta2280.5603.(Ti2281.5604) <- Td2282.5605 in
                    let Ta2283.5599: [Float] = [beam] in
                      let Ti2284.5600: Int = 0 in
                        let Td2286.5601: Float = let Tu2285.5602: Unit = () in
  read_float(Tu2285.5602) in
                          Ta2283.5599.(Ti2284.5600) <- Td2286.5601 in
                                                                                                                let rec (rotate_quadratic_matrix.2733: ([Float], [Float]) -> Unit) ((abc.2734: [Float]), (rot.2735: [Float])) = let cos_x.5479: Float = let Td2183.5587: Float = let Ti2182.5588: Int = 0 in
  rot.2735.(Ti2182.5588) in
  cos(Td2183.5587) in
  let sin_x.5480: Float = let Td2185.5585: Float = let Ti2184.5586: Int = 0 in
  rot.2735.(Ti2184.5586) in
  sin(Td2185.5585) in
    let cos_y.5481: Float = let Td2187.5583: Float = let Ti2186.5584: Int = 1 in
  rot.2735.(Ti2186.5584) in
  cos(Td2187.5583) in
      let sin_y.5482: Float = let Td2189.5581: Float = let Ti2188.5582: Int = 1 in
  rot.2735.(Ti2188.5582) in
  sin(Td2189.5581) in
        let cos_z.5483: Float = let Td2191.5579: Float = let Ti2190.5580: Int = 2 in
  rot.2735.(Ti2190.5580) in
  cos(Td2191.5579) in
          let sin_z.5484: Float = let Td2193.5577: Float = let Ti2192.5578: Int = 2 in
  rot.2735.(Ti2192.5578) in
  sin(Td2193.5577) in
            let m00.5485: Float = (cos_y.5481 * cos_z.5483) in
              let m01.5486: Float = let Td2195.5574: Float = let Td2194.5576: Float = (sin_x.5480 * sin_y.5482) in
  (Td2194.5576 * cos_z.5483) in
  let Td2196.5575: Float = (cos_x.5479 * sin_z.5484) in
    (Td2195.5574 - Td2196.5575) in
                let m02.5487: Float = let Td2198.5571: Float = let Td2197.5573: Float = (cos_x.5479 * sin_y.5482) in
  (Td2197.5573 * cos_z.5483) in
  let Td2199.5572: Float = (sin_x.5480 * sin_z.5484) in
    (Td2198.5571 + Td2199.5572) in
                  let m10.5488: Float = (cos_y.5481 * sin_z.5484) in
                    let m11.5489: Float = let Td2201.5568: Float = let Td2200.5570: Float = (sin_x.5480 * sin_y.5482) in
  (Td2200.5570 * sin_z.5484) in
  let Td2202.5569: Float = (cos_x.5479 * cos_z.5483) in
    (Td2201.5568 + Td2202.5569) in
                      let m12.5490: Float = let Td2204.5565: Float = let Td2203.5567: Float = (cos_x.5479 * sin_y.5482) in
  (Td2203.5567 * sin_z.5484) in
  let Td2205.5566: Float = (sin_x.5480 * cos_z.5483) in
    (Td2204.5565 - Td2205.5566) in
                        let m20.5491: Float = fneg(sin_y.5482) in
                          let m21.5492: Float = (sin_x.5480 * cos_y.5481) in
                            let m22.5493: Float = (cos_x.5479 * cos_y.5481) in
                              let ao.5494: Float = let Ti2206.5564: Int = 0 in
  abc.2734.(Ti2206.5564) in
                                let bo.5495: Float = let Ti2207.5563: Int = 1 in
  abc.2734.(Ti2207.5563) in
                                  let co.5496: Float = let Ti2208.5562: Int = 2 in
  abc.2734.(Ti2208.5562) in
                                    let Tu44.5497: Unit = let Ti2209.5553: Int = 0 in
  let Td2217.5554: Float = let Td2214.5555: Float = let Td2211.5558: Float = let Td2210.5561: Float = fsqr(m00.5485) in
  (ao.5494 * Td2210.5561) in
  let Td2213.5559: Float = let Td2212.5560: Float = fsqr(m10.5488) in
  (bo.5495 * Td2212.5560) in
    (Td2211.5558 + Td2213.5559) in
  let Td2216.5556: Float = let Td2215.5557: Float = fsqr(m20.5491) in
  (co.5496 * Td2215.5557) in
    (Td2214.5555 + Td2216.5556) in
    abc.2734.(Ti2209.5553) <- Td2217.5554 in
                                      let Tu43.5498: Unit = let Ti2218.5544: Int = 1 in
  let Td2226.5545: Float = let Td2223.5546: Float = let Td2220.5549: Float = let Td2219.5552: Float = fsqr(m01.5486) in
  (ao.5494 * Td2219.5552) in
  let Td2222.5550: Float = let Td2221.5551: Float = fsqr(m11.5489) in
  (bo.5495 * Td2221.5551) in
    (Td2220.5549 + Td2222.5550) in
  let Td2225.5547: Float = let Td2224.5548: Float = fsqr(m21.5492) in
  (co.5496 * Td2224.5548) in
    (Td2223.5546 + Td2225.5547) in
    abc.2734.(Ti2218.5544) <- Td2226.5545 in
                                        let Tu42.5499: Unit = let Ti2227.5535: Int = 2 in
  let Td2235.5536: Float = let Td2232.5537: Float = let Td2229.5540: Float = let Td2228.5543: Float = fsqr(m02.5487) in
  (ao.5494 * Td2228.5543) in
  let Td2231.5541: Float = let Td2230.5542: Float = fsqr(m12.5490) in
  (bo.5495 * Td2230.5542) in
    (Td2229.5540 + Td2231.5541) in
  let Td2234.5538: Float = let Td2233.5539: Float = fsqr(m22.5493) in
  (co.5496 * Td2233.5539) in
    (Td2232.5537 + Td2234.5538) in
    abc.2734.(Ti2227.5535) <- Td2235.5536 in
                                          let Tu41.5500: Unit = let Ti2236.5524: Int = 0 in
  let Td2246.5525: Float = let Td2237.5526: Float = 2. in
  let Td2245.5527: Float = let Td2242.5528: Float = let Td2239.5531: Float = let Td2238.5534: Float = (ao.5494 * m01.5486) in
  (Td2238.5534 * m02.5487) in
  let Td2241.5532: Float = let Td2240.5533: Float = (bo.5495 * m11.5489) in
  (Td2240.5533 * m12.5490) in
    (Td2239.5531 + Td2241.5532) in
  let Td2244.5529: Float = let Td2243.5530: Float = (co.5496 * m21.5492) in
  (Td2243.5530 * m22.5493) in
    (Td2242.5528 + Td2244.5529) in
    (Td2237.5526 * Td2245.5527) in
    rot.2735.(Ti2236.5524) <- Td2246.5525 in
                                            let Tu40.5501: Unit = let Ti2247.5513: Int = 1 in
  let Td2257.5514: Float = let Td2248.5515: Float = 2. in
  let Td2256.5516: Float = let Td2253.5517: Float = let Td2250.5520: Float = let Td2249.5523: Float = (ao.5494 * m00.5485) in
  (Td2249.5523 * m02.5487) in
  let Td2252.5521: Float = let Td2251.5522: Float = (bo.5495 * m10.5488) in
  (Td2251.5522 * m12.5490) in
    (Td2250.5520 + Td2252.5521) in
  let Td2255.5518: Float = let Td2254.5519: Float = (co.5496 * m20.5491) in
  (Td2254.5519 * m22.5493) in
    (Td2253.5517 + Td2255.5518) in
    (Td2248.5515 * Td2256.5516) in
    rot.2735.(Ti2247.5513) <- Td2257.5514 in
                                              let Ti2258.5502: Int = 2 in
                                                let Td2268.5503: Float = let Td2259.5504: Float = 2. in
  let Td2267.5505: Float = let Td2264.5506: Float = let Td2261.5509: Float = let Td2260.5512: Float = (ao.5494 * m00.5485) in
  (Td2260.5512 * m01.5486) in
  let Td2263.5510: Float = let Td2262.5511: Float = (bo.5495 * m10.5488) in
  (Td2262.5511 * m11.5489) in
    (Td2261.5509 + Td2263.5510) in
  let Td2266.5507: Float = let Td2265.5508: Float = (co.5496 * m20.5491) in
  (Td2265.5508 * m21.5492) in
    (Td2264.5506 + Td2266.5507) in
    (Td2259.5504 * Td2267.5505) in
                                                  rot.2735.(Ti2258.5502) <- Td2268.5503 in
                                                                                                                  let rec (read_nth_object.2736: (Int) -> Bool) ((n.2737: Int)) = let texture.5350: Int = let Tu2088.5478: Unit = () in
  read_int(Tu2088.5478) in
  let Ti2090.5351: Int = let Ti2089.5477: Int = 1 in
  -(Ti2089.5477) in
    if texture.5350 == Ti2090.5351 then
      0
    else
      let form.5352: Int = let Tu2091.5476: Unit = () in
  read_int(Tu2091.5476) in
        let refltype.5353: Int = let Tu2092.5475: Unit = () in
  read_int(Tu2092.5475) in
          let isrot_p.5354: Int = let Tu2093.5474: Unit = () in
  read_int(Tu2093.5474) in
            let abc.5355: [Float] = let Ti2094.5472: Int = 3 in
  let Td2095.5473: Float = 0. in
    create_float_array(Ti2094.5472, Td2095.5473) in
              let Tu63.5356: Unit = let Ti2096.5469: Int = 0 in
  let Td2098.5470: Float = let Tu2097.5471: Unit = () in
  read_float(Tu2097.5471) in
    abc.5355.(Ti2096.5469) <- Td2098.5470 in
                let Tu62.5357: Unit = let Ti2099.5466: Int = 1 in
  let Td2101.5467: Float = let Tu2100.5468: Unit = () in
  read_float(Tu2100.5468) in
    abc.5355.(Ti2099.5466) <- Td2101.5467 in
                  let Tu61.5358: Unit = let Ti2102.5463: Int = 2 in
  let Td2104.5464: Float = let Tu2103.5465: Unit = () in
  read_float(Tu2103.5465) in
    abc.5355.(Ti2102.5463) <- Td2104.5464 in
                    let xyz.5359: [Float] = let Ti2105.5461: Int = 3 in
  let Td2106.5462: Float = 0. in
    create_float_array(Ti2105.5461, Td2106.5462) in
                      let Tu60.5360: Unit = let Ti2107.5458: Int = 0 in
  let Td2109.5459: Float = let Tu2108.5460: Unit = () in
  read_float(Tu2108.5460) in
    xyz.5359.(Ti2107.5458) <- Td2109.5459 in
                        let Tu59.5361: Unit = let Ti2110.5455: Int = 1 in
  let Td2112.5456: Float = let Tu2111.5457: Unit = () in
  read_float(Tu2111.5457) in
    xyz.5359.(Ti2110.5455) <- Td2112.5456 in
                          let Tu58.5362: Unit = let Ti2113.5452: Int = 2 in
  let Td2115.5453: Float = let Tu2114.5454: Unit = () in
  read_float(Tu2114.5454) in
    xyz.5359.(Ti2113.5452) <- Td2115.5453 in
                            let m_invert.5363: Bool = let Td2117.5450: Float = let Tu2116.5451: Unit = () in
  read_float(Tu2116.5451) in
  fisneg(Td2117.5450) in
                              let reflparam.5364: [Float] = let Ti2118.5448: Int = 2 in
  let Td2119.5449: Float = 0. in
    create_float_array(Ti2118.5448, Td2119.5449) in
                                let Tu57.5365: Unit = let Ti2120.5445: Int = 0 in
  let Td2122.5446: Float = let Tu2121.5447: Unit = () in
  read_float(Tu2121.5447) in
    reflparam.5364.(Ti2120.5445) <- Td2122.5446 in
                                  let Tu56.5366: Unit = let Ti2123.5442: Int = 1 in
  let Td2125.5443: Float = let Tu2124.5444: Unit = () in
  read_float(Tu2124.5444) in
    reflparam.5364.(Ti2123.5442) <- Td2125.5443 in
                                    let color.5367: [Float] = let Ti2126.5440: Int = 3 in
  let Td2127.5441: Float = 0. in
    create_float_array(Ti2126.5440, Td2127.5441) in
                                      let Tu55.5368: Unit = let Ti2128.5437: Int = 0 in
  let Td2130.5438: Float = let Tu2129.5439: Unit = () in
  read_float(Tu2129.5439) in
    color.5367.(Ti2128.5437) <- Td2130.5438 in
                                        let Tu54.5369: Unit = let Ti2131.5434: Int = 1 in
  let Td2133.5435: Float = let Tu2132.5436: Unit = () in
  read_float(Tu2132.5436) in
    color.5367.(Ti2131.5434) <- Td2133.5435 in
                                          let Tu53.5370: Unit = let Ti2134.5431: Int = 2 in
  let Td2136.5432: Float = let Tu2135.5433: Unit = () in
  read_float(Tu2135.5433) in
    color.5367.(Ti2134.5431) <- Td2136.5432 in
                                            let rotation.5371: [Float] = let Ti2137.5429: Int = 3 in
  let Td2138.5430: Float = 0. in
    create_float_array(Ti2137.5429, Td2138.5430) in
                                              let Tu52.5372: Unit = let Ti2139.5414: Int = 0 in
  if isrot_p.5354 == Ti2139.5414 then
    ()
  else
    let Tu46.5415: Unit = let Ti2140.5425: Int = 0 in
  let Td2143.5426: Float = let Td2142.5427: Float = let Tu2141.5428: Unit = () in
  read_float(Tu2141.5428) in
  rad.2727(Td2142.5427) in
    rotation.5371.(Ti2140.5425) <- Td2143.5426 in
      let Tu45.5416: Unit = let Ti2144.5421: Int = 1 in
  let Td2147.5422: Float = let Td2146.5423: Float = let Tu2145.5424: Unit = () in
  read_float(Tu2145.5424) in
  rad.2727(Td2146.5423) in
    rotation.5371.(Ti2144.5421) <- Td2147.5422 in
        let Ti2148.5417: Int = 2 in
          let Td2151.5418: Float = let Td2150.5419: Float = let Tu2149.5420: Unit = () in
  read_float(Tu2149.5420) in
  rad.2727(Td2150.5419) in
            rotation.5371.(Ti2148.5417) <- Td2151.5418 in
                                                let m_invert2.5373: Bool = let Ti2152.5413: Int = 2 in
  if form.5352 == Ti2152.5413 then
    1
  else
    m_invert.5363 in
                                                  let ctbl.5374: [Float] = let Ti2153.5411: Int = 4 in
  let Td2154.5412: Float = 0. in
    create_float_array(Ti2153.5411, Td2154.5412) in
                                                    let obj.5375: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Float], [Float], [Float]) = (texture.5350, form.5352, refltype.5353, isrot_p.5354, abc.5355, xyz.5359, m_invert2.5373, reflparam.5364, color.5367, rotation.5371, ctbl.5374) in
                                                      let Tu51.5376: Unit = let Ta2155.5410: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta2155.5410.(n.2737) <- obj.5375 in
                                                        let Tu50.5377: Unit = let Ti2156.5380: Int = 3 in
  if form.5352 == Ti2156.5380 then
    let a.5384: Float = let Ti2157.5409: Int = 0 in
  abc.5355.(Ti2157.5409) in
      let Tu48.5385: Unit = let Ti2158.5403: Int = 0 in
  let Td2163.5404: Float = let Tb2159.5405: Bool = fiszero(a.5384) in
  let Ti2160.5406: Int = 0 in
    if Tb2159.5405 == Ti2160.5406 then
      let Td2161.5407: Float = sgn.2602(a.5384) in
        let Td2162.5408: Float = fsqr(a.5384) in
          (Td2161.5407 / Td2162.5408)
    else
      0. in
    abc.5355.(Ti2158.5403) <- Td2163.5404 in
        let b.5386: Float = let Ti2164.5402: Int = 1 in
  abc.5355.(Ti2164.5402) in
          let Tu47.5387: Unit = let Ti2165.5396: Int = 1 in
  let Td2170.5397: Float = let Tb2166.5398: Bool = fiszero(b.5386) in
  let Ti2167.5399: Int = 0 in
    if Tb2166.5398 == Ti2167.5399 then
      let Td2168.5400: Float = sgn.2602(b.5386) in
        let Td2169.5401: Float = fsqr(b.5386) in
          (Td2168.5400 / Td2169.5401)
    else
      0. in
    abc.5355.(Ti2165.5396) <- Td2170.5397 in
            let c.5388: Float = let Ti2171.5395: Int = 2 in
  abc.5355.(Ti2171.5395) in
              let Ti2172.5389: Int = 2 in
                let Td2177.5390: Float = let Tb2173.5391: Bool = fiszero(c.5388) in
  let Ti2174.5392: Int = 0 in
    if Tb2173.5391 == Ti2174.5392 then
      let Td2175.5393: Float = sgn.2602(c.5388) in
        let Td2176.5394: Float = fsqr(c.5388) in
          (Td2175.5393 / Td2176.5394)
    else
      0. in
                  abc.5355.(Ti2172.5389) <- Td2177.5390
  else
    let Ti2178.5381: Int = 2 in
      if form.5352 == Ti2178.5381 then
        let Ti2180.5382: Int = let Ti2179.5383: Int = 0 in
  if m_invert.5363 == Ti2179.5383 then
    1
  else
    0 in
          vecunit_sgn.2628(abc.5355, Ti2180.5382)
      else
        () in
                                                          let Tu49.5378: Unit = let Ti2181.5379: Int = 0 in
  if isrot_p.5354 == Ti2181.5379 then
    ()
  else
    rotate_quadratic_matrix.2733(abc.5355, rotation.5371) in
                                                            1 in
                                                                                                                    let rec (read_object.2738: (Int) -> Unit) ((n.2739: Int)) = let Ti2081.5343: Int = 60 in
  if Ti2081.5343 <= n.2739 then
    ()
  else
    let Tb2082.5344: Bool = read_nth_object.2736(n.2739) in
      let Ti2083.5345: Int = 0 in
        if Tb2082.5344 == Ti2083.5345 then
          let Ta2084.5348: [Int] = [n_objects] in
            let Ti2085.5349: Int = 0 in
              Ta2084.5348.(Ti2085.5349) <- n.2739
        else
          let Ti2087.5346: Int = let Ti2086.5347: Int = 1 in
  (n.2739 + Ti2086.5347) in
            read_object.2738(Ti2087.5346) in
                                                                                                                      let rec (read_all_object.2740: (Unit) -> Unit) ((Tu64.2741: Unit)) = let Ti2080.5342: Int = 0 in
  read_object.2738(Ti2080.5342) in
                                                                                                                        let rec (read_net_item.2742: (Int) -> [Int]) ((length.2743: Int)) = let item.5330: Int = let Tu2071.5341: Unit = () in
  read_int(Tu2071.5341) in
  let Ti2073.5331: Int = let Ti2072.5340: Int = 1 in
  -(Ti2072.5340) in
    if item.5330 == Ti2073.5331 then
      let Ti2075.5336: Int = let Ti2074.5339: Int = 1 in
  (length.2743 + Ti2074.5339) in
        let Ti2077.5337: Int = let Ti2076.5338: Int = 1 in
  -(Ti2076.5338) in
          create_array(Ti2075.5336, Ti2077.5337)
    else
      let v.5332: [Int] = let Ti2079.5334: Int = let Ti2078.5335: Int = 1 in
  (length.2743 + Ti2078.5335) in
  read_net_item.2742(Ti2079.5334) in
        let Tu65.5333: Unit = v.5332.(length.2743) <- item.5330 in
          v.5332 in
                                                                                                                          let rec (read_or_network.2744: (Int) -> [[Int]]) ((length.2745: Int)) = let net.5318: [Int] = let Ti2062.5329: Int = 0 in
  read_net_item.2742(Ti2062.5329) in
  let Ti2064.5319: Int = let Ti2063.5328: Int = 0 in
  net.5318.(Ti2063.5328) in
    let Ti2066.5320: Int = let Ti2065.5327: Int = 1 in
  -(Ti2065.5327) in
      if Ti2064.5319 == Ti2066.5320 then
        let Ti2068.5325: Int = let Ti2067.5326: Int = 1 in
  (length.2745 + Ti2067.5326) in
          create_array(Ti2068.5325, net.5318)
      else
        let v.5321: [[Int]] = let Ti2070.5323: Int = let Ti2069.5324: Int = 1 in
  (length.2745 + Ti2069.5324) in
  read_or_network.2744(Ti2070.5323) in
          let Tu66.5322: Unit = v.5321.(length.2745) <- net.5318 in
            v.5321 in
                                                                                                                            let rec (read_and_network.2746: (Int) -> Unit) ((n.2747: Int)) = let net.5308: [Int] = let Ti2054.5317: Int = 0 in
  read_net_item.2742(Ti2054.5317) in
  let Ti2056.5309: Int = let Ti2055.5316: Int = 0 in
  net.5308.(Ti2055.5316) in
    let Ti2058.5310: Int = let Ti2057.5315: Int = 1 in
  -(Ti2057.5315) in
      if Ti2056.5309 == Ti2058.5310 then
        ()
      else
        let Tu67.5311: Unit = let Ta2059.5314: [[Int]] = [and_net] in
  Ta2059.5314.(n.2747) <- net.5308 in
          let Ti2061.5312: Int = let Ti2060.5313: Int = 1 in
  (n.2747 + Ti2060.5313) in
            read_and_network.2746(Ti2061.5312) in
                                                                                                                              let rec (read_parameter.2748: (Unit) -> Unit) ((Tu68.2749: Unit)) = let Tu72.5296: Unit = let Tu2046.5307: Unit = () in
  read_screen_settings.2729(Tu2046.5307) in
  let Tu71.5297: Unit = let Tu2047.5306: Unit = () in
  read_light.2731(Tu2047.5306) in
    let Tu70.5298: Unit = let Tu2048.5305: Unit = () in
  read_all_object.2740(Tu2048.5305) in
      let Tu69.5299: Unit = let Ti2049.5304: Int = 0 in
  read_and_network.2746(Ti2049.5304) in
        let Ta2050.5300: [[[Int]]] = [or_net] in
          let Ti2051.5301: Int = 0 in
            let Ta2053.5302: [[Int]] = let Ti2052.5303: Int = 0 in
  read_or_network.2744(Ti2052.5303) in
              Ta2050.5300.(Ti2051.5301) <- Ta2053.5302 in
                                                                                                                                let rec (solver_rect_surface.2750: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float, Int, Int, Int) -> Bool) ((m.2751: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec.2752: [Float]), (b0.2753: Float), (b1.2754: Float), (b2.2755: Float), (i0.2756: Int), (i1.2757: Int), (i2.2758: Int)) = let Tb2021.5266: Bool = let Td2020.5295: Float = dirvec.2752.(i0.2756) in
  fiszero(Td2020.5295) in
  let Ti2022.5267: Int = 0 in
    if Tb2021.5266 == Ti2022.5267 then
      let abc.5268: [Float] = o_param_abc.2672(m.2751) in
        let d.5269: Float = let Tb2026.5290: Bool = let Tb2023.5292: Bool = o_isinvert.2662(m.2751) in
  let Tb2025.5293: Bool = let Td2024.5294: Float = dirvec.2752.(i0.2756) in
  fisneg(Td2024.5294) in
    xor.2599(Tb2023.5292, Tb2025.5293) in
  let Td2027.5291: Float = abc.5268.(i0.2756) in
    fneg_cond.2604(Tb2026.5290, Td2027.5291) in
          let d2.5270: Float = let Td2028.5288: Float = (d.5269 - b0.2753) in
  let Td2029.5289: Float = dirvec.2752.(i0.2756) in
    (Td2028.5288 / Td2029.5289) in
            let Tb2035.5271: Bool = let Ti2033.5283: Int = let Td2032.5285: Float = let Td2031.5286: Float = let Td2030.5287: Float = dirvec.2752.(i1.2757) in
  (d2.5270 * Td2030.5287) in
  (Td2031.5286 + b1.2754) in
  fabs(Td2032.5285) in
  let Td2034.5284: Float = abc.5268.(i1.2757) in
    fless(Ti2033.5283, Td2034.5284) in
              let Ti2036.5272: Int = 0 in
                if Tb2035.5271 == Ti2036.5272 then
                  0
                else
                  let Tb2042.5273: Bool = let Ti2040.5278: Int = let Td2039.5280: Float = let Td2038.5281: Float = let Td2037.5282: Float = dirvec.2752.(i2.2758) in
  (d2.5270 * Td2037.5282) in
  (Td2038.5281 + b2.2755) in
  fabs(Td2039.5280) in
  let Td2041.5279: Float = abc.5268.(i2.2758) in
    fless(Ti2040.5278, Td2041.5279) in
                    let Ti2043.5274: Int = 0 in
                      if Tb2042.5273 == Ti2043.5274 then
                        0
                      else
                        let Tu73.5275: Unit = let Ta2044.5276: [Int] = [solver_dist] in
  let Ti2045.5277: Int = 0 in
    Ta2044.5276.(Ti2045.5277) <- d2.5270 in
                          1
    else
      0 in
                                                                                                                                  let rec (solver_rect.2759: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m.2760: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec.2761: [Float]), (b0.2762: Float), (b1.2763: Float), (b2.2764: Float)) = let Tb2008.5251: Bool = let Ti2005.5263: Int = 0 in
  let Ti2006.5264: Int = 1 in
    let Ti2007.5265: Int = 2 in
      solver_rect_surface.2750(m.2760, dirvec.2761, b0.2762, b1.2763, b2.2764, Ti2005.5263, Ti2006.5264, Ti2007.5265) in
  let Ti2009.5252: Int = 0 in
    if Tb2008.5251 == Ti2009.5252 then
      let Tb2013.5253: Bool = let Ti2010.5260: Int = 1 in
  let Ti2011.5261: Int = 2 in
    let Ti2012.5262: Int = 0 in
      solver_rect_surface.2750(m.2760, dirvec.2761, b1.2763, b2.2764, b0.2762, Ti2010.5260, Ti2011.5261, Ti2012.5262) in
        let Ti2014.5254: Int = 0 in
          if Tb2013.5253 == Ti2014.5254 then
            let Tb2018.5255: Bool = let Ti2015.5257: Int = 2 in
  let Ti2016.5258: Int = 0 in
    let Ti2017.5259: Int = 1 in
      solver_rect_surface.2750(m.2760, dirvec.2761, b2.2764, b0.2762, b1.2763, Ti2015.5257, Ti2016.5258, Ti2017.5259) in
              let Ti2019.5256: Int = 0 in
                if Tb2018.5255 == Ti2019.5256 then
                  0
                else
                  3
          else
            2
    else
      1 in
                                                                                                                                    let rec (solver_surface.2765: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m.2766: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec.2767: [Float]), (b0.2768: Float), (b1.2769: Float), (b2.2770: Float)) = let abc.5241: [Float] = o_param_abc.2672(m.2766) in
  let d.5242: Float = veciprod.2631(dirvec.2767, abc.5241) in
    let Tb1998.5243: Bool = fispos(d.5242) in
      let Ti1999.5244: Int = 0 in
        if Tb1998.5243 == Ti1999.5244 then
          0
        else
          let Tu74.5245: Unit = let Ta2000.5246: [Int] = [solver_dist] in
  let Ti2001.5247: Int = 0 in
    let Td2004.5248: Float = let Td2003.5249: Float = let Td2002.5250: Float = veciprod2.2634(abc.5241, b0.2768, b1.2769, b2.2770) in
  fneg(Td2002.5250) in
  (Td2003.5249 / d.5242) in
      Ta2000.5246.(Ti2001.5247) <- Td2004.5248 in
            1 in
                                                                                                                                      let rec (quadratic.2771: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Float) ((m.2772: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (v0.2773: Float), (v1.2774: Float), (v2.2775: Float)) = let diag_part.5217: Float = let Td1981.5231: Float = let Td1977.5235: Float = let Td1975.5239: Float = fsqr(v0.2773) in
  let Td1976.5240: Float = o_param_a.2666(m.2772) in
    (Td1975.5239 * Td1976.5240) in
  let Td1980.5236: Float = let Td1978.5237: Float = fsqr(v1.2774) in
  let Td1979.5238: Float = o_param_b.2668(m.2772) in
    (Td1978.5237 * Td1979.5238) in
    (Td1977.5235 + Td1980.5236) in
  let Td1984.5232: Float = let Td1982.5233: Float = fsqr(v2.2775) in
  let Td1983.5234: Float = o_param_c.2670(m.2772) in
    (Td1982.5233 * Td1983.5234) in
    (Td1981.5231 + Td1984.5232) in
  let Ti1985.5218: Int = o_isrot.2664(m.2772) in
    let Ti1986.5219: Int = 0 in
      if Ti1985.5218 == Ti1986.5219 then
        diag_part.5217
      else
        let Td1994.5220: Float = let Td1990.5224: Float = let Td1989.5228: Float = let Td1987.5229: Float = (v1.2774 * v2.2775) in
  let Td1988.5230: Float = o_param_r1.2690(m.2772) in
    (Td1987.5229 * Td1988.5230) in
  (diag_part.5217 + Td1989.5228) in
  let Td1993.5225: Float = let Td1991.5226: Float = (v2.2775 * v0.2773) in
  let Td1992.5227: Float = o_param_r2.2692(m.2772) in
    (Td1991.5226 * Td1992.5227) in
    (Td1990.5224 + Td1993.5225) in
          let Td1997.5221: Float = let Td1995.5222: Float = (v0.2773 * v1.2774) in
  let Td1996.5223: Float = o_param_r3.2694(m.2772) in
    (Td1995.5222 * Td1996.5223) in
            (Td1994.5220 + Td1997.5221) in
                                                                                                                                        let rec (bilinear.2776: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float, Float, Float, Float) -> Float) ((m.2777: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (v0.2778: Float), (v1.2779: Float), (v2.2780: Float), (w0.2781: Float), (w1.2782: Float), (w2.2783: Float)) = let diag_part.5186: Float = let Td1951.5207: Float = let Td1947.5211: Float = let Td1945.5215: Float = (v0.2778 * w0.2781) in
  let Td1946.5216: Float = o_param_a.2666(m.2777) in
    (Td1945.5215 * Td1946.5216) in
  let Td1950.5212: Float = let Td1948.5213: Float = (v1.2779 * w1.2782) in
  let Td1949.5214: Float = o_param_b.2668(m.2777) in
    (Td1948.5213 * Td1949.5214) in
    (Td1947.5211 + Td1950.5212) in
  let Td1954.5208: Float = let Td1952.5209: Float = (v2.2780 * w2.2783) in
  let Td1953.5210: Float = o_param_c.2670(m.2777) in
    (Td1952.5209 * Td1953.5210) in
    (Td1951.5207 + Td1954.5208) in
  let Ti1955.5187: Int = o_isrot.2664(m.2777) in
    let Ti1956.5188: Int = 0 in
      if Ti1955.5187 == Ti1956.5188 then
        diag_part.5186
      else
        let Td1974.5189: Float = let Td1973.5190: Float = let Td1967.5191: Float = let Td1961.5197: Float = let Td1959.5203: Float = let Td1957.5205: Float = (v2.2780 * w1.2782) in
  let Td1958.5206: Float = (v1.2779 * w2.2783) in
    (Td1957.5205 + Td1958.5206) in
  let Td1960.5204: Float = o_param_r1.2690(m.2777) in
    (Td1959.5203 * Td1960.5204) in
  let Td1966.5198: Float = let Td1964.5199: Float = let Td1962.5201: Float = (v0.2778 * w2.2783) in
  let Td1963.5202: Float = (v2.2780 * w0.2781) in
    (Td1962.5201 + Td1963.5202) in
  let Td1965.5200: Float = o_param_r2.2692(m.2777) in
    (Td1964.5199 * Td1965.5200) in
    (Td1961.5197 + Td1966.5198) in
  let Td1972.5192: Float = let Td1970.5193: Float = let Td1968.5195: Float = (v0.2778 * w1.2782) in
  let Td1969.5196: Float = (v1.2779 * w0.2781) in
    (Td1968.5195 + Td1969.5196) in
  let Td1971.5194: Float = o_param_r3.2694(m.2777) in
    (Td1970.5193 * Td1971.5194) in
    (Td1967.5191 + Td1972.5192) in
  fhalf(Td1973.5190) in
          (diag_part.5186 + Td1974.5189) in
                                                                                                                                          let rec (solver_second.2784: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m.2785: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec.2786: [Float]), (b0.2787: Float), (b1.2788: Float), (b2.2789: Float)) = let aa.5151: Float = let Td1919.5180: Float = let Ti1918.5185: Int = 0 in
  dirvec.2786.(Ti1918.5185) in
  let Td1921.5181: Float = let Ti1920.5184: Int = 1 in
  dirvec.2786.(Ti1920.5184) in
    let Td1923.5182: Float = let Ti1922.5183: Int = 2 in
  dirvec.2786.(Ti1922.5183) in
      quadratic.2771(m.2785, Td1919.5180, Td1921.5181, Td1923.5182) in
  let Tb1924.5152: Bool = fiszero(aa.5151) in
    let Ti1925.5153: Int = 0 in
      if Tb1924.5152 == Ti1925.5153 then
        let bb.5154: Float = let Td1927.5174: Float = let Ti1926.5179: Int = 0 in
  dirvec.2786.(Ti1926.5179) in
  let Td1929.5175: Float = let Ti1928.5178: Int = 1 in
  dirvec.2786.(Ti1928.5178) in
    let Td1931.5176: Float = let Ti1930.5177: Int = 2 in
  dirvec.2786.(Ti1930.5177) in
      bilinear.2776(m.2785, Td1927.5174, Td1929.5175, Td1931.5176, b0.2787, b1.2788, b2.2789) in
          let cc0.5155: Float = quadratic.2771(m.2785, b0.2787, b1.2788, b2.2789) in
            let cc.5156: Float = let Ti1932.5171: Int = o_form.2658(m.2785) in
  let Ti1933.5172: Int = 3 in
    if Ti1932.5171 == Ti1933.5172 then
      let Td1934.5173: Float = 1. in
        (cc0.5155 - Td1934.5173)
    else
      cc0.5155 in
              let d.5157: Float = let Td1935.5169: Float = fsqr(bb.5154) in
  let Td1936.5170: Float = (aa.5151 * cc.5156) in
    (Td1935.5169 - Td1936.5170) in
                let Tb1937.5158: Bool = fispos(d.5157) in
                  let Ti1938.5159: Int = 0 in
                    if Tb1937.5158 == Ti1938.5159 then
                      0
                    else
                      let sd.5160: Float = sqrt(d.5157) in
                        let t1.5161: Float = let Tb1939.5167: Bool = o_isinvert.2662(m.2785) in
  let Ti1940.5168: Int = 0 in
    if Tb1939.5167 == Ti1940.5168 then
      fneg(sd.5160)
    else
      sd.5160 in
                          let Tu75.5162: Unit = let Ta1941.5163: [Int] = [solver_dist] in
  let Ti1942.5164: Int = 0 in
    let Td1944.5165: Float = let Td1943.5166: Float = (t1.5161 - bb.5154) in
  (Td1943.5166 / aa.5151) in
      Ta1941.5163.(Ti1942.5164) <- Td1944.5165 in
                            1
      else
        0 in
                                                                                                                                            let rec (solver.2790: (Int, [Float], [Float]) -> Int) ((index.2791: Int), (dirvec.2792: [Float]), (org.2793: [Float])) = let m.5134: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1906.5150: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1906.5150.(index.2791) in
  let b0.5135: Float = let Td1908.5147: Float = let Ti1907.5149: Int = 0 in
  org.2793.(Ti1907.5149) in
  let Td1909.5148: Float = o_param_x.2674(m.5134) in
    (Td1908.5147 - Td1909.5148) in
    let b1.5136: Float = let Td1911.5144: Float = let Ti1910.5146: Int = 1 in
  org.2793.(Ti1910.5146) in
  let Td1912.5145: Float = o_param_y.2676(m.5134) in
    (Td1911.5144 - Td1912.5145) in
      let b2.5137: Float = let Td1914.5141: Float = let Ti1913.5143: Int = 2 in
  org.2793.(Ti1913.5143) in
  let Td1915.5142: Float = o_param_z.2678(m.5134) in
    (Td1914.5141 - Td1915.5142) in
        let m_shape.5138: Int = o_form.2658(m.5134) in
          let Ti1916.5139: Int = 1 in
            if m_shape.5138 == Ti1916.5139 then
              solver_rect.2759(m.5134, dirvec.2792, b0.5135, b1.5136, b2.5137)
            else
              let Ti1917.5140: Int = 2 in
                if m_shape.5138 == Ti1917.5140 then
                  solver_surface.2765(m.5134, dirvec.2792, b0.5135, b1.5136, b2.5137)
                else
                  solver_second.2784(m.5134, dirvec.2792, b0.5135, b1.5136, b2.5137) in
                                                                                                                                              let rec (solver_rect_fast.2794: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], [Float], Float, Float, Float) -> Int) ((m.2795: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (v.2796: [Float]), (dconst.2797: [Float]), (b0.2798: Float), (b1.2799: Float), (b2.2800: Float)) = let d0.5041: Float = let Td1821.5129: Float = let Td1820.5132: Float = let Ti1819.5133: Int = 0 in
  dconst.2797.(Ti1819.5133) in
  (Td1820.5132 - b0.2798) in
  let Td1823.5130: Float = let Ti1822.5131: Int = 1 in
  dconst.2797.(Ti1822.5131) in
    (Td1821.5129 * Td1823.5130) in
  let Ti1844.5042: Int = let Tb1830.5109: Bool = let Ti1828.5123: Int = let Td1827.5125: Float = let Td1826.5126: Float = let Td1825.5127: Float = let Ti1824.5128: Int = 1 in
  v.2796.(Ti1824.5128) in
  (d0.5041 * Td1825.5127) in
  (Td1826.5126 + b1.2799) in
  fabs(Td1827.5125) in
  let Td1829.5124: Float = o_param_b.2668(m.2795) in
    fless(Ti1828.5123, Td1829.5124) in
  let Ti1831.5110: Int = 0 in
    if Tb1830.5109 == Ti1831.5110 then
      0
    else
      let Tb1838.5111: Bool = let Ti1836.5117: Int = let Td1835.5119: Float = let Td1834.5120: Float = let Td1833.5121: Float = let Ti1832.5122: Int = 2 in
  v.2796.(Ti1832.5122) in
  (d0.5041 * Td1833.5121) in
  (Td1834.5120 + b2.2800) in
  fabs(Td1835.5119) in
  let Td1837.5118: Float = o_param_c.2670(m.2795) in
    fless(Ti1836.5117, Td1837.5118) in
        let Ti1839.5112: Int = 0 in
          if Tb1838.5111 == Ti1839.5112 then
            0
          else
            let Tb1842.5113: Bool = let Td1841.5115: Float = let Ti1840.5116: Int = 1 in
  dconst.2797.(Ti1840.5116) in
  fiszero(Td1841.5115) in
              let Ti1843.5114: Int = 0 in
                if Tb1842.5113 == Ti1843.5114 then
                  1
                else
                  0 in
    let Ti1845.5043: Int = 0 in
      if Ti1844.5042 == Ti1845.5043 then
        let d1.5047: Float = let Td1848.5104: Float = let Td1847.5107: Float = let Ti1846.5108: Int = 2 in
  dconst.2797.(Ti1846.5108) in
  (Td1847.5107 - b1.2799) in
  let Td1850.5105: Float = let Ti1849.5106: Int = 3 in
  dconst.2797.(Ti1849.5106) in
    (Td1848.5104 * Td1850.5105) in
          let Ti1871.5048: Int = let Tb1857.5084: Bool = let Ti1855.5098: Int = let Td1854.5100: Float = let Td1853.5101: Float = let Td1852.5102: Float = let Ti1851.5103: Int = 0 in
  v.2796.(Ti1851.5103) in
  (d1.5047 * Td1852.5102) in
  (Td1853.5101 + b0.2798) in
  fabs(Td1854.5100) in
  let Td1856.5099: Float = o_param_a.2666(m.2795) in
    fless(Ti1855.5098, Td1856.5099) in
  let Ti1858.5085: Int = 0 in
    if Tb1857.5084 == Ti1858.5085 then
      0
    else
      let Tb1865.5086: Bool = let Ti1863.5092: Int = let Td1862.5094: Float = let Td1861.5095: Float = let Td1860.5096: Float = let Ti1859.5097: Int = 2 in
  v.2796.(Ti1859.5097) in
  (d1.5047 * Td1860.5096) in
  (Td1861.5095 + b2.2800) in
  fabs(Td1862.5094) in
  let Td1864.5093: Float = o_param_c.2670(m.2795) in
    fless(Ti1863.5092, Td1864.5093) in
        let Ti1866.5087: Int = 0 in
          if Tb1865.5086 == Ti1866.5087 then
            0
          else
            let Tb1869.5088: Bool = let Td1868.5090: Float = let Ti1867.5091: Int = 3 in
  dconst.2797.(Ti1867.5091) in
  fiszero(Td1868.5090) in
              let Ti1870.5089: Int = 0 in
                if Tb1869.5088 == Ti1870.5089 then
                  1
                else
                  0 in
            let Ti1872.5049: Int = 0 in
              if Ti1871.5048 == Ti1872.5049 then
                let d2.5053: Float = let Td1875.5079: Float = let Td1874.5082: Float = let Ti1873.5083: Int = 4 in
  dconst.2797.(Ti1873.5083) in
  (Td1874.5082 - b2.2800) in
  let Td1877.5080: Float = let Ti1876.5081: Int = 5 in
  dconst.2797.(Ti1876.5081) in
    (Td1875.5079 * Td1877.5080) in
                  let Ti1898.5054: Int = let Tb1884.5059: Bool = let Ti1882.5073: Int = let Td1881.5075: Float = let Td1880.5076: Float = let Td1879.5077: Float = let Ti1878.5078: Int = 0 in
  v.2796.(Ti1878.5078) in
  (d2.5053 * Td1879.5077) in
  (Td1880.5076 + b0.2798) in
  fabs(Td1881.5075) in
  let Td1883.5074: Float = o_param_a.2666(m.2795) in
    fless(Ti1882.5073, Td1883.5074) in
  let Ti1885.5060: Int = 0 in
    if Tb1884.5059 == Ti1885.5060 then
      0
    else
      let Tb1892.5061: Bool = let Ti1890.5067: Int = let Td1889.5069: Float = let Td1888.5070: Float = let Td1887.5071: Float = let Ti1886.5072: Int = 1 in
  v.2796.(Ti1886.5072) in
  (d2.5053 * Td1887.5071) in
  (Td1888.5070 + b1.2799) in
  fabs(Td1889.5069) in
  let Td1891.5068: Float = o_param_b.2668(m.2795) in
    fless(Ti1890.5067, Td1891.5068) in
        let Ti1893.5062: Int = 0 in
          if Tb1892.5061 == Ti1893.5062 then
            0
          else
            let Tb1896.5063: Bool = let Td1895.5065: Float = let Ti1894.5066: Int = 5 in
  dconst.2797.(Ti1894.5066) in
  fiszero(Td1895.5065) in
              let Ti1897.5064: Int = 0 in
                if Tb1896.5063 == Ti1897.5064 then
                  1
                else
                  0 in
                    let Ti1899.5055: Int = 0 in
                      if Ti1898.5054 == Ti1899.5055 then
                        0
                      else
                        let Tu78.5056: Unit = let Ta1900.5057: [Int] = [solver_dist] in
  let Ti1901.5058: Int = 0 in
    Ta1900.5057.(Ti1901.5058) <- d2.5053 in
                          3
              else
                let Tu77.5050: Unit = let Ta1902.5051: [Int] = [solver_dist] in
  let Ti1903.5052: Int = 0 in
    Ta1902.5051.(Ti1903.5052) <- d1.5047 in
                  2
      else
        let Tu76.5044: Unit = let Ta1904.5045: [Int] = [solver_dist] in
  let Ti1905.5046: Int = 0 in
    Ta1904.5045.(Ti1905.5046) <- d0.5041 in
          1 in
                                                                                                                                                let rec (solver_surface_fast.2801: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m.2802: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dconst.2803: [Float]), (b0.2804: Float), (b1.2805: Float), (b2.2806: Float)) = let Tb1804.5023: Bool = let Td1803.5039: Float = let Ti1802.5040: Int = 0 in
  dconst.2803.(Ti1802.5040) in
  fisneg(Td1803.5039) in
  let Ti1805.5024: Int = 0 in
    if Tb1804.5023 == Ti1805.5024 then
      0
    else
      let Tu79.5025: Unit = let Ta1806.5026: [Int] = [solver_dist] in
  let Ti1807.5027: Int = 0 in
    let Td1818.5028: Float = let Td1814.5029: Float = let Td1810.5033: Float = let Td1809.5037: Float = let Ti1808.5038: Int = 1 in
  dconst.2803.(Ti1808.5038) in
  (Td1809.5037 * b0.2804) in
  let Td1813.5034: Float = let Td1812.5035: Float = let Ti1811.5036: Int = 2 in
  dconst.2803.(Ti1811.5036) in
  (Td1812.5035 * b1.2805) in
    (Td1810.5033 + Td1813.5034) in
  let Td1817.5030: Float = let Td1816.5031: Float = let Ti1815.5032: Int = 3 in
  dconst.2803.(Ti1815.5032) in
  (Td1816.5031 * b2.2806) in
    (Td1814.5029 + Td1817.5030) in
      Ta1806.5026.(Ti1807.5027) <- Td1818.5028 in
        1 in
                                                                                                                                                  let rec (solver_second_fast.2807: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m.2808: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dconst.2809: [Float]), (b0.2810: Float), (b1.2811: Float), (b2.2812: Float)) = let aa.4981: Float = let Ti1766.5022: Int = 0 in
  dconst.2809.(Ti1766.5022) in
  let Tb1767.4982: Bool = fiszero(aa.4981) in
    let Ti1768.4983: Int = 0 in
      if Tb1767.4982 == Ti1768.4983 then
        let neg_bb.4984: Float = let Td1775.5012: Float = let Td1771.5016: Float = let Td1770.5020: Float = let Ti1769.5021: Int = 1 in
  dconst.2809.(Ti1769.5021) in
  (Td1770.5020 * b0.2810) in
  let Td1774.5017: Float = let Td1773.5018: Float = let Ti1772.5019: Int = 2 in
  dconst.2809.(Ti1772.5019) in
  (Td1773.5018 * b1.2811) in
    (Td1771.5016 + Td1774.5017) in
  let Td1778.5013: Float = let Td1777.5014: Float = let Ti1776.5015: Int = 3 in
  dconst.2809.(Ti1776.5015) in
  (Td1777.5014 * b2.2812) in
    (Td1775.5012 + Td1778.5013) in
          let cc0.4985: Float = quadratic.2771(m.2808, b0.2810, b1.2811, b2.2812) in
            let cc.4986: Float = let Ti1779.5009: Int = o_form.2658(m.2808) in
  let Ti1780.5010: Int = 3 in
    if Ti1779.5009 == Ti1780.5010 then
      let Td1781.5011: Float = 1. in
        (cc0.4985 - Td1781.5011)
    else
      cc0.4985 in
              let d.4987: Float = let Td1782.5007: Float = fsqr(neg_bb.4984) in
  let Td1783.5008: Float = (aa.4981 * cc.4986) in
    (Td1782.5007 - Td1783.5008) in
                let Tb1784.4988: Bool = fispos(d.4987) in
                  let Ti1785.4989: Int = 0 in
                    if Tb1784.4988 == Ti1785.4989 then
                      0
                    else
                      let Tu80.4990: Unit = let Tb1786.4991: Bool = o_isinvert.2662(m.2808) in
  let Ti1787.4992: Int = 0 in
    if Tb1786.4991 == Ti1787.4992 then
      let Ta1788.5000: [Int] = [solver_dist] in
        let Ti1789.5001: Int = 0 in
          let Td1794.5002: Float = let Td1791.5003: Float = let Td1790.5006: Float = sqrt(d.4987) in
  (neg_bb.4984 - Td1790.5006) in
  let Td1793.5004: Float = let Ti1792.5005: Int = 4 in
  dconst.2809.(Ti1792.5005) in
    (Td1791.5003 * Td1793.5004) in
            Ta1788.5000.(Ti1789.5001) <- Td1794.5002
    else
      let Ta1795.4993: [Int] = [solver_dist] in
        let Ti1796.4994: Int = 0 in
          let Td1801.4995: Float = let Td1798.4996: Float = let Td1797.4999: Float = sqrt(d.4987) in
  (neg_bb.4984 + Td1797.4999) in
  let Td1800.4997: Float = let Ti1799.4998: Int = 4 in
  dconst.2809.(Ti1799.4998) in
    (Td1798.4996 * Td1800.4997) in
            Ta1795.4993.(Ti1796.4994) <- Td1801.4995 in
                        1
      else
        0 in
                                                                                                                                                    let rec (solver_fast.2813: (Int, ([Float], [[Float]]), [Float]) -> Int) ((index.2814: Int), (dirvec.2815: ([Float], [[Float]])), (org.2816: [Float])) = let m.4961: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1753.4980: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1753.4980.(index.2814) in
  let b0.4962: Float = let Td1755.4977: Float = let Ti1754.4979: Int = 0 in
  org.2816.(Ti1754.4979) in
  let Td1756.4978: Float = o_param_x.2674(m.4961) in
    (Td1755.4977 - Td1756.4978) in
    let b1.4963: Float = let Td1758.4974: Float = let Ti1757.4976: Int = 1 in
  org.2816.(Ti1757.4976) in
  let Td1759.4975: Float = o_param_y.2676(m.4961) in
    (Td1758.4974 - Td1759.4975) in
      let b2.4964: Float = let Td1761.4971: Float = let Ti1760.4973: Int = 2 in
  org.2816.(Ti1760.4973) in
  let Td1762.4972: Float = o_param_z.2678(m.4961) in
    (Td1761.4971 - Td1762.4972) in
        let dconsts.4965: [[Float]] = d_const.2719(dirvec.2815) in
          let dconst.4966: [Float] = dconsts.4965.(index.2814) in
            let m_shape.4967: Int = o_form.2658(m.4961) in
              let Ti1763.4968: Int = 1 in
                if m_shape.4967 == Ti1763.4968 then
                  let Ta1764.4970: [Float] = d_vec.2717(dirvec.2815) in
                    solver_rect_fast.2794(m.4961, Ta1764.4970, dconst.4966, b0.4962, b1.4963, b2.4964)
                else
                  let Ti1765.4969: Int = 2 in
                    if m_shape.4967 == Ti1765.4969 then
                      solver_surface_fast.2801(m.4961, dconst.4966, b0.4962, b1.4963, b2.4964)
                    else
                      solver_second_fast.2807(m.4961, dconst.4966, b0.4962, b1.4963, b2.4964) in
                                                                                                                                                      let rec (solver_surface_fast2.2817: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], [Float], Float, Float, Float) -> Int) ((m.2818: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dconst.2819: [Float]), (sconst.2820: [Float]), (b0.2821: Float), (b1.2822: Float), (b2.2823: Float)) = let Tb1744.4949: Bool = let Td1743.4959: Float = let Ti1742.4960: Int = 0 in
  dconst.2819.(Ti1742.4960) in
  fisneg(Td1743.4959) in
  let Ti1745.4950: Int = 0 in
    if Tb1744.4949 == Ti1745.4950 then
      0
    else
      let Tu81.4951: Unit = let Ta1746.4952: [Int] = [solver_dist] in
  let Ti1747.4953: Int = 0 in
    let Td1752.4954: Float = let Td1749.4955: Float = let Ti1748.4958: Int = 0 in
  dconst.2819.(Ti1748.4958) in
  let Td1751.4956: Float = let Ti1750.4957: Int = 3 in
  sconst.2820.(Ti1750.4957) in
    (Td1749.4955 * Td1751.4956) in
      Ta1746.4952.(Ti1747.4953) <- Td1752.4954 in
        1 in
                                                                                                                                                        let rec (solver_second_fast2.2824: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], [Float], Float, Float, Float) -> Int) ((m.2825: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dconst.2826: [Float]), (sconst.2827: [Float]), (b0.2828: Float), (b1.2829: Float), (b2.2830: Float)) = let aa.4910: Float = let Ti1708.4948: Int = 0 in
  dconst.2826.(Ti1708.4948) in
  let Tb1709.4911: Bool = fiszero(aa.4910) in
    let Ti1710.4912: Int = 0 in
      if Tb1709.4911 == Ti1710.4912 then
        let neg_bb.4913: Float = let Td1717.4938: Float = let Td1713.4942: Float = let Td1712.4946: Float = let Ti1711.4947: Int = 1 in
  dconst.2826.(Ti1711.4947) in
  (Td1712.4946 * b0.2828) in
  let Td1716.4943: Float = let Td1715.4944: Float = let Ti1714.4945: Int = 2 in
  dconst.2826.(Ti1714.4945) in
  (Td1715.4944 * b1.2829) in
    (Td1713.4942 + Td1716.4943) in
  let Td1720.4939: Float = let Td1719.4940: Float = let Ti1718.4941: Int = 3 in
  dconst.2826.(Ti1718.4941) in
  (Td1719.4940 * b2.2830) in
    (Td1717.4938 + Td1720.4939) in
          let cc.4914: Float = let Ti1721.4937: Int = 3 in
  sconst.2827.(Ti1721.4937) in
            let d.4915: Float = let Td1722.4935: Float = fsqr(neg_bb.4913) in
  let Td1723.4936: Float = (aa.4910 * cc.4914) in
    (Td1722.4935 - Td1723.4936) in
              let Tb1724.4916: Bool = fispos(d.4915) in
                let Ti1725.4917: Int = 0 in
                  if Tb1724.4916 == Ti1725.4917 then
                    0
                  else
                    let Tu82.4918: Unit = let Tb1726.4919: Bool = o_isinvert.2662(m.2825) in
  let Ti1727.4920: Int = 0 in
    if Tb1726.4919 == Ti1727.4920 then
      let Ta1728.4928: [Int] = [solver_dist] in
        let Ti1729.4929: Int = 0 in
          let Td1734.4930: Float = let Td1731.4931: Float = let Td1730.4934: Float = sqrt(d.4915) in
  (neg_bb.4913 - Td1730.4934) in
  let Td1733.4932: Float = let Ti1732.4933: Int = 4 in
  dconst.2826.(Ti1732.4933) in
    (Td1731.4931 * Td1733.4932) in
            Ta1728.4928.(Ti1729.4929) <- Td1734.4930
    else
      let Ta1735.4921: [Int] = [solver_dist] in
        let Ti1736.4922: Int = 0 in
          let Td1741.4923: Float = let Td1738.4924: Float = let Td1737.4927: Float = sqrt(d.4915) in
  (neg_bb.4913 + Td1737.4927) in
  let Td1740.4925: Float = let Ti1739.4926: Int = 4 in
  dconst.2826.(Ti1739.4926) in
    (Td1738.4924 * Td1740.4925) in
            Ta1735.4921.(Ti1736.4922) <- Td1741.4923 in
                      1
      else
        0 in
                                                                                                                                                          let rec (solver_fast2.2831: (Int, ([Float], [[Float]])) -> Int) ((index.2832: Int), (dirvec.2833: ([Float], [[Float]]))) = let m.4895: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1701.4909: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1701.4909.(index.2832) in
  let sconst.4896: [Float] = o_param_ctbl.2696(m.4895) in
    let b0.4897: Float = let Ti1702.4908: Int = 0 in
  sconst.4896.(Ti1702.4908) in
      let b1.4898: Float = let Ti1703.4907: Int = 1 in
  sconst.4896.(Ti1703.4907) in
        let b2.4899: Float = let Ti1704.4906: Int = 2 in
  sconst.4896.(Ti1704.4906) in
          let dconsts.4900: [[Float]] = d_const.2719(dirvec.2833) in
            let dconst.4901: [Float] = dconsts.4900.(index.2832) in
              let m_shape.4902: Int = o_form.2658(m.4895) in
                let Ti1705.4903: Int = 1 in
                  if m_shape.4902 == Ti1705.4903 then
                    let Ta1706.4905: [Float] = d_vec.2717(dirvec.2833) in
                      solver_rect_fast.2794(m.4895, Ta1706.4905, dconst.4901, b0.4897, b1.4898, b2.4899)
                  else
                    let Ti1707.4904: Int = 2 in
                      if m_shape.4902 == Ti1707.4904 then
                        solver_surface_fast2.2817(m.4895, dconst.4901, sconst.4896, b0.4897, b1.4898, b2.4899)
                      else
                        solver_second_fast2.2824(m.4895, dconst.4901, sconst.4896, b0.4897, b1.4898, b2.4899) in
                                                                                                                                                            let rec (setup_rect_table.2834: ([Float], (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((vec.2835: [Float]), (m.2836: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let const.4829: [Float] = let Ti1642.4893: Int = 6 in
  let Td1643.4894: Float = 0. in
    create_float_array(Ti1642.4893, Td1643.4894) in
  let Tu88.4830: Unit = let Tb1646.4873: Bool = let Td1645.4891: Float = let Ti1644.4892: Int = 0 in
  vec.2835.(Ti1644.4892) in
  fiszero(Td1645.4891) in
  let Ti1647.4874: Int = 0 in
    if Tb1646.4873 == Ti1647.4874 then
      let Tu83.4877: Unit = let Ti1648.4883: Int = 0 in
  let Td1655.4884: Float = let Tb1653.4885: Bool = let Tb1649.4887: Bool = o_isinvert.2662(m.2836) in
  let Tb1652.4888: Bool = let Td1651.4889: Float = let Ti1650.4890: Int = 0 in
  vec.2835.(Ti1650.4890) in
  fisneg(Td1651.4889) in
    xor.2599(Tb1649.4887, Tb1652.4888) in
  let Td1654.4886: Float = o_param_a.2666(m.2836) in
    fneg_cond.2604(Tb1653.4885, Td1654.4886) in
    const.4829.(Ti1648.4883) <- Td1655.4884 in
        let Ti1656.4878: Int = 1 in
          let Td1660.4879: Float = let Td1657.4880: Float = 1. in
  let Td1659.4881: Float = let Ti1658.4882: Int = 0 in
  vec.2835.(Ti1658.4882) in
    (Td1657.4880 / Td1659.4881) in
            const.4829.(Ti1656.4878) <- Td1660.4879
    else
      let Ti1661.4875: Int = 1 in
        let Td1662.4876: Float = 0. in
          const.4829.(Ti1661.4875) <- Td1662.4876 in
    let Tu87.4831: Unit = let Tb1665.4853: Bool = let Td1664.4871: Float = let Ti1663.4872: Int = 1 in
  vec.2835.(Ti1663.4872) in
  fiszero(Td1664.4871) in
  let Ti1666.4854: Int = 0 in
    if Tb1665.4853 == Ti1666.4854 then
      let Tu84.4857: Unit = let Ti1667.4863: Int = 2 in
  let Td1674.4864: Float = let Tb1672.4865: Bool = let Tb1668.4867: Bool = o_isinvert.2662(m.2836) in
  let Tb1671.4868: Bool = let Td1670.4869: Float = let Ti1669.4870: Int = 1 in
  vec.2835.(Ti1669.4870) in
  fisneg(Td1670.4869) in
    xor.2599(Tb1668.4867, Tb1671.4868) in
  let Td1673.4866: Float = o_param_b.2668(m.2836) in
    fneg_cond.2604(Tb1672.4865, Td1673.4866) in
    const.4829.(Ti1667.4863) <- Td1674.4864 in
        let Ti1675.4858: Int = 3 in
          let Td1679.4859: Float = let Td1676.4860: Float = 1. in
  let Td1678.4861: Float = let Ti1677.4862: Int = 1 in
  vec.2835.(Ti1677.4862) in
    (Td1676.4860 / Td1678.4861) in
            const.4829.(Ti1675.4858) <- Td1679.4859
    else
      let Ti1680.4855: Int = 3 in
        let Td1681.4856: Float = 0. in
          const.4829.(Ti1680.4855) <- Td1681.4856 in
      let Tu86.4832: Unit = let Tb1684.4833: Bool = let Td1683.4851: Float = let Ti1682.4852: Int = 2 in
  vec.2835.(Ti1682.4852) in
  fiszero(Td1683.4851) in
  let Ti1685.4834: Int = 0 in
    if Tb1684.4833 == Ti1685.4834 then
      let Tu85.4837: Unit = let Ti1686.4843: Int = 4 in
  let Td1693.4844: Float = let Tb1691.4845: Bool = let Tb1687.4847: Bool = o_isinvert.2662(m.2836) in
  let Tb1690.4848: Bool = let Td1689.4849: Float = let Ti1688.4850: Int = 2 in
  vec.2835.(Ti1688.4850) in
  fisneg(Td1689.4849) in
    xor.2599(Tb1687.4847, Tb1690.4848) in
  let Td1692.4846: Float = o_param_c.2670(m.2836) in
    fneg_cond.2604(Tb1691.4845, Td1692.4846) in
    const.4829.(Ti1686.4843) <- Td1693.4844 in
        let Ti1694.4838: Int = 5 in
          let Td1698.4839: Float = let Td1695.4840: Float = 1. in
  let Td1697.4841: Float = let Ti1696.4842: Int = 2 in
  vec.2835.(Ti1696.4842) in
    (Td1695.4840 / Td1697.4841) in
            const.4829.(Ti1694.4838) <- Td1698.4839
    else
      let Ti1699.4835: Int = 5 in
        let Td1700.4836: Float = 0. in
          const.4829.(Ti1699.4835) <- Td1700.4836 in
        const.4829 in
                                                                                                                                                              let rec (setup_surface_table.2837: ([Float], (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((vec.2838: [Float]), (m.2839: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let const.4789: [Float] = let Ti1608.4827: Int = 4 in
  let Td1609.4828: Float = 0. in
    create_float_array(Ti1608.4827, Td1609.4828) in
  let d.4790: Float = let Td1618.4814: Float = let Td1613.4819: Float = let Td1611.4824: Float = let Ti1610.4826: Int = 0 in
  vec.2838.(Ti1610.4826) in
  let Td1612.4825: Float = o_param_a.2666(m.2839) in
    (Td1611.4824 * Td1612.4825) in
  let Td1617.4820: Float = let Td1615.4821: Float = let Ti1614.4823: Int = 1 in
  vec.2838.(Ti1614.4823) in
  let Td1616.4822: Float = o_param_b.2668(m.2839) in
    (Td1615.4821 * Td1616.4822) in
    (Td1613.4819 + Td1617.4820) in
  let Td1622.4815: Float = let Td1620.4816: Float = let Ti1619.4818: Int = 2 in
  vec.2838.(Ti1619.4818) in
  let Td1621.4817: Float = o_param_c.2670(m.2839) in
    (Td1620.4816 * Td1621.4817) in
    (Td1618.4814 + Td1622.4815) in
    let Tu92.4791: Unit = let Tb1623.4792: Bool = fispos(d.4790) in
  let Ti1624.4793: Int = 0 in
    if Tb1623.4792 == Ti1624.4793 then
      let Ti1625.4812: Int = 0 in
        let Td1626.4813: Float = 0. in
          const.4789.(Ti1625.4812) <- Td1626.4813
    else
      let Tu91.4794: Unit = let Ti1627.4809: Int = 0 in
  let Td1629.4810: Float = let Td1628.4811: Float = -1. in
  (Td1628.4811 / d.4790) in
    const.4789.(Ti1627.4809) <- Td1629.4810 in
        let Tu90.4795: Unit = let Ti1630.4805: Int = 1 in
  let Td1633.4806: Float = let Td1632.4807: Float = let Td1631.4808: Float = o_param_a.2666(m.2839) in
  (Td1631.4808 / d.4790) in
  fneg(Td1632.4807) in
    const.4789.(Ti1630.4805) <- Td1633.4806 in
          let Tu89.4796: Unit = let Ti1634.4801: Int = 2 in
  let Td1637.4802: Float = let Td1636.4803: Float = let Td1635.4804: Float = o_param_b.2668(m.2839) in
  (Td1635.4804 / d.4790) in
  fneg(Td1636.4803) in
    const.4789.(Ti1634.4801) <- Td1637.4802 in
            let Ti1638.4797: Int = 3 in
              let Td1641.4798: Float = let Td1640.4799: Float = let Td1639.4800: Float = o_param_c.2670(m.2839) in
  (Td1639.4800 / d.4790) in
  fneg(Td1640.4799) in
                const.4789.(Ti1638.4797) <- Td1641.4798 in
      const.4789 in
                                                                                                                                                                let rec (setup_second_table.2840: ([Float], (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((v.2841: [Float]), (m.2842: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let const.4710: [Float] = let Ti1541.4787: Int = 5 in
  let Td1542.4788: Float = 0. in
    create_float_array(Ti1541.4787, Td1542.4788) in
  let aa.4711: Float = let Td1544.4781: Float = let Ti1543.4786: Int = 0 in
  v.2841.(Ti1543.4786) in
  let Td1546.4782: Float = let Ti1545.4785: Int = 1 in
  v.2841.(Ti1545.4785) in
    let Td1548.4783: Float = let Ti1547.4784: Int = 2 in
  v.2841.(Ti1547.4784) in
      quadratic.2771(m.2842, Td1544.4781, Td1546.4782, Td1548.4783) in
    let c1.4712: Float = let Td1552.4777: Float = let Td1550.4778: Float = let Ti1549.4780: Int = 0 in
  v.2841.(Ti1549.4780) in
  let Td1551.4779: Float = o_param_a.2666(m.2842) in
    (Td1550.4778 * Td1551.4779) in
  fneg(Td1552.4777) in
      let c2.4713: Float = let Td1556.4773: Float = let Td1554.4774: Float = let Ti1553.4776: Int = 1 in
  v.2841.(Ti1553.4776) in
  let Td1555.4775: Float = o_param_b.2668(m.2842) in
    (Td1554.4774 * Td1555.4775) in
  fneg(Td1556.4773) in
        let c3.4714: Float = let Td1560.4769: Float = let Td1558.4770: Float = let Ti1557.4772: Int = 2 in
  v.2841.(Ti1557.4772) in
  let Td1559.4771: Float = o_param_c.2670(m.2842) in
    (Td1558.4770 * Td1559.4771) in
  fneg(Td1560.4769) in
          let Tu99.4715: Unit = let Ti1561.4768: Int = 0 in
  const.4710.(Ti1561.4768) <- aa.4711 in
            let Tu98.4716: Unit = let Ti1562.4723: Int = o_isrot.2664(m.2842) in
  let Ti1563.4724: Int = 0 in
    if Ti1562.4723 == Ti1563.4724 then
      let Tu96.4763: Unit = let Ti1564.4767: Int = 1 in
  const.4710.(Ti1564.4767) <- c1.4712 in
        let Tu95.4764: Unit = let Ti1565.4766: Int = 2 in
  const.4710.(Ti1565.4766) <- c2.4713 in
          let Ti1566.4765: Int = 3 in
            const.4710.(Ti1566.4765) <- c3.4714
    else
      let Tu94.4725: Unit = let Ti1567.4751: Int = 1 in
  let Td1578.4752: Float = let Td1577.4753: Float = let Td1576.4754: Float = let Td1571.4755: Float = let Td1569.4760: Float = let Ti1568.4762: Int = 2 in
  v.2841.(Ti1568.4762) in
  let Td1570.4761: Float = o_param_r2.2692(m.2842) in
    (Td1569.4760 * Td1570.4761) in
  let Td1575.4756: Float = let Td1573.4757: Float = let Ti1572.4759: Int = 1 in
  v.2841.(Ti1572.4759) in
  let Td1574.4758: Float = o_param_r3.2694(m.2842) in
    (Td1573.4757 * Td1574.4758) in
    (Td1571.4755 + Td1575.4756) in
  fhalf(Td1576.4754) in
  (c1.4712 - Td1577.4753) in
    const.4710.(Ti1567.4751) <- Td1578.4752 in
        let Tu93.4726: Unit = let Ti1579.4739: Int = 2 in
  let Td1590.4740: Float = let Td1589.4741: Float = let Td1588.4742: Float = let Td1583.4743: Float = let Td1581.4748: Float = let Ti1580.4750: Int = 2 in
  v.2841.(Ti1580.4750) in
  let Td1582.4749: Float = o_param_r1.2690(m.2842) in
    (Td1581.4748 * Td1582.4749) in
  let Td1587.4744: Float = let Td1585.4745: Float = let Ti1584.4747: Int = 0 in
  v.2841.(Ti1584.4747) in
  let Td1586.4746: Float = o_param_r3.2694(m.2842) in
    (Td1585.4745 * Td1586.4746) in
    (Td1583.4743 + Td1587.4744) in
  fhalf(Td1588.4742) in
  (c2.4713 - Td1589.4741) in
    const.4710.(Ti1579.4739) <- Td1590.4740 in
          let Ti1591.4727: Int = 3 in
            let Td1602.4728: Float = let Td1601.4729: Float = let Td1600.4730: Float = let Td1595.4731: Float = let Td1593.4736: Float = let Ti1592.4738: Int = 1 in
  v.2841.(Ti1592.4738) in
  let Td1594.4737: Float = o_param_r1.2690(m.2842) in
    (Td1593.4736 * Td1594.4737) in
  let Td1599.4732: Float = let Td1597.4733: Float = let Ti1596.4735: Int = 0 in
  v.2841.(Ti1596.4735) in
  let Td1598.4734: Float = o_param_r2.2692(m.2842) in
    (Td1597.4733 * Td1598.4734) in
    (Td1595.4731 + Td1599.4732) in
  fhalf(Td1600.4730) in
  (c3.4714 - Td1601.4729) in
              const.4710.(Ti1591.4727) <- Td1602.4728 in
              let Tu97.4717: Unit = let Tb1603.4718: Bool = fiszero(aa.4711) in
  let Ti1604.4719: Int = 0 in
    if Tb1603.4718 == Ti1604.4719 then
      let Ti1605.4720: Int = 4 in
        let Td1607.4721: Float = let Td1606.4722: Float = 1. in
  (Td1606.4722 / aa.4711) in
          const.4710.(Ti1605.4720) <- Td1607.4721
    else
      () in
                const.4710 in
                                                                                                                                                                  let rec (iter_setup_dirvec_constants.2843: (([Float], [[Float]]), Int) -> Unit) ((dirvec.2844: ([Float], [[Float]])), (index.2845: Int)) = let Ti1532.4696: Int = 0 in
  if Ti1532.4696 <= index.2845 then
    let m.4697: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1533.4709: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1533.4709.(index.2845) in
      let dconst.4698: [[Float]] = d_const.2719(dirvec.2844) in
        let v.4699: [Float] = d_vec.2717(dirvec.2844) in
          let m_shape.4700: Int = o_form.2658(m.4697) in
            let Tu100.4701: Unit = let Ti1534.4704: Int = 1 in
  if m_shape.4700 == Ti1534.4704 then
    let Ta1535.4708: [Float] = setup_rect_table.2834(v.4699, m.4697) in
      dconst.4698.(index.2845) <- Ta1535.4708
  else
    let Ti1536.4705: Int = 2 in
      if m_shape.4700 == Ti1536.4705 then
        let Ta1537.4707: [Float] = setup_surface_table.2837(v.4699, m.4697) in
          dconst.4698.(index.2845) <- Ta1537.4707
      else
        let Ta1538.4706: [Float] = setup_second_table.2840(v.4699, m.4697) in
          dconst.4698.(index.2845) <- Ta1538.4706 in
              let Ti1540.4702: Int = let Ti1539.4703: Int = 1 in
  (index.2845 - Ti1539.4703) in
                iter_setup_dirvec_constants.2843(dirvec.2844, Ti1540.4702)
  else
    () in
                                                                                                                                                                    let rec (setup_dirvec_constants.2846: (([Float], [[Float]])) -> Unit) ((dirvec.2847: ([Float], [[Float]]))) = let Ti1531.4691: Int = let Ti1529.4692: Int = let Ta1527.4694: [Int] = [n_objects] in
  let Ti1528.4695: Int = 0 in
    Ta1527.4694.(Ti1528.4695) in
  let Ti1530.4693: Int = 1 in
    (Ti1529.4692 - Ti1530.4693) in
  iter_setup_dirvec_constants.2843(dirvec.2847, Ti1531.4691) in
                                                                                                                                                                      let rec (setup_startp_constants.2848: ([Float], Int) -> Unit) ((p.2849: [Float]), (index.2850: Int)) = let Ti1487.4643: Int = 0 in
  if Ti1487.4643 <= index.2850 then
    let obj.4644: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1488.4690: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1488.4690.(index.2850) in
      let sconst.4645: [Float] = o_param_ctbl.2696(obj.4644) in
        let m_shape.4646: Int = o_form.2658(obj.4644) in
          let Tu104.4647: Unit = let Ti1489.4685: Int = 0 in
  let Td1493.4686: Float = let Td1491.4687: Float = let Ti1490.4689: Int = 0 in
  p.2849.(Ti1490.4689) in
  let Td1492.4688: Float = o_param_x.2674(obj.4644) in
    (Td1491.4687 - Td1492.4688) in
    sconst.4645.(Ti1489.4685) <- Td1493.4686 in
            let Tu103.4648: Unit = let Ti1494.4680: Int = 1 in
  let Td1498.4681: Float = let Td1496.4682: Float = let Ti1495.4684: Int = 1 in
  p.2849.(Ti1495.4684) in
  let Td1497.4683: Float = o_param_y.2676(obj.4644) in
    (Td1496.4682 - Td1497.4683) in
    sconst.4645.(Ti1494.4680) <- Td1498.4681 in
              let Tu102.4649: Unit = let Ti1499.4675: Int = 2 in
  let Td1503.4676: Float = let Td1501.4677: Float = let Ti1500.4679: Int = 2 in
  p.2849.(Ti1500.4679) in
  let Td1502.4678: Float = o_param_z.2678(obj.4644) in
    (Td1501.4677 - Td1502.4678) in
    sconst.4645.(Ti1499.4675) <- Td1503.4676 in
                let Tu101.4650: Unit = let Ti1504.4653: Int = 2 in
  if m_shape.4646 == Ti1504.4653 then
    let Ti1505.4666: Int = 3 in
      let Td1513.4667: Float = let Ta1506.4668: [Float] = o_param_abc.2672(obj.4644) in
  let Td1508.4669: Float = let Ti1507.4674: Int = 0 in
  sconst.4645.(Ti1507.4674) in
    let Td1510.4670: Float = let Ti1509.4673: Int = 1 in
  sconst.4645.(Ti1509.4673) in
      let Td1512.4671: Float = let Ti1511.4672: Int = 2 in
  sconst.4645.(Ti1511.4672) in
        veciprod2.2634(Ta1506.4668, Td1508.4669, Td1510.4670, Td1512.4671) in
        sconst.4645.(Ti1505.4666) <- Td1513.4667
  else
    let Ti1514.4654: Int = 2 in
      if m_shape.4646 <= Ti1514.4654 then
        ()
      else
        let cc0.4655: Float = let Td1516.4660: Float = let Ti1515.4665: Int = 0 in
  sconst.4645.(Ti1515.4665) in
  let Td1518.4661: Float = let Ti1517.4664: Int = 1 in
  sconst.4645.(Ti1517.4664) in
    let Td1520.4662: Float = let Ti1519.4663: Int = 2 in
  sconst.4645.(Ti1519.4663) in
      quadratic.2771(obj.4644, Td1516.4660, Td1518.4661, Td1520.4662) in
          let Ti1521.4656: Int = 3 in
            let Td1524.4657: Float = let Ti1522.4658: Int = 3 in
  if m_shape.4646 == Ti1522.4658 then
    let Td1523.4659: Float = 1. in
      (cc0.4655 - Td1523.4659)
  else
    cc0.4655 in
              sconst.4645.(Ti1521.4656) <- Td1524.4657 in
                  let Ti1526.4651: Int = let Ti1525.4652: Int = 1 in
  (index.2850 - Ti1525.4652) in
                    setup_startp_constants.2848(p.2849, Ti1526.4651)
  else
    () in
                                                                                                                                                                        let rec (setup_startp.2851: ([Float]) -> Unit) ((p.2852: [Float])) = let Tu105.4636: Unit = let Ta1481.4642: [Float] = [startp_fast] in
  veccpy.2620(Ta1481.4642, p.2852) in
  let Ti1486.4637: Int = let Ti1484.4638: Int = let Ta1482.4640: [Int] = [n_objects] in
  let Ti1483.4641: Int = 0 in
    Ta1482.4640.(Ti1483.4641) in
  let Ti1485.4639: Int = 1 in
    (Ti1484.4638 - Ti1485.4639) in
    setup_startp_constants.2848(p.2852, Ti1486.4637) in
                                                                                                                                                                          let rec (is_rect_outside.2853: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Bool) ((m.2854: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (p0.2855: Float), (p1.2856: Float), (p2.2857: Float)) = let Ti1477.4622: Int = let Tb1469.4626: Bool = let Ti1467.4634: Int = fabs(p0.2855) in
  let Td1468.4635: Float = o_param_a.2666(m.2854) in
    fless(Ti1467.4634, Td1468.4635) in
  let Ti1470.4627: Int = 0 in
    if Tb1469.4626 == Ti1470.4627 then
      0
    else
      let Tb1473.4628: Bool = let Ti1471.4632: Int = fabs(p1.2856) in
  let Td1472.4633: Float = o_param_b.2668(m.2854) in
    fless(Ti1471.4632, Td1472.4633) in
        let Ti1474.4629: Int = 0 in
          if Tb1473.4628 == Ti1474.4629 then
            0
          else
            let Ti1475.4630: Int = fabs(p2.2857) in
              let Td1476.4631: Float = o_param_c.2670(m.2854) in
                fless(Ti1475.4630, Td1476.4631) in
  let Ti1478.4623: Int = 0 in
    if Ti1477.4622 == Ti1478.4623 then
      let Tb1479.4624: Bool = o_isinvert.2662(m.2854) in
        let Ti1480.4625: Int = 0 in
          if Tb1479.4624 == Ti1480.4625 then
            1
          else
            0
    else
      o_isinvert.2662(m.2854) in
                                                                                                                                                                            let rec (is_plane_outside.2858: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Bool) ((m.2859: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (p0.2860: Float), (p1.2861: Float), (p2.2862: Float)) = let w.4616: Float = let Ta1462.4621: [Float] = o_param_abc.2672(m.2859) in
  veciprod2.2634(Ta1462.4621, p0.2860, p1.2861, p2.2862) in
  let Tb1465.4617: Bool = let Tb1463.4619: Bool = o_isinvert.2662(m.2859) in
  let Tb1464.4620: Bool = fisneg(w.4616) in
    xor.2599(Tb1463.4619, Tb1464.4620) in
    let Ti1466.4618: Int = 0 in
      if Tb1465.4617 == Ti1466.4618 then
        1
      else
        0 in
                                                                                                                                                                              let rec (is_second_outside.2863: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Bool) ((m.2864: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (p0.2865: Float), (p1.2866: Float), (p2.2867: Float)) = let w.4607: Float = quadratic.2771(m.2864, p0.2865, p1.2866, p2.2867) in
  let w2.4608: Float = let Ti1455.4613: Int = o_form.2658(m.2864) in
  let Ti1456.4614: Int = 3 in
    if Ti1455.4613 == Ti1456.4614 then
      let Td1457.4615: Float = 1. in
        (w.4607 - Td1457.4615)
    else
      w.4607 in
    let Tb1460.4609: Bool = let Tb1458.4611: Bool = o_isinvert.2662(m.2864) in
  let Tb1459.4612: Bool = fisneg(w2.4608) in
    xor.2599(Tb1458.4611, Tb1459.4612) in
      let Ti1461.4610: Int = 0 in
        if Tb1460.4609 == Ti1461.4610 then
          1
        else
          0 in
                                                                                                                                                                                let rec (is_outside.2868: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Bool) ((m.2869: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (q0.2870: Float), (q1.2871: Float), (q2.2872: Float)) = let p0.4598: Float = let Td1450.4606: Float = o_param_x.2674(m.2869) in
  (q0.2870 - Td1450.4606) in
  let p1.4599: Float = let Td1451.4605: Float = o_param_y.2676(m.2869) in
  (q1.2871 - Td1451.4605) in
    let p2.4600: Float = let Td1452.4604: Float = o_param_z.2678(m.2869) in
  (q2.2872 - Td1452.4604) in
      let m_shape.4601: Int = o_form.2658(m.2869) in
        let Ti1453.4602: Int = 1 in
          if m_shape.4601 == Ti1453.4602 then
            is_rect_outside.2853(m.2869, p0.4598, p1.4599, p2.4600)
          else
            let Ti1454.4603: Int = 2 in
              if m_shape.4601 == Ti1454.4603 then
                is_plane_outside.2858(m.2869, p0.4598, p1.4599, p2.4600)
              else
                is_second_outside.2863(m.2869, p0.4598, p1.4599, p2.4600) in
                                                                                                                                                                                  let rec (check_all_inside.2873: (Int, [Int], Float, Float, Float) -> Bool) ((ofs.2874: Int), (iand.2875: [Int]), (q0.2876: Float), (q1.2877: Float), (q2.2878: Float)) = let head.4589: Int = iand.2875.(ofs.2874) in
  let Ti1443.4590: Int = let Ti1442.4597: Int = 1 in
  -(Ti1442.4597) in
    if head.4589 == Ti1443.4590 then
      1
    else
      let Tb1446.4591: Bool = let Tt1445.4595: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1444.4596: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1444.4596.(head.4589) in
  is_outside.2868(Tt1445.4595, q0.2876, q1.2877, q2.2878) in
        let Ti1447.4592: Int = 0 in
          if Tb1446.4591 == Ti1447.4592 then
            let Ti1449.4593: Int = let Ti1448.4594: Int = 1 in
  (ofs.2874 + Ti1448.4594) in
              check_all_inside.2873(Ti1449.4593, iand.2875, q0.2876, q1.2877, q2.2878)
          else
            0 in
                                                                                                                                                                                    let rec (shadow_check_and_group.2879: (Int, [Int]) -> Bool) ((iand_ofs.2880: Int), (and_group.2881: [Int])) = let Ti1398.4538: Int = and_group.2881.(iand_ofs.2880) in
  let Ti1400.4539: Int = let Ti1399.4588: Int = 1 in
  -(Ti1399.4588) in
    if Ti1398.4538 == Ti1400.4539 then
      0
    else
      let obj.4540: Int = and_group.2881.(iand_ofs.2880) in
        let t0.4541: Int = let Tt1401.4586: ([Float], [[Float]]) = light_dirvec: ([Float], [[Float]]) in
  let Ta1402.4587: [Float] = [intersection_point] in
    solver_fast.2813(obj.4540, Tt1401.4586, Ta1402.4587) in
          let t0p.4542: Float = let Ta1403.4584: [Int] = [solver_dist] in
  let Ti1404.4585: Int = 0 in
    Ta1403.4584.(Ti1404.4585) in
            let Ti1407.4543: Int = let Ti1405.4582: Int = 0 in
  if t0.4541 == Ti1405.4582 then
    0
  else
    let Td1406.4583: Float = -0.2 in
      fless(t0p.4542, Td1406.4583) in
              let Ti1408.4544: Int = 0 in
                if Ti1407.4543 == Ti1408.4544 then
                  let Tb1411.4576: Bool = let Tt1410.4580: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1409.4581: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1409.4581.(obj.4540) in
  o_isinvert.2662(Tt1410.4580) in
                    let Ti1412.4577: Int = 0 in
                      if Tb1411.4576 == Ti1412.4577 then
                        0
                      else
                        let Ti1414.4578: Int = let Ti1413.4579: Int = 1 in
  (iand_ofs.2880 + Ti1413.4579) in
                          shadow_check_and_group.2879(Ti1414.4578, and_group.2881)
                else
                  let t.4545: Float = let Td1415.4575: Float = 0.01 in
  (t0p.4542 + Td1415.4575) in
                    let q0.4546: Float = let Td1419.4568: Float = let Td1418.4572: Float = let Ta1416.4573: [Float] = [light] in
  let Ti1417.4574: Int = 0 in
    Ta1416.4573.(Ti1417.4574) in
  (Td1418.4572 * t.4545) in
  let Td1422.4569: Float = let Ta1420.4570: [Float] = [intersection_point] in
  let Ti1421.4571: Int = 0 in
    Ta1420.4570.(Ti1421.4571) in
    (Td1419.4568 + Td1422.4569) in
                      let q1.4547: Float = let Td1426.4561: Float = let Td1425.4565: Float = let Ta1423.4566: [Float] = [light] in
  let Ti1424.4567: Int = 1 in
    Ta1423.4566.(Ti1424.4567) in
  (Td1425.4565 * t.4545) in
  let Td1429.4562: Float = let Ta1427.4563: [Float] = [intersection_point] in
  let Ti1428.4564: Int = 1 in
    Ta1427.4563.(Ti1428.4564) in
    (Td1426.4561 + Td1429.4562) in
                        let q2.4548: Float = let Td1433.4554: Float = let Td1432.4558: Float = let Ta1430.4559: [Float] = [light] in
  let Ti1431.4560: Int = 2 in
    Ta1430.4559.(Ti1431.4560) in
  (Td1432.4558 * t.4545) in
  let Td1436.4555: Float = let Ta1434.4556: [Float] = [intersection_point] in
  let Ti1435.4557: Int = 2 in
    Ta1434.4556.(Ti1435.4557) in
    (Td1433.4554 + Td1436.4555) in
                          let Tb1438.4549: Bool = let Ti1437.4553: Int = 0 in
  check_all_inside.2873(Ti1437.4553, and_group.2881, q0.4546, q1.4547, q2.4548) in
                            let Ti1439.4550: Int = 0 in
                              if Tb1438.4549 == Ti1439.4550 then
                                let Ti1441.4551: Int = let Ti1440.4552: Int = 1 in
  (iand_ofs.2880 + Ti1440.4552) in
                                  shadow_check_and_group.2879(Ti1441.4551, and_group.2881)
                              else
                                1 in
                                                                                                                                                                                      let rec (shadow_check_one_or_group.2882: (Int, [Int]) -> Bool) ((ofs.2883: Int), (or_group.2884: [Int])) = let head.4528: Int = or_group.2884.(ofs.2883) in
  let Ti1392.4529: Int = let Ti1391.4537: Int = 1 in
  -(Ti1391.4537) in
    if head.4528 == Ti1392.4529 then
      0
    else
      let and_group.4530: [Int] = let Ta1393.4536: [[Int]] = [and_net] in
  Ta1393.4536.(head.4528) in
        let shadow_p.4531: Bool = let Ti1394.4535: Int = 0 in
  shadow_check_and_group.2879(Ti1394.4535, and_group.4530) in
          let Ti1395.4532: Int = 0 in
            if shadow_p.4531 == Ti1395.4532 then
              let Ti1397.4533: Int = let Ti1396.4534: Int = 1 in
  (ofs.2883 + Ti1396.4534) in
                shadow_check_one_or_group.2882(Ti1397.4533, or_group.2884)
            else
              1 in
                                                                                                                                                                                        let rec (shadow_check_one_or_matrix.2885: (Int, [[Int]]) -> Bool) ((ofs.2886: Int), (or_matrix.2887: [[Int]])) = let head.4500: [Int] = or_matrix.2887.(ofs.2886) in
  let range_primitive.4501: Int = let Ti1366.4527: Int = 0 in
  head.4500.(Ti1366.4527) in
    let Ti1368.4502: Int = let Ti1367.4526: Int = 1 in
  -(Ti1367.4526) in
      if range_primitive.4501 == Ti1368.4502 then
        0
      else
        let Ti1382.4503: Int = let Ti1369.4512: Int = 99 in
  if range_primitive.4501 == Ti1369.4512 then
    1
  else
    let t.4513: Int = let Tt1370.4524: ([Float], [[Float]]) = light_dirvec: ([Float], [[Float]]) in
  let Ta1371.4525: [Float] = [intersection_point] in
    solver_fast.2813(range_primitive.4501, Tt1370.4524, Ta1371.4525) in
      let Ti1372.4514: Int = 0 in
        if t.4513 == Ti1372.4514 then
          0
        else
          let Tb1377.4515: Bool = let Ti1375.4520: Int = let Ta1373.4522: [Int] = [solver_dist] in
  let Ti1374.4523: Int = 0 in
    Ta1373.4522.(Ti1374.4523) in
  let Td1376.4521: Float = -0.1 in
    fless(Ti1375.4520, Td1376.4521) in
            let Ti1378.4516: Int = 0 in
              if Tb1377.4515 == Ti1378.4516 then
                0
              else
                let Tb1380.4517: Bool = let Ti1379.4519: Int = 1 in
  shadow_check_one_or_group.2882(Ti1379.4519, head.4500) in
                  let Ti1381.4518: Int = 0 in
                    if Tb1380.4517 == Ti1381.4518 then
                      0
                    else
                      1 in
          let Ti1383.4504: Int = 0 in
            if Ti1382.4503 == Ti1383.4504 then
              let Ti1385.4510: Int = let Ti1384.4511: Int = 1 in
  (ofs.2886 + Ti1384.4511) in
                shadow_check_one_or_matrix.2885(Ti1385.4510, or_matrix.2887)
            else
              let Tb1387.4505: Bool = let Ti1386.4509: Int = 1 in
  shadow_check_one_or_group.2882(Ti1386.4509, head.4500) in
                let Ti1388.4506: Int = 0 in
                  if Tb1387.4505 == Ti1388.4506 then
                    let Ti1390.4507: Int = let Ti1389.4508: Int = 1 in
  (ofs.2886 + Ti1389.4508) in
                      shadow_check_one_or_matrix.2885(Ti1390.4507, or_matrix.2887)
                  else
                    1 in
                                                                                                                                                                                          let rec (solve_each_element.2888: (Int, [Int], [Float]) -> Unit) ((iand_ofs.2889: Int), (and_group.2890: [Int]), (dirvec.2891: [Float])) = let iobj.4438: Int = and_group.2890.(iand_ofs.2889) in
  let Ti1316.4439: Int = let Ti1315.4499: Int = 1 in
  -(Ti1315.4499) in
    if iobj.4438 == Ti1316.4439 then
      ()
    else
      let t0.4440: Int = let Ta1317.4498: [Float] = [startp] in
  solver.2790(iobj.4438, dirvec.2891, Ta1317.4498) in
        let Ti1318.4441: Int = 0 in
          if t0.4440 == Ti1318.4441 then
            let Tb1321.4492: Bool = let Tt1320.4496: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1319.4497: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1319.4497.(iobj.4438) in
  o_isinvert.2662(Tt1320.4496) in
              let Ti1322.4493: Int = 0 in
                if Tb1321.4492 == Ti1322.4493 then
                  ()
                else
                  let Ti1324.4494: Int = let Ti1323.4495: Int = 1 in
  (iand_ofs.2889 + Ti1323.4495) in
                    solve_each_element.2888(Ti1324.4494, and_group.2890, dirvec.2891)
          else
            let t0p.4442: Float = let Ta1325.4490: [Int] = [solver_dist] in
  let Ti1326.4491: Int = 0 in
    Ta1325.4490.(Ti1326.4491) in
              let Tu109.4443: Unit = let Tb1328.4446: Bool = let Td1327.4489: Float = 0. in
  fless(Td1327.4489, t0p.4442) in
  let Ti1329.4447: Int = 0 in
    if Tb1328.4446 == Ti1329.4447 then
      ()
    else
      let Tb1333.4448: Bool = let Td1332.4486: Float = let Ta1330.4487: [Float] = [tmin] in
  let Ti1331.4488: Int = 0 in
    Ta1330.4487.(Ti1331.4488) in
  fless(t0p.4442, Td1332.4486) in
        let Ti1334.4449: Int = 0 in
          if Tb1333.4448 == Ti1334.4449 then
            ()
          else
            let t.4450: Float = let Td1335.4485: Float = 0.01 in
  (t0p.4442 + Td1335.4485) in
              let q0.4451: Float = let Td1338.4479: Float = let Td1337.4483: Float = let Ti1336.4484: Int = 0 in
  dirvec.2891.(Ti1336.4484) in
  (Td1337.4483 * t.4450) in
  let Td1341.4480: Float = let Ta1339.4481: [Float] = [startp] in
  let Ti1340.4482: Int = 0 in
    Ta1339.4481.(Ti1340.4482) in
    (Td1338.4479 + Td1341.4480) in
                let q1.4452: Float = let Td1344.4473: Float = let Td1343.4477: Float = let Ti1342.4478: Int = 1 in
  dirvec.2891.(Ti1342.4478) in
  (Td1343.4477 * t.4450) in
  let Td1347.4474: Float = let Ta1345.4475: [Float] = [startp] in
  let Ti1346.4476: Int = 1 in
    Ta1345.4475.(Ti1346.4476) in
    (Td1344.4473 + Td1347.4474) in
                  let q2.4453: Float = let Td1350.4467: Float = let Td1349.4471: Float = let Ti1348.4472: Int = 2 in
  dirvec.2891.(Ti1348.4472) in
  (Td1349.4471 * t.4450) in
  let Td1353.4468: Float = let Ta1351.4469: [Float] = [startp] in
  let Ti1352.4470: Int = 2 in
    Ta1351.4469.(Ti1352.4470) in
    (Td1350.4467 + Td1353.4468) in
                    let Tb1355.4454: Bool = let Ti1354.4466: Int = 0 in
  check_all_inside.2873(Ti1354.4466, and_group.2890, q0.4451, q1.4452, q2.4453) in
                      let Ti1356.4455: Int = 0 in
                        if Tb1355.4454 == Ti1356.4455 then
                          ()
                        else
                          let Tu108.4456: Unit = let Ta1357.4464: [Float] = [tmin] in
  let Ti1358.4465: Int = 0 in
    Ta1357.4464.(Ti1358.4465) <- t.4450 in
                            let Tu107.4457: Unit = let Ta1359.4463: [Float] = [intersection_point] in
  vecset.2610(Ta1359.4463, q0.4451, q1.4452, q2.4453) in
                              let Tu106.4458: Unit = let Ta1360.4461: [Int] = [intersected_object_id] in
  let Ti1361.4462: Int = 0 in
    Ta1360.4461.(Ti1361.4462) <- iobj.4438 in
                                let Ta1362.4459: [Int] = [intsec_rectside] in
                                  let Ti1363.4460: Int = 0 in
                                    Ta1362.4459.(Ti1363.4460) <- t0.4440 in
                let Ti1365.4444: Int = let Ti1364.4445: Int = 1 in
  (iand_ofs.2889 + Ti1364.4445) in
                  solve_each_element.2888(Ti1365.4444, and_group.2890, dirvec.2891) in
                                                                                                                                                                                            let rec (solve_one_or_network.2892: (Int, [Int], [Float]) -> Unit) ((ofs.2893: Int), (or_group.2894: [Int]), (dirvec.2895: [Float])) = let head.4429: Int = or_group.2894.(ofs.2893) in
  let Ti1310.4430: Int = let Ti1309.4437: Int = 1 in
  -(Ti1309.4437) in
    if head.4429 == Ti1310.4430 then
      ()
    else
      let and_group.4431: [Int] = let Ta1311.4436: [[Int]] = [and_net] in
  Ta1311.4436.(head.4429) in
        let Tu110.4432: Unit = let Ti1312.4435: Int = 0 in
  solve_each_element.2888(Ti1312.4435, and_group.4431, dirvec.2895) in
          let Ti1314.4433: Int = let Ti1313.4434: Int = 1 in
  (ofs.2893 + Ti1313.4434) in
            solve_one_or_network.2892(Ti1314.4433, or_group.2894, dirvec.2895) in
                                                                                                                                                                                              let rec (trace_or_matrix.2896: (Int, [[Int]], [Float]) -> Unit) ((ofs.2897: Int), (or_network.2898: [[Int]]), (dirvec.2899: [Float])) = let head.4407: [Int] = or_network.2898.(ofs.2897) in
  let range_primitive.4408: Int = let Ti1292.4428: Int = 0 in
  head.4407.(Ti1292.4428) in
    let Ti1294.4409: Int = let Ti1293.4427: Int = 1 in
  -(Ti1293.4427) in
      if range_primitive.4408 == Ti1294.4409 then
        ()
      else
        let Tu111.4410: Unit = let Ti1295.4413: Int = 99 in
  if range_primitive.4408 == Ti1295.4413 then
    let Ti1296.4426: Int = 1 in
      solve_one_or_network.2892(Ti1296.4426, head.4407, dirvec.2899)
  else
    let t.4414: Int = let Ta1297.4425: [Float] = [startp] in
  solver.2790(range_primitive.4408, dirvec.2899, Ta1297.4425) in
      let Ti1298.4415: Int = 0 in
        if t.4414 == Ti1298.4415 then
          ()
        else
          let tp.4416: Int = let Ta1299.4423: [Int] = [solver_dist] in
  let Ti1300.4424: Int = 0 in
    Ta1299.4423.(Ti1300.4424) in
            let Tb1304.4417: Bool = let Td1303.4420: Float = let Ta1301.4421: [Float] = [tmin] in
  let Ti1302.4422: Int = 0 in
    Ta1301.4421.(Ti1302.4422) in
  fless(tp.4416, Td1303.4420) in
              let Ti1305.4418: Int = 0 in
                if Tb1304.4417 == Ti1305.4418 then
                  ()
                else
                  let Ti1306.4419: Int = 1 in
                    solve_one_or_network.2892(Ti1306.4419, head.4407, dirvec.2899) in
          let Ti1308.4411: Int = let Ti1307.4412: Int = 1 in
  (ofs.2897 + Ti1307.4412) in
            trace_or_matrix.2896(Ti1308.4411, or_network.2898, dirvec.2899) in
                                                                                                                                                                                                let rec (judge_intersection.2900: ([Float]) -> Bool) ((dirvec.2901: [Float])) = let Tu113.4391: Unit = let Ta1279.4404: [Float] = [tmin] in
  let Ti1280.4405: Int = 0 in
    let Td1281.4406: Float = 1000000000. in
      Ta1279.4404.(Ti1280.4405) <- Td1281.4406 in
  let Tu112.4392: Unit = let Ti1282.4400: Int = 0 in
  let Ta1285.4401: [[Int]] = let Ta1283.4402: [[[Int]]] = [or_net] in
  let Ti1284.4403: Int = 0 in
    Ta1283.4402.(Ti1284.4403) in
    trace_or_matrix.2896(Ti1282.4400, Ta1285.4401, dirvec.2901) in
    let t.4393: Int = let Ta1286.4398: [Float] = [tmin] in
  let Ti1287.4399: Int = 0 in
    Ta1286.4398.(Ti1287.4399) in
      let Tb1289.4394: Bool = let Td1288.4397: Float = -0.1 in
  fless(Td1288.4397, t.4393) in
        let Ti1290.4395: Int = 0 in
          if Tb1289.4394 == Ti1290.4395 then
            0
          else
            let Td1291.4396: Float = 100000000. in
              fless(t.4393, Td1291.4396) in
                                                                                                                                                                                                  let rec (solve_each_element_fast.2902: (Int, [Int], ([Float], [[Float]])) -> Unit) ((iand_ofs.2903: Int), (and_group.2904: [Int]), (dirvec.2905: ([Float], [[Float]]))) = let vec.4329: [Float] = d_vec.2717(dirvec.2905) in
  let iobj.4330: Int = and_group.2904.(iand_ofs.2903) in
    let Ti1230.4331: Int = let Ti1229.4390: Int = 1 in
  -(Ti1229.4390) in
      if iobj.4330 == Ti1230.4331 then
        ()
      else
        let t0.4332: Int = solver_fast2.2831(iobj.4330, dirvec.2905) in
          let Ti1231.4333: Int = 0 in
            if t0.4332 == Ti1231.4333 then
              let Tb1234.4384: Bool = let Tt1233.4388: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta1232.4389: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta1232.4389.(iobj.4330) in
  o_isinvert.2662(Tt1233.4388) in
                let Ti1235.4385: Int = 0 in
                  if Tb1234.4384 == Ti1235.4385 then
                    ()
                  else
                    let Ti1237.4386: Int = let Ti1236.4387: Int = 1 in
  (iand_ofs.2903 + Ti1236.4387) in
                      solve_each_element_fast.2902(Ti1237.4386, and_group.2904, dirvec.2905)
            else
              let t0p.4334: Float = let Ta1238.4382: [Int] = [solver_dist] in
  let Ti1239.4383: Int = 0 in
    Ta1238.4382.(Ti1239.4383) in
                let Tu117.4335: Unit = let Tb1241.4338: Bool = let Td1240.4381: Float = 0. in
  fless(Td1240.4381, t0p.4334) in
  let Ti1242.4339: Int = 0 in
    if Tb1241.4338 == Ti1242.4339 then
      ()
    else
      let Tb1246.4340: Bool = let Td1245.4378: Float = let Ta1243.4379: [Float] = [tmin] in
  let Ti1244.4380: Int = 0 in
    Ta1243.4379.(Ti1244.4380) in
  fless(t0p.4334, Td1245.4378) in
        let Ti1247.4341: Int = 0 in
          if Tb1246.4340 == Ti1247.4341 then
            ()
          else
            let t.4342: Float = let Td1248.4377: Float = 0.01 in
  (t0p.4334 + Td1248.4377) in
              let q0.4343: Float = let Td1251.4371: Float = let Td1250.4375: Float = let Ti1249.4376: Int = 0 in
  vec.4329.(Ti1249.4376) in
  (Td1250.4375 * t.4342) in
  let Td1254.4372: Float = let Ta1252.4373: [Float] = [startp_fast] in
  let Ti1253.4374: Int = 0 in
    Ta1252.4373.(Ti1253.4374) in
    (Td1251.4371 + Td1254.4372) in
                let q1.4344: Float = let Td1257.4365: Float = let Td1256.4369: Float = let Ti1255.4370: Int = 1 in
  vec.4329.(Ti1255.4370) in
  (Td1256.4369 * t.4342) in
  let Td1260.4366: Float = let Ta1258.4367: [Float] = [startp_fast] in
  let Ti1259.4368: Int = 1 in
    Ta1258.4367.(Ti1259.4368) in
    (Td1257.4365 + Td1260.4366) in
                  let q2.4345: Float = let Td1263.4359: Float = let Td1262.4363: Float = let Ti1261.4364: Int = 2 in
  vec.4329.(Ti1261.4364) in
  (Td1262.4363 * t.4342) in
  let Td1266.4360: Float = let Ta1264.4361: [Float] = [startp_fast] in
  let Ti1265.4362: Int = 2 in
    Ta1264.4361.(Ti1265.4362) in
    (Td1263.4359 + Td1266.4360) in
                    let Tb1268.4346: Bool = let Ti1267.4358: Int = 0 in
  check_all_inside.2873(Ti1267.4358, and_group.2904, q0.4343, q1.4344, q2.4345) in
                      let Ti1269.4347: Int = 0 in
                        if Tb1268.4346 == Ti1269.4347 then
                          ()
                        else
                          let Tu116.4348: Unit = let Ta1270.4356: [Float] = [tmin] in
  let Ti1271.4357: Int = 0 in
    Ta1270.4356.(Ti1271.4357) <- t.4342 in
                            let Tu115.4349: Unit = let Ta1272.4355: [Float] = [intersection_point] in
  vecset.2610(Ta1272.4355, q0.4343, q1.4344, q2.4345) in
                              let Tu114.4350: Unit = let Ta1273.4353: [Int] = [intersected_object_id] in
  let Ti1274.4354: Int = 0 in
    Ta1273.4353.(Ti1274.4354) <- iobj.4330 in
                                let Ta1275.4351: [Int] = [intsec_rectside] in
                                  let Ti1276.4352: Int = 0 in
                                    Ta1275.4351.(Ti1276.4352) <- t0.4332 in
                  let Ti1278.4336: Int = let Ti1277.4337: Int = 1 in
  (iand_ofs.2903 + Ti1277.4337) in
                    solve_each_element_fast.2902(Ti1278.4336, and_group.2904, dirvec.2905) in
                                                                                                                                                                                                    let rec (solve_one_or_network_fast.2906: (Int, [Int], ([Float], [[Float]])) -> Unit) ((ofs.2907: Int), (or_group.2908: [Int]), (dirvec.2909: ([Float], [[Float]]))) = let head.4320: Int = or_group.2908.(ofs.2907) in
  let Ti1224.4321: Int = let Ti1223.4328: Int = 1 in
  -(Ti1223.4328) in
    if head.4320 == Ti1224.4321 then
      ()
    else
      let and_group.4322: [Int] = let Ta1225.4327: [[Int]] = [and_net] in
  Ta1225.4327.(head.4320) in
        let Tu118.4323: Unit = let Ti1226.4326: Int = 0 in
  solve_each_element_fast.2902(Ti1226.4326, and_group.4322, dirvec.2909) in
          let Ti1228.4324: Int = let Ti1227.4325: Int = 1 in
  (ofs.2907 + Ti1227.4325) in
            solve_one_or_network_fast.2906(Ti1228.4324, or_group.2908, dirvec.2909) in
                                                                                                                                                                                                      let rec (trace_or_matrix_fast.2910: (Int, [[Int]], ([Float], [[Float]])) -> Unit) ((ofs.2911: Int), (or_network.2912: [[Int]]), (dirvec.2913: ([Float], [[Float]]))) = let head.4299: [Int] = or_network.2912.(ofs.2911) in
  let range_primitive.4300: Int = let Ti1207.4319: Int = 0 in
  head.4299.(Ti1207.4319) in
    let Ti1209.4301: Int = let Ti1208.4318: Int = 1 in
  -(Ti1208.4318) in
      if range_primitive.4300 == Ti1209.4301 then
        ()
      else
        let Tu119.4302: Unit = let Ti1210.4305: Int = 99 in
  if range_primitive.4300 == Ti1210.4305 then
    let Ti1211.4317: Int = 1 in
      solve_one_or_network_fast.2906(Ti1211.4317, head.4299, dirvec.2913)
  else
    let t.4306: Int = solver_fast2.2831(range_primitive.4300, dirvec.2913) in
      let Ti1212.4307: Int = 0 in
        if t.4306 == Ti1212.4307 then
          ()
        else
          let tp.4308: Int = let Ta1213.4315: [Int] = [solver_dist] in
  let Ti1214.4316: Int = 0 in
    Ta1213.4315.(Ti1214.4316) in
            let Tb1218.4309: Bool = let Td1217.4312: Float = let Ta1215.4313: [Float] = [tmin] in
  let Ti1216.4314: Int = 0 in
    Ta1215.4313.(Ti1216.4314) in
  fless(tp.4308, Td1217.4312) in
              let Ti1219.4310: Int = 0 in
                if Tb1218.4309 == Ti1219.4310 then
                  ()
                else
                  let Ti1220.4311: Int = 1 in
                    solve_one_or_network_fast.2906(Ti1220.4311, head.4299, dirvec.2913) in
          let Ti1222.4303: Int = let Ti1221.4304: Int = 1 in
  (ofs.2911 + Ti1221.4304) in
            trace_or_matrix_fast.2910(Ti1222.4303, or_network.2912, dirvec.2913) in
                                                                                                                                                                                                        let rec (judge_intersection_fast.2914: (([Float], [[Float]])) -> Bool) ((dirvec.2915: ([Float], [[Float]]))) = let Tu121.4283: Unit = let Ta1194.4296: [Float] = [tmin] in
  let Ti1195.4297: Int = 0 in
    let Td1196.4298: Float = 1000000000. in
      Ta1194.4296.(Ti1195.4297) <- Td1196.4298 in
  let Tu120.4284: Unit = let Ti1197.4292: Int = 0 in
  let Ta1200.4293: [[Int]] = let Ta1198.4294: [[[Int]]] = [or_net] in
  let Ti1199.4295: Int = 0 in
    Ta1198.4294.(Ti1199.4295) in
    trace_or_matrix_fast.2910(Ti1197.4292, Ta1200.4293, dirvec.2915) in
    let t.4285: Int = let Ta1201.4290: [Float] = [tmin] in
  let Ti1202.4291: Int = 0 in
    Ta1201.4290.(Ti1202.4291) in
      let Tb1204.4286: Bool = let Td1203.4289: Float = -0.1 in
  fless(Td1203.4289, t.4285) in
        let Ti1205.4287: Int = 0 in
          if Tb1204.4286 == Ti1205.4287 then
            0
          else
            let Td1206.4288: Float = 100000000. in
              fless(t.4285, Td1206.4288) in
                                                                                                                                                                                                          let rec (get_nvector_rect.2916: ([Float]) -> Unit) ((dirvec.2917: [Float])) = let rectside.4270: Int = let Ta1183.4281: [Int] = [intsec_rectside] in
  let Ti1184.4282: Int = 0 in
    Ta1183.4281.(Ti1184.4282) in
  let Tu122.4271: Unit = let Ta1185.4280: [Float] = [nvector] in
  vecbzero.2618(Ta1185.4280) in
    let Ta1186.4272: [Float] = [nvector] in
      let Ti1188.4273: Int = let Ti1187.4279: Int = 1 in
  (rectside.4270 - Ti1187.4279) in
        let Td1193.4274: Float = let Td1192.4275: Float = let Td1191.4276: Float = let Ti1190.4277: Int = let Ti1189.4278: Int = 1 in
  (rectside.4270 - Ti1189.4278) in
  dirvec.2917.(Ti1190.4277) in
  sgn.2602(Td1191.4276) in
  fneg(Td1192.4275) in
          Ta1186.4272.(Ti1188.4273) <- Td1193.4274 in
                                                                                                                                                                                                            let rec (get_nvector_plane.2918: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Unit) ((m.2919: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let Tu124.4256: Unit = let Ta1171.4266: [Float] = [nvector] in
  let Ti1172.4267: Int = 0 in
    let Td1174.4268: Float = let Td1173.4269: Float = o_param_a.2666(m.2919) in
  fneg(Td1173.4269) in
      Ta1171.4266.(Ti1172.4267) <- Td1174.4268 in
  let Tu123.4257: Unit = let Ta1175.4262: [Float] = [nvector] in
  let Ti1176.4263: Int = 1 in
    let Td1178.4264: Float = let Td1177.4265: Float = o_param_b.2668(m.2919) in
  fneg(Td1177.4265) in
      Ta1175.4262.(Ti1176.4263) <- Td1178.4264 in
    let Ta1179.4258: [Float] = [nvector] in
      let Ti1180.4259: Int = 2 in
        let Td1182.4260: Float = let Td1181.4261: Float = o_param_c.2670(m.2919) in
  fneg(Td1181.4261) in
          Ta1179.4258.(Ti1180.4259) <- Td1182.4260 in
                                                                                                                                                                                                              let rec (get_nvector_second.2920: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Unit) ((m.2921: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let p0.4193: Float = let Td1121.4252: Float = let Ta1119.4254: [Float] = [intersection_point] in
  let Ti1120.4255: Int = 0 in
    Ta1119.4254.(Ti1120.4255) in
  let Td1122.4253: Float = o_param_x.2674(m.2921) in
    (Td1121.4252 - Td1122.4253) in
  let p1.4194: Float = let Td1125.4248: Float = let Ta1123.4250: [Float] = [intersection_point] in
  let Ti1124.4251: Int = 1 in
    Ta1123.4250.(Ti1124.4251) in
  let Td1126.4249: Float = o_param_y.2676(m.2921) in
    (Td1125.4248 - Td1126.4249) in
    let p2.4195: Float = let Td1129.4244: Float = let Ta1127.4246: [Float] = [intersection_point] in
  let Ti1128.4247: Int = 2 in
    Ta1127.4246.(Ti1128.4247) in
  let Td1130.4245: Float = o_param_z.2678(m.2921) in
    (Td1129.4244 - Td1130.4245) in
      let d0.4196: Float = let Td1131.4243: Float = o_param_a.2666(m.2921) in
  (p0.4193 * Td1131.4243) in
        let d1.4197: Float = let Td1132.4242: Float = o_param_b.2668(m.2921) in
  (p1.4194 * Td1132.4242) in
          let d2.4198: Float = let Td1133.4241: Float = o_param_c.2670(m.2921) in
  (p2.4195 * Td1133.4241) in
            let Tu129.4199: Unit = let Ti1134.4202: Int = o_isrot.2664(m.2921) in
  let Ti1135.4203: Int = 0 in
    if Ti1134.4202 == Ti1135.4203 then
      let Tu126.4233: Unit = let Ta1136.4239: [Float] = [nvector] in
  let Ti1137.4240: Int = 0 in
    Ta1136.4239.(Ti1137.4240) <- d0.4196 in
        let Tu125.4234: Unit = let Ta1138.4237: [Float] = [nvector] in
  let Ti1139.4238: Int = 1 in
    Ta1138.4237.(Ti1139.4238) <- d1.4197 in
          let Ta1140.4235: [Float] = [nvector] in
            let Ti1141.4236: Int = 2 in
              Ta1140.4235.(Ti1141.4236) <- d2.4198
    else
      let Tu128.4204: Unit = let Ta1142.4224: [Float] = [nvector] in
  let Ti1143.4225: Int = 0 in
    let Td1150.4226: Float = let Td1149.4227: Float = let Td1148.4228: Float = let Td1145.4229: Float = let Td1144.4232: Float = o_param_r3.2694(m.2921) in
  (p1.4194 * Td1144.4232) in
  let Td1147.4230: Float = let Td1146.4231: Float = o_param_r2.2692(m.2921) in
  (p2.4195 * Td1146.4231) in
    (Td1145.4229 + Td1147.4230) in
  fhalf(Td1148.4228) in
  (d0.4196 + Td1149.4227) in
      Ta1142.4224.(Ti1143.4225) <- Td1150.4226 in
        let Tu127.4205: Unit = let Ta1151.4215: [Float] = [nvector] in
  let Ti1152.4216: Int = 1 in
    let Td1159.4217: Float = let Td1158.4218: Float = let Td1157.4219: Float = let Td1154.4220: Float = let Td1153.4223: Float = o_param_r3.2694(m.2921) in
  (p0.4193 * Td1153.4223) in
  let Td1156.4221: Float = let Td1155.4222: Float = o_param_r1.2690(m.2921) in
  (p2.4195 * Td1155.4222) in
    (Td1154.4220 + Td1156.4221) in
  fhalf(Td1157.4219) in
  (d1.4197 + Td1158.4218) in
      Ta1151.4215.(Ti1152.4216) <- Td1159.4217 in
          let Ta1160.4206: [Float] = [nvector] in
            let Ti1161.4207: Int = 2 in
              let Td1168.4208: Float = let Td1167.4209: Float = let Td1166.4210: Float = let Td1163.4211: Float = let Td1162.4214: Float = o_param_r2.2692(m.2921) in
  (p0.4193 * Td1162.4214) in
  let Td1165.4212: Float = let Td1164.4213: Float = o_param_r1.2690(m.2921) in
  (p1.4194 * Td1164.4213) in
    (Td1163.4211 + Td1165.4212) in
  fhalf(Td1166.4210) in
  (d2.4198 + Td1167.4209) in
                Ta1160.4206.(Ti1161.4207) <- Td1168.4208 in
              let Ta1169.4200: [Float] = [nvector] in
                let Tb1170.4201: Bool = o_isinvert.2662(m.2921) in
                  vecunit_sgn.2628(Ta1169.4200, Tb1170.4201) in
                                                                                                                                                                                                                let rec (get_nvector.2922: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float]) -> Unit) ((m.2923: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec.2924: [Float])) = let m_shape.4190: Int = o_form.2658(m.2923) in
  let Ti1117.4191: Int = 1 in
    if m_shape.4190 == Ti1117.4191 then
      get_nvector_rect.2916(dirvec.2924)
    else
      let Ti1118.4192: Int = 2 in
        if m_shape.4190 == Ti1118.4192 then
          get_nvector_plane.2918(m.2923)
        else
          get_nvector_second.2920(m.2923) in
                                                                                                                                                                                                                  let rec (utexture.2925: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float]) -> Unit) ((m.2926: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (p.2927: [Float])) = let m_tex.4027: Int = o_texturetype.2656(m.2926) in
  let Tu134.4028: Unit = let Ta984.4187: [Float] = [texture_color] in
  let Ti985.4188: Int = 0 in
    let Ti986.4189: Int = o_color_red.2684(m.2926) in
      Ta984.4187.(Ti985.4188) <- Ti986.4189 in
    let Tu133.4029: Unit = let Ta987.4184: [Float] = [texture_color] in
  let Ti988.4185: Int = 1 in
    let Ti989.4186: Int = o_color_green.2686(m.2926) in
      Ta987.4184.(Ti988.4185) <- Ti989.4186 in
      let Tu132.4030: Unit = let Ta990.4181: [Float] = [texture_color] in
  let Ti991.4182: Int = 2 in
    let Ti992.4183: Int = o_color_blue.2688(m.2926) in
      Ta990.4181.(Ti991.4182) <- Ti992.4183 in
        let Ti993.4031: Int = 1 in
          if m_tex.4027 == Ti993.4031 then
            let w1.4151: Float = let Td995.4178: Float = let Ti994.4180: Int = 0 in
  p.2927.(Ti994.4180) in
  let Td996.4179: Float = o_param_x.2674(m.2926) in
    (Td995.4178 - Td996.4179) in
              let flag1.4152: Bool = let d1.4171: Float = let Td999.4174: Float = let Td998.4176: Float = let Td997.4177: Float = 0.05 in
  (w1.4151 * Td997.4177) in
  floor(Td998.4176) in
  let Td1000.4175: Float = 20. in
    (Td999.4174 * Td1000.4175) in
  let Td1001.4172: Float = (w1.4151 - d1.4171) in
    let Td1002.4173: Float = 10. in
      fless(Td1001.4172, Td1002.4173) in
                let w3.4153: Float = let Td1004.4168: Float = let Ti1003.4170: Int = 2 in
  p.2927.(Ti1003.4170) in
  let Td1005.4169: Float = o_param_z.2678(m.2926) in
    (Td1004.4168 - Td1005.4169) in
                  let flag2.4154: Bool = let d2.4161: Float = let Td1008.4164: Float = let Td1007.4166: Float = let Td1006.4167: Float = 0.05 in
  (w3.4153 * Td1006.4167) in
  floor(Td1007.4166) in
  let Td1009.4165: Float = 20. in
    (Td1008.4164 * Td1009.4165) in
  let Td1010.4162: Float = (w3.4153 - d2.4161) in
    let Td1011.4163: Float = 10. in
      fless(Td1010.4162, Td1011.4163) in
                    let Ta1012.4155: [Float] = [texture_color] in
                      let Ti1013.4156: Int = 1 in
                        let Td1017.4157: Float = let Ti1014.4158: Int = 0 in
  if flag1.4152 == Ti1014.4158 then
    let Ti1015.4160: Int = 0 in
      if flag2.4154 == Ti1015.4160 then
        255.
      else
        0.
  else
    let Ti1016.4159: Int = 0 in
      if flag2.4154 == Ti1016.4159 then
        0.
      else
        255. in
                          Ta1012.4155.(Ti1013.4156) <- Td1017.4157
          else
            let Ti1018.4032: Int = 2 in
              if m_tex.4027 == Ti1018.4032 then
                let w2.4134: Float = let Td1023.4146: Float = let Td1022.4147: Float = let Td1020.4148: Float = let Ti1019.4150: Int = 1 in
  p.2927.(Ti1019.4150) in
  let Td1021.4149: Float = 0.25 in
    (Td1020.4148 * Td1021.4149) in
  sin(Td1022.4147) in
  fsqr(Td1023.4146) in
                  let Tu130.4135: Unit = let Ta1024.4142: [Float] = [texture_color] in
  let Ti1025.4143: Int = 0 in
    let Td1027.4144: Float = let Td1026.4145: Float = 255. in
  (Td1026.4145 * w2.4134) in
      Ta1024.4142.(Ti1025.4143) <- Td1027.4144 in
                    let Ta1028.4136: [Float] = [texture_color] in
                      let Ti1029.4137: Int = 1 in
                        let Td1033.4138: Float = let Td1030.4139: Float = 255. in
  let Td1032.4140: Float = let Td1031.4141: Float = 1. in
  (Td1031.4141 - w2.4134) in
    (Td1030.4139 * Td1032.4140) in
                          Ta1028.4136.(Ti1029.4137) <- Td1033.4138
              else
                let Ti1034.4033: Int = 3 in
                  if m_tex.4027 == Ti1034.4033 then
                    let w1.4103: Float = let Td1036.4131: Float = let Ti1035.4133: Int = 0 in
  p.2927.(Ti1035.4133) in
  let Td1037.4132: Float = o_param_x.2674(m.2926) in
    (Td1036.4131 - Td1037.4132) in
                      let w3.4104: Float = let Td1039.4128: Float = let Ti1038.4130: Int = 2 in
  p.2927.(Ti1038.4130) in
  let Td1040.4129: Float = o_param_z.2678(m.2926) in
    (Td1039.4128 - Td1040.4129) in
                        let w2.4105: Float = let Td1044.4123: Float = let Td1043.4125: Float = let Td1041.4126: Float = fsqr(w1.4103) in
  let Td1042.4127: Float = fsqr(w3.4104) in
    (Td1041.4126 + Td1042.4127) in
  sqrt(Td1043.4125) in
  let Td1045.4124: Float = 10. in
    (Td1044.4123 / Td1045.4124) in
                          let w4.4106: Float = let Td1047.4120: Float = let Td1046.4122: Float = floor(w2.4105) in
  (w2.4105 - Td1046.4122) in
  let Td1048.4121: Float = 3.1415927 in
    (Td1047.4120 * Td1048.4121) in
                            let cws.4107: Float = let Td1049.4119: Float = cos(w4.4106) in
  fsqr(Td1049.4119) in
                              let Tu131.4108: Unit = let Ta1050.4115: [Float] = [texture_color] in
  let Ti1051.4116: Int = 1 in
    let Td1053.4117: Float = let Td1052.4118: Float = 255. in
  (cws.4107 * Td1052.4118) in
      Ta1050.4115.(Ti1051.4116) <- Td1053.4117 in
                                let Ta1054.4109: [Float] = [texture_color] in
                                  let Ti1055.4110: Int = 2 in
                                    let Td1059.4111: Float = let Td1057.4112: Float = let Td1056.4114: Float = 1. in
  (Td1056.4114 - cws.4107) in
  let Td1058.4113: Float = 255. in
    (Td1057.4112 * Td1058.4113) in
                                      Ta1054.4109.(Ti1055.4110) <- Td1059.4111
                  else
                    let Ti1060.4034: Int = 4 in
                      if m_tex.4027 == Ti1060.4034 then
                        let w1.4035: Float = let Td1064.4097: Float = let Td1062.4100: Float = let Ti1061.4102: Int = 0 in
  p.2927.(Ti1061.4102) in
  let Td1063.4101: Float = o_param_x.2674(m.2926) in
    (Td1062.4100 - Td1063.4101) in
  let Td1066.4098: Float = let Td1065.4099: Float = o_param_a.2666(m.2926) in
  sqrt(Td1065.4099) in
    (Td1064.4097 * Td1066.4098) in
                          let w3.4036: Float = let Td1070.4091: Float = let Td1068.4094: Float = let Ti1067.4096: Int = 2 in
  p.2927.(Ti1067.4096) in
  let Td1069.4095: Float = o_param_z.2678(m.2926) in
    (Td1068.4094 - Td1069.4095) in
  let Td1072.4092: Float = let Td1071.4093: Float = o_param_c.2670(m.2926) in
  sqrt(Td1071.4093) in
    (Td1070.4091 * Td1072.4092) in
                            let w4.4037: Float = let Td1073.4089: Float = fsqr(w1.4035) in
  let Td1074.4090: Float = fsqr(w3.4036) in
    (Td1073.4089 + Td1074.4090) in
                              let w7.4038: Float = let Tb1077.4079: Bool = let Ti1075.4087: Int = fabs(w1.4035) in
  let Td1076.4088: Float = 0.0001 in
    fless(Ti1075.4087, Td1076.4088) in
  let Ti1078.4080: Int = 0 in
    if Tb1077.4079 == Ti1078.4080 then
      let w5.4081: Int = let Td1079.4086: Float = (w3.4036 / w1.4035) in
  fabs(Td1079.4086) in
        let Td1082.4082: Float = let Td1080.4084: Float = atan(w5.4081) in
  let Td1081.4085: Float = 30. in
    (Td1080.4084 * Td1081.4085) in
          let Td1083.4083: Float = 3.1415927 in
            (Td1082.4082 / Td1083.4083)
    else
      15. in
                                let w9.4039: Float = let Td1084.4078: Float = floor(w7.4038) in
  (w7.4038 - Td1084.4078) in
                                  let w2.4040: Float = let Td1088.4072: Float = let Td1086.4075: Float = let Ti1085.4077: Int = 1 in
  p.2927.(Ti1085.4077) in
  let Td1087.4076: Float = o_param_y.2676(m.2926) in
    (Td1086.4075 - Td1087.4076) in
  let Td1090.4073: Float = let Td1089.4074: Float = o_param_b.2668(m.2926) in
  sqrt(Td1089.4074) in
    (Td1088.4072 * Td1090.4073) in
                                    let w8.4041: Float = let Tb1093.4062: Bool = let Ti1091.4070: Int = fabs(w4.4037) in
  let Td1092.4071: Float = 0.0001 in
    fless(Ti1091.4070, Td1092.4071) in
  let Ti1094.4063: Int = 0 in
    if Tb1093.4062 == Ti1094.4063 then
      let w6.4064: Int = let Td1095.4069: Float = (w2.4040 / w4.4037) in
  fabs(Td1095.4069) in
        let Td1098.4065: Float = let Td1096.4067: Float = atan(w6.4064) in
  let Td1097.4068: Float = 30. in
    (Td1096.4067 * Td1097.4068) in
          let Td1099.4066: Float = 3.1415927 in
            (Td1098.4065 / Td1099.4066)
    else
      15. in
                                      let w10.4042: Float = let Td1100.4061: Float = floor(w8.4041) in
  (w8.4041 - Td1100.4061) in
                                        let w11.4043: Float = let Td1105.4053: Float = let Td1101.4057: Float = 0.15 in
  let Td1104.4058: Float = let Td1103.4059: Float = let Td1102.4060: Float = 0.5 in
  (Td1102.4060 - w9.4039) in
  fsqr(Td1103.4059) in
    (Td1101.4057 - Td1104.4058) in
  let Td1108.4054: Float = let Td1107.4055: Float = let Td1106.4056: Float = 0.5 in
  (Td1106.4056 - w10.4042) in
  fsqr(Td1107.4055) in
    (Td1105.4053 - Td1108.4054) in
                                          let w12.4044: Float = let Tb1109.4051: Bool = fisneg(w11.4043) in
  let Ti1110.4052: Int = 0 in
    if Tb1109.4051 == Ti1110.4052 then
      w11.4043
    else
      0. in
                                            let Ta1111.4045: [Float] = [texture_color] in
                                              let Ti1112.4046: Int = 2 in
                                                let Td1116.4047: Float = let Td1114.4048: Float = let Td1113.4050: Float = 255. in
  (Td1113.4050 * w12.4044) in
  let Td1115.4049: Float = 0.3 in
    (Td1114.4048 / Td1115.4049) in
                                                  Ta1111.4045.(Ti1112.4046) <- Td1116.4047
                      else
                        () in
                                                                                                                                                                                                                    let rec (add_light.2928: (Float, Float, Float) -> Unit) ((bright.2929: Float), (hilight.2930: Float), (hilight_scale.2931: Float)) = let Tu137.3997: Unit = let Tb958.4023: Bool = fispos(bright.2929) in
  let Ti959.4024: Int = 0 in
    if Tb958.4023 == Ti959.4024 then
      ()
    else
      let Ta960.4025: [Float] = [rgb] in
        let Ta961.4026: [Float] = [texture_color] in
          vecaccum.2639(Ta960.4025, bright.2929, Ta961.4026) in
  let Tb962.3998: Bool = fispos(hilight.2930) in
    let Ti963.3999: Int = 0 in
      if Tb962.3998 == Ti963.3999 then
        ()
      else
        let ihl.4000: Float = let Td965.4021: Float = let Td964.4022: Float = fsqr(hilight.2930) in
  fsqr(Td964.4022) in
  (Td965.4021 * hilight_scale.2931) in
          let Tu136.4001: Unit = let Ta966.4015: [Float] = [rgb] in
  let Ti967.4016: Int = 0 in
    let Td971.4017: Float = let Td970.4018: Float = let Ta968.4019: [Float] = [rgb] in
  let Ti969.4020: Int = 0 in
    Ta968.4019.(Ti969.4020) in
  (Td970.4018 + ihl.4000) in
      Ta966.4015.(Ti967.4016) <- Td971.4017 in
            let Tu135.4002: Unit = let Ta972.4009: [Float] = [rgb] in
  let Ti973.4010: Int = 1 in
    let Td977.4011: Float = let Td976.4012: Float = let Ta974.4013: [Float] = [rgb] in
  let Ti975.4014: Int = 1 in
    Ta974.4013.(Ti975.4014) in
  (Td976.4012 + ihl.4000) in
      Ta972.4009.(Ti973.4010) <- Td977.4011 in
              let Ta978.4003: [Float] = [rgb] in
                let Ti979.4004: Int = 2 in
                  let Td983.4005: Float = let Td982.4006: Float = let Ta980.4007: [Float] = [rgb] in
  let Ti981.4008: Int = 2 in
    Ta980.4007.(Ti981.4008) in
  (Td982.4006 + ihl.4000) in
                    Ta978.4003.(Ti979.4004) <- Td983.4005 in
                                                                                                                                                                                                                      let rec (trace_reflections.2932: (Int, Float, Float, [Float]) -> Unit) ((index.2933: Int), (diffuse.2934: Float), (hilight_scale.2935: Float), (dirvec.2936: [Float])) = let Ti932.3963: Int = 0 in
  if Ti932.3963 <= index.2933 then
    let rinfo.3964: (Int, ([Float], [[Float]]), Float) = let Ta933.3996: [(Int, ([Float], [[Float]]), Float)] = [reflections] in
  Ta933.3996.(index.2933) in
      let dvec.3965: ([Float], [[Float]]) = r_dvec.2723(rinfo.3964) in
        let Tu138.3966: Unit = let Tb934.3969: Bool = judge_intersection_fast.2914(dvec.3965) in
  let Ti935.3970: Int = 0 in
    if Tb934.3969 == Ti935.3970 then
      ()
    else
      let surface_id.3971: Int = let Ti940.3988: Int = let Ti938.3992: Int = let Ta936.3994: [Int] = [intersected_object_id] in
  let Ti937.3995: Int = 0 in
    Ta936.3994.(Ti937.3995) in
  let Ti939.3993: Int = 4 in
    (Ti938.3992 * Ti939.3993) in
  let Ti943.3989: Int = let Ta941.3990: [Int] = [intsec_rectside] in
  let Ti942.3991: Int = 0 in
    Ta941.3990.(Ti942.3991) in
    (Ti940.3988 + Ti943.3989) in
        let Ti944.3972: Int = r_surface_id.2721(rinfo.3964) in
          if surface_id.3971 == Ti944.3972 then
            let Tb949.3973: Bool = let Ti945.3984: Int = 0 in
  let Ta948.3985: [[Int]] = let Ta946.3986: [[[Int]]] = [or_net] in
  let Ti947.3987: Int = 0 in
    Ta946.3986.(Ti947.3987) in
    shadow_check_one_or_matrix.2885(Ti945.3984, Ta948.3985) in
              let Ti950.3974: Int = 0 in
                if Tb949.3973 == Ti950.3974 then
                  let p.3975: Float = let Ta951.3982: [Float] = [nvector] in
  let Ta952.3983: [Float] = d_vec.2717(dvec.3965) in
    veciprod.2631(Ta951.3982, Ta952.3983) in
                    let scale.3976: Float = r_bright.2725(rinfo.3964) in
                      let bright.3977: Float = let Td953.3981: Float = (scale.3976 * diffuse.2934) in
  (Td953.3981 * p.3975) in
                        let hilight.3978: Float = let Td955.3979: Float = let Ta954.3980: [Float] = d_vec.2717(dvec.3965) in
  veciprod.2631(dirvec.2936, Ta954.3980) in
  (scale.3976 * Td955.3979) in
                          add_light.2928(bright.3977, hilight.3978, hilight_scale.2935)
                else
                  ()
          else
            () in
          let Ti957.3967: Int = let Ti956.3968: Int = 1 in
  (index.2933 - Ti956.3968) in
            trace_reflections.2932(Ti957.3967, diffuse.2934, hilight_scale.2935, dirvec.2936)
  else
    () in
                                                                                                                                                                                                                        let rec (trace_ray.2937: (Int, Float, [Float], ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Float) -> Unit) ((nref.2938: Int), (energy.2939: Float), (dirvec.2940: [Float]), (pixel.2941: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (dist.2942: Float)) = let Ti827.3825: Int = 4 in
  if nref.2938 <= Ti827.3825 then
    let surface_ids.3826: [Int] = p_surface_ids.2702(pixel.2941) in
      let Tb828.3827: Bool = judge_intersection.2900(dirvec.2940) in
        let Ti829.3828: Int = 0 in
          if Tb828.3827 == Ti829.3828 then
            let Tu155.3927: Unit = let Ti831.3961: Int = let Ti830.3962: Int = 1 in
  -(Ti830.3962) in
  surface_ids.3826.(nref.2938) <- Ti831.3961 in
              let Ti832.3928: Int = 0 in
                if nref.2938 == Ti832.3928 then
                  ()
                else
                  let hl.3929: Float = let Td834.3959: Float = let Ta833.3960: [Float] = [light] in
  veciprod.2631(dirvec.2940, Ta833.3960) in
  fneg(Td834.3959) in
                    let Tb835.3930: Bool = fispos(hl.3929) in
                      let Ti836.3931: Int = 0 in
                        if Tb835.3930 == Ti836.3931 then
                          ()
                        else
                          let ihl.3932: Float = let Td839.3953: Float = let Td838.3957: Float = let Td837.3958: Float = fsqr(hl.3929) in
  (Td837.3958 * hl.3929) in
  (Td838.3957 * energy.2939) in
  let Td842.3954: Float = let Ta840.3955: [Float] = [beam] in
  let Ti841.3956: Int = 0 in
    Ta840.3955.(Ti841.3956) in
    (Td839.3953 * Td842.3954) in
                            let Tu154.3933: Unit = let Ta843.3947: [Float] = [rgb] in
  let Ti844.3948: Int = 0 in
    let Td848.3949: Float = let Td847.3950: Float = let Ta845.3951: [Float] = [rgb] in
  let Ti846.3952: Int = 0 in
    Ta845.3951.(Ti846.3952) in
  (Td847.3950 + ihl.3932) in
      Ta843.3947.(Ti844.3948) <- Td848.3949 in
                              let Tu153.3934: Unit = let Ta849.3941: [Float] = [rgb] in
  let Ti850.3942: Int = 1 in
    let Td854.3943: Float = let Td853.3944: Float = let Ta851.3945: [Float] = [rgb] in
  let Ti852.3946: Int = 1 in
    Ta851.3945.(Ti852.3946) in
  (Td853.3944 + ihl.3932) in
      Ta849.3941.(Ti850.3942) <- Td854.3943 in
                                let Ta855.3935: [Float] = [rgb] in
                                  let Ti856.3936: Int = 2 in
                                    let Td860.3937: Float = let Td859.3938: Float = let Ta857.3939: [Float] = [rgb] in
  let Ti858.3940: Int = 2 in
    Ta857.3939.(Ti858.3940) in
  (Td859.3938 + ihl.3932) in
                                      Ta855.3935.(Ti856.3936) <- Td860.3937
          else
            let obj_id.3829: Int = let Ta861.3925: [Int] = [intersected_object_id] in
  let Ti862.3926: Int = 0 in
    Ta861.3925.(Ti862.3926) in
              let obj.3830: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta863.3924: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta863.3924.(obj_id.3829) in
                let m_surface.3831: Int = o_reflectiontype.2660(obj.3830) in
                  let diffuse.3832: Float = let Td864.3923: Float = o_diffuse.2680(obj.3830) in
  (Td864.3923 * energy.2939) in
                    let Tu152.3833: Unit = get_nvector.2922(obj.3830, dirvec.2940) in
                      let Tu151.3834: Unit = let Ta865.3921: [Float] = [startp] in
  let Ta866.3922: [Float] = [intersection_point] in
    veccpy.2620(Ta865.3921, Ta866.3922) in
                        let Tu150.3835: Unit = let Ta867.3920: [Float] = [intersection_point] in
  utexture.2925(obj.3830, Ta867.3920) in
                          let Tu149.3836: Unit = let Ti873.3914: Int = let Ti869.3915: Int = let Ti868.3919: Int = 4 in
  (obj_id.3829 * Ti868.3919) in
  let Ti872.3916: Int = let Ta870.3917: [Int] = [intsec_rectside] in
  let Ti871.3918: Int = 0 in
    Ta870.3917.(Ti871.3918) in
    (Ti869.3915 + Ti872.3916) in
  surface_ids.3826.(nref.2938) <- Ti873.3914 in
                            let intersection_points.3837: [[Float]] = p_intersection_points.2700(pixel.2941) in
                              let Tu148.3838: Unit = let Ta874.3912: [Float] = intersection_points.3837.(nref.2938) in
  let Ta875.3913: [Float] = [intersection_point] in
    veccpy.2620(Ta874.3912, Ta875.3913) in
                                let calc_diffuse.3839: [Bool] = p_calc_diffuse.2704(pixel.2941) in
                                  let Tu147.3840: Unit = let Tb878.3892: Bool = let Td876.3910: Float = o_diffuse.2680(obj.3830) in
  let Td877.3911: Float = 0.5 in
    fless(Td876.3910, Td877.3911) in
  let Ti879.3893: Int = 0 in
    if Tb878.3892 == Ti879.3893 then
      let Tu141.3895: Unit = let Ti880.3909: Int = 1 in
  calc_diffuse.3839.(nref.2938) <- Ti880.3909 in
        let energya.3896: [[Float]] = p_energy.2706(pixel.2941) in
          let Tu140.3897: Unit = let Ta881.3907: [Float] = energya.3896.(nref.2938) in
  let Ta882.3908: [Float] = [texture_color] in
    veccpy.2620(Ta881.3907, Ta882.3908) in
            let Tu139.3898: Unit = let Ta883.3902: [Float] = energya.3896.(nref.2938) in
  let Td887.3903: Float = let Td886.3904: Float = let Td884.3905: Float = 1. in
  let Td885.3906: Float = 256. in
    (Td884.3905 / Td885.3906) in
  (Td886.3904 * diffuse.3832) in
    vecscale.2649(Ta883.3902, Td887.3903) in
              let nvectors.3899: [[Float]] = p_nvectors.2715(pixel.2941) in
                let Ta888.3900: [Float] = nvectors.3899.(nref.2938) in
                  let Ta889.3901: [Float] = [nvector] in
                    veccpy.2620(Ta888.3900, Ta889.3901)
    else
      let Ti890.3894: Int = 0 in
        calc_diffuse.3839.(nref.2938) <- Ti890.3894 in
                                    let w.3841: Float = let Td891.3889: Float = -2. in
  let Td893.3890: Float = let Ta892.3891: [Float] = [nvector] in
  veciprod.2631(dirvec.2940, Ta892.3891) in
    (Td891.3889 * Td893.3890) in
                                      let Tu146.3842: Unit = let Ta894.3888: [Float] = [nvector] in
  vecaccum.2639(dirvec.2940, w.3841, Ta894.3888) in
                                        let hilight_scale.3843: Float = let Td895.3887: Float = o_hilight.2682(obj.3830) in
  (energy.2939 * Td895.3887) in
                                          let Tu145.3844: Unit = let Tb900.3873: Bool = let Ti896.3883: Int = 0 in
  let Ta899.3884: [[Int]] = let Ta897.3885: [[[Int]]] = [or_net] in
  let Ti898.3886: Int = 0 in
    Ta897.3885.(Ti898.3886) in
    shadow_check_one_or_matrix.2885(Ti896.3883, Ta899.3884) in
  let Ti901.3874: Int = 0 in
    if Tb900.3873 == Ti901.3874 then
      let bright.3875: Float = let Td905.3879: Float = let Td904.3880: Float = let Ta902.3881: [Float] = [nvector] in
  let Ta903.3882: [Float] = [light] in
    veciprod.2631(Ta902.3881, Ta903.3882) in
  fneg(Td904.3880) in
  (Td905.3879 * diffuse.3832) in
        let hilight.3876: Float = let Td907.3877: Float = let Ta906.3878: [Float] = [light] in
  veciprod.2631(dirvec.2940, Ta906.3878) in
  fneg(Td907.3877) in
          add_light.2928(bright.3875, hilight.3876, hilight_scale.3843)
    else
      () in
                                            let Tu144.3845: Unit = let Ta908.3872: [Float] = [intersection_point] in
  setup_startp.2851(Ta908.3872) in
                                              let Tu143.3846: Unit = let Ti913.3867: Int = let Ti911.3868: Int = let Ta909.3870: [Int] = [n_reflections] in
  let Ti910.3871: Int = 0 in
    Ta909.3870.(Ti910.3871) in
  let Ti912.3869: Int = 1 in
    (Ti911.3868 - Ti912.3869) in
  trace_reflections.2932(Ti913.3867, diffuse.3832, hilight_scale.3843, dirvec.2940) in
                                                let Tb915.3847: Bool = let Td914.3866: Float = 0.1 in
  fless(Td914.3866, energy.2939) in
                                                  let Ti916.3848: Int = 0 in
                                                    if Tb915.3847 == Ti916.3848 then
                                                      ()
                                                    else
                                                      let Tu142.3849: Unit = let Ti917.3861: Int = 4 in
  if Ti917.3861 <= nref.2938 then
    ()
  else
    let Ti919.3862: Int = let Ti918.3865: Int = 1 in
  (nref.2938 + Ti918.3865) in
      let Ti921.3863: Int = let Ti920.3864: Int = 1 in
  -(Ti920.3864) in
        surface_ids.3826.(Ti919.3862) <- Ti921.3863 in
                                                        let Ti922.3850: Int = 2 in
                                                          if m_surface.3831 == Ti922.3850 then
                                                            let energy2.3851: Float = let Td925.3858: Float = let Td923.3859: Float = 1. in
  let Td924.3860: Float = o_diffuse.2680(obj.3830) in
    (Td923.3859 - Td924.3860) in
  (energy.2939 * Td925.3858) in
                                                              let Ti927.3852: Int = let Ti926.3857: Int = 1 in
  (nref.2938 + Ti926.3857) in
                                                                let Td931.3853: Float = let Td930.3854: Float = let Ta928.3855: [Float] = [tmin] in
  let Ti929.3856: Int = 0 in
    Ta928.3855.(Ti929.3856) in
  (dist.2942 + Td930.3854) in
                                                                  trace_ray.2937(Ti927.3852, energy2.3851, dirvec.2940, pixel.2941, Td931.3853)
                                                          else
                                                            ()
  else
    () in
                                                                                                                                                                                                                          let rec (trace_diffuse_ray.2943: (([Float], [[Float]]), Float) -> Unit) ((dirvec.2944: ([Float], [[Float]])), (energy.2945: Float)) = let Tb803.3796: Bool = judge_intersection_fast.2914(dirvec.2944) in
  let Ti804.3797: Int = 0 in
    if Tb803.3796 == Ti804.3797 then
      ()
    else
      let obj.3798: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta805.3821: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  let Ti808.3822: Int = let Ta806.3823: [Int] = [intersected_object_id] in
  let Ti807.3824: Int = 0 in
    Ta806.3823.(Ti807.3824) in
    Ta805.3821.(Ti808.3822) in
        let Tu157.3799: Unit = let Ta809.3820: [Float] = d_vec.2717(dirvec.2944) in
  get_nvector.2922(obj.3798, Ta809.3820) in
          let Tu156.3800: Unit = let Ta810.3819: [Float] = [intersection_point] in
  utexture.2925(obj.3798, Ta810.3819) in
            let Tb815.3801: Bool = let Ti811.3815: Int = 0 in
  let Ta814.3816: [[Int]] = let Ta812.3817: [[[Int]]] = [or_net] in
  let Ti813.3818: Int = 0 in
    Ta812.3817.(Ti813.3818) in
    shadow_check_one_or_matrix.2885(Ti811.3815, Ta814.3816) in
              let Ti816.3802: Int = 0 in
                if Tb815.3801 == Ti816.3802 then
                  let br.3803: Float = let Td819.3812: Float = let Ta817.3813: [Float] = [nvector] in
  let Ta818.3814: [Float] = [light] in
    veciprod.2631(Ta817.3813, Ta818.3814) in
  fneg(Td819.3812) in
                    let bright.3804: Float = let Tb820.3810: Bool = fispos(br.3803) in
  let Ti821.3811: Int = 0 in
    if Tb820.3810 == Ti821.3811 then
      0.
    else
      br.3803 in
                      let Ta822.3805: [Float] = [diffuse_ray] in
                        let Td825.3806: Float = let Td823.3808: Float = (energy.2945 * bright.3804) in
  let Td824.3809: Float = o_diffuse.2680(obj.3798) in
    (Td823.3808 * Td824.3809) in
                          let Ta826.3807: [Float] = [texture_color] in
                            vecaccum.2639(Ta822.3805, Td825.3806, Ta826.3807)
                else
                  () in
                                                                                                                                                                                                                            let rec (iter_trace_diffuse_rays.2946: ([([Float], [[Float]])], [Float], [Float], Int) -> Unit) ((dirvec_group.2947: [([Float], [[Float]])]), (nvector.2948: [Float]), (org.2949: [Float]), (index.2950: Int)) = let Ti788.3779: Int = 0 in
  if Ti788.3779 <= index.2950 then
    let p.3780: Float = let Ta790.3794: [Float] = let Tt789.3795: ([Float], [[Float]]) = dirvec_group.2947.(index.2950) in
  d_vec.2717(Tt789.3795) in
  veciprod.2631(Ta790.3794, nvector.2948) in
      let Tu158.3781: Unit = let Tb791.3784: Bool = fisneg(p.3780) in
  let Ti792.3785: Int = 0 in
    if Tb791.3784 == Ti792.3785 then
      let Tt793.3791: ([Float], [[Float]]) = dirvec_group.2947.(index.2950) in
        let Td795.3792: Float = let Td794.3793: Float = 150. in
  (p.3780 / Td794.3793) in
          trace_diffuse_ray.2943(Tt793.3791, Td795.3792)
    else
      let Tt798.3786: ([Float], [[Float]]) = let Ti797.3789: Int = let Ti796.3790: Int = 1 in
  (index.2950 + Ti796.3790) in
  dirvec_group.2947.(Ti797.3789) in
        let Td800.3787: Float = let Td799.3788: Float = -150. in
  (p.3780 / Td799.3788) in
          trace_diffuse_ray.2943(Tt798.3786, Td800.3787) in
        let Ti802.3782: Int = let Ti801.3783: Int = 2 in
  (index.2950 - Ti801.3783) in
          iter_trace_diffuse_rays.2946(dirvec_group.2947, nvector.2948, org.2949, Ti802.3782)
  else
    () in
                                                                                                                                                                                                                              let rec (trace_diffuse_rays.2951: ([([Float], [[Float]])], [Float], [Float]) -> Unit) ((dirvec_group.2952: [([Float], [[Float]])]), (nvector.2953: [Float]), (org.2954: [Float])) = let Tu159.3777: Unit = setup_startp.2851(org.2954) in
  let Ti787.3778: Int = 118 in
    iter_trace_diffuse_rays.2946(dirvec_group.2952, nvector.2953, org.2954, Ti787.3778) in
                                                                                                                                                                                                                                let rec (trace_diffuse_ray_80percent.2955: (Int, [Float], [Float]) -> Unit) ((group_id.2956: Int), (nvector.2957: [Float]), (org.2958: [Float])) = let Tu163.3753: Unit = let Ti767.3773: Int = 0 in
  if group_id.2956 == Ti767.3773 then
    ()
  else
    let Ta770.3774: [([Float], [[Float]])] = let Ta768.3775: [[([Float], [[Float]])]] = [dirvecs] in
  let Ti769.3776: Int = 0 in
    Ta768.3775.(Ti769.3776) in
      trace_diffuse_rays.2951(Ta770.3774, nvector.2957, org.2958) in
  let Tu162.3754: Unit = let Ti771.3769: Int = 1 in
  if group_id.2956 == Ti771.3769 then
    ()
  else
    let Ta774.3770: [([Float], [[Float]])] = let Ta772.3771: [[([Float], [[Float]])]] = [dirvecs] in
  let Ti773.3772: Int = 1 in
    Ta772.3771.(Ti773.3772) in
      trace_diffuse_rays.2951(Ta774.3770, nvector.2957, org.2958) in
    let Tu161.3755: Unit = let Ti775.3765: Int = 2 in
  if group_id.2956 == Ti775.3765 then
    ()
  else
    let Ta778.3766: [([Float], [[Float]])] = let Ta776.3767: [[([Float], [[Float]])]] = [dirvecs] in
  let Ti777.3768: Int = 2 in
    Ta776.3767.(Ti777.3768) in
      trace_diffuse_rays.2951(Ta778.3766, nvector.2957, org.2958) in
      let Tu160.3756: Unit = let Ti779.3761: Int = 3 in
  if group_id.2956 == Ti779.3761 then
    ()
  else
    let Ta782.3762: [([Float], [[Float]])] = let Ta780.3763: [[([Float], [[Float]])]] = [dirvecs] in
  let Ti781.3764: Int = 3 in
    Ta780.3763.(Ti781.3764) in
      trace_diffuse_rays.2951(Ta782.3762, nvector.2957, org.2958) in
        let Ti783.3757: Int = 4 in
          if group_id.2956 == Ti783.3757 then
            ()
          else
            let Ta786.3758: [([Float], [[Float]])] = let Ta784.3759: [[([Float], [[Float]])]] = [dirvecs] in
  let Ti785.3760: Int = 4 in
    Ta784.3759.(Ti785.3760) in
              trace_diffuse_rays.2951(Ta786.3758, nvector.2957, org.2958) in
                                                                                                                                                                                                                                  let rec (calc_diffuse_using_1point.2959: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Unit) ((pixel.2960: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (nref.2961: Int)) = let ray20p.3739: [[Float]] = p_received_ray_20percent.2708(pixel.2960) in
  let nvectors.3740: [[Float]] = p_nvectors.2715(pixel.2960) in
    let intersection_points.3741: [[Float]] = p_intersection_points.2700(pixel.2960) in
      let energya.3742: [[Float]] = p_energy.2706(pixel.2960) in
        let Tu165.3743: Unit = let Ta759.3751: [Float] = [diffuse_ray] in
  let Ta760.3752: [Float] = ray20p.3739.(nref.2961) in
    veccpy.2620(Ta759.3751, Ta760.3752) in
          let Tu164.3744: Unit = let Ti761.3748: Int = p_group_id.2710(pixel.2960) in
  let Ta762.3749: [Float] = nvectors.3740.(nref.2961) in
    let Ta763.3750: [Float] = intersection_points.3741.(nref.2961) in
      trace_diffuse_ray_80percent.2955(Ti761.3748, Ta762.3749, Ta763.3750) in
            let Ta764.3745: [Float] = [rgb] in
              let Ta765.3746: [Float] = energya.3742.(nref.2961) in
                let Ta766.3747: [Float] = [diffuse_ray] in
                  vecaccumv.2652(Ta764.3745, Ta765.3746, Ta766.3747) in
                                                                                                                                                                                                                                    let rec (calc_diffuse_using_5points.2962: (Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> Unit) ((x.2963: Int), (prev.2964: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur.2965: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next.2966: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (nref.2967: Int)) = let r_up.3705: [[Float]] = let Tt736.3738: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = prev.2964.(x.2963) in
  p_received_ray_20percent.2708(Tt736.3738) in
  let r_left.3706: [[Float]] = let Tt739.3735: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = let Ti738.3736: Int = let Ti737.3737: Int = 1 in
  (x.2963 - Ti737.3737) in
  cur.2965.(Ti738.3736) in
  p_received_ray_20percent.2708(Tt739.3735) in
    let r_center.3707: [[Float]] = let Tt740.3734: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2965.(x.2963) in
  p_received_ray_20percent.2708(Tt740.3734) in
      let r_right.3708: [[Float]] = let Tt743.3731: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = let Ti742.3732: Int = let Ti741.3733: Int = 1 in
  (x.2963 + Ti741.3733) in
  cur.2965.(Ti742.3732) in
  p_received_ray_20percent.2708(Tt743.3731) in
        let r_down.3709: [[Float]] = let Tt744.3730: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = next.2966.(x.2963) in
  p_received_ray_20percent.2708(Tt744.3730) in
          let Tu170.3710: Unit = let Ta745.3728: [Float] = [diffuse_ray] in
  let Ta746.3729: [Float] = r_up.3705.(nref.2967) in
    veccpy.2620(Ta745.3728, Ta746.3729) in
            let Tu169.3711: Unit = let Ta747.3726: [Float] = [diffuse_ray] in
  let Ta748.3727: [Float] = r_left.3706.(nref.2967) in
    vecadd.2643(Ta747.3726, Ta748.3727) in
              let Tu168.3712: Unit = let Ta749.3724: [Float] = [diffuse_ray] in
  let Ta750.3725: [Float] = r_center.3707.(nref.2967) in
    vecadd.2643(Ta749.3724, Ta750.3725) in
                let Tu167.3713: Unit = let Ta751.3722: [Float] = [diffuse_ray] in
  let Ta752.3723: [Float] = r_right.3708.(nref.2967) in
    vecadd.2643(Ta751.3722, Ta752.3723) in
                  let Tu166.3714: Unit = let Ta753.3720: [Float] = [diffuse_ray] in
  let Ta754.3721: [Float] = r_down.3709.(nref.2967) in
    vecadd.2643(Ta753.3720, Ta754.3721) in
                    let energya.3715: [[Float]] = let Tt755.3719: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2965.(x.2963) in
  p_energy.2706(Tt755.3719) in
                      let Ta756.3716: [Float] = [rgb] in
                        let Ta757.3717: [Float] = energya.3715.(nref.2967) in
                          let Ta758.3718: [Float] = [diffuse_ray] in
                            vecaccumv.2652(Ta756.3716, Ta757.3717, Ta758.3718) in
                                                                                                                                                                                                                                      let rec (do_without_neighbors.2968: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Unit) ((pixel.2969: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (nref.2970: Int)) = let Ti729.3695: Int = 4 in
  if nref.2970 <= Ti729.3695 then
    let surface_ids.3696: [Int] = p_surface_ids.2702(pixel.2969) in
      let Ti730.3697: Int = 0 in
        let Ti731.3698: Int = surface_ids.3696.(nref.2970) in
          if Ti730.3697 <= Ti731.3698 then
            let calc_diffuse.3699: [Bool] = p_calc_diffuse.2704(pixel.2969) in
              let Tu171.3700: Unit = let Tb732.3703: Bool = calc_diffuse.3699.(nref.2970) in
  let Ti733.3704: Int = 0 in
    if Tb732.3703 == Ti733.3704 then
      ()
    else
      calc_diffuse_using_1point.2959(pixel.2969, nref.2970) in
                let Ti735.3701: Int = let Ti734.3702: Int = 1 in
  (nref.2970 + Ti734.3702) in
                  do_without_neighbors.2968(pixel.2969, Ti735.3701)
          else
            ()
  else
    () in
                                                                                                                                                                                                                                        let rec (neighbors_exist.2971: (Int, Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]) -> Bool) ((x.2972: Int), (y.2973: Int), (next.2974: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])])) = let Ti719.3683: Int = let Ta717.3693: [Int] = [image_size] in
  let Ti718.3694: Int = 1 in
    Ta717.3693.(Ti718.3694) in
  let Ti721.3684: Int = let Ti720.3692: Int = 1 in
  (y.2973 + Ti720.3692) in
    if Ti719.3683 <= Ti721.3684 then
      0
    else
      let Ti722.3685: Int = 0 in
        if y.2973 <= Ti722.3685 then
          0
        else
          let Ti725.3686: Int = let Ta723.3690: [Int] = [image_size] in
  let Ti724.3691: Int = 0 in
    Ta723.3690.(Ti724.3691) in
            let Ti727.3687: Int = let Ti726.3689: Int = 1 in
  (x.2972 + Ti726.3689) in
              if Ti725.3686 <= Ti727.3687 then
                0
              else
                let Ti728.3688: Int = 0 in
                  if x.2972 <= Ti728.3688 then
                    0
                  else
                    1 in
                                                                                                                                                                                                                                          let rec (get_surface_id.2975: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Int) ((pixel.2976: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (index.2977: Int)) = let surface_ids.3682: [Int] = p_surface_ids.2702(pixel.2976) in
  surface_ids.3682.(index.2977) in
                                                                                                                                                                                                                                            let rec (neighbors_are_available.2978: (Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> Bool) ((x.2979: Int), (prev.2980: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur.2981: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next.2982: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (nref.2983: Int)) = let sid_center.3668: Int = let Tt704.3681: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2981.(x.2979) in
  get_surface_id.2975(Tt704.3681, nref.2983) in
  let Ti706.3669: Int = let Tt705.3680: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = prev.2980.(x.2979) in
  get_surface_id.2975(Tt705.3680, nref.2983) in
    if Ti706.3669 == sid_center.3668 then
      let Ti708.3670: Int = let Tt707.3679: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = next.2982.(x.2979) in
  get_surface_id.2975(Tt707.3679, nref.2983) in
        if Ti708.3670 == sid_center.3668 then
          let Ti712.3671: Int = let Tt711.3676: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = let Ti710.3677: Int = let Ti709.3678: Int = 1 in
  (x.2979 - Ti709.3678) in
  cur.2981.(Ti710.3677) in
  get_surface_id.2975(Tt711.3676, nref.2983) in
            if Ti712.3671 == sid_center.3668 then
              let Ti716.3672: Int = let Tt715.3673: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = let Ti714.3674: Int = let Ti713.3675: Int = 1 in
  (x.2979 + Ti713.3675) in
  cur.2981.(Ti714.3674) in
  get_surface_id.2975(Tt715.3673, nref.2983) in
                if Ti716.3672 == sid_center.3668 then
                  1
                else
                  0
            else
              0
        else
          0
    else
      0 in
                                                                                                                                                                                                                                              let rec (try_exploit_neighbors.2984: (Int, Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> Unit) ((x.2985: Int), (y.2986: Int), (prev.2987: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur.2988: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next.2989: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (nref.2990: Int)) = let pixel.3655: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2988.(x.2985) in
  let Ti694.3656: Int = 4 in
    if nref.2990 <= Ti694.3656 then
      let Ti695.3657: Int = 0 in
        let Ti696.3658: Int = get_surface_id.2975(pixel.3655, nref.2990) in
          if Ti695.3657 <= Ti696.3658 then
            let Tb697.3659: Bool = neighbors_are_available.2978(x.2985, prev.2987, cur.2988, next.2989, nref.2990) in
              let Ti698.3660: Int = 0 in
                if Tb697.3659 == Ti698.3660 then
                  let Tt699.3667: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2988.(x.2985) in
                    do_without_neighbors.2968(Tt699.3667, nref.2990)
                else
                  let calc_diffuse.3661: [Bool] = p_calc_diffuse.2704(pixel.3655) in
                    let Tu172.3662: Unit = let Tb700.3665: Bool = calc_diffuse.3661.(nref.2990) in
  let Ti701.3666: Int = 0 in
    if Tb700.3665 == Ti701.3666 then
      ()
    else
      calc_diffuse_using_5points.2962(x.2985, prev.2987, cur.2988, next.2989, nref.2990) in
                      let Ti703.3663: Int = let Ti702.3664: Int = 1 in
  (nref.2990 + Ti702.3664) in
                        try_exploit_neighbors.2984(x.2985, y.2986, prev.2987, cur.2988, next.2989, Ti703.3663)
          else
            ()
    else
      () in
                                                                                                                                                                                                                                                let rec (write_ppm_header.2991: (Unit) -> Unit) ((Tu173.2992: Unit)) = let Tu181.3632: Unit = let Ti679.3654: Int = 80 in
  print_char(Ti679.3654) in
  let Tu180.3633: Unit = let Ti682.3651: Int = let Ti680.3652: Int = 48 in
  let Ti681.3653: Int = 3 in
    (Ti680.3652 + Ti681.3653) in
  print_char(Ti682.3651) in
    let Tu179.3634: Unit = let Ti683.3650: Int = 10 in
  print_char(Ti683.3650) in
      let Tu178.3635: Unit = let Ti686.3647: Int = let Ta684.3648: [Int] = [image_size] in
  let Ti685.3649: Int = 0 in
    Ta684.3648.(Ti685.3649) in
  print_int(Ti686.3647) in
        let Tu177.3636: Unit = let Ti687.3646: Int = 32 in
  print_char(Ti687.3646) in
          let Tu176.3637: Unit = let Ti690.3643: Int = let Ta688.3644: [Int] = [image_size] in
  let Ti689.3645: Int = 1 in
    Ta688.3644.(Ti689.3645) in
  print_int(Ti690.3643) in
            let Tu175.3638: Unit = let Ti691.3642: Int = 32 in
  print_char(Ti691.3642) in
              let Tu174.3639: Unit = let Ti692.3641: Int = 255 in
  print_int(Ti692.3641) in
                let Ti693.3640: Int = 10 in
                  print_char(Ti693.3640) in
                                                                                                                                                                                                                                                  let rec (write_rgb_element.2993: (Int) -> Unit) ((x.2994: Int)) = let ix.3628: Int = int_of_float(x.2994) in
  let elem.3629: Int = let Ti677.3630: Int = 255 in
  if ix.3628 <= Ti677.3630 then
    let Ti678.3631: Int = 0 in
      if Ti678.3631 <= ix.3628 then
        ix.3628
      else
        0
  else
    255 in
    print_int(elem.3629) in
                                                                                                                                                                                                                                                    let rec (write_rgb.2995: (Unit) -> Unit) ((Tu182.2996: Unit)) = let Tu187.3611: Unit = let Td667.3625: Float = let Ta665.3626: [Float] = [rgb] in
  let Ti666.3627: Int = 0 in
    Ta665.3626.(Ti666.3627) in
  write_rgb_element.2993(Td667.3625) in
  let Tu186.3612: Unit = let Ti668.3624: Int = 32 in
  print_char(Ti668.3624) in
    let Tu185.3613: Unit = let Td671.3621: Float = let Ta669.3622: [Float] = [rgb] in
  let Ti670.3623: Int = 1 in
    Ta669.3622.(Ti670.3623) in
  write_rgb_element.2993(Td671.3621) in
      let Tu184.3614: Unit = let Ti672.3620: Int = 32 in
  print_char(Ti672.3620) in
        let Tu183.3615: Unit = let Td675.3617: Float = let Ta673.3618: [Float] = [rgb] in
  let Ti674.3619: Int = 2 in
    Ta673.3618.(Ti674.3619) in
  write_rgb_element.2993(Td675.3617) in
          let Ti676.3616: Int = 10 in
            print_char(Ti676.3616) in
                                                                                                                                                                                                                                                      let rec (pretrace_diffuse_rays.2997: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Unit) ((pixel.2998: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (nref.2999: Int)) = let Ti652.3589: Int = 4 in
  if nref.2999 <= Ti652.3589 then
    let sid.3590: Int = get_surface_id.2975(pixel.2998, nref.2999) in
      let Ti653.3591: Int = 0 in
        if Ti653.3591 <= sid.3590 then
          let calc_diffuse.3592: [Bool] = p_calc_diffuse.2704(pixel.2998) in
            let Tu190.3593: Unit = let Tb654.3596: Bool = calc_diffuse.3592.(nref.2999) in
  let Ti655.3597: Int = 0 in
    if Tb654.3596 == Ti655.3597 then
      ()
    else
      let group_id.3598: Int = p_group_id.2710(pixel.2998) in
        let Tu189.3599: Unit = let Ta656.3610: [Float] = [diffuse_ray] in
  vecbzero.2618(Ta656.3610) in
          let nvectors.3600: [[Float]] = p_nvectors.2715(pixel.2998) in
            let intersection_points.3601: [[Float]] = p_intersection_points.2700(pixel.2998) in
              let Tu188.3602: Unit = let Ta658.3606: [([Float], [[Float]])] = let Ta657.3609: [[([Float], [[Float]])]] = [dirvecs] in
  Ta657.3609.(group_id.3598) in
  let Ta659.3607: [Float] = nvectors.3600.(nref.2999) in
    let Ta660.3608: [Float] = intersection_points.3601.(nref.2999) in
      trace_diffuse_rays.2951(Ta658.3606, Ta659.3607, Ta660.3608) in
                let ray20p.3603: [[Float]] = p_received_ray_20percent.2708(pixel.2998) in
                  let Ta661.3604: [Float] = ray20p.3603.(nref.2999) in
                    let Ta662.3605: [Float] = [diffuse_ray] in
                      veccpy.2620(Ta661.3604, Ta662.3605) in
              let Ti664.3594: Int = let Ti663.3595: Int = 1 in
  (nref.2999 + Ti663.3595) in
                pretrace_diffuse_rays.2997(pixel.2998, Ti664.3594)
        else
          ()
  else
    () in
                                                                                                                                                                                                                                                        let rec (pretrace_pixels.3000: ([([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int, Int, Float, Float, Float) -> Unit) ((line.3001: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (x.3002: Int), (group_id.3003: Int), (lc0.3004: Float), (lc1.3005: Float), (lc2.3006: Float)) = let Ti602.3528: Int = 0 in
  if Ti602.3528 <= x.3002 then
    let xdisp.3529: Float = let Td605.3581: Float = let Ta603.3587: [Float] = [scan_pitch] in
  let Ti604.3588: Int = 0 in
    Ta603.3587.(Ti604.3588) in
  let Td610.3582: Float = let Ti609.3583: Int = let Ti608.3584: Int = let Ta606.3585: [Int] = [image_center] in
  let Ti607.3586: Int = 0 in
    Ta606.3585.(Ti607.3586) in
  (x.3002 - Ti608.3584) in
  float_of_int(Ti609.3583) in
    (Td605.3581 * Td610.3582) in
      let Tu200.3530: Unit = let Ta611.3574: [Float] = [ptrace_dirvec] in
  let Ti612.3575: Int = 0 in
    let Td617.3576: Float = let Td616.3577: Float = let Td615.3578: Float = let Ta613.3579: [Float] = [screenx_dir] in
  let Ti614.3580: Int = 0 in
    Ta613.3579.(Ti614.3580) in
  (xdisp.3529 * Td615.3578) in
  (Td616.3577 + lc0.3004) in
      Ta611.3574.(Ti612.3575) <- Td617.3576 in
        let Tu199.3531: Unit = let Ta618.3567: [Float] = [ptrace_dirvec] in
  let Ti619.3568: Int = 1 in
    let Td624.3569: Float = let Td623.3570: Float = let Td622.3571: Float = let Ta620.3572: [Float] = [screenx_dir] in
  let Ti621.3573: Int = 1 in
    Ta620.3572.(Ti621.3573) in
  (xdisp.3529 * Td622.3571) in
  (Td623.3570 + lc1.3005) in
      Ta618.3567.(Ti619.3568) <- Td624.3569 in
          let Tu198.3532: Unit = let Ta625.3560: [Float] = [ptrace_dirvec] in
  let Ti626.3561: Int = 2 in
    let Td631.3562: Float = let Td630.3563: Float = let Td629.3564: Float = let Ta627.3565: [Float] = [screenx_dir] in
  let Ti628.3566: Int = 2 in
    Ta627.3565.(Ti628.3566) in
  (xdisp.3529 * Td629.3564) in
  (Td630.3563 + lc2.3006) in
      Ta625.3560.(Ti626.3561) <- Td631.3562 in
            let Tu197.3533: Unit = let Ta632.3558: [Float] = [ptrace_dirvec] in
  let Ti633.3559: Int = 0 in
    vecunit_sgn.2628(Ta632.3558, Ti633.3559) in
              let Tu196.3534: Unit = let Ta634.3557: [Float] = [rgb] in
  vecbzero.2618(Ta634.3557) in
                let Tu195.3535: Unit = let Ta635.3555: [Float] = [startp] in
  let Ta636.3556: [Float] = [viewpoint] in
    veccpy.2620(Ta635.3555, Ta636.3556) in
                  let Tu194.3536: Unit = let Ti637.3550: Int = 0 in
  let Td638.3551: Float = 1. in
    let Ta639.3552: [Float] = [ptrace_dirvec] in
      let Tt640.3553: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = line.3001.(x.3002) in
        let Td641.3554: Float = 0. in
          trace_ray.2937(Ti637.3550, Td638.3551, Ta639.3552, Tt640.3553, Td641.3554) in
                    let Tu193.3537: Unit = let Ta643.3547: [Float] = let Tt642.3549: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = line.3001.(x.3002) in
  p_rgb.2698(Tt642.3549) in
  let Ta644.3548: [Float] = [rgb] in
    veccpy.2620(Ta643.3547, Ta644.3548) in
                      let Tu192.3538: Unit = let Tt645.3546: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = line.3001.(x.3002) in
  p_set_group_id.2712(Tt645.3546, group_id.3003) in
                        let Tu191.3539: Unit = let Tt646.3544: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = line.3001.(x.3002) in
  let Ti647.3545: Int = 0 in
    pretrace_diffuse_rays.2997(Tt646.3544, Ti647.3545) in
                          let Ti649.3540: Int = let Ti648.3543: Int = 1 in
  (x.3002 - Ti648.3543) in
                            let Ti651.3541: Int = let Ti650.3542: Int = 1 in
  add_mod5.2607(group_id.3003, Ti650.3542) in
                              pretrace_pixels.3000(line.3001, Ti649.3540, Ti651.3541, lc0.3004, lc1.3005, lc2.3006)
  else
    () in
                                                                                                                                                                                                                                                          let rec (pretrace_line.3007: ([([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int, Int) -> Unit) ((line.3008: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (y.3009: Int), (group_id.3010: Int)) = let ydisp.3490: Float = let Td570.3520: Float = let Ta568.3526: [Float] = [scan_pitch] in
  let Ti569.3527: Int = 0 in
    Ta568.3526.(Ti569.3527) in
  let Td575.3521: Float = let Ti574.3522: Int = let Ti573.3523: Int = let Ta571.3524: [Int] = [image_center] in
  let Ti572.3525: Int = 1 in
    Ta571.3524.(Ti572.3525) in
  (y.3009 - Ti573.3523) in
  float_of_int(Ti574.3522) in
    (Td570.3520 * Td575.3521) in
  let lc0.3491: Float = let Td579.3513: Float = let Td578.3517: Float = let Ta576.3518: [Float] = [screeny_dir] in
  let Ti577.3519: Int = 0 in
    Ta576.3518.(Ti577.3519) in
  (ydisp.3490 * Td578.3517) in
  let Td582.3514: Float = let Ta580.3515: [Float] = [screenz_dir] in
  let Ti581.3516: Int = 0 in
    Ta580.3515.(Ti581.3516) in
    (Td579.3513 + Td582.3514) in
    let lc1.3492: Float = let Td586.3506: Float = let Td585.3510: Float = let Ta583.3511: [Float] = [screeny_dir] in
  let Ti584.3512: Int = 1 in
    Ta583.3511.(Ti584.3512) in
  (ydisp.3490 * Td585.3510) in
  let Td589.3507: Float = let Ta587.3508: [Float] = [screenz_dir] in
  let Ti588.3509: Int = 1 in
    Ta587.3508.(Ti588.3509) in
    (Td586.3506 + Td589.3507) in
      let lc2.3493: Float = let Td593.3499: Float = let Td592.3503: Float = let Ta590.3504: [Float] = [screeny_dir] in
  let Ti591.3505: Int = 2 in
    Ta590.3504.(Ti591.3505) in
  (ydisp.3490 * Td592.3503) in
  let Td596.3500: Float = let Ta594.3501: [Float] = [screenz_dir] in
  let Ti595.3502: Int = 2 in
    Ta594.3501.(Ti595.3502) in
    (Td593.3499 + Td596.3500) in
        let Ti601.3494: Int = let Ti599.3495: Int = let Ta597.3497: [Int] = [image_size] in
  let Ti598.3498: Int = 0 in
    Ta597.3497.(Ti598.3498) in
  let Ti600.3496: Int = 1 in
    (Ti599.3495 - Ti600.3496) in
          pretrace_pixels.3000(line.3008, Ti601.3494, group_id.3010, lc0.3491, lc1.3492, lc2.3493) in
                                                                                                                                                                                                                                                            let rec (scan_pixel.3011: (Int, Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]) -> Unit) ((x.3012: Int), (y.3013: Int), (prev.3014: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur.3015: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next.3016: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])])) = let Ti556.3473: Int = let Ta554.3488: [Int] = [image_size] in
  let Ti555.3489: Int = 0 in
    Ta554.3488.(Ti555.3489) in
  if Ti556.3473 <= x.3012 then
    ()
  else
    let Tu203.3474: Unit = let Ta557.3485: [Float] = [rgb] in
  let Ta559.3486: [Float] = let Tt558.3487: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.3015.(x.3012) in
  p_rgb.2698(Tt558.3487) in
    veccpy.2620(Ta557.3485, Ta559.3486) in
      let Tu202.3475: Unit = let Tb560.3480: Bool = neighbors_exist.2971(x.3012, y.3013, next.3016) in
  let Ti561.3481: Int = 0 in
    if Tb560.3480 == Ti561.3481 then
      let Tt562.3483: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.3015.(x.3012) in
        let Ti563.3484: Int = 0 in
          do_without_neighbors.2968(Tt562.3483, Ti563.3484)
    else
      let Ti564.3482: Int = 0 in
        try_exploit_neighbors.2984(x.3012, y.3013, prev.3014, cur.3015, next.3016, Ti564.3482) in
        let Tu201.3476: Unit = let Tu565.3479: Unit = () in
  write_rgb.2995(Tu565.3479) in
          let Ti567.3477: Int = let Ti566.3478: Int = 1 in
  (x.3012 + Ti566.3478) in
            scan_pixel.3011(Ti567.3477, y.3013, prev.3014, cur.3015, next.3016) in
                                                                                                                                                                                                                                                              let rec (scan_line.3017: (Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> Unit) ((y.3018: Int), (prev.3019: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur.3020: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next.3021: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (group_id.3022: Int)) = let Ti541.3456: Int = let Ta539.3471: [Int] = [image_size] in
  let Ti540.3472: Int = 1 in
    Ta539.3471.(Ti540.3472) in
  if Ti541.3456 <= y.3018 then
    ()
  else
    let Tu205.3457: Unit = let Ti546.3464: Int = let Ti544.3467: Int = let Ta542.3469: [Int] = [image_size] in
  let Ti543.3470: Int = 1 in
    Ta542.3469.(Ti543.3470) in
  let Ti545.3468: Int = 1 in
    (Ti544.3467 - Ti545.3468) in
  if Ti546.3464 <= y.3018 then
    ()
  else
    let Ti548.3465: Int = let Ti547.3466: Int = 1 in
  (y.3018 + Ti547.3466) in
      pretrace_line.3007(next.3021, Ti548.3465, group_id.3022) in
      let Tu204.3458: Unit = let Ti549.3463: Int = 0 in
  scan_pixel.3011(Ti549.3463, y.3018, prev.3019, cur.3020, next.3021) in
        let Ti551.3459: Int = let Ti550.3462: Int = 1 in
  (y.3018 + Ti550.3462) in
          let Ti553.3460: Int = let Ti552.3461: Int = 2 in
  add_mod5.2607(group_id.3022, Ti552.3461) in
            scan_line.3017(Ti551.3459, cur.3020, next.3021, prev.3019, Ti553.3460) in
                                                                                                                                                                                                                                                                let rec (create_float5x3array.3023: (Unit) -> [[Float]]) ((Tu206.3024: Unit)) = let vec.3431: [Float] = let Ti520.3454: Int = 3 in
  let Td521.3455: Float = 0. in
    create_float_array(Ti520.3454, Td521.3455) in
  let array.3432: [[Float]] = let Ti522.3453: Int = 5 in
  create_array(Ti522.3453, vec.3431) in
    let Tu210.3433: Unit = let Ti523.3449: Int = 1 in
  let Ta526.3450: [Float] = let Ti524.3451: Int = 3 in
  let Td525.3452: Float = 0. in
    create_float_array(Ti524.3451, Td525.3452) in
    array.3432.(Ti523.3449) <- Ta526.3450 in
      let Tu209.3434: Unit = let Ti527.3445: Int = 2 in
  let Ta530.3446: [Float] = let Ti528.3447: Int = 3 in
  let Td529.3448: Float = 0. in
    create_float_array(Ti528.3447, Td529.3448) in
    array.3432.(Ti527.3445) <- Ta530.3446 in
        let Tu208.3435: Unit = let Ti531.3441: Int = 3 in
  let Ta534.3442: [Float] = let Ti532.3443: Int = 3 in
  let Td533.3444: Float = 0. in
    create_float_array(Ti532.3443, Td533.3444) in
    array.3432.(Ti531.3441) <- Ta534.3442 in
          let Tu207.3436: Unit = let Ti535.3437: Int = 4 in
  let Ta538.3438: [Float] = let Ti536.3439: Int = 3 in
  let Td537.3440: Float = 0. in
    create_float_array(Ti536.3439, Td537.3440) in
    array.3432.(Ti535.3437) <- Ta538.3438 in
            array.3432 in
                                                                                                                                                                                                                                                                  let rec (create_pixel.3025: (Unit) -> ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) ((Tu211.3026: Unit)) = let m_rgb.3411: [Float] = let Ti508.3429: Int = 3 in
  let Td509.3430: Float = 0. in
    create_float_array(Ti508.3429, Td509.3430) in
  let m_isect_ps.3412: [[Float]] = let Tu510.3428: Unit = () in
  create_float5x3array.3023(Tu510.3428) in
    let m_sids.3413: [Int] = let Ti511.3426: Int = 5 in
  let Ti512.3427: Int = 0 in
    create_array(Ti511.3426, Ti512.3427) in
      let m_cdif.3414: [Bool] = let Ti513.3424: Int = 5 in
  let Ti514.3425: Int = 0 in
    create_array(Ti513.3424, Ti514.3425) in
        let m_engy.3415: [[Float]] = let Tu515.3423: Unit = () in
  create_float5x3array.3023(Tu515.3423) in
          let m_r20p.3416: [[Float]] = let Tu516.3422: Unit = () in
  create_float5x3array.3023(Tu516.3422) in
            let m_gid.3417: [Int] = let Ti517.3420: Int = 1 in
  let Ti518.3421: Int = 0 in
    create_array(Ti517.3420, Ti518.3421) in
              let m_nvectors.3418: [[Float]] = let Tu519.3419: Unit = () in
  create_float5x3array.3023(Tu519.3419) in
                (m_rgb.3411, m_isect_ps.3412, m_sids.3413, m_cdif.3414, m_engy.3415, m_r20p.3416, m_gid.3417, m_nvectors.3418) in
                                                                                                                                                                                                                                                                    let rec (init_line_elements.3027: ([([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]) ((line.3028: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (n.3029: Int)) = let Ti503.3405: Int = 0 in
  if Ti503.3405 <= n.3029 then
    let Tu212.3406: Unit = let Tt505.3409: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = let Tu504.3410: Unit = () in
  create_pixel.3025(Tu504.3410) in
  line.3028.(n.3029) <- Tt505.3409 in
      let Ti507.3407: Int = let Ti506.3408: Int = 1 in
  (n.3029 - Ti506.3408) in
        init_line_elements.3027(line.3028, Ti507.3407)
  else
    line.3028 in
                                                                                                                                                                                                                                                                      let rec (create_pixelline.3030: (Unit) -> [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]) ((Tu213.3031: Unit)) = let line.3394: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])] = let Ti495.3400: Int = let Ta493.3403: [Int] = [image_size] in
  let Ti494.3404: Int = 0 in
    Ta493.3403.(Ti494.3404) in
  let Tt497.3401: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = let Tu496.3402: Unit = () in
  create_pixel.3025(Tu496.3402) in
    create_array(Ti495.3400, Tt497.3401) in
  let Ti502.3395: Int = let Ti500.3396: Int = let Ta498.3398: [Int] = [image_size] in
  let Ti499.3399: Int = 0 in
    Ta498.3398.(Ti499.3399) in
  let Ti501.3397: Int = 2 in
    (Ti500.3396 - Ti501.3397) in
    init_line_elements.3027(line.3394, Ti502.3395) in
                                                                                                                                                                                                                                                                        let rec (tan.3032: (Float) -> Float) ((x.3033: Float)) = let Td491.3392: Float = sin(x.3033) in
  let Td492.3393: Float = cos(x.3033) in
    (Td491.3392 / Td492.3393) in
                                                                                                                                                                                                                                                                          let rec (adjust_position.3034: (Float, Float) -> Float) ((h.3035: Float), (ratio.3036: Float)) = let l.3383: Float = let Td488.3389: Float = let Td486.3390: Float = (h.3035 * h.3035) in
  let Td487.3391: Float = 0.1 in
    (Td486.3390 + Td487.3391) in
  sqrt(Td488.3389) in
  let tan_h.3384: Float = let Td489.3388: Float = 1. in
  (Td489.3388 / l.3383) in
    let theta_h.3385: Float = atan(tan_h.3384) in
      let tan_m.3386: Float = let Td490.3387: Float = (theta_h.3385 * ratio.3036) in
  tan.3032(Td490.3387) in
        (tan_m.3386 * l.3383) in
                                                                                                                                                                                                                                                                            let rec (calc_dirvec.3037: (Int, Float, Float, Float, Float, Int, Int) -> Unit) ((icount.3038: Int), (x.3039: Float), (y.3040: Float), (rx.3041: Float), (ry.3042: Float), (group_id.3043: Int), (index.3044: Int)) = let Ti444.3330: Int = 5 in
  if Ti444.3330 <= icount.3038 then
    let l.3335: Float = let Td449.3378: Float = let Td447.3379: Float = let Td445.3381: Float = fsqr(x.3039) in
  let Td446.3382: Float = fsqr(y.3040) in
    (Td445.3381 + Td446.3382) in
  let Td448.3380: Float = 1. in
    (Td447.3379 + Td448.3380) in
  sqrt(Td449.3378) in
      let vx.3336: Float = (x.3039 / l.3335) in
        let vy.3337: Float = (y.3040 / l.3335) in
          let vz.3338: Float = let Td450.3377: Float = 1. in
  (Td450.3377 / l.3335) in
            let dgroup.3339: [([Float], [[Float]])] = let Ta451.3376: [[([Float], [[Float]])]] = [dirvecs] in
  Ta451.3376.(group_id.3043) in
              let Tu218.3340: Unit = let Ta453.3374: [Float] = let Tt452.3375: ([Float], [[Float]]) = dgroup.3339.(index.3044) in
  d_vec.2717(Tt452.3375) in
  vecset.2610(Ta453.3374, vx.3336, vy.3337, vz.3338) in
                let Tu217.3341: Unit = let Ta457.3369: [Float] = let Tt456.3371: ([Float], [[Float]]) = let Ti455.3372: Int = let Ti454.3373: Int = 40 in
  (index.3044 + Ti454.3373) in
  dgroup.3339.(Ti455.3372) in
  d_vec.2717(Tt456.3371) in
  let Td458.3370: Float = fneg(vy.3337) in
    vecset.2610(Ta457.3369, vx.3336, vz.3338, Td458.3370) in
                  let Tu216.3342: Unit = let Ta462.3363: [Float] = let Tt461.3366: ([Float], [[Float]]) = let Ti460.3367: Int = let Ti459.3368: Int = 80 in
  (index.3044 + Ti459.3368) in
  dgroup.3339.(Ti460.3367) in
  d_vec.2717(Tt461.3366) in
  let Td463.3364: Float = fneg(vx.3336) in
    let Td464.3365: Float = fneg(vy.3337) in
      vecset.2610(Ta462.3363, vz.3338, Td463.3364, Td464.3365) in
                    let Tu215.3343: Unit = let Ta468.3356: [Float] = let Tt467.3360: ([Float], [[Float]]) = let Ti466.3361: Int = let Ti465.3362: Int = 1 in
  (index.3044 + Ti465.3362) in
  dgroup.3339.(Ti466.3361) in
  d_vec.2717(Tt467.3360) in
  let Td469.3357: Float = fneg(vx.3336) in
    let Td470.3358: Float = fneg(vy.3337) in
      let Td471.3359: Float = fneg(vz.3338) in
        vecset.2610(Ta468.3356, Td469.3357, Td470.3358, Td471.3359) in
                      let Tu214.3344: Unit = let Ta475.3350: [Float] = let Tt474.3353: ([Float], [[Float]]) = let Ti473.3354: Int = let Ti472.3355: Int = 41 in
  (index.3044 + Ti472.3355) in
  dgroup.3339.(Ti473.3354) in
  d_vec.2717(Tt474.3353) in
  let Td476.3351: Float = fneg(vx.3336) in
    let Td477.3352: Float = fneg(vz.3338) in
      vecset.2610(Ta475.3350, Td476.3351, Td477.3352, vy.3337) in
                        let Ta481.3345: [Float] = let Tt480.3347: ([Float], [[Float]]) = let Ti479.3348: Int = let Ti478.3349: Int = 81 in
  (index.3044 + Ti478.3349) in
  dgroup.3339.(Ti479.3348) in
  d_vec.2717(Tt480.3347) in
                          let Td482.3346: Float = fneg(vz.3338) in
                            vecset.2610(Ta481.3345, Td482.3346, vx.3336, vy.3337)
  else
    let x2.3331: Float = adjust_position.3034(y.3040, rx.3041) in
      let Ti484.3332: Int = let Ti483.3334: Int = 1 in
  (icount.3038 + Ti483.3334) in
        let Td485.3333: Float = adjust_position.3034(x2.3331, ry.3042) in
          calc_dirvec.3037(Ti484.3332, x2.3331, Td485.3333, rx.3041, ry.3042, group_id.3043, index.3044) in
                                                                                                                                                                                                                                                                              let rec (calc_dirvecs.3045: (Int, Float, Int, Int) -> Unit) ((col.3046: Int), (ry.3047: Float), (group_id.3048: Int), (index.3049: Int)) = let Ti423.3305: Int = 0 in
  if Ti423.3305 <= col.3046 then
    let rx.3306: Float = let Td426.3326: Float = let Td424.3328: Float = float_of_int(col.3046) in
  let Td425.3329: Float = 0.2 in
    (Td424.3328 * Td425.3329) in
  let Td427.3327: Float = 0.9 in
    (Td426.3326 - Td427.3327) in
      let Tu220.3307: Unit = let Ti428.3323: Int = 0 in
  let Td429.3324: Float = 0. in
    let Td430.3325: Float = 0. in
      calc_dirvec.3037(Ti428.3323, Td429.3324, Td430.3325, rx.3306, ry.3047, group_id.3048, index.3049) in
        let rx2.3308: Float = let Td433.3319: Float = let Td431.3321: Float = float_of_int(col.3046) in
  let Td432.3322: Float = 0.2 in
    (Td431.3321 * Td432.3322) in
  let Td434.3320: Float = 0.1 in
    (Td433.3319 + Td434.3320) in
          let Tu219.3309: Unit = let Ti435.3314: Int = 0 in
  let Td436.3315: Float = 0. in
    let Td437.3316: Float = 0. in
      let Ti439.3317: Int = let Ti438.3318: Int = 2 in
  (index.3049 + Ti438.3318) in
        calc_dirvec.3037(Ti435.3314, Td436.3315, Td437.3316, rx2.3308, ry.3047, group_id.3048, Ti439.3317) in
            let Ti441.3310: Int = let Ti440.3313: Int = 1 in
  (col.3046 - Ti440.3313) in
              let Ti443.3311: Int = let Ti442.3312: Int = 1 in
  add_mod5.2607(group_id.3048, Ti442.3312) in
                calc_dirvecs.3045(Ti441.3310, ry.3047, Ti443.3311, index.3049)
  else
    () in
                                                                                                                                                                                                                                                                                let rec (calc_dirvec_rows.3050: (Int, Int, Int) -> Unit) ((row.3051: Int), (group_id.3052: Int), (index.3053: Int)) = let Ti411.3291: Int = 0 in
  if Ti411.3291 <= row.3051 then
    let ry.3292: Float = let Td414.3301: Float = let Td412.3303: Float = float_of_int(row.3051) in
  let Td413.3304: Float = 0.2 in
    (Td412.3303 * Td413.3304) in
  let Td415.3302: Float = 0.9 in
    (Td414.3301 - Td415.3302) in
      let Tu221.3293: Unit = let Ti416.3300: Int = 4 in
  calc_dirvecs.3045(Ti416.3300, ry.3292, group_id.3052, index.3053) in
        let Ti418.3294: Int = let Ti417.3299: Int = 1 in
  (row.3051 - Ti417.3299) in
          let Ti420.3295: Int = let Ti419.3298: Int = 2 in
  add_mod5.2607(group_id.3052, Ti419.3298) in
            let Ti422.3296: Int = let Ti421.3297: Int = 4 in
  (index.3053 + Ti421.3297) in
              calc_dirvec_rows.3050(Ti418.3294, Ti420.3295, Ti422.3296)
  else
    () in
                                                                                                                                                                                                                                                                                  let rec (create_dirvec.3054: (Unit) -> ([Float], [[Float]])) ((Tu222.3055: Unit)) = let v3.3284: [Float] = let Ti406.3289: Int = 3 in
  let Td407.3290: Float = 0. in
    create_float_array(Ti406.3289, Td407.3290) in
  let consts.3285: [[Float]] = let Ti410.3286: Int = let Ta408.3287: [Int] = [n_objects] in
  let Ti409.3288: Int = 0 in
    Ta408.3287.(Ti409.3288) in
  create_array(Ti410.3286, v3.3284) in
    (v3.3284, consts.3285) in
                                                                                                                                                                                                                                                                                    let rec (create_dirvec_elements.3056: ([([Float], [[Float]])], Int) -> Unit) ((d.3057: [([Float], [[Float]])]), (index.3058: Int)) = let Ti401.3278: Int = 0 in
  if Ti401.3278 <= index.3058 then
    let Tu223.3279: Unit = let Tt403.3282: ([Float], [[Float]]) = let Tu402.3283: Unit = () in
  create_dirvec.3054(Tu402.3283) in
  d.3057.(index.3058) <- Tt403.3282 in
      let Ti405.3280: Int = let Ti404.3281: Int = 1 in
  (index.3058 - Ti404.3281) in
        create_dirvec_elements.3056(d.3057, Ti405.3280)
  else
    () in
                                                                                                                                                                                                                                                                                      let rec (create_dirvecs.3059: (Int) -> Unit) ((index.3060: Int)) = let Ti390.3265: Int = 0 in
  if Ti390.3265 <= index.3060 then
    let Tu225.3266: Unit = let Ta391.3273: [[([Float], [[Float]])]] = [dirvecs] in
  let Ta395.3274: [([Float], [[Float]])] = let Ti392.3275: Int = 120 in
  let Tt394.3276: ([Float], [[Float]]) = let Tu393.3277: Unit = () in
  create_dirvec.3054(Tu393.3277) in
    create_array(Ti392.3275, Tt394.3276) in
    Ta391.3273.(index.3060) <- Ta395.3274 in
      let Tu224.3267: Unit = let Ta397.3270: [([Float], [[Float]])] = let Ta396.3272: [[([Float], [[Float]])]] = [dirvecs] in
  Ta396.3272.(index.3060) in
  let Ti398.3271: Int = 118 in
    create_dirvec_elements.3056(Ta397.3270, Ti398.3271) in
        let Ti400.3268: Int = let Ti399.3269: Int = 1 in
  (index.3060 - Ti399.3269) in
          create_dirvecs.3059(Ti400.3268)
  else
    () in
                                                                                                                                                                                                                                                                                        let rec (init_dirvec_constants.3061: ([([Float], [[Float]])], Int) -> Unit) ((vecset.3062: [([Float], [[Float]])]), (index.3063: Int)) = let Ti386.3260: Int = 0 in
  if Ti386.3260 <= index.3063 then
    let Tu226.3261: Unit = let Tt387.3264: ([Float], [[Float]]) = vecset.3062.(index.3063) in
  setup_dirvec_constants.2846(Tt387.3264) in
      let Ti389.3262: Int = let Ti388.3263: Int = 1 in
  (index.3063 - Ti388.3263) in
        init_dirvec_constants.3061(vecset.3062, Ti389.3262)
  else
    () in
                                                                                                                                                                                                                                                                                          let rec (init_vecset_constants.3064: (Int) -> Unit) ((index.3065: Int)) = let Ti380.3253: Int = 0 in
  if Ti380.3253 <= index.3065 then
    let Tu227.3254: Unit = let Ta382.3257: [([Float], [[Float]])] = let Ta381.3259: [[([Float], [[Float]])]] = [dirvecs] in
  Ta381.3259.(index.3065) in
  let Ti383.3258: Int = 119 in
    init_dirvec_constants.3061(Ta382.3257, Ti383.3258) in
      let Ti385.3255: Int = let Ti384.3256: Int = 1 in
  (index.3065 - Ti384.3256) in
        init_vecset_constants.3064(Ti385.3255)
  else
    () in
                                                                                                                                                                                                                                                                                            let rec (init_dirvecs.3066: (Unit) -> Unit) ((Tu228.3067: Unit)) = let Tu230.3246: Unit = let Ti375.3252: Int = 4 in
  create_dirvecs.3059(Ti375.3252) in
  let Tu229.3247: Unit = let Ti376.3249: Int = 9 in
  let Ti377.3250: Int = 0 in
    let Ti378.3251: Int = 0 in
      calc_dirvec_rows.3050(Ti376.3249, Ti377.3250, Ti378.3251) in
    let Ti379.3248: Int = 4 in
      init_vecset_constants.3064(Ti379.3248) in
                                                                                                                                                                                                                                                                                              let rec (add_reflection.3068: (Int, Int, Float, Float, Float, Float) -> Unit) ((index.3069: Int), (surface_id.3070: Int), (bright.3071: Float), (v0.3072: Float), (v1.3073: Float), (v2.3074: Float)) = let dvec.3239: ([Float], [[Float]]) = let Tu371.3245: Unit = () in
  create_dirvec.3054(Tu371.3245) in
  let Tu232.3240: Unit = let Ta372.3244: [Float] = d_vec.2717(dvec.3239) in
  vecset.2610(Ta372.3244, v0.3072, v1.3073, v2.3074) in
    let Tu231.3241: Unit = setup_dirvec_constants.2846(dvec.3239) in
      let Ta373.3242: [(Int, ([Float], [[Float]]), Float)] = [reflections] in
        let Tt374.3243: (Int, ([Float], [[Float]]), Float) = (surface_id.3070, dvec.3239, bright.3071) in
          Ta373.3242.(index.3069) <- Tt374.3243 in
                                                                                                                                                                                                                                                                                                let rec (setup_rect_reflection.3075: (Int, (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Unit) ((obj_id.3076: Int), (obj.3077: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let sid.3193: Int = let Ti334.3238: Int = 4 in
  (obj_id.3076 * Ti334.3238) in
  let nr.3194: Int = let Ta335.3236: [Int] = [n_reflections] in
  let Ti336.3237: Int = 0 in
    Ta335.3236.(Ti336.3237) in
    let br.3195: Float = let Td337.3234: Float = 1. in
  let Td338.3235: Float = o_diffuse.2680(obj.3077) in
    (Td337.3234 - Td338.3235) in
      let n0.3196: Float = let Td341.3231: Float = let Ta339.3232: [Float] = [light] in
  let Ti340.3233: Int = 0 in
    Ta339.3232.(Ti340.3233) in
  fneg(Td341.3231) in
        let n1.3197: Float = let Td344.3228: Float = let Ta342.3229: [Float] = [light] in
  let Ti343.3230: Int = 1 in
    Ta342.3229.(Ti343.3230) in
  fneg(Td344.3228) in
          let n2.3198: Float = let Td347.3225: Float = let Ta345.3226: [Float] = [light] in
  let Ti346.3227: Int = 2 in
    Ta345.3226.(Ti346.3227) in
  fneg(Td347.3225) in
            let Tu235.3199: Unit = let Ti349.3220: Int = let Ti348.3224: Int = 1 in
  (sid.3193 + Ti348.3224) in
  let Td352.3221: Float = let Ta350.3222: [Float] = [light] in
  let Ti351.3223: Int = 0 in
    Ta350.3222.(Ti351.3223) in
    add_reflection.3068(nr.3194, Ti349.3220, br.3195, Td352.3221, n1.3197, n2.3198) in
              let Tu234.3200: Unit = let Ti354.3213: Int = let Ti353.3219: Int = 1 in
  (nr.3194 + Ti353.3219) in
  let Ti356.3214: Int = let Ti355.3218: Int = 2 in
  (sid.3193 + Ti355.3218) in
    let Td359.3215: Float = let Ta357.3216: [Float] = [light] in
  let Ti358.3217: Int = 1 in
    Ta357.3216.(Ti358.3217) in
      add_reflection.3068(Ti354.3213, Ti356.3214, br.3195, n0.3196, Td359.3215, n2.3198) in
                let Tu233.3201: Unit = let Ti361.3206: Int = let Ti360.3212: Int = 2 in
  (nr.3194 + Ti360.3212) in
  let Ti363.3207: Int = let Ti362.3211: Int = 3 in
  (sid.3193 + Ti362.3211) in
    let Td366.3208: Float = let Ta364.3209: [Float] = [light] in
  let Ti365.3210: Int = 2 in
    Ta364.3209.(Ti365.3210) in
      add_reflection.3068(Ti361.3206, Ti363.3207, br.3195, n0.3196, n1.3197, Td366.3208) in
                  let Ta367.3202: [Int] = [n_reflections] in
                    let Ti368.3203: Int = 0 in
                      let Ti370.3204: Int = let Ti369.3205: Int = 3 in
  (nr.3194 + Ti369.3205) in
                        Ta367.3202.(Ti368.3203) <- Ti370.3204 in
                                                                                                                                                                                                                                                                                                  let rec (setup_surface_reflection.3078: (Int, (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Unit) ((obj_id.3079: Int), (obj.3080: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let sid.3151: Int = let Ti298.3190: Int = let Ti297.3192: Int = 4 in
  (obj_id.3079 * Ti297.3192) in
  let Ti299.3191: Int = 1 in
    (Ti298.3190 + Ti299.3191) in
  let nr.3152: Int = let Ta300.3188: [Int] = [n_reflections] in
  let Ti301.3189: Int = 0 in
    Ta300.3188.(Ti301.3189) in
    let br.3153: Float = let Td302.3186: Float = 1. in
  let Td303.3187: Float = o_diffuse.2680(obj.3080) in
    (Td302.3186 - Td303.3187) in
      let p.3154: Float = let Ta304.3184: [Float] = [light] in
  let Ta305.3185: [Float] = o_param_abc.2672(obj.3080) in
    veciprod.2631(Ta304.3184, Ta305.3185) in
        let Tu236.3155: Unit = let Td313.3160: Float = let Td309.3177: Float = let Td308.3181: Float = let Td306.3182: Float = 2. in
  let Td307.3183: Float = o_param_a.2666(obj.3080) in
    (Td306.3182 * Td307.3183) in
  (Td308.3181 * p.3154) in
  let Td312.3178: Float = let Ta310.3179: [Float] = [light] in
  let Ti311.3180: Int = 0 in
    Ta310.3179.(Ti311.3180) in
    (Td309.3177 - Td312.3178) in
  let Td321.3161: Float = let Td317.3170: Float = let Td316.3174: Float = let Td314.3175: Float = 2. in
  let Td315.3176: Float = o_param_b.2668(obj.3080) in
    (Td314.3175 * Td315.3176) in
  (Td316.3174 * p.3154) in
  let Td320.3171: Float = let Ta318.3172: [Float] = [light] in
  let Ti319.3173: Int = 1 in
    Ta318.3172.(Ti319.3173) in
    (Td317.3170 - Td320.3171) in
    let Td329.3162: Float = let Td325.3163: Float = let Td324.3167: Float = let Td322.3168: Float = 2. in
  let Td323.3169: Float = o_param_c.2670(obj.3080) in
    (Td322.3168 * Td323.3169) in
  (Td324.3167 * p.3154) in
  let Td328.3164: Float = let Ta326.3165: [Float] = [light] in
  let Ti327.3166: Int = 2 in
    Ta326.3165.(Ti327.3166) in
    (Td325.3163 - Td328.3164) in
      add_reflection.3068(nr.3152, sid.3151, br.3153, Td313.3160, Td321.3161, Td329.3162) in
          let Ta330.3156: [Int] = [n_reflections] in
            let Ti331.3157: Int = 0 in
              let Ti333.3158: Int = let Ti332.3159: Int = 1 in
  (nr.3152 + Ti332.3159) in
                Ta330.3156.(Ti331.3157) <- Ti333.3158 in
                                                                                                                                                                                                                                                                                                    let rec (setup_reflections.3081: (Int) -> Unit) ((obj_id.3082: Int)) = let Ti287.3139: Int = 0 in
  if Ti287.3139 <= obj_id.3082 then
    let obj.3140: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = let Ta288.3150: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  Ta288.3150.(obj_id.3082) in
      let Ti289.3141: Int = o_reflectiontype.2660(obj.3140) in
        let Ti290.3142: Int = 2 in
          if Ti289.3141 == Ti290.3142 then
            let Tb293.3143: Bool = let Td291.3148: Float = o_diffuse.2680(obj.3140) in
  let Td292.3149: Float = 1. in
    fless(Td291.3148, Td292.3149) in
              let Ti294.3144: Int = 0 in
                if Tb293.3143 == Ti294.3144 then
                  ()
                else
                  let m_shape.3145: Int = o_form.2658(obj.3140) in
                    let Ti295.3146: Int = 1 in
                      if m_shape.3145 == Ti295.3146 then
                        setup_rect_reflection.3075(obj_id.3082, obj.3140)
                      else
                        let Ti296.3147: Int = 2 in
                          if m_shape.3145 == Ti296.3147 then
                            setup_surface_reflection.3078(obj_id.3082, obj.3140)
                          else
                            ()
          else
            ()
  else
    () in
                                                                                                                                                                                                                                                                                                      let rec (rt.3083: (Int, Int) -> Unit) ((size_x.3084: Int), (size_y.3085: Int)) = let Tu248.3088: Unit = let Ta251.3137: [Int] = [image_size] in
  let Ti252.3138: Int = 0 in
    Ta251.3137.(Ti252.3138) <- size_x.3084 in
  let Tu247.3089: Unit = let Ta253.3135: [Int] = [image_size] in
  let Ti254.3136: Int = 1 in
    Ta253.3135.(Ti254.3136) <- size_y.3085 in
    let Tu246.3090: Unit = let Ta255.3131: [Int] = [image_center] in
  let Ti256.3132: Int = 0 in
    let Ti258.3133: Int = let Ti257.3134: Int = 2 in
  (size_x.3084 / Ti257.3134) in
      Ta255.3131.(Ti256.3132) <- Ti258.3133 in
      let Tu245.3091: Unit = let Ta259.3127: [Int] = [image_center] in
  let Ti260.3128: Int = 1 in
    let Ti262.3129: Int = let Ti261.3130: Int = 2 in
  (size_y.3085 / Ti261.3130) in
      Ta259.3127.(Ti260.3128) <- Ti262.3129 in
        let Tu244.3092: Unit = let Ta263.3122: [Float] = [scan_pitch] in
  let Ti264.3123: Int = 0 in
    let Td267.3124: Float = let Td265.3125: Float = 128. in
  let Td266.3126: Float = float_of_int(size_x.3084) in
    (Td265.3125 / Td266.3126) in
      Ta263.3122.(Ti264.3123) <- Td267.3124 in
          let prev.3093: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])] = let Tu268.3121: Unit = () in
  create_pixelline.3030(Tu268.3121) in
            let cur.3094: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])] = let Tu269.3120: Unit = () in
  create_pixelline.3030(Tu269.3120) in
              let next.3095: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])] = let Tu270.3119: Unit = () in
  create_pixelline.3030(Tu270.3119) in
                let Tu243.3096: Unit = let Tu271.3118: Unit = () in
  read_parameter.2748(Tu271.3118) in
                  let Tu242.3097: Unit = let Tu272.3117: Unit = () in
  write_ppm_header.2991(Tu272.3117) in
                    let Tu241.3098: Unit = let Tu273.3116: Unit = () in
  init_dirvecs.3066(Tu273.3116) in
                      let Tu240.3099: Unit = let Ta275.3113: [Float] = let Tt274.3115: ([Float], [[Float]]) = light_dirvec: ([Float], [[Float]]) in
  d_vec.2717(Tt274.3115) in
  let Ta276.3114: [Float] = [light] in
    veccpy.2620(Ta275.3113, Ta276.3114) in
                        let Tu239.3100: Unit = let Tt277.3112: ([Float], [[Float]]) = light_dirvec: ([Float], [[Float]]) in
  setup_dirvec_constants.2846(Tt277.3112) in
                          let Tu238.3101: Unit = let Ti282.3107: Int = let Ti280.3108: Int = let Ta278.3110: [Int] = [n_objects] in
  let Ti279.3111: Int = 0 in
    Ta278.3110.(Ti279.3111) in
  let Ti281.3109: Int = 1 in
    (Ti280.3108 - Ti281.3109) in
  setup_reflections.3081(Ti282.3107) in
                            let Tu237.3102: Unit = let Ti283.3105: Int = 0 in
  let Ti284.3106: Int = 0 in
    pretrace_line.3007(cur.3094, Ti283.3105, Ti284.3106) in
                              let Ti285.3103: Int = 0 in
                                let Ti286.3104: Int = 2 in
                                  scan_line.3017(Ti285.3103, prev.3093, cur.3094, next.3095, Ti286.3104) in
                                                                                                                                                                                                                                                                                                        let Ti249.3086: Int = 128 in
                                                                                                                                                                                                                                                                                                          let Ti250.3087: Int = 128 in
                                                                                                                                                                                                                                                                                                            rt.3083(Ti249.3086, Ti250.3087)

Optimize---
let rec (xor.2599: (Bool, Bool) -> Bool) ((x.2600: Bool), (y.2601: Bool)) = let Ti2597.6287: Int = 0 in
  if x.2600 == Ti2597.6287 then
    y.2601
  else
    let Ti2598.6288: Int = 0 in
      if y.2601 == Ti2598.6288 then
        1
      else
        0 in
  let rec (sgn.2602: (Float) -> Float) ((x.2603: Float)) = let Tb2593.6283: Bool = fiszero(x.2603) in
  let Ti2594.6284: Int = 0 in
    if Tb2593.6283 == Ti2594.6284 then
      let Tb2595.6285: Bool = fispos(x.2603) in
        let Ti2596.6286: Int = 0 in
          if Tb2595.6285 == Ti2596.6286 then
            -1.
          else
            1.
    else
      0. in
    let rec (fneg_cond.2604: (Bool, Float) -> Float) ((cond.2605: Bool), (x.2606: Float)) = let Ti2592.6282: Int = 0 in
  if cond.2605 == Ti2592.6282 then
    fneg(x.2606)
  else
    x.2606 in
      let rec (add_mod5.2607: (Int, Int) -> Int) ((x.2608: Int), (y.2609: Int)) = let sum.6279: Int = (x.2608 + y.2609) in
  let Ti2590.6280: Int = 5 in
    if Ti2590.6280 <= sum.6279 then
      let Ti2591.6281: Int = 5 in
        (sum.6279 - Ti2591.6281)
    else
      sum.6279 in
        let rec (vecset.2610: ([Float], Float, Float, Float) -> Unit) ((v.2611: [Float]), (x.2612: Float), (y.2613: Float), (z.2614: Float)) = let Ti2587.6278: Int = 0 in
  let Tu2.6274: Unit = v.2611.(Ti2587.6278) <- x.2612 in
    let Ti2588.6277: Int = 1 in
      let Tu1.6275: Unit = v.2611.(Ti2588.6277) <- y.2613 in
        let Ti2589.6276: Int = 2 in
          v.2611.(Ti2589.6276) <- z.2614 in
          let rec (vecfill.2615: ([Float], Float) -> Unit) ((v.2616: [Float]), (elem.2617: Float)) = let Ti2584.6273: Int = 0 in
  let Tu4.6269: Unit = v.2616.(Ti2584.6273) <- elem.2617 in
    let Ti2585.6272: Int = 1 in
      let Tu3.6270: Unit = v.2616.(Ti2585.6272) <- elem.2617 in
        let Ti2586.6271: Int = 2 in
          v.2616.(Ti2586.6271) <- elem.2617 in
            let rec (vecbzero.2618: ([Float]) -> Unit) ((v.2619: [Float])) = let Td2583.6268: Float = 0. in
  vecfill.2615(v.2619, Td2583.6268) in
              let rec (veccpy.2620: ([Float], [Float]) -> Unit) ((dest.2621: [Float]), (src.2622: [Float])) = let Ti2574.6265: Int = 0 in
  let Ti2575.6267: Int = 0 in
    let Td2576.6266: Float = src.2622.(Ti2575.6267) in
      let Tu6.6257: Unit = dest.2621.(Ti2574.6265) <- Td2576.6266 in
        let Ti2577.6262: Int = 1 in
          let Ti2578.6264: Int = 1 in
            let Td2579.6263: Float = src.2622.(Ti2578.6264) in
              let Tu5.6258: Unit = dest.2621.(Ti2577.6262) <- Td2579.6263 in
                let Ti2580.6259: Int = 2 in
                  let Ti2581.6261: Int = 2 in
                    let Td2582.6260: Float = src.2622.(Ti2581.6261) in
                      dest.2621.(Ti2580.6259) <- Td2582.6260 in
                let rec (vecunit_sgn.2628: ([Float], Bool) -> Unit) ((v.2629: [Float]), (inv.2630: Bool)) = let Ti2502.6209: Int = 0 in
  let Td2503.6208: Float = v.2629.(Ti2502.6209) in
    let Td2504.6204: Float = fsqr(Td2503.6208) in
      let Ti2505.6207: Int = 1 in
        let Td2506.6206: Float = v.2629.(Ti2505.6207) in
          let Td2507.6205: Float = fsqr(Td2506.6206) in
            let Td2508.6200: Float = (Td2504.6204 + Td2507.6205) in
              let Ti2509.6203: Int = 2 in
                let Td2510.6202: Float = v.2629.(Ti2509.6203) in
                  let Td2511.6201: Float = fsqr(Td2510.6202) in
                    let Td2512.6199: Float = (Td2508.6200 + Td2511.6201) in
                      let l.6178: Float = sqrt(Td2512.6199) in
                        let Tb2513.6194: Bool = fiszero(l.6178) in
                          let Ti2514.6195: Int = 0 in
                            let il.6179: Float = if Tb2513.6194 == Ti2514.6195 then
  let Ti2515.6196: Int = 0 in
    if inv.2630 == Ti2515.6196 then
      let Td2516.6198: Float = 1. in
        (Td2516.6198 / l.6178)
    else
      let Td2517.6197: Float = -1. in
        (Td2517.6197 / l.6178)
else
  1. in
                              let Ti2518.6190: Int = 0 in
                                let Ti2519.6193: Int = 0 in
                                  let Td2520.6192: Float = v.2629.(Ti2519.6193) in
                                    let Td2521.6191: Float = (Td2520.6192 * il.6179) in
                                      let Tu10.6180: Unit = v.2629.(Ti2518.6190) <- Td2521.6191 in
                                        let Ti2522.6186: Int = 1 in
                                          let Ti2523.6189: Int = 1 in
                                            let Td2524.6188: Float = v.2629.(Ti2523.6189) in
                                              let Td2525.6187: Float = (Td2524.6188 * il.6179) in
                                                let Tu9.6181: Unit = v.2629.(Ti2522.6186) <- Td2525.6187 in
                                                  let Ti2526.6182: Int = 2 in
                                                    let Ti2527.6185: Int = 2 in
                                                      let Td2528.6184: Float = v.2629.(Ti2527.6185) in
                                                        let Td2529.6183: Float = (Td2528.6184 * il.6179) in
                                                          v.2629.(Ti2526.6182) <- Td2529.6183 in
                  let rec (veciprod.2631: ([Float], [Float]) -> Float) ((v.2632: [Float]), (w.2633: [Float])) = let Ti2486.6177: Int = 0 in
  let Td2487.6174: Float = v.2632.(Ti2486.6177) in
    let Ti2488.6176: Int = 0 in
      let Td2489.6175: Float = w.2633.(Ti2488.6176) in
        let Td2490.6168: Float = (Td2487.6174 * Td2489.6175) in
          let Ti2491.6173: Int = 1 in
            let Td2492.6170: Float = v.2632.(Ti2491.6173) in
              let Ti2493.6172: Int = 1 in
                let Td2494.6171: Float = w.2633.(Ti2493.6172) in
                  let Td2495.6169: Float = (Td2492.6170 * Td2494.6171) in
                    let Td2496.6162: Float = (Td2490.6168 + Td2495.6169) in
                      let Ti2497.6167: Int = 2 in
                        let Td2498.6164: Float = v.2632.(Ti2497.6167) in
                          let Ti2499.6166: Int = 2 in
                            let Td2500.6165: Float = w.2633.(Ti2499.6166) in
                              let Td2501.6163: Float = (Td2498.6164 * Td2500.6165) in
                                (Td2496.6162 + Td2501.6163) in
                    let rec (veciprod2.2634: ([Float], Float, Float, Float) -> Float) ((v.2635: [Float]), (w0.2636: Float), (w1.2637: Float), (w2.2638: Float)) = let Ti2476.6161: Int = 0 in
  let Td2477.6160: Float = v.2635.(Ti2476.6161) in
    let Td2478.6156: Float = (Td2477.6160 * w0.2636) in
      let Ti2479.6159: Int = 1 in
        let Td2480.6158: Float = v.2635.(Ti2479.6159) in
          let Td2481.6157: Float = (Td2480.6158 * w1.2637) in
            let Td2482.6152: Float = (Td2478.6156 + Td2481.6157) in
              let Ti2483.6155: Int = 2 in
                let Td2484.6154: Float = v.2635.(Ti2483.6155) in
                  let Td2485.6153: Float = (Td2484.6154 * w2.2638) in
                    (Td2482.6152 + Td2485.6153) in
                      let rec (vecaccum.2639: ([Float], Float, [Float]) -> Unit) ((dest.2640: [Float]), (scale.2641: Float), (v.2642: [Float])) = let Ti2455.6145: Int = 0 in
  let Ti2456.6151: Int = 0 in
    let Td2457.6147: Float = dest.2640.(Ti2456.6151) in
      let Ti2458.6150: Int = 0 in
        let Td2459.6149: Float = v.2642.(Ti2458.6150) in
          let Td2460.6148: Float = (scale.2641 * Td2459.6149) in
            let Td2461.6146: Float = (Td2457.6147 + Td2460.6148) in
              let Tu12.6129: Unit = dest.2640.(Ti2455.6145) <- Td2461.6146 in
                let Ti2462.6138: Int = 1 in
                  let Ti2463.6144: Int = 1 in
                    let Td2464.6140: Float = dest.2640.(Ti2463.6144) in
                      let Ti2465.6143: Int = 1 in
                        let Td2466.6142: Float = v.2642.(Ti2465.6143) in
                          let Td2467.6141: Float = (scale.2641 * Td2466.6142) in
                            let Td2468.6139: Float = (Td2464.6140 + Td2467.6141) in
                              let Tu11.6130: Unit = dest.2640.(Ti2462.6138) <- Td2468.6139 in
                                let Ti2469.6131: Int = 2 in
                                  let Ti2470.6137: Int = 2 in
                                    let Td2471.6133: Float = dest.2640.(Ti2470.6137) in
                                      let Ti2472.6136: Int = 2 in
                                        let Td2473.6135: Float = v.2642.(Ti2472.6136) in
                                          let Td2474.6134: Float = (scale.2641 * Td2473.6135) in
                                            let Td2475.6132: Float = (Td2471.6133 + Td2474.6134) in
                                              dest.2640.(Ti2469.6131) <- Td2475.6132 in
                        let rec (vecadd.2643: ([Float], [Float]) -> Unit) ((dest.2644: [Float]), (v.2645: [Float])) = let Ti2437.6123: Int = 0 in
  let Ti2438.6128: Int = 0 in
    let Td2439.6125: Float = dest.2644.(Ti2438.6128) in
      let Ti2440.6127: Int = 0 in
        let Td2441.6126: Float = v.2645.(Ti2440.6127) in
          let Td2442.6124: Float = (Td2439.6125 + Td2441.6126) in
            let Tu14.6109: Unit = dest.2644.(Ti2437.6123) <- Td2442.6124 in
              let Ti2443.6117: Int = 1 in
                let Ti2444.6122: Int = 1 in
                  let Td2445.6119: Float = dest.2644.(Ti2444.6122) in
                    let Ti2446.6121: Int = 1 in
                      let Td2447.6120: Float = v.2645.(Ti2446.6121) in
                        let Td2448.6118: Float = (Td2445.6119 + Td2447.6120) in
                          let Tu13.6110: Unit = dest.2644.(Ti2443.6117) <- Td2448.6118 in
                            let Ti2449.6111: Int = 2 in
                              let Ti2450.6116: Int = 2 in
                                let Td2451.6113: Float = dest.2644.(Ti2450.6116) in
                                  let Ti2452.6115: Int = 2 in
                                    let Td2453.6114: Float = v.2645.(Ti2452.6115) in
                                      let Td2454.6112: Float = (Td2451.6113 + Td2453.6114) in
                                        dest.2644.(Ti2449.6111) <- Td2454.6112 in
                          let rec (vecscale.2649: ([Float], Float) -> Unit) ((dest.2650: [Float]), (scale.2651: Float)) = let Ti2407.6085: Int = 0 in
  let Ti2408.6088: Int = 0 in
    let Td2409.6087: Float = dest.2650.(Ti2408.6088) in
      let Td2410.6086: Float = (Td2409.6087 * scale.2651) in
        let Tu18.6075: Unit = dest.2650.(Ti2407.6085) <- Td2410.6086 in
          let Ti2411.6081: Int = 1 in
            let Ti2412.6084: Int = 1 in
              let Td2413.6083: Float = dest.2650.(Ti2412.6084) in
                let Td2414.6082: Float = (Td2413.6083 * scale.2651) in
                  let Tu17.6076: Unit = dest.2650.(Ti2411.6081) <- Td2414.6082 in
                    let Ti2415.6077: Int = 2 in
                      let Ti2416.6080: Int = 2 in
                        let Td2417.6079: Float = dest.2650.(Ti2416.6080) in
                          let Td2418.6078: Float = (Td2417.6079 * scale.2651) in
                            dest.2650.(Ti2415.6077) <- Td2418.6078 in
                            let rec (vecaccumv.2652: ([Float], [Float], [Float]) -> Unit) ((dest.2653: [Float]), (v.2654: [Float]), (w.2655: [Float])) = let Ti2380.6066: Int = 0 in
  let Ti2381.6074: Int = 0 in
    let Td2382.6068: Float = dest.2653.(Ti2381.6074) in
      let Ti2383.6073: Int = 0 in
        let Td2384.6070: Float = v.2654.(Ti2383.6073) in
          let Ti2385.6072: Int = 0 in
            let Td2386.6071: Float = w.2655.(Ti2385.6072) in
              let Td2387.6069: Float = (Td2384.6070 * Td2386.6071) in
                let Td2388.6067: Float = (Td2382.6068 + Td2387.6069) in
                  let Tu20.6046: Unit = dest.2653.(Ti2380.6066) <- Td2388.6067 in
                    let Ti2389.6057: Int = 1 in
                      let Ti2390.6065: Int = 1 in
                        let Td2391.6059: Float = dest.2653.(Ti2390.6065) in
                          let Ti2392.6064: Int = 1 in
                            let Td2393.6061: Float = v.2654.(Ti2392.6064) in
                              let Ti2394.6063: Int = 1 in
                                let Td2395.6062: Float = w.2655.(Ti2394.6063) in
                                  let Td2396.6060: Float = (Td2393.6061 * Td2395.6062) in
                                    let Td2397.6058: Float = (Td2391.6059 + Td2396.6060) in
                                      let Tu19.6047: Unit = dest.2653.(Ti2389.6057) <- Td2397.6058 in
                                        let Ti2398.6048: Int = 2 in
                                          let Ti2399.6056: Int = 2 in
                                            let Td2400.6050: Float = dest.2653.(Ti2399.6056) in
                                              let Ti2401.6055: Int = 2 in
                                                let Td2402.6052: Float = v.2654.(Ti2401.6055) in
                                                  let Ti2403.6054: Int = 2 in
                                                    let Td2404.6053: Float = w.2655.(Ti2403.6054) in
                                                      let Td2405.6051: Float = (Td2402.6052 * Td2404.6053) in
                                                        let Td2406.6049: Float = (Td2400.6050 + Td2405.6051) in
                                                          dest.2653.(Ti2398.6048) <- Td2406.6049 in
                              let rec (o_texturetype.2656: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2657: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (m_tex.6035: Int), (xm_shape.6036: Int), (xm_surface.6037: Int), (xm_isrot.6038: Int), (xm_abc.6039: [Float]), (xm_xyz.6040: [Float]), (xm_invert.6041: Bool), (xm_surfparams.6042: [Float]), (xm_color.6043: [Int]), (xm_rot123.6044: [Float]), (xm_ctbl.6045: [Float])) = m.2657 in
m_tex.6035 in
                                let rec (o_form.2658: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2659: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.6024: Int), (m_shape.6025: Int), (xm_surface.6026: Int), (xm_isrot.6027: Int), (xm_abc.6028: [Float]), (xm_xyz.6029: [Float]), (xm_invert.6030: Bool), (xm_surfparams.6031: [Float]), (xm_color.6032: [Int]), (xm_rot123.6033: [Float]), (xm_ctbl.6034: [Float])) = m.2659 in
m_shape.6025 in
                                  let rec (o_reflectiontype.2660: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2661: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.6013: Int), (xm_shape.6014: Int), (m_surface.6015: Int), (xm_isrot.6016: Int), (xm_abc.6017: [Float]), (xm_xyz.6018: [Float]), (xm_invert.6019: Bool), (xm_surfparams.6020: [Float]), (xm_color.6021: [Int]), (xm_rot123.6022: [Float]), (xm_ctbl.6023: [Float])) = m.2661 in
m_surface.6015 in
                                    let rec (o_isinvert.2662: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Bool) ((m.2663: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.6002: Int), (xm_shape.6003: Int), (xm_surface.6004: Int), (xm_isrot.6005: Int), (xm_abc.6006: [Float]), (xm_xyz.6007: [Float]), (m_invert.6008: Bool), (xm_surfparams.6009: [Float]), (xm_color.6010: [Int]), (xm_rot123.6011: [Float]), (xm_ctbl.6012: [Float])) = m.2663 in
m_invert.6008 in
                                      let rec (o_isrot.2664: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2665: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5991: Int), (xm_shape.5992: Int), (xm_surface.5993: Int), (m_isrot.5994: Int), (xm_abc.5995: [Float]), (xm_xyz.5996: [Float]), (xm_invert.5997: Bool), (xm_surfparams.5998: [Float]), (xm_color.5999: [Int]), (xm_rot123.6000: [Float]), (xm_ctbl.6001: [Float])) = m.2665 in
m_isrot.5994 in
                                        let rec (o_param_a.2666: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2667: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5979: Int), (xm_shape.5980: Int), (xm_surface.5981: Int), (xm_isrot.5982: Int), (m_abc.5983: [Float]), (xm_xyz.5984: [Float]), (xm_invert.5985: Bool), (xm_surfparams.5986: [Float]), (xm_color.5987: [Int]), (xm_rot123.5988: [Float]), (xm_ctbl.5989: [Float])) = m.2667 in
let Ti2379.5990: Int = 0 in
  m_abc.5983.(Ti2379.5990) in
                                          let rec (o_param_b.2668: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2669: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5967: Int), (xm_shape.5968: Int), (xm_surface.5969: Int), (xm_isrot.5970: Int), (m_abc.5971: [Float]), (xm_xyz.5972: [Float]), (xm_invert.5973: Bool), (xm_surfparams.5974: [Float]), (xm_color.5975: [Int]), (xm_rot123.5976: [Float]), (xm_ctbl.5977: [Float])) = m.2669 in
let Ti2378.5978: Int = 1 in
  m_abc.5971.(Ti2378.5978) in
                                            let rec (o_param_c.2670: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2671: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5955: Int), (xm_shape.5956: Int), (xm_surface.5957: Int), (xm_isrot.5958: Int), (m_abc.5959: [Float]), (xm_xyz.5960: [Float]), (xm_invert.5961: Bool), (xm_surfparams.5962: [Float]), (xm_color.5963: [Int]), (xm_rot123.5964: [Float]), (xm_ctbl.5965: [Float])) = m.2671 in
let Ti2377.5966: Int = 2 in
  m_abc.5959.(Ti2377.5966) in
                                              let rec (o_param_abc.2672: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((m.2673: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5944: Int), (xm_shape.5945: Int), (xm_surface.5946: Int), (xm_isrot.5947: Int), (m_abc.5948: [Float]), (xm_xyz.5949: [Float]), (xm_invert.5950: Bool), (xm_surfparams.5951: [Float]), (xm_color.5952: [Int]), (xm_rot123.5953: [Float]), (xm_ctbl.5954: [Float])) = m.2673 in
m_abc.5948 in
                                                let rec (o_param_x.2674: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2675: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5932: Int), (xm_shape.5933: Int), (xm_surface.5934: Int), (xm_isrot.5935: Int), (xm_abc.5936: [Float]), (m_xyz.5937: [Float]), (xm_invert.5938: Bool), (xm_surfparams.5939: [Float]), (xm_color.5940: [Int]), (xm_rot123.5941: [Float]), (xm_ctbl.5942: [Float])) = m.2675 in
let Ti2376.5943: Int = 0 in
  m_xyz.5937.(Ti2376.5943) in
                                                  let rec (o_param_y.2676: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2677: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5920: Int), (xm_shape.5921: Int), (xm_surface.5922: Int), (xm_isrot.5923: Int), (xm_abc.5924: [Float]), (m_xyz.5925: [Float]), (xm_invert.5926: Bool), (xm_surfparams.5927: [Float]), (xm_color.5928: [Int]), (xm_rot123.5929: [Float]), (xm_ctbl.5930: [Float])) = m.2677 in
let Ti2375.5931: Int = 1 in
  m_xyz.5925.(Ti2375.5931) in
                                                    let rec (o_param_z.2678: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2679: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5908: Int), (xm_shape.5909: Int), (xm_surface.5910: Int), (xm_isrot.5911: Int), (xm_abc.5912: [Float]), (m_xyz.5913: [Float]), (xm_invert.5914: Bool), (xm_surfparams.5915: [Float]), (xm_color.5916: [Int]), (xm_rot123.5917: [Float]), (xm_ctbl.5918: [Float])) = m.2679 in
let Ti2374.5919: Int = 2 in
  m_xyz.5913.(Ti2374.5919) in
                                                      let rec (o_diffuse.2680: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2681: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5896: Int), (xm_shape.5897: Int), (xm_surface.5898: Int), (xm_isrot.5899: Int), (xm_abc.5900: [Float]), (xm_xyz.5901: [Float]), (xm_invert.5902: Bool), (m_surfparams.5903: [Float]), (xm_color.5904: [Int]), (xm_rot123.5905: [Float]), (xm_ctbl.5906: [Float])) = m.2681 in
let Ti2373.5907: Int = 0 in
  m_surfparams.5903.(Ti2373.5907) in
                                                        let rec (o_hilight.2682: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2683: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5884: Int), (xm_shape.5885: Int), (xm_surface.5886: Int), (xm_isrot.5887: Int), (xm_abc.5888: [Float]), (xm_xyz.5889: [Float]), (xm_invert.5890: Bool), (m_surfparams.5891: [Float]), (xm_color.5892: [Int]), (xm_rot123.5893: [Float]), (xm_ctbl.5894: [Float])) = m.2683 in
let Ti2372.5895: Int = 1 in
  m_surfparams.5891.(Ti2372.5895) in
                                                          let rec (o_color_red.2684: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2685: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5872: Int), (xm_shape.5873: Int), (m_surface.5874: Int), (xm_isrot.5875: Int), (xm_abc.5876: [Float]), (xm_xyz.5877: [Float]), (xm_invert.5878: Bool), (xm_surfparams.5879: [Float]), (m_color.5880: [Int]), (xm_rot123.5881: [Float]), (xm_ctbl.5882: [Float])) = m.2685 in
let Ti2371.5883: Int = 0 in
  m_color.5880.(Ti2371.5883) in
                                                            let rec (o_color_green.2686: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2687: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5860: Int), (xm_shape.5861: Int), (m_surface.5862: Int), (xm_isrot.5863: Int), (xm_abc.5864: [Float]), (xm_xyz.5865: [Float]), (xm_invert.5866: Bool), (xm_surfparams.5867: [Float]), (m_color.5868: [Int]), (xm_rot123.5869: [Float]), (xm_ctbl.5870: [Float])) = m.2687 in
let Ti2370.5871: Int = 1 in
  m_color.5868.(Ti2370.5871) in
                                                              let rec (o_color_blue.2688: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Int) ((m.2689: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5848: Int), (xm_shape.5849: Int), (m_surface.5850: Int), (xm_isrot.5851: Int), (xm_abc.5852: [Float]), (xm_xyz.5853: [Float]), (xm_invert.5854: Bool), (xm_surfparams.5855: [Float]), (m_color.5856: [Int]), (xm_rot123.5857: [Float]), (xm_ctbl.5858: [Float])) = m.2689 in
let Ti2369.5859: Int = 2 in
  m_color.5856.(Ti2369.5859) in
                                                                let rec (o_param_r1.2690: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2691: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5836: Int), (xm_shape.5837: Int), (xm_surface.5838: Int), (xm_isrot.5839: Int), (xm_abc.5840: [Float]), (xm_xyz.5841: [Float]), (xm_invert.5842: Bool), (xm_surfparams.5843: [Float]), (xm_color.5844: [Int]), (m_rot123.5845: [Float]), (xm_ctbl.5846: [Float])) = m.2691 in
let Ti2368.5847: Int = 0 in
  m_rot123.5845.(Ti2368.5847) in
                                                                  let rec (o_param_r2.2692: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2693: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5824: Int), (xm_shape.5825: Int), (xm_surface.5826: Int), (xm_isrot.5827: Int), (xm_abc.5828: [Float]), (xm_xyz.5829: [Float]), (xm_invert.5830: Bool), (xm_surfparams.5831: [Float]), (xm_color.5832: [Int]), (m_rot123.5833: [Float]), (xm_ctbl.5834: [Float])) = m.2693 in
let Ti2367.5835: Int = 1 in
  m_rot123.5833.(Ti2367.5835) in
                                                                    let rec (o_param_r3.2694: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Float) ((m.2695: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5812: Int), (xm_shape.5813: Int), (xm_surface.5814: Int), (xm_isrot.5815: Int), (xm_abc.5816: [Float]), (xm_xyz.5817: [Float]), (xm_invert.5818: Bool), (xm_surfparams.5819: [Float]), (xm_color.5820: [Int]), (m_rot123.5821: [Float]), (xm_ctbl.5822: [Float])) = m.2695 in
let Ti2366.5823: Int = 2 in
  m_rot123.5821.(Ti2366.5823) in
                                                                      let rec (o_param_ctbl.2696: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((m.2697: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let (xm_tex.5801: Int), (xm_shape.5802: Int), (xm_surface.5803: Int), (xm_isrot.5804: Int), (xm_abc.5805: [Float]), (xm_xyz.5806: [Float]), (xm_invert.5807: Bool), (xm_surfparams.5808: [Float]), (xm_color.5809: [Int]), (xm_rot123.5810: [Float]), (m_ctbl.5811: [Float])) = m.2697 in
m_ctbl.5811 in
                                                                        let rec (p_rgb.2698: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [Float]) ((pixel.2699: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (m_rgb.5793: [Float]), (xm_isect_ps.5794: [[Float]]), (xm_sids.5795: [Int]), (xm_cdif.5796: [Bool]), (xm_engy.5797: [[Float]]), (xm_r20p.5798: [[Float]]), (xm_gid.5799: [Int]), (xm_nvectors.5800: [[Float]])) = pixel.2699 in
m_rgb.5793 in
                                                                          let rec (p_intersection_points.2700: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [[Float]]) ((pixel.2701: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5785: [Float]), (m_isect_ps.5786: [[Float]]), (xm_sids.5787: [Int]), (xm_cdif.5788: [Bool]), (xm_engy.5789: [[Float]]), (xm_r20p.5790: [[Float]]), (xm_gid.5791: [Int]), (xm_nvectors.5792: [[Float]])) = pixel.2701 in
m_isect_ps.5786 in
                                                                            let rec (p_surface_ids.2702: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [Int]) ((pixel.2703: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5777: [Float]), (xm_isect_ps.5778: [[Float]]), (m_sids.5779: [Int]), (xm_cdif.5780: [Bool]), (xm_engy.5781: [[Float]]), (xm_r20p.5782: [[Float]]), (xm_gid.5783: [Int]), (xm_nvectors.5784: [[Float]])) = pixel.2703 in
m_sids.5779 in
                                                                              let rec (p_calc_diffuse.2704: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [Bool]) ((pixel.2705: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5769: [Float]), (xm_isect_ps.5770: [[Float]]), (xm_sids.5771: [Int]), (m_cdif.5772: [Bool]), (xm_engy.5773: [[Float]]), (xm_r20p.5774: [[Float]]), (xm_gid.5775: [Int]), (xm_nvectors.5776: [[Float]])) = pixel.2705 in
m_cdif.5772 in
                                                                                let rec (p_energy.2706: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [[Float]]) ((pixel.2707: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5761: [Float]), (xm_isect_ps.5762: [[Float]]), (xm_sids.5763: [Int]), (xm_cdif.5764: [Bool]), (m_engy.5765: [[Float]]), (xm_r20p.5766: [[Float]]), (xm_gid.5767: [Int]), (xm_nvectors.5768: [[Float]])) = pixel.2707 in
m_engy.5765 in
                                                                                  let rec (p_received_ray_20percent.2708: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [[Float]]) ((pixel.2709: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5753: [Float]), (xm_isect_ps.5754: [[Float]]), (xm_sids.5755: [Int]), (xm_cdif.5756: [Bool]), (xm_engy.5757: [[Float]]), (m_r20p.5758: [[Float]]), (xm_gid.5759: [Int]), (xm_nvectors.5760: [[Float]])) = pixel.2709 in
m_r20p.5758 in
                                                                                    let rec (p_group_id.2710: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> Int) ((pixel.2711: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5744: [Float]), (xm_isect_ps.5745: [[Float]]), (xm_sids.5746: [Int]), (xm_cdif.5747: [Bool]), (xm_engy.5748: [[Float]]), (xm_r20p.5749: [[Float]]), (m_gid.5750: [Int]), (xm_nvectors.5751: [[Float]])) = pixel.2711 in
let Ti2365.5752: Int = 0 in
  m_gid.5750.(Ti2365.5752) in
                                                                                      let rec (p_set_group_id.2712: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Unit) ((pixel.2713: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (id.2714: Int)) = let (xm_rgb.5735: [Float]), (xm_isect_ps.5736: [[Float]]), (xm_sids.5737: [Int]), (xm_cdif.5738: [Bool]), (xm_engy.5739: [[Float]]), (xm_r20p.5740: [[Float]]), (m_gid.5741: [Int]), (xm_nvectors.5742: [[Float]])) = pixel.2713 in
let Ti2364.5743: Int = 0 in
  m_gid.5741.(Ti2364.5743) <- id.2714 in
                                                                                        let rec (p_nvectors.2715: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) -> [[Float]]) ((pixel.2716: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]))) = let (xm_rgb.5727: [Float]), (xm_isect_ps.5728: [[Float]]), (xm_sids.5729: [Int]), (xm_cdif.5730: [Bool]), (xm_engy.5731: [[Float]]), (xm_r20p.5732: [[Float]]), (xm_gid.5733: [Int]), (m_nvectors.5734: [[Float]])) = pixel.2716 in
m_nvectors.5734 in
                                                                                          let rec (d_vec.2717: (([Float], [[Float]])) -> [Float]) ((d.2718: ([Float], [[Float]]))) = let (m_vec.5725: [Float]), (xm_const.5726: [[Float]])) = d.2718 in
m_vec.5725 in
                                                                                            let rec (d_const.2719: (([Float], [[Float]])) -> [[Float]]) ((d.2720: ([Float], [[Float]]))) = let (dm_vec.5723: [Float]), (m_const.5724: [[Float]])) = d.2720 in
m_const.5724 in
                                                                                              let rec (r_surface_id.2721: ((Int, ([Float], [[Float]]), Float)) -> Int) ((r.2722: (Int, ([Float], [[Float]]), Float))) = let (m_sid.5720: Int), (xm_dvec.5721: ([Float], [[Float]])), (xm_br.5722: Float)) = r.2722 in
m_sid.5720 in
                                                                                                let rec (r_dvec.2723: ((Int, ([Float], [[Float]]), Float)) -> ([Float], [[Float]])) ((r.2724: (Int, ([Float], [[Float]]), Float))) = let (xm_sid.5717: Int), (m_dvec.5718: ([Float], [[Float]])), (xm_br.5719: Float)) = r.2724 in
m_dvec.5718 in
                                                                                                  let rec (r_bright.2725: ((Int, ([Float], [[Float]]), Float)) -> Float) ((r.2726: (Int, ([Float], [[Float]]), Float))) = let (xm_sid.5714: Int), (xm_dvec.5715: ([Float], [[Float]])), (m_br.5716: Float)) = r.2726 in
m_br.5716 in
                                                                                                    let rec (rad.2727: (Float) -> Float) ((x.2728: Float)) = let Td2363.5713: Float = 0.017453293 in
  (x.2728 * Td2363.5713) in
                                                                                                      let rec (read_screen_settings.2729: (Unit) -> Unit) ((Tu21.2730: Unit)) = let Ta2287.5709: [Float] = [screen] in
  let Ti2288.5710: Int = 0 in
    let Tu2289.5712: Unit = () in
      let Td2290.5711: Float = read_float(Tu2289.5712) in
        let Tu35.5617: Unit = Ta2287.5709.(Ti2288.5710) <- Td2290.5711 in
          let Ta2291.5705: [Float] = [screen] in
            let Ti2292.5706: Int = 1 in
              let Tu2293.5708: Unit = () in
                let Td2294.5707: Float = read_float(Tu2293.5708) in
                  let Tu34.5618: Unit = Ta2291.5705.(Ti2292.5706) <- Td2294.5707 in
                    let Ta2295.5701: [Float] = [screen] in
                      let Ti2296.5702: Int = 2 in
                        let Tu2297.5704: Unit = () in
                          let Td2298.5703: Float = read_float(Tu2297.5704) in
                            let Tu33.5619: Unit = Ta2295.5701.(Ti2296.5702) <- Td2298.5703 in
                              let Tu2299.5700: Unit = () in
                                let Td2300.5699: Float = read_float(Tu2299.5700) in
                                  let v1.5620: Float = rad.2727(Td2300.5699) in
                                    let cos_v1.5621: Float = cos(v1.5620) in
                                      let sin_v1.5622: Float = sin(v1.5620) in
                                        let Tu2301.5698: Unit = () in
                                          let Td2302.5697: Float = read_float(Tu2301.5698) in
                                            let v2.5623: Float = rad.2727(Td2302.5697) in
                                              let cos_v2.5624: Float = cos(v2.5623) in
                                                let sin_v2.5625: Float = sin(v2.5623) in
                                                  let Ta2303.5692: [Float] = [screenz_dir] in
                                                    let Ti2304.5693: Int = 0 in
                                                      let Td2305.5695: Float = (cos_v1.5621 * sin_v2.5625) in
                                                        let Td2306.5696: Float = 200. in
                                                          let Td2307.5694: Float = (Td2305.5695 * Td2306.5696) in
                                                            let Tu32.5626: Unit = Ta2303.5692.(Ti2304.5693) <- Td2307.5694 in
                                                              let Ta2308.5688: [Float] = [screenz_dir] in
                                                                let Ti2309.5689: Int = 1 in
                                                                  let Td2310.5691: Float = -200. in
                                                                    let Td2311.5690: Float = (sin_v1.5622 * Td2310.5691) in
                                                                      let Tu31.5627: Unit = Ta2308.5688.(Ti2309.5689) <- Td2311.5690 in
                                                                        let Ta2312.5683: [Float] = [screenz_dir] in
                                                                          let Ti2313.5684: Int = 2 in
                                                                            let Td2314.5686: Float = (cos_v1.5621 * cos_v2.5624) in
                                                                              let Td2315.5687: Float = 200. in
                                                                                let Td2316.5685: Float = (Td2314.5686 * Td2315.5687) in
                                                                                  let Tu30.5628: Unit = Ta2312.5683.(Ti2313.5684) <- Td2316.5685 in
                                                                                    let Ta2317.5681: [Float] = [screenx_dir] in
                                                                                      let Ti2318.5682: Int = 0 in
                                                                                        let Tu29.5629: Unit = Ta2317.5681.(Ti2318.5682) <- cos_v2.5624 in
                                                                                          let Ta2319.5678: [Float] = [screenx_dir] in
                                                                                            let Ti2320.5679: Int = 1 in
                                                                                              let Td2321.5680: Float = 0. in
                                                                                                let Tu28.5630: Unit = Ta2319.5678.(Ti2320.5679) <- Td2321.5680 in
                                                                                                  let Ta2322.5675: [Float] = [screenx_dir] in
                                                                                                    let Ti2323.5676: Int = 2 in
                                                                                                      let Td2324.5677: Float = fneg(sin_v2.5625) in
                                                                                                        let Tu27.5631: Unit = Ta2322.5675.(Ti2323.5676) <- Td2324.5677 in
                                                                                                          let Ta2325.5671: [Float] = [screeny_dir] in
                                                                                                            let Ti2326.5672: Int = 0 in
                                                                                                              let Td2327.5674: Float = fneg(sin_v1.5622) in
                                                                                                                let Td2328.5673: Float = (Td2327.5674 * sin_v2.5625) in
                                                                                                                  let Tu26.5632: Unit = Ta2325.5671.(Ti2326.5672) <- Td2328.5673 in
                                                                                                                    let Ta2329.5668: [Float] = [screeny_dir] in
                                                                                                                      let Ti2330.5669: Int = 1 in
                                                                                                                        let Td2331.5670: Float = fneg(cos_v1.5621) in
                                                                                                                          let Tu25.5633: Unit = Ta2329.5668.(Ti2330.5669) <- Td2331.5670 in
                                                                                                                            let Ta2332.5664: [Float] = [screeny_dir] in
                                                                                                                              let Ti2333.5665: Int = 2 in
                                                                                                                                let Td2334.5667: Float = fneg(sin_v1.5622) in
                                                                                                                                  let Td2335.5666: Float = (Td2334.5667 * cos_v2.5624) in
                                                                                                                                    let Tu24.5634: Unit = Ta2332.5664.(Ti2333.5665) <- Td2335.5666 in
                                                                                                                                      let Ta2336.5655: [Float] = [viewpoint] in
                                                                                                                                        let Ti2337.5656: Int = 0 in
                                                                                                                                          let Ta2338.5662: [Float] = [screen] in
                                                                                                                                            let Ti2339.5663: Int = 0 in
                                                                                                                                              let Td2340.5658: Float = Ta2338.5662.(Ti2339.5663) in
                                                                                                                                                let Ta2341.5660: [Float] = [screenz_dir] in
                                                                                                                                                  let Ti2342.5661: Int = 0 in
                                                                                                                                                    let Td2343.5659: Float = Ta2341.5660.(Ti2342.5661) in
                                                                                                                                                      let Td2344.5657: Float = (Td2340.5658 - Td2343.5659) in
                                                                                                                                                        let Tu23.5635: Unit = Ta2336.5655.(Ti2337.5656) <- Td2344.5657 in
                                                                                                                                                          let Ta2345.5646: [Float] = [viewpoint] in
                                                                                                                                                            let Ti2346.5647: Int = 1 in
                                                                                                                                                              let Ta2347.5653: [Float] = [screen] in
                                                                                                                                                                let Ti2348.5654: Int = 1 in
                                                                                                                                                                  let Td2349.5649: Float = Ta2347.5653.(Ti2348.5654) in
                                                                                                                                                                    let Ta2350.5651: [Float] = [screenz_dir] in
                                                                                                                                                                      let Ti2351.5652: Int = 1 in
                                                                                                                                                                        let Td2352.5650: Float = Ta2350.5651.(Ti2351.5652) in
                                                                                                                                                                          let Td2353.5648: Float = (Td2349.5649 - Td2352.5650) in
                                                                                                                                                                            let Tu22.5636: Unit = Ta2345.5646.(Ti2346.5647) <- Td2353.5648 in
                                                                                                                                                                              let Ta2354.5637: [Float] = [viewpoint] in
                                                                                                                                                                                let Ti2355.5638: Int = 2 in
                                                                                                                                                                                  let Ta2356.5644: [Float] = [screen] in
                                                                                                                                                                                    let Ti2357.5645: Int = 2 in
                                                                                                                                                                                      let Td2358.5640: Float = Ta2356.5644.(Ti2357.5645) in
                                                                                                                                                                                        let Ta2359.5642: [Float] = [screenz_dir] in
                                                                                                                                                                                          let Ti2360.5643: Int = 2 in
                                                                                                                                                                                            let Td2361.5641: Float = Ta2359.5642.(Ti2360.5643) in
                                                                                                                                                                                              let Td2362.5639: Float = (Td2358.5640 - Td2361.5641) in
                                                                                                                                                                                                Ta2354.5637.(Ti2355.5638) <- Td2362.5639 in
                                                                                                        let rec (read_light.2731: (Unit) -> Unit) ((Tu36.2732: Unit)) = let Tu2269.5616: Unit = () in
  let nl.5589: Int = read_int(Tu2269.5616) in
    let Tu2270.5615: Unit = () in
      let Td2271.5614: Float = read_float(Tu2270.5615) in
        let l1.5590: Float = rad.2727(Td2271.5614) in
          let sl1.5591: Int = sin(l1.5590) in
            let Ta2272.5611: [Float] = [light] in
              let Ti2273.5612: Int = 1 in
                let Td2274.5613: Float = fneg(sl1.5591) in
                  let Tu39.5592: Unit = Ta2272.5611.(Ti2273.5612) <- Td2274.5613 in
                    let Tu2275.5610: Unit = () in
                      let Td2276.5609: Float = read_float(Tu2275.5610) in
                        let l2.5593: Float = rad.2727(Td2276.5609) in
                          let cl1.5594: Float = cos(l1.5590) in
                            let sl2.5595: Float = sin(l2.5593) in
                              let Ta2277.5606: [Float] = [light] in
                                let Ti2278.5607: Int = 0 in
                                  let Td2279.5608: Float = (cl1.5594 * sl2.5595) in
                                    let Tu38.5596: Unit = Ta2277.5606.(Ti2278.5607) <- Td2279.5608 in
                                      let cl2.5597: Float = cos(l2.5593) in
                                        let Ta2280.5603: [Float] = [light] in
                                          let Ti2281.5604: Int = 2 in
                                            let Td2282.5605: Float = (cl1.5594 * cl2.5597) in
                                              let Tu37.5598: Unit = Ta2280.5603.(Ti2281.5604) <- Td2282.5605 in
                                                let Ta2283.5599: [Float] = [beam] in
                                                  let Ti2284.5600: Int = 0 in
                                                    let Tu2285.5602: Unit = () in
                                                      let Td2286.5601: Float = read_float(Tu2285.5602) in
                                                        Ta2283.5599.(Ti2284.5600) <- Td2286.5601 in
                                                                                                          let rec (rotate_quadratic_matrix.2733: ([Float], [Float]) -> Unit) ((abc.2734: [Float]), (rot.2735: [Float])) = let Ti2182.5588: Int = 0 in
  let Td2183.5587: Float = rot.2735.(Ti2182.5588) in
    let cos_x.5479: Float = cos(Td2183.5587) in
      let Ti2184.5586: Int = 0 in
        let Td2185.5585: Float = rot.2735.(Ti2184.5586) in
          let sin_x.5480: Float = sin(Td2185.5585) in
            let Ti2186.5584: Int = 1 in
              let Td2187.5583: Float = rot.2735.(Ti2186.5584) in
                let cos_y.5481: Float = cos(Td2187.5583) in
                  let Ti2188.5582: Int = 1 in
                    let Td2189.5581: Float = rot.2735.(Ti2188.5582) in
                      let sin_y.5482: Float = sin(Td2189.5581) in
                        let Ti2190.5580: Int = 2 in
                          let Td2191.5579: Float = rot.2735.(Ti2190.5580) in
                            let cos_z.5483: Float = cos(Td2191.5579) in
                              let Ti2192.5578: Int = 2 in
                                let Td2193.5577: Float = rot.2735.(Ti2192.5578) in
                                  let sin_z.5484: Float = sin(Td2193.5577) in
                                    let m00.5485: Float = (cos_y.5481 * cos_z.5483) in
                                      let Td2194.5576: Float = (sin_x.5480 * sin_y.5482) in
                                        let Td2195.5574: Float = (Td2194.5576 * cos_z.5483) in
                                          let Td2196.5575: Float = (cos_x.5479 * sin_z.5484) in
                                            let m01.5486: Float = (Td2195.5574 - Td2196.5575) in
                                              let Td2197.5573: Float = (cos_x.5479 * sin_y.5482) in
                                                let Td2198.5571: Float = (Td2197.5573 * cos_z.5483) in
                                                  let Td2199.5572: Float = (sin_x.5480 * sin_z.5484) in
                                                    let m02.5487: Float = (Td2198.5571 + Td2199.5572) in
                                                      let m10.5488: Float = (cos_y.5481 * sin_z.5484) in
                                                        let Td2200.5570: Float = (sin_x.5480 * sin_y.5482) in
                                                          let Td2201.5568: Float = (Td2200.5570 * sin_z.5484) in
                                                            let Td2202.5569: Float = (cos_x.5479 * cos_z.5483) in
                                                              let m11.5489: Float = (Td2201.5568 + Td2202.5569) in
                                                                let Td2203.5567: Float = (cos_x.5479 * sin_y.5482) in
                                                                  let Td2204.5565: Float = (Td2203.5567 * sin_z.5484) in
                                                                    let Td2205.5566: Float = (sin_x.5480 * cos_z.5483) in
                                                                      let m12.5490: Float = (Td2204.5565 - Td2205.5566) in
                                                                        let m20.5491: Float = fneg(sin_y.5482) in
                                                                          let m21.5492: Float = (sin_x.5480 * cos_y.5481) in
                                                                            let m22.5493: Float = (cos_x.5479 * cos_y.5481) in
                                                                              let Ti2206.5564: Int = 0 in
                                                                                let ao.5494: Float = abc.2734.(Ti2206.5564) in
                                                                                  let Ti2207.5563: Int = 1 in
                                                                                    let bo.5495: Float = abc.2734.(Ti2207.5563) in
                                                                                      let Ti2208.5562: Int = 2 in
                                                                                        let co.5496: Float = abc.2734.(Ti2208.5562) in
                                                                                          let Ti2209.5553: Int = 0 in
                                                                                            let Td2210.5561: Float = fsqr(m00.5485) in
                                                                                              let Td2211.5558: Float = (ao.5494 * Td2210.5561) in
                                                                                                let Td2212.5560: Float = fsqr(m10.5488) in
                                                                                                  let Td2213.5559: Float = (bo.5495 * Td2212.5560) in
                                                                                                    let Td2214.5555: Float = (Td2211.5558 + Td2213.5559) in
                                                                                                      let Td2215.5557: Float = fsqr(m20.5491) in
                                                                                                        let Td2216.5556: Float = (co.5496 * Td2215.5557) in
                                                                                                          let Td2217.5554: Float = (Td2214.5555 + Td2216.5556) in
                                                                                                            let Tu44.5497: Unit = abc.2734.(Ti2209.5553) <- Td2217.5554 in
                                                                                                              let Ti2218.5544: Int = 1 in
                                                                                                                let Td2219.5552: Float = fsqr(m01.5486) in
                                                                                                                  let Td2220.5549: Float = (ao.5494 * Td2219.5552) in
                                                                                                                    let Td2221.5551: Float = fsqr(m11.5489) in
                                                                                                                      let Td2222.5550: Float = (bo.5495 * Td2221.5551) in
                                                                                                                        let Td2223.5546: Float = (Td2220.5549 + Td2222.5550) in
                                                                                                                          let Td2224.5548: Float = fsqr(m21.5492) in
                                                                                                                            let Td2225.5547: Float = (co.5496 * Td2224.5548) in
                                                                                                                              let Td2226.5545: Float = (Td2223.5546 + Td2225.5547) in
                                                                                                                                let Tu43.5498: Unit = abc.2734.(Ti2218.5544) <- Td2226.5545 in
                                                                                                                                  let Ti2227.5535: Int = 2 in
                                                                                                                                    let Td2228.5543: Float = fsqr(m02.5487) in
                                                                                                                                      let Td2229.5540: Float = (ao.5494 * Td2228.5543) in
                                                                                                                                        let Td2230.5542: Float = fsqr(m12.5490) in
                                                                                                                                          let Td2231.5541: Float = (bo.5495 * Td2230.5542) in
                                                                                                                                            let Td2232.5537: Float = (Td2229.5540 + Td2231.5541) in
                                                                                                                                              let Td2233.5539: Float = fsqr(m22.5493) in
                                                                                                                                                let Td2234.5538: Float = (co.5496 * Td2233.5539) in
                                                                                                                                                  let Td2235.5536: Float = (Td2232.5537 + Td2234.5538) in
                                                                                                                                                    let Tu42.5499: Unit = abc.2734.(Ti2227.5535) <- Td2235.5536 in
                                                                                                                                                      let Ti2236.5524: Int = 0 in
                                                                                                                                                        let Td2237.5526: Float = 2. in
                                                                                                                                                          let Td2238.5534: Float = (ao.5494 * m01.5486) in
                                                                                                                                                            let Td2239.5531: Float = (Td2238.5534 * m02.5487) in
                                                                                                                                                              let Td2240.5533: Float = (bo.5495 * m11.5489) in
                                                                                                                                                                let Td2241.5532: Float = (Td2240.5533 * m12.5490) in
                                                                                                                                                                  let Td2242.5528: Float = (Td2239.5531 + Td2241.5532) in
                                                                                                                                                                    let Td2243.5530: Float = (co.5496 * m21.5492) in
                                                                                                                                                                      let Td2244.5529: Float = (Td2243.5530 * m22.5493) in
                                                                                                                                                                        let Td2245.5527: Float = (Td2242.5528 + Td2244.5529) in
                                                                                                                                                                          let Td2246.5525: Float = (Td2237.5526 * Td2245.5527) in
                                                                                                                                                                            let Tu41.5500: Unit = rot.2735.(Ti2236.5524) <- Td2246.5525 in
                                                                                                                                                                              let Ti2247.5513: Int = 1 in
                                                                                                                                                                                let Td2248.5515: Float = 2. in
                                                                                                                                                                                  let Td2249.5523: Float = (ao.5494 * m00.5485) in
                                                                                                                                                                                    let Td2250.5520: Float = (Td2249.5523 * m02.5487) in
                                                                                                                                                                                      let Td2251.5522: Float = (bo.5495 * m10.5488) in
                                                                                                                                                                                        let Td2252.5521: Float = (Td2251.5522 * m12.5490) in
                                                                                                                                                                                          let Td2253.5517: Float = (Td2250.5520 + Td2252.5521) in
                                                                                                                                                                                            let Td2254.5519: Float = (co.5496 * m20.5491) in
                                                                                                                                                                                              let Td2255.5518: Float = (Td2254.5519 * m22.5493) in
                                                                                                                                                                                                let Td2256.5516: Float = (Td2253.5517 + Td2255.5518) in
                                                                                                                                                                                                  let Td2257.5514: Float = (Td2248.5515 * Td2256.5516) in
                                                                                                                                                                                                    let Tu40.5501: Unit = rot.2735.(Ti2247.5513) <- Td2257.5514 in
                                                                                                                                                                                                      let Ti2258.5502: Int = 2 in
                                                                                                                                                                                                        let Td2259.5504: Float = 2. in
                                                                                                                                                                                                          let Td2260.5512: Float = (ao.5494 * m00.5485) in
                                                                                                                                                                                                            let Td2261.5509: Float = (Td2260.5512 * m01.5486) in
                                                                                                                                                                                                              let Td2262.5511: Float = (bo.5495 * m10.5488) in
                                                                                                                                                                                                                let Td2263.5510: Float = (Td2262.5511 * m11.5489) in
                                                                                                                                                                                                                  let Td2264.5506: Float = (Td2261.5509 + Td2263.5510) in
                                                                                                                                                                                                                    let Td2265.5508: Float = (co.5496 * m20.5491) in
                                                                                                                                                                                                                      let Td2266.5507: Float = (Td2265.5508 * m21.5492) in
                                                                                                                                                                                                                        let Td2267.5505: Float = (Td2264.5506 + Td2266.5507) in
                                                                                                                                                                                                                          let Td2268.5503: Float = (Td2259.5504 * Td2267.5505) in
                                                                                                                                                                                                                            rot.2735.(Ti2258.5502) <- Td2268.5503 in
                                                                                                            let rec (read_nth_object.2736: (Int) -> Bool) ((n.2737: Int)) = let Tu2088.5478: Unit = () in
  let texture.5350: Int = read_int(Tu2088.5478) in
    let Ti2090.5351: Int = -1 in
      if texture.5350 == Ti2090.5351 then
        0
      else
        let Tu2091.5476: Unit = () in
          let form.5352: Int = read_int(Tu2091.5476) in
            let Tu2092.5475: Unit = () in
              let refltype.5353: Int = read_int(Tu2092.5475) in
                let Tu2093.5474: Unit = () in
                  let isrot_p.5354: Int = read_int(Tu2093.5474) in
                    let Ti2094.5472: Int = 3 in
                      let Td2095.5473: Float = 0. in
                        let abc.5355: [Float] = create_float_array(Ti2094.5472, Td2095.5473) in
                          let Ti2096.5469: Int = 0 in
                            let Tu2097.5471: Unit = () in
                              let Td2098.5470: Float = read_float(Tu2097.5471) in
                                let Tu63.5356: Unit = abc.5355.(Ti2096.5469) <- Td2098.5470 in
                                  let Ti2099.5466: Int = 1 in
                                    let Tu2100.5468: Unit = () in
                                      let Td2101.5467: Float = read_float(Tu2100.5468) in
                                        let Tu62.5357: Unit = abc.5355.(Ti2099.5466) <- Td2101.5467 in
                                          let Ti2102.5463: Int = 2 in
                                            let Tu2103.5465: Unit = () in
                                              let Td2104.5464: Float = read_float(Tu2103.5465) in
                                                let Tu61.5358: Unit = abc.5355.(Ti2102.5463) <- Td2104.5464 in
                                                  let Ti2105.5461: Int = 3 in
                                                    let Td2106.5462: Float = 0. in
                                                      let xyz.5359: [Float] = create_float_array(Ti2105.5461, Td2106.5462) in
                                                        let Ti2107.5458: Int = 0 in
                                                          let Tu2108.5460: Unit = () in
                                                            let Td2109.5459: Float = read_float(Tu2108.5460) in
                                                              let Tu60.5360: Unit = xyz.5359.(Ti2107.5458) <- Td2109.5459 in
                                                                let Ti2110.5455: Int = 1 in
                                                                  let Tu2111.5457: Unit = () in
                                                                    let Td2112.5456: Float = read_float(Tu2111.5457) in
                                                                      let Tu59.5361: Unit = xyz.5359.(Ti2110.5455) <- Td2112.5456 in
                                                                        let Ti2113.5452: Int = 2 in
                                                                          let Tu2114.5454: Unit = () in
                                                                            let Td2115.5453: Float = read_float(Tu2114.5454) in
                                                                              let Tu58.5362: Unit = xyz.5359.(Ti2113.5452) <- Td2115.5453 in
                                                                                let Tu2116.5451: Unit = () in
                                                                                  let Td2117.5450: Float = read_float(Tu2116.5451) in
                                                                                    let m_invert.5363: Bool = fisneg(Td2117.5450) in
                                                                                      let Ti2118.5448: Int = 2 in
                                                                                        let Td2119.5449: Float = 0. in
                                                                                          let reflparam.5364: [Float] = create_float_array(Ti2118.5448, Td2119.5449) in
                                                                                            let Ti2120.5445: Int = 0 in
                                                                                              let Tu2121.5447: Unit = () in
                                                                                                let Td2122.5446: Float = read_float(Tu2121.5447) in
                                                                                                  let Tu57.5365: Unit = reflparam.5364.(Ti2120.5445) <- Td2122.5446 in
                                                                                                    let Ti2123.5442: Int = 1 in
                                                                                                      let Tu2124.5444: Unit = () in
                                                                                                        let Td2125.5443: Float = read_float(Tu2124.5444) in
                                                                                                          let Tu56.5366: Unit = reflparam.5364.(Ti2123.5442) <- Td2125.5443 in
                                                                                                            let Ti2126.5440: Int = 3 in
                                                                                                              let Td2127.5441: Float = 0. in
                                                                                                                let color.5367: [Float] = create_float_array(Ti2126.5440, Td2127.5441) in
                                                                                                                  let Ti2128.5437: Int = 0 in
                                                                                                                    let Tu2129.5439: Unit = () in
                                                                                                                      let Td2130.5438: Float = read_float(Tu2129.5439) in
                                                                                                                        let Tu55.5368: Unit = color.5367.(Ti2128.5437) <- Td2130.5438 in
                                                                                                                          let Ti2131.5434: Int = 1 in
                                                                                                                            let Tu2132.5436: Unit = () in
                                                                                                                              let Td2133.5435: Float = read_float(Tu2132.5436) in
                                                                                                                                let Tu54.5369: Unit = color.5367.(Ti2131.5434) <- Td2133.5435 in
                                                                                                                                  let Ti2134.5431: Int = 2 in
                                                                                                                                    let Tu2135.5433: Unit = () in
                                                                                                                                      let Td2136.5432: Float = read_float(Tu2135.5433) in
                                                                                                                                        let Tu53.5370: Unit = color.5367.(Ti2134.5431) <- Td2136.5432 in
                                                                                                                                          let Ti2137.5429: Int = 3 in
                                                                                                                                            let Td2138.5430: Float = 0. in
                                                                                                                                              let rotation.5371: [Float] = create_float_array(Ti2137.5429, Td2138.5430) in
                                                                                                                                                let Ti2139.5414: Int = 0 in
                                                                                                                                                  let Tu52.5372: Unit = if isrot_p.5354 == Ti2139.5414 then
  ()
else
  let Ti2140.5425: Int = 0 in
    let Tu2141.5428: Unit = () in
      let Td2142.5427: Float = read_float(Tu2141.5428) in
        let Td2143.5426: Float = rad.2727(Td2142.5427) in
          let Tu46.5415: Unit = rotation.5371.(Ti2140.5425) <- Td2143.5426 in
            let Ti2144.5421: Int = 1 in
              let Tu2145.5424: Unit = () in
                let Td2146.5423: Float = read_float(Tu2145.5424) in
                  let Td2147.5422: Float = rad.2727(Td2146.5423) in
                    let Tu45.5416: Unit = rotation.5371.(Ti2144.5421) <- Td2147.5422 in
                      let Ti2148.5417: Int = 2 in
                        let Tu2149.5420: Unit = () in
                          let Td2150.5419: Float = read_float(Tu2149.5420) in
                            let Td2151.5418: Float = rad.2727(Td2150.5419) in
                              rotation.5371.(Ti2148.5417) <- Td2151.5418 in
                                                                                                                                                    let Ti2152.5413: Int = 2 in
                                                                                                                                                      let m_invert2.5373: Bool = if form.5352 == Ti2152.5413 then
  1
else
  m_invert.5363 in
                                                                                                                                                        let Ti2153.5411: Int = 4 in
                                                                                                                                                          let Td2154.5412: Float = 0. in
                                                                                                                                                            let ctbl.5374: [Float] = create_float_array(Ti2153.5411, Td2154.5412) in
                                                                                                                                                              let obj.5375: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Float], [Float], [Float]) = (texture.5350, form.5352, refltype.5353, isrot_p.5354, abc.5355, xyz.5359, m_invert2.5373, reflparam.5364, color.5367, rotation.5371, ctbl.5374) in
                                                                                                                                                                let Ta2155.5410: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
                                                                                                                                                                  let Tu51.5376: Unit = Ta2155.5410.(n.2737) <- obj.5375 in
                                                                                                                                                                    let Ti2156.5380: Int = 3 in
                                                                                                                                                                      let Tu50.5377: Unit = if form.5352 == Ti2156.5380 then
  let Ti2157.5409: Int = 0 in
    let a.5384: Float = abc.5355.(Ti2157.5409) in
      let Ti2158.5403: Int = 0 in
        let Tb2159.5405: Bool = fiszero(a.5384) in
          let Ti2160.5406: Int = 0 in
            let Td2163.5404: Float = if Tb2159.5405 == Ti2160.5406 then
  let Td2161.5407: Float = sgn.2602(a.5384) in
    let Td2162.5408: Float = fsqr(a.5384) in
      (Td2161.5407 / Td2162.5408)
else
  0. in
              let Tu48.5385: Unit = abc.5355.(Ti2158.5403) <- Td2163.5404 in
                let Ti2164.5402: Int = 1 in
                  let b.5386: Float = abc.5355.(Ti2164.5402) in
                    let Ti2165.5396: Int = 1 in
                      let Tb2166.5398: Bool = fiszero(b.5386) in
                        let Ti2167.5399: Int = 0 in
                          let Td2170.5397: Float = if Tb2166.5398 == Ti2167.5399 then
  let Td2168.5400: Float = sgn.2602(b.5386) in
    let Td2169.5401: Float = fsqr(b.5386) in
      (Td2168.5400 / Td2169.5401)
else
  0. in
                            let Tu47.5387: Unit = abc.5355.(Ti2165.5396) <- Td2170.5397 in
                              let Ti2171.5395: Int = 2 in
                                let c.5388: Float = abc.5355.(Ti2171.5395) in
                                  let Ti2172.5389: Int = 2 in
                                    let Tb2173.5391: Bool = fiszero(c.5388) in
                                      let Ti2174.5392: Int = 0 in
                                        let Td2177.5390: Float = if Tb2173.5391 == Ti2174.5392 then
  let Td2175.5393: Float = sgn.2602(c.5388) in
    let Td2176.5394: Float = fsqr(c.5388) in
      (Td2175.5393 / Td2176.5394)
else
  0. in
                                          abc.5355.(Ti2172.5389) <- Td2177.5390
else
  let Ti2178.5381: Int = 2 in
    if form.5352 == Ti2178.5381 then
      let Ti2179.5383: Int = 0 in
        let Ti2180.5382: Int = if m_invert.5363 == Ti2179.5383 then
  1
else
  0 in
          vecunit_sgn.2628(abc.5355, Ti2180.5382)
    else
      () in
                                                                                                                                                                        let Ti2181.5379: Int = 0 in
                                                                                                                                                                          let Tu49.5378: Unit = if isrot_p.5354 == Ti2181.5379 then
  ()
else
  rotate_quadratic_matrix.2733(abc.5355, rotation.5371) in
                                                                                                                                                                            1 in
                                                                                                              let rec (read_object.2738: (Int) -> Unit) ((n.2739: Int)) = let Ti2081.5343: Int = 60 in
  if Ti2081.5343 <= n.2739 then
    ()
  else
    let Tb2082.5344: Bool = read_nth_object.2736(n.2739) in
      let Ti2083.5345: Int = 0 in
        if Tb2082.5344 == Ti2083.5345 then
          let Ta2084.5348: [Int] = [n_objects] in
            let Ti2085.5349: Int = 0 in
              Ta2084.5348.(Ti2085.5349) <- n.2739
        else
          let Ti2086.5347: Int = 1 in
            let Ti2087.5346: Int = (n.2739 + Ti2086.5347) in
              read_object.2738(Ti2087.5346) in
                                                                                                                let rec (read_all_object.2740: (Unit) -> Unit) ((Tu64.2741: Unit)) = let Ti2080.5342: Int = 0 in
  read_object.2738(Ti2080.5342) in
                                                                                                                  let rec (read_net_item.2742: (Int) -> [Int]) ((length.2743: Int)) = let Tu2071.5341: Unit = () in
  let item.5330: Int = read_int(Tu2071.5341) in
    let Ti2073.5331: Int = -1 in
      if item.5330 == Ti2073.5331 then
        let Ti2074.5339: Int = 1 in
          let Ti2075.5336: Int = (length.2743 + Ti2074.5339) in
            let Ti2077.5337: Int = -1 in
              create_array(Ti2075.5336, Ti2077.5337)
      else
        let Ti2078.5335: Int = 1 in
          let Ti2079.5334: Int = (length.2743 + Ti2078.5335) in
            let v.5332: [Int] = read_net_item.2742(Ti2079.5334) in
              let Tu65.5333: Unit = v.5332.(length.2743) <- item.5330 in
                v.5332 in
                                                                                                                    let rec (read_or_network.2744: (Int) -> [[Int]]) ((length.2745: Int)) = let Ti2062.5329: Int = 0 in
  let net.5318: [Int] = read_net_item.2742(Ti2062.5329) in
    let Ti2063.5328: Int = 0 in
      let Ti2064.5319: Int = net.5318.(Ti2063.5328) in
        let Ti2066.5320: Int = -1 in
          if Ti2064.5319 == Ti2066.5320 then
            let Ti2067.5326: Int = 1 in
              let Ti2068.5325: Int = (length.2745 + Ti2067.5326) in
                create_array(Ti2068.5325, net.5318)
          else
            let Ti2069.5324: Int = 1 in
              let Ti2070.5323: Int = (length.2745 + Ti2069.5324) in
                let v.5321: [[Int]] = read_or_network.2744(Ti2070.5323) in
                  let Tu66.5322: Unit = v.5321.(length.2745) <- net.5318 in
                    v.5321 in
                                                                                                                      let rec (read_and_network.2746: (Int) -> Unit) ((n.2747: Int)) = let Ti2054.5317: Int = 0 in
  let net.5308: [Int] = read_net_item.2742(Ti2054.5317) in
    let Ti2055.5316: Int = 0 in
      let Ti2056.5309: Int = net.5308.(Ti2055.5316) in
        let Ti2058.5310: Int = -1 in
          if Ti2056.5309 == Ti2058.5310 then
            ()
          else
            let Ta2059.5314: [[Int]] = [and_net] in
              let Tu67.5311: Unit = Ta2059.5314.(n.2747) <- net.5308 in
                let Ti2060.5313: Int = 1 in
                  let Ti2061.5312: Int = (n.2747 + Ti2060.5313) in
                    read_and_network.2746(Ti2061.5312) in
                                                                                                                        let rec (read_parameter.2748: (Unit) -> Unit) ((Tu68.2749: Unit)) = let Tu2046.5307: Unit = () in
  let Tu72.5296: Unit = read_screen_settings.2729(Tu2046.5307) in
    let Tu2047.5306: Unit = () in
      let Tu71.5297: Unit = read_light.2731(Tu2047.5306) in
        let Tu2048.5305: Unit = () in
          let Tu70.5298: Unit = read_all_object.2740(Tu2048.5305) in
            let Ti2049.5304: Int = 0 in
              let Tu69.5299: Unit = read_and_network.2746(Ti2049.5304) in
                let Ta2050.5300: [[[Int]]] = [or_net] in
                  let Ti2051.5301: Int = 0 in
                    let Ti2052.5303: Int = 0 in
                      let Ta2053.5302: [[Int]] = read_or_network.2744(Ti2052.5303) in
                        Ta2050.5300.(Ti2051.5301) <- Ta2053.5302 in
                                                                                                                          let rec (solver_rect_surface.2750: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float, Int, Int, Int) -> Bool) ((m.2751: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec.2752: [Float]), (b0.2753: Float), (b1.2754: Float), (b2.2755: Float), (i0.2756: Int), (i1.2757: Int), (i2.2758: Int)) = let Td2020.5295: Float = dirvec.2752.(i0.2756) in
  let Tb2021.5266: Bool = fiszero(Td2020.5295) in
    let Ti2022.5267: Int = 0 in
      if Tb2021.5266 == Ti2022.5267 then
        let abc.5268: [Float] = o_param_abc.2672(m.2751) in
          let Tb2023.5292: Bool = o_isinvert.2662(m.2751) in
            let Td2024.5294: Float = dirvec.2752.(i0.2756) in
              let Tb2025.5293: Bool = fisneg(Td2024.5294) in
                let Tb2026.5290: Bool = xor.2599(Tb2023.5292, Tb2025.5293) in
                  let Td2027.5291: Float = abc.5268.(i0.2756) in
                    let d.5269: Float = fneg_cond.2604(Tb2026.5290, Td2027.5291) in
                      let Td2028.5288: Float = (d.5269 - b0.2753) in
                        let Td2029.5289: Float = dirvec.2752.(i0.2756) in
                          let d2.5270: Float = (Td2028.5288 / Td2029.5289) in
                            let Td2030.5287: Float = dirvec.2752.(i1.2757) in
                              let Td2031.5286: Float = (d2.5270 * Td2030.5287) in
                                let Td2032.5285: Float = (Td2031.5286 + b1.2754) in
                                  let Ti2033.5283: Int = fabs(Td2032.5285) in
                                    let Td2034.5284: Float = abc.5268.(i1.2757) in
                                      let Tb2035.5271: Bool = fless(Ti2033.5283, Td2034.5284) in
                                        let Ti2036.5272: Int = 0 in
                                          if Tb2035.5271 == Ti2036.5272 then
                                            0
                                          else
                                            let Td2037.5282: Float = dirvec.2752.(i2.2758) in
                                              let Td2038.5281: Float = (d2.5270 * Td2037.5282) in
                                                let Td2039.5280: Float = (Td2038.5281 + b2.2755) in
                                                  let Ti2040.5278: Int = fabs(Td2039.5280) in
                                                    let Td2041.5279: Float = abc.5268.(i2.2758) in
                                                      let Tb2042.5273: Bool = fless(Ti2040.5278, Td2041.5279) in
                                                        let Ti2043.5274: Int = 0 in
                                                          if Tb2042.5273 == Ti2043.5274 then
                                                            0
                                                          else
                                                            let Ta2044.5276: [Int] = [solver_dist] in
                                                              let Ti2045.5277: Int = 0 in
                                                                let Tu73.5275: Unit = Ta2044.5276.(Ti2045.5277) <- d2.5270 in
                                                                  1
      else
        0 in
                                                                                                                            let rec (solver_rect.2759: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m.2760: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec.2761: [Float]), (b0.2762: Float), (b1.2763: Float), (b2.2764: Float)) = let Ti2005.5263: Int = 0 in
  let Ti2006.5264: Int = 1 in
    let Ti2007.5265: Int = 2 in
      let Tb2008.5251: Bool = solver_rect_surface.2750(m.2760, dirvec.2761, b0.2762, b1.2763, b2.2764, Ti2005.5263, Ti2006.5264, Ti2007.5265) in
        let Ti2009.5252: Int = 0 in
          if Tb2008.5251 == Ti2009.5252 then
            let Ti2010.5260: Int = 1 in
              let Ti2011.5261: Int = 2 in
                let Ti2012.5262: Int = 0 in
                  let Tb2013.5253: Bool = solver_rect_surface.2750(m.2760, dirvec.2761, b1.2763, b2.2764, b0.2762, Ti2010.5260, Ti2011.5261, Ti2012.5262) in
                    let Ti2014.5254: Int = 0 in
                      if Tb2013.5253 == Ti2014.5254 then
                        let Ti2015.5257: Int = 2 in
                          let Ti2016.5258: Int = 0 in
                            let Ti2017.5259: Int = 1 in
                              let Tb2018.5255: Bool = solver_rect_surface.2750(m.2760, dirvec.2761, b2.2764, b0.2762, b1.2763, Ti2015.5257, Ti2016.5258, Ti2017.5259) in
                                let Ti2019.5256: Int = 0 in
                                  if Tb2018.5255 == Ti2019.5256 then
                                    0
                                  else
                                    3
                      else
                        2
          else
            1 in
                                                                                                                              let rec (solver_surface.2765: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m.2766: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec.2767: [Float]), (b0.2768: Float), (b1.2769: Float), (b2.2770: Float)) = let abc.5241: [Float] = o_param_abc.2672(m.2766) in
  let d.5242: Float = veciprod.2631(dirvec.2767, abc.5241) in
    let Tb1998.5243: Bool = fispos(d.5242) in
      let Ti1999.5244: Int = 0 in
        if Tb1998.5243 == Ti1999.5244 then
          0
        else
          let Ta2000.5246: [Int] = [solver_dist] in
            let Ti2001.5247: Int = 0 in
              let Td2002.5250: Float = veciprod2.2634(abc.5241, b0.2768, b1.2769, b2.2770) in
                let Td2003.5249: Float = fneg(Td2002.5250) in
                  let Td2004.5248: Float = (Td2003.5249 / d.5242) in
                    let Tu74.5245: Unit = Ta2000.5246.(Ti2001.5247) <- Td2004.5248 in
                      1 in
                                                                                                                                let rec (quadratic.2771: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Float) ((m.2772: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (v0.2773: Float), (v1.2774: Float), (v2.2775: Float)) = let Td1975.5239: Float = fsqr(v0.2773) in
  let Td1976.5240: Float = o_param_a.2666(m.2772) in
    let Td1977.5235: Float = (Td1975.5239 * Td1976.5240) in
      let Td1978.5237: Float = fsqr(v1.2774) in
        let Td1979.5238: Float = o_param_b.2668(m.2772) in
          let Td1980.5236: Float = (Td1978.5237 * Td1979.5238) in
            let Td1981.5231: Float = (Td1977.5235 + Td1980.5236) in
              let Td1982.5233: Float = fsqr(v2.2775) in
                let Td1983.5234: Float = o_param_c.2670(m.2772) in
                  let Td1984.5232: Float = (Td1982.5233 * Td1983.5234) in
                    let diag_part.5217: Float = (Td1981.5231 + Td1984.5232) in
                      let Ti1985.5218: Int = o_isrot.2664(m.2772) in
                        let Ti1986.5219: Int = 0 in
                          if Ti1985.5218 == Ti1986.5219 then
                            diag_part.5217
                          else
                            let Td1987.5229: Float = (v1.2774 * v2.2775) in
                              let Td1988.5230: Float = o_param_r1.2690(m.2772) in
                                let Td1989.5228: Float = (Td1987.5229 * Td1988.5230) in
                                  let Td1990.5224: Float = (diag_part.5217 + Td1989.5228) in
                                    let Td1991.5226: Float = (v2.2775 * v0.2773) in
                                      let Td1992.5227: Float = o_param_r2.2692(m.2772) in
                                        let Td1993.5225: Float = (Td1991.5226 * Td1992.5227) in
                                          let Td1994.5220: Float = (Td1990.5224 + Td1993.5225) in
                                            let Td1995.5222: Float = (v0.2773 * v1.2774) in
                                              let Td1996.5223: Float = o_param_r3.2694(m.2772) in
                                                let Td1997.5221: Float = (Td1995.5222 * Td1996.5223) in
                                                  (Td1994.5220 + Td1997.5221) in
                                                                                                                                  let rec (bilinear.2776: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float, Float, Float, Float) -> Float) ((m.2777: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (v0.2778: Float), (v1.2779: Float), (v2.2780: Float), (w0.2781: Float), (w1.2782: Float), (w2.2783: Float)) = let Td1945.5215: Float = (v0.2778 * w0.2781) in
  let Td1946.5216: Float = o_param_a.2666(m.2777) in
    let Td1947.5211: Float = (Td1945.5215 * Td1946.5216) in
      let Td1948.5213: Float = (v1.2779 * w1.2782) in
        let Td1949.5214: Float = o_param_b.2668(m.2777) in
          let Td1950.5212: Float = (Td1948.5213 * Td1949.5214) in
            let Td1951.5207: Float = (Td1947.5211 + Td1950.5212) in
              let Td1952.5209: Float = (v2.2780 * w2.2783) in
                let Td1953.5210: Float = o_param_c.2670(m.2777) in
                  let Td1954.5208: Float = (Td1952.5209 * Td1953.5210) in
                    let diag_part.5186: Float = (Td1951.5207 + Td1954.5208) in
                      let Ti1955.5187: Int = o_isrot.2664(m.2777) in
                        let Ti1956.5188: Int = 0 in
                          if Ti1955.5187 == Ti1956.5188 then
                            diag_part.5186
                          else
                            let Td1957.5205: Float = (v2.2780 * w1.2782) in
                              let Td1958.5206: Float = (v1.2779 * w2.2783) in
                                let Td1959.5203: Float = (Td1957.5205 + Td1958.5206) in
                                  let Td1960.5204: Float = o_param_r1.2690(m.2777) in
                                    let Td1961.5197: Float = (Td1959.5203 * Td1960.5204) in
                                      let Td1962.5201: Float = (v0.2778 * w2.2783) in
                                        let Td1963.5202: Float = (v2.2780 * w0.2781) in
                                          let Td1964.5199: Float = (Td1962.5201 + Td1963.5202) in
                                            let Td1965.5200: Float = o_param_r2.2692(m.2777) in
                                              let Td1966.5198: Float = (Td1964.5199 * Td1965.5200) in
                                                let Td1967.5191: Float = (Td1961.5197 + Td1966.5198) in
                                                  let Td1968.5195: Float = (v0.2778 * w1.2782) in
                                                    let Td1969.5196: Float = (v1.2779 * w0.2781) in
                                                      let Td1970.5193: Float = (Td1968.5195 + Td1969.5196) in
                                                        let Td1971.5194: Float = o_param_r3.2694(m.2777) in
                                                          let Td1972.5192: Float = (Td1970.5193 * Td1971.5194) in
                                                            let Td1973.5190: Float = (Td1967.5191 + Td1972.5192) in
                                                              let Td1974.5189: Float = fhalf(Td1973.5190) in
                                                                (diag_part.5186 + Td1974.5189) in
                                                                                                                                    let rec (solver_second.2784: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m.2785: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec.2786: [Float]), (b0.2787: Float), (b1.2788: Float), (b2.2789: Float)) = let Ti1918.5185: Int = 0 in
  let Td1919.5180: Float = dirvec.2786.(Ti1918.5185) in
    let Ti1920.5184: Int = 1 in
      let Td1921.5181: Float = dirvec.2786.(Ti1920.5184) in
        let Ti1922.5183: Int = 2 in
          let Td1923.5182: Float = dirvec.2786.(Ti1922.5183) in
            let aa.5151: Float = quadratic.2771(m.2785, Td1919.5180, Td1921.5181, Td1923.5182) in
              let Tb1924.5152: Bool = fiszero(aa.5151) in
                let Ti1925.5153: Int = 0 in
                  if Tb1924.5152 == Ti1925.5153 then
                    let Ti1926.5179: Int = 0 in
                      let Td1927.5174: Float = dirvec.2786.(Ti1926.5179) in
                        let Ti1928.5178: Int = 1 in
                          let Td1929.5175: Float = dirvec.2786.(Ti1928.5178) in
                            let Ti1930.5177: Int = 2 in
                              let Td1931.5176: Float = dirvec.2786.(Ti1930.5177) in
                                let bb.5154: Float = bilinear.2776(m.2785, Td1927.5174, Td1929.5175, Td1931.5176, b0.2787, b1.2788, b2.2789) in
                                  let cc0.5155: Float = quadratic.2771(m.2785, b0.2787, b1.2788, b2.2789) in
                                    let Ti1932.5171: Int = o_form.2658(m.2785) in
                                      let Ti1933.5172: Int = 3 in
                                        let cc.5156: Float = if Ti1932.5171 == Ti1933.5172 then
  let Td1934.5173: Float = 1. in
    (cc0.5155 - Td1934.5173)
else
  cc0.5155 in
                                          let Td1935.5169: Float = fsqr(bb.5154) in
                                            let Td1936.5170: Float = (aa.5151 * cc.5156) in
                                              let d.5157: Float = (Td1935.5169 - Td1936.5170) in
                                                let Tb1937.5158: Bool = fispos(d.5157) in
                                                  let Ti1938.5159: Int = 0 in
                                                    if Tb1937.5158 == Ti1938.5159 then
                                                      0
                                                    else
                                                      let sd.5160: Float = sqrt(d.5157) in
                                                        let Tb1939.5167: Bool = o_isinvert.2662(m.2785) in
                                                          let Ti1940.5168: Int = 0 in
                                                            let t1.5161: Float = if Tb1939.5167 == Ti1940.5168 then
  fneg(sd.5160)
else
  sd.5160 in
                                                              let Ta1941.5163: [Int] = [solver_dist] in
                                                                let Ti1942.5164: Int = 0 in
                                                                  let Td1943.5166: Float = (t1.5161 - bb.5154) in
                                                                    let Td1944.5165: Float = (Td1943.5166 / aa.5151) in
                                                                      let Tu75.5162: Unit = Ta1941.5163.(Ti1942.5164) <- Td1944.5165 in
                                                                        1
                  else
                    0 in
                                                                                                                                      let rec (solver.2790: (Int, [Float], [Float]) -> Int) ((index.2791: Int), (dirvec.2792: [Float]), (org.2793: [Float])) = let Ta1906.5150: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  let m.5134: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = Ta1906.5150.(index.2791) in
    let Ti1907.5149: Int = 0 in
      let Td1908.5147: Float = org.2793.(Ti1907.5149) in
        let Td1909.5148: Float = o_param_x.2674(m.5134) in
          let b0.5135: Float = (Td1908.5147 - Td1909.5148) in
            let Ti1910.5146: Int = 1 in
              let Td1911.5144: Float = org.2793.(Ti1910.5146) in
                let Td1912.5145: Float = o_param_y.2676(m.5134) in
                  let b1.5136: Float = (Td1911.5144 - Td1912.5145) in
                    let Ti1913.5143: Int = 2 in
                      let Td1914.5141: Float = org.2793.(Ti1913.5143) in
                        let Td1915.5142: Float = o_param_z.2678(m.5134) in
                          let b2.5137: Float = (Td1914.5141 - Td1915.5142) in
                            let m_shape.5138: Int = o_form.2658(m.5134) in
                              let Ti1916.5139: Int = 1 in
                                if m_shape.5138 == Ti1916.5139 then
                                  solver_rect.2759(m.5134, dirvec.2792, b0.5135, b1.5136, b2.5137)
                                else
                                  let Ti1917.5140: Int = 2 in
                                    if m_shape.5138 == Ti1917.5140 then
                                      solver_surface.2765(m.5134, dirvec.2792, b0.5135, b1.5136, b2.5137)
                                    else
                                      solver_second.2784(m.5134, dirvec.2792, b0.5135, b1.5136, b2.5137) in
                                                                                                                                        let rec (solver_rect_fast.2794: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], [Float], Float, Float, Float) -> Int) ((m.2795: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (v.2796: [Float]), (dconst.2797: [Float]), (b0.2798: Float), (b1.2799: Float), (b2.2800: Float)) = let Ti1819.5133: Int = 0 in
  let Td1820.5132: Float = dconst.2797.(Ti1819.5133) in
    let Td1821.5129: Float = (Td1820.5132 - b0.2798) in
      let Ti1822.5131: Int = 1 in
        let Td1823.5130: Float = dconst.2797.(Ti1822.5131) in
          let d0.5041: Float = (Td1821.5129 * Td1823.5130) in
            let Ti1824.5128: Int = 1 in
              let Td1825.5127: Float = v.2796.(Ti1824.5128) in
                let Td1826.5126: Float = (d0.5041 * Td1825.5127) in
                  let Td1827.5125: Float = (Td1826.5126 + b1.2799) in
                    let Ti1828.5123: Int = fabs(Td1827.5125) in
                      let Td1829.5124: Float = o_param_b.2668(m.2795) in
                        let Tb1830.5109: Bool = fless(Ti1828.5123, Td1829.5124) in
                          let Ti1831.5110: Int = 0 in
                            let Ti1844.5042: Int = if Tb1830.5109 == Ti1831.5110 then
  0
else
  let Ti1832.5122: Int = 2 in
    let Td1833.5121: Float = v.2796.(Ti1832.5122) in
      let Td1834.5120: Float = (d0.5041 * Td1833.5121) in
        let Td1835.5119: Float = (Td1834.5120 + b2.2800) in
          let Ti1836.5117: Int = fabs(Td1835.5119) in
            let Td1837.5118: Float = o_param_c.2670(m.2795) in
              let Tb1838.5111: Bool = fless(Ti1836.5117, Td1837.5118) in
                let Ti1839.5112: Int = 0 in
                  if Tb1838.5111 == Ti1839.5112 then
                    0
                  else
                    let Ti1840.5116: Int = 1 in
                      let Td1841.5115: Float = dconst.2797.(Ti1840.5116) in
                        let Tb1842.5113: Bool = fiszero(Td1841.5115) in
                          let Ti1843.5114: Int = 0 in
                            if Tb1842.5113 == Ti1843.5114 then
                              1
                            else
                              0 in
                              let Ti1845.5043: Int = 0 in
                                if Ti1844.5042 == Ti1845.5043 then
                                  let Ti1846.5108: Int = 2 in
                                    let Td1847.5107: Float = dconst.2797.(Ti1846.5108) in
                                      let Td1848.5104: Float = (Td1847.5107 - b1.2799) in
                                        let Ti1849.5106: Int = 3 in
                                          let Td1850.5105: Float = dconst.2797.(Ti1849.5106) in
                                            let d1.5047: Float = (Td1848.5104 * Td1850.5105) in
                                              let Ti1851.5103: Int = 0 in
                                                let Td1852.5102: Float = v.2796.(Ti1851.5103) in
                                                  let Td1853.5101: Float = (d1.5047 * Td1852.5102) in
                                                    let Td1854.5100: Float = (Td1853.5101 + b0.2798) in
                                                      let Ti1855.5098: Int = fabs(Td1854.5100) in
                                                        let Td1856.5099: Float = o_param_a.2666(m.2795) in
                                                          let Tb1857.5084: Bool = fless(Ti1855.5098, Td1856.5099) in
                                                            let Ti1858.5085: Int = 0 in
                                                              let Ti1871.5048: Int = if Tb1857.5084 == Ti1858.5085 then
  0
else
  let Ti1859.5097: Int = 2 in
    let Td1860.5096: Float = v.2796.(Ti1859.5097) in
      let Td1861.5095: Float = (d1.5047 * Td1860.5096) in
        let Td1862.5094: Float = (Td1861.5095 + b2.2800) in
          let Ti1863.5092: Int = fabs(Td1862.5094) in
            let Td1864.5093: Float = o_param_c.2670(m.2795) in
              let Tb1865.5086: Bool = fless(Ti1863.5092, Td1864.5093) in
                let Ti1866.5087: Int = 0 in
                  if Tb1865.5086 == Ti1866.5087 then
                    0
                  else
                    let Ti1867.5091: Int = 3 in
                      let Td1868.5090: Float = dconst.2797.(Ti1867.5091) in
                        let Tb1869.5088: Bool = fiszero(Td1868.5090) in
                          let Ti1870.5089: Int = 0 in
                            if Tb1869.5088 == Ti1870.5089 then
                              1
                            else
                              0 in
                                                                let Ti1872.5049: Int = 0 in
                                                                  if Ti1871.5048 == Ti1872.5049 then
                                                                    let Ti1873.5083: Int = 4 in
                                                                      let Td1874.5082: Float = dconst.2797.(Ti1873.5083) in
                                                                        let Td1875.5079: Float = (Td1874.5082 - b2.2800) in
                                                                          let Ti1876.5081: Int = 5 in
                                                                            let Td1877.5080: Float = dconst.2797.(Ti1876.5081) in
                                                                              let d2.5053: Float = (Td1875.5079 * Td1877.5080) in
                                                                                let Ti1878.5078: Int = 0 in
                                                                                  let Td1879.5077: Float = v.2796.(Ti1878.5078) in
                                                                                    let Td1880.5076: Float = (d2.5053 * Td1879.5077) in
                                                                                      let Td1881.5075: Float = (Td1880.5076 + b0.2798) in
                                                                                        let Ti1882.5073: Int = fabs(Td1881.5075) in
                                                                                          let Td1883.5074: Float = o_param_a.2666(m.2795) in
                                                                                            let Tb1884.5059: Bool = fless(Ti1882.5073, Td1883.5074) in
                                                                                              let Ti1885.5060: Int = 0 in
                                                                                                let Ti1898.5054: Int = if Tb1884.5059 == Ti1885.5060 then
  0
else
  let Ti1886.5072: Int = 1 in
    let Td1887.5071: Float = v.2796.(Ti1886.5072) in
      let Td1888.5070: Float = (d2.5053 * Td1887.5071) in
        let Td1889.5069: Float = (Td1888.5070 + b1.2799) in
          let Ti1890.5067: Int = fabs(Td1889.5069) in
            let Td1891.5068: Float = o_param_b.2668(m.2795) in
              let Tb1892.5061: Bool = fless(Ti1890.5067, Td1891.5068) in
                let Ti1893.5062: Int = 0 in
                  if Tb1892.5061 == Ti1893.5062 then
                    0
                  else
                    let Ti1894.5066: Int = 5 in
                      let Td1895.5065: Float = dconst.2797.(Ti1894.5066) in
                        let Tb1896.5063: Bool = fiszero(Td1895.5065) in
                          let Ti1897.5064: Int = 0 in
                            if Tb1896.5063 == Ti1897.5064 then
                              1
                            else
                              0 in
                                                                                                  let Ti1899.5055: Int = 0 in
                                                                                                    if Ti1898.5054 == Ti1899.5055 then
                                                                                                      0
                                                                                                    else
                                                                                                      let Ta1900.5057: [Int] = [solver_dist] in
                                                                                                        let Ti1901.5058: Int = 0 in
                                                                                                          let Tu78.5056: Unit = Ta1900.5057.(Ti1901.5058) <- d2.5053 in
                                                                                                            3
                                                                  else
                                                                    let Ta1902.5051: [Int] = [solver_dist] in
                                                                      let Ti1903.5052: Int = 0 in
                                                                        let Tu77.5050: Unit = Ta1902.5051.(Ti1903.5052) <- d1.5047 in
                                                                          2
                                else
                                  let Ta1904.5045: [Int] = [solver_dist] in
                                    let Ti1905.5046: Int = 0 in
                                      let Tu76.5044: Unit = Ta1904.5045.(Ti1905.5046) <- d0.5041 in
                                        1 in
                                                                                                                                          let rec (solver_surface_fast.2801: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m.2802: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dconst.2803: [Float]), (b0.2804: Float), (b1.2805: Float), (b2.2806: Float)) = let Ti1802.5040: Int = 0 in
  let Td1803.5039: Float = dconst.2803.(Ti1802.5040) in
    let Tb1804.5023: Bool = fisneg(Td1803.5039) in
      let Ti1805.5024: Int = 0 in
        if Tb1804.5023 == Ti1805.5024 then
          0
        else
          let Ta1806.5026: [Int] = [solver_dist] in
            let Ti1807.5027: Int = 0 in
              let Ti1808.5038: Int = 1 in
                let Td1809.5037: Float = dconst.2803.(Ti1808.5038) in
                  let Td1810.5033: Float = (Td1809.5037 * b0.2804) in
                    let Ti1811.5036: Int = 2 in
                      let Td1812.5035: Float = dconst.2803.(Ti1811.5036) in
                        let Td1813.5034: Float = (Td1812.5035 * b1.2805) in
                          let Td1814.5029: Float = (Td1810.5033 + Td1813.5034) in
                            let Ti1815.5032: Int = 3 in
                              let Td1816.5031: Float = dconst.2803.(Ti1815.5032) in
                                let Td1817.5030: Float = (Td1816.5031 * b2.2806) in
                                  let Td1818.5028: Float = (Td1814.5029 + Td1817.5030) in
                                    let Tu79.5025: Unit = Ta1806.5026.(Ti1807.5027) <- Td1818.5028 in
                                      1 in
                                                                                                                                            let rec (solver_second_fast.2807: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], Float, Float, Float) -> Int) ((m.2808: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dconst.2809: [Float]), (b0.2810: Float), (b1.2811: Float), (b2.2812: Float)) = let Ti1766.5022: Int = 0 in
  let aa.4981: Float = dconst.2809.(Ti1766.5022) in
    let Tb1767.4982: Bool = fiszero(aa.4981) in
      let Ti1768.4983: Int = 0 in
        if Tb1767.4982 == Ti1768.4983 then
          let Ti1769.5021: Int = 1 in
            let Td1770.5020: Float = dconst.2809.(Ti1769.5021) in
              let Td1771.5016: Float = (Td1770.5020 * b0.2810) in
                let Ti1772.5019: Int = 2 in
                  let Td1773.5018: Float = dconst.2809.(Ti1772.5019) in
                    let Td1774.5017: Float = (Td1773.5018 * b1.2811) in
                      let Td1775.5012: Float = (Td1771.5016 + Td1774.5017) in
                        let Ti1776.5015: Int = 3 in
                          let Td1777.5014: Float = dconst.2809.(Ti1776.5015) in
                            let Td1778.5013: Float = (Td1777.5014 * b2.2812) in
                              let neg_bb.4984: Float = (Td1775.5012 + Td1778.5013) in
                                let cc0.4985: Float = quadratic.2771(m.2808, b0.2810, b1.2811, b2.2812) in
                                  let Ti1779.5009: Int = o_form.2658(m.2808) in
                                    let Ti1780.5010: Int = 3 in
                                      let cc.4986: Float = if Ti1779.5009 == Ti1780.5010 then
  let Td1781.5011: Float = 1. in
    (cc0.4985 - Td1781.5011)
else
  cc0.4985 in
                                        let Td1782.5007: Float = fsqr(neg_bb.4984) in
                                          let Td1783.5008: Float = (aa.4981 * cc.4986) in
                                            let d.4987: Float = (Td1782.5007 - Td1783.5008) in
                                              let Tb1784.4988: Bool = fispos(d.4987) in
                                                let Ti1785.4989: Int = 0 in
                                                  if Tb1784.4988 == Ti1785.4989 then
                                                    0
                                                  else
                                                    let Tb1786.4991: Bool = o_isinvert.2662(m.2808) in
                                                      let Ti1787.4992: Int = 0 in
                                                        let Tu80.4990: Unit = if Tb1786.4991 == Ti1787.4992 then
  let Ta1788.5000: [Int] = [solver_dist] in
    let Ti1789.5001: Int = 0 in
      let Td1790.5006: Float = sqrt(d.4987) in
        let Td1791.5003: Float = (neg_bb.4984 - Td1790.5006) in
          let Ti1792.5005: Int = 4 in
            let Td1793.5004: Float = dconst.2809.(Ti1792.5005) in
              let Td1794.5002: Float = (Td1791.5003 * Td1793.5004) in
                Ta1788.5000.(Ti1789.5001) <- Td1794.5002
else
  let Ta1795.4993: [Int] = [solver_dist] in
    let Ti1796.4994: Int = 0 in
      let Td1797.4999: Float = sqrt(d.4987) in
        let Td1798.4996: Float = (neg_bb.4984 + Td1797.4999) in
          let Ti1799.4998: Int = 4 in
            let Td1800.4997: Float = dconst.2809.(Ti1799.4998) in
              let Td1801.4995: Float = (Td1798.4996 * Td1800.4997) in
                Ta1795.4993.(Ti1796.4994) <- Td1801.4995 in
                                                          1
        else
          0 in
                                                                                                                                              let rec (solver_fast.2813: (Int, ([Float], [[Float]]), [Float]) -> Int) ((index.2814: Int), (dirvec.2815: ([Float], [[Float]])), (org.2816: [Float])) = let Ta1753.4980: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  let m.4961: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = Ta1753.4980.(index.2814) in
    let Ti1754.4979: Int = 0 in
      let Td1755.4977: Float = org.2816.(Ti1754.4979) in
        let Td1756.4978: Float = o_param_x.2674(m.4961) in
          let b0.4962: Float = (Td1755.4977 - Td1756.4978) in
            let Ti1757.4976: Int = 1 in
              let Td1758.4974: Float = org.2816.(Ti1757.4976) in
                let Td1759.4975: Float = o_param_y.2676(m.4961) in
                  let b1.4963: Float = (Td1758.4974 - Td1759.4975) in
                    let Ti1760.4973: Int = 2 in
                      let Td1761.4971: Float = org.2816.(Ti1760.4973) in
                        let Td1762.4972: Float = o_param_z.2678(m.4961) in
                          let b2.4964: Float = (Td1761.4971 - Td1762.4972) in
                            let dconsts.4965: [[Float]] = d_const.2719(dirvec.2815) in
                              let dconst.4966: [Float] = dconsts.4965.(index.2814) in
                                let m_shape.4967: Int = o_form.2658(m.4961) in
                                  let Ti1763.4968: Int = 1 in
                                    if m_shape.4967 == Ti1763.4968 then
                                      let Ta1764.4970: [Float] = d_vec.2717(dirvec.2815) in
                                        solver_rect_fast.2794(m.4961, Ta1764.4970, dconst.4966, b0.4962, b1.4963, b2.4964)
                                    else
                                      let Ti1765.4969: Int = 2 in
                                        if m_shape.4967 == Ti1765.4969 then
                                          solver_surface_fast.2801(m.4961, dconst.4966, b0.4962, b1.4963, b2.4964)
                                        else
                                          solver_second_fast.2807(m.4961, dconst.4966, b0.4962, b1.4963, b2.4964) in
                                                                                                                                                let rec (solver_surface_fast2.2817: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], [Float], Float, Float, Float) -> Int) ((m.2818: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dconst.2819: [Float]), (sconst.2820: [Float]), (b0.2821: Float), (b1.2822: Float), (b2.2823: Float)) = let Ti1742.4960: Int = 0 in
  let Td1743.4959: Float = dconst.2819.(Ti1742.4960) in
    let Tb1744.4949: Bool = fisneg(Td1743.4959) in
      let Ti1745.4950: Int = 0 in
        if Tb1744.4949 == Ti1745.4950 then
          0
        else
          let Ta1746.4952: [Int] = [solver_dist] in
            let Ti1747.4953: Int = 0 in
              let Ti1748.4958: Int = 0 in
                let Td1749.4955: Float = dconst.2819.(Ti1748.4958) in
                  let Ti1750.4957: Int = 3 in
                    let Td1751.4956: Float = sconst.2820.(Ti1750.4957) in
                      let Td1752.4954: Float = (Td1749.4955 * Td1751.4956) in
                        let Tu81.4951: Unit = Ta1746.4952.(Ti1747.4953) <- Td1752.4954 in
                          1 in
                                                                                                                                                  let rec (solver_second_fast2.2824: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float], [Float], Float, Float, Float) -> Int) ((m.2825: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dconst.2826: [Float]), (sconst.2827: [Float]), (b0.2828: Float), (b1.2829: Float), (b2.2830: Float)) = let Ti1708.4948: Int = 0 in
  let aa.4910: Float = dconst.2826.(Ti1708.4948) in
    let Tb1709.4911: Bool = fiszero(aa.4910) in
      let Ti1710.4912: Int = 0 in
        if Tb1709.4911 == Ti1710.4912 then
          let Ti1711.4947: Int = 1 in
            let Td1712.4946: Float = dconst.2826.(Ti1711.4947) in
              let Td1713.4942: Float = (Td1712.4946 * b0.2828) in
                let Ti1714.4945: Int = 2 in
                  let Td1715.4944: Float = dconst.2826.(Ti1714.4945) in
                    let Td1716.4943: Float = (Td1715.4944 * b1.2829) in
                      let Td1717.4938: Float = (Td1713.4942 + Td1716.4943) in
                        let Ti1718.4941: Int = 3 in
                          let Td1719.4940: Float = dconst.2826.(Ti1718.4941) in
                            let Td1720.4939: Float = (Td1719.4940 * b2.2830) in
                              let neg_bb.4913: Float = (Td1717.4938 + Td1720.4939) in
                                let Ti1721.4937: Int = 3 in
                                  let cc.4914: Float = sconst.2827.(Ti1721.4937) in
                                    let Td1722.4935: Float = fsqr(neg_bb.4913) in
                                      let Td1723.4936: Float = (aa.4910 * cc.4914) in
                                        let d.4915: Float = (Td1722.4935 - Td1723.4936) in
                                          let Tb1724.4916: Bool = fispos(d.4915) in
                                            let Ti1725.4917: Int = 0 in
                                              if Tb1724.4916 == Ti1725.4917 then
                                                0
                                              else
                                                let Tb1726.4919: Bool = o_isinvert.2662(m.2825) in
                                                  let Ti1727.4920: Int = 0 in
                                                    let Tu82.4918: Unit = if Tb1726.4919 == Ti1727.4920 then
  let Ta1728.4928: [Int] = [solver_dist] in
    let Ti1729.4929: Int = 0 in
      let Td1730.4934: Float = sqrt(d.4915) in
        let Td1731.4931: Float = (neg_bb.4913 - Td1730.4934) in
          let Ti1732.4933: Int = 4 in
            let Td1733.4932: Float = dconst.2826.(Ti1732.4933) in
              let Td1734.4930: Float = (Td1731.4931 * Td1733.4932) in
                Ta1728.4928.(Ti1729.4929) <- Td1734.4930
else
  let Ta1735.4921: [Int] = [solver_dist] in
    let Ti1736.4922: Int = 0 in
      let Td1737.4927: Float = sqrt(d.4915) in
        let Td1738.4924: Float = (neg_bb.4913 + Td1737.4927) in
          let Ti1739.4926: Int = 4 in
            let Td1740.4925: Float = dconst.2826.(Ti1739.4926) in
              let Td1741.4923: Float = (Td1738.4924 * Td1740.4925) in
                Ta1735.4921.(Ti1736.4922) <- Td1741.4923 in
                                                      1
        else
          0 in
                                                                                                                                                    let rec (solver_fast2.2831: (Int, ([Float], [[Float]])) -> Int) ((index.2832: Int), (dirvec.2833: ([Float], [[Float]]))) = let Ta1701.4909: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
  let m.4895: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = Ta1701.4909.(index.2832) in
    let sconst.4896: [Float] = o_param_ctbl.2696(m.4895) in
      let Ti1702.4908: Int = 0 in
        let b0.4897: Float = sconst.4896.(Ti1702.4908) in
          let Ti1703.4907: Int = 1 in
            let b1.4898: Float = sconst.4896.(Ti1703.4907) in
              let Ti1704.4906: Int = 2 in
                let b2.4899: Float = sconst.4896.(Ti1704.4906) in
                  let dconsts.4900: [[Float]] = d_const.2719(dirvec.2833) in
                    let dconst.4901: [Float] = dconsts.4900.(index.2832) in
                      let m_shape.4902: Int = o_form.2658(m.4895) in
                        let Ti1705.4903: Int = 1 in
                          if m_shape.4902 == Ti1705.4903 then
                            let Ta1706.4905: [Float] = d_vec.2717(dirvec.2833) in
                              solver_rect_fast.2794(m.4895, Ta1706.4905, dconst.4901, b0.4897, b1.4898, b2.4899)
                          else
                            let Ti1707.4904: Int = 2 in
                              if m_shape.4902 == Ti1707.4904 then
                                solver_surface_fast2.2817(m.4895, dconst.4901, sconst.4896, b0.4897, b1.4898, b2.4899)
                              else
                                solver_second_fast2.2824(m.4895, dconst.4901, sconst.4896, b0.4897, b1.4898, b2.4899) in
                                                                                                                                                      let rec (setup_rect_table.2834: ([Float], (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((vec.2835: [Float]), (m.2836: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let Ti1642.4893: Int = 6 in
  let Td1643.4894: Float = 0. in
    let const.4829: [Float] = create_float_array(Ti1642.4893, Td1643.4894) in
      let Ti1644.4892: Int = 0 in
        let Td1645.4891: Float = vec.2835.(Ti1644.4892) in
          let Tb1646.4873: Bool = fiszero(Td1645.4891) in
            let Ti1647.4874: Int = 0 in
              let Tu88.4830: Unit = if Tb1646.4873 == Ti1647.4874 then
  let Ti1648.4883: Int = 0 in
    let Tb1649.4887: Bool = o_isinvert.2662(m.2836) in
      let Ti1650.4890: Int = 0 in
        let Td1651.4889: Float = vec.2835.(Ti1650.4890) in
          let Tb1652.4888: Bool = fisneg(Td1651.4889) in
            let Tb1653.4885: Bool = xor.2599(Tb1649.4887, Tb1652.4888) in
              let Td1654.4886: Float = o_param_a.2666(m.2836) in
                let Td1655.4884: Float = fneg_cond.2604(Tb1653.4885, Td1654.4886) in
                  let Tu83.4877: Unit = const.4829.(Ti1648.4883) <- Td1655.4884 in
                    let Ti1656.4878: Int = 1 in
                      let Td1657.4880: Float = 1. in
                        let Ti1658.4882: Int = 0 in
                          let Td1659.4881: Float = vec.2835.(Ti1658.4882) in
                            let Td1660.4879: Float = (Td1657.4880 / Td1659.4881) in
                              const.4829.(Ti1656.4878) <- Td1660.4879
else
  let Ti1661.4875: Int = 1 in
    let Td1662.4876: Float = 0. in
      const.4829.(Ti1661.4875) <- Td1662.4876 in
                let Ti1663.4872: Int = 1 in
                  let Td1664.4871: Float = vec.2835.(Ti1663.4872) in
                    let Tb1665.4853: Bool = fiszero(Td1664.4871) in
                      let Ti1666.4854: Int = 0 in
                        let Tu87.4831: Unit = if Tb1665.4853 == Ti1666.4854 then
  let Ti1667.4863: Int = 2 in
    let Tb1668.4867: Bool = o_isinvert.2662(m.2836) in
      let Ti1669.4870: Int = 1 in
        let Td1670.4869: Float = vec.2835.(Ti1669.4870) in
          let Tb1671.4868: Bool = fisneg(Td1670.4869) in
            let Tb1672.4865: Bool = xor.2599(Tb1668.4867, Tb1671.4868) in
              let Td1673.4866: Float = o_param_b.2668(m.2836) in
                let Td1674.4864: Float = fneg_cond.2604(Tb1672.4865, Td1673.4866) in
                  let Tu84.4857: Unit = const.4829.(Ti1667.4863) <- Td1674.4864 in
                    let Ti1675.4858: Int = 3 in
                      let Td1676.4860: Float = 1. in
                        let Ti1677.4862: Int = 1 in
                          let Td1678.4861: Float = vec.2835.(Ti1677.4862) in
                            let Td1679.4859: Float = (Td1676.4860 / Td1678.4861) in
                              const.4829.(Ti1675.4858) <- Td1679.4859
else
  let Ti1680.4855: Int = 3 in
    let Td1681.4856: Float = 0. in
      const.4829.(Ti1680.4855) <- Td1681.4856 in
                          let Ti1682.4852: Int = 2 in
                            let Td1683.4851: Float = vec.2835.(Ti1682.4852) in
                              let Tb1684.4833: Bool = fiszero(Td1683.4851) in
                                let Ti1685.4834: Int = 0 in
                                  let Tu86.4832: Unit = if Tb1684.4833 == Ti1685.4834 then
  let Ti1686.4843: Int = 4 in
    let Tb1687.4847: Bool = o_isinvert.2662(m.2836) in
      let Ti1688.4850: Int = 2 in
        let Td1689.4849: Float = vec.2835.(Ti1688.4850) in
          let Tb1690.4848: Bool = fisneg(Td1689.4849) in
            let Tb1691.4845: Bool = xor.2599(Tb1687.4847, Tb1690.4848) in
              let Td1692.4846: Float = o_param_c.2670(m.2836) in
                let Td1693.4844: Float = fneg_cond.2604(Tb1691.4845, Td1692.4846) in
                  let Tu85.4837: Unit = const.4829.(Ti1686.4843) <- Td1693.4844 in
                    let Ti1694.4838: Int = 5 in
                      let Td1695.4840: Float = 1. in
                        let Ti1696.4842: Int = 2 in
                          let Td1697.4841: Float = vec.2835.(Ti1696.4842) in
                            let Td1698.4839: Float = (Td1695.4840 / Td1697.4841) in
                              const.4829.(Ti1694.4838) <- Td1698.4839
else
  let Ti1699.4835: Int = 5 in
    let Td1700.4836: Float = 0. in
      const.4829.(Ti1699.4835) <- Td1700.4836 in
                                    const.4829 in
                                                                                                                                                        let rec (setup_surface_table.2837: ([Float], (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((vec.2838: [Float]), (m.2839: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let Ti1608.4827: Int = 4 in
  let Td1609.4828: Float = 0. in
    let const.4789: [Float] = create_float_array(Ti1608.4827, Td1609.4828) in
      let Ti1610.4826: Int = 0 in
        let Td1611.4824: Float = vec.2838.(Ti1610.4826) in
          let Td1612.4825: Float = o_param_a.2666(m.2839) in
            let Td1613.4819: Float = (Td1611.4824 * Td1612.4825) in
              let Ti1614.4823: Int = 1 in
                let Td1615.4821: Float = vec.2838.(Ti1614.4823) in
                  let Td1616.4822: Float = o_param_b.2668(m.2839) in
                    let Td1617.4820: Float = (Td1615.4821 * Td1616.4822) in
                      let Td1618.4814: Float = (Td1613.4819 + Td1617.4820) in
                        let Ti1619.4818: Int = 2 in
                          let Td1620.4816: Float = vec.2838.(Ti1619.4818) in
                            let Td1621.4817: Float = o_param_c.2670(m.2839) in
                              let Td1622.4815: Float = (Td1620.4816 * Td1621.4817) in
                                let d.4790: Float = (Td1618.4814 + Td1622.4815) in
                                  let Tb1623.4792: Bool = fispos(d.4790) in
                                    let Ti1624.4793: Int = 0 in
                                      let Tu92.4791: Unit = if Tb1623.4792 == Ti1624.4793 then
  let Ti1625.4812: Int = 0 in
    let Td1626.4813: Float = 0. in
      const.4789.(Ti1625.4812) <- Td1626.4813
else
  let Ti1627.4809: Int = 0 in
    let Td1628.4811: Float = -1. in
      let Td1629.4810: Float = (Td1628.4811 / d.4790) in
        let Tu91.4794: Unit = const.4789.(Ti1627.4809) <- Td1629.4810 in
          let Ti1630.4805: Int = 1 in
            let Td1631.4808: Float = o_param_a.2666(m.2839) in
              let Td1632.4807: Float = (Td1631.4808 / d.4790) in
                let Td1633.4806: Float = fneg(Td1632.4807) in
                  let Tu90.4795: Unit = const.4789.(Ti1630.4805) <- Td1633.4806 in
                    let Ti1634.4801: Int = 2 in
                      let Td1635.4804: Float = o_param_b.2668(m.2839) in
                        let Td1636.4803: Float = (Td1635.4804 / d.4790) in
                          let Td1637.4802: Float = fneg(Td1636.4803) in
                            let Tu89.4796: Unit = const.4789.(Ti1634.4801) <- Td1637.4802 in
                              let Ti1638.4797: Int = 3 in
                                let Td1639.4800: Float = o_param_c.2670(m.2839) in
                                  let Td1640.4799: Float = (Td1639.4800 / d.4790) in
                                    let Td1641.4798: Float = fneg(Td1640.4799) in
                                      const.4789.(Ti1638.4797) <- Td1641.4798 in
                                        const.4789 in
                                                                                                                                                          let rec (setup_second_table.2840: ([Float], (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> [Float]) ((v.2841: [Float]), (m.2842: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let Ti1541.4787: Int = 5 in
  let Td1542.4788: Float = 0. in
    let const.4710: [Float] = create_float_array(Ti1541.4787, Td1542.4788) in
      let Ti1543.4786: Int = 0 in
        let Td1544.4781: Float = v.2841.(Ti1543.4786) in
          let Ti1545.4785: Int = 1 in
            let Td1546.4782: Float = v.2841.(Ti1545.4785) in
              let Ti1547.4784: Int = 2 in
                let Td1548.4783: Float = v.2841.(Ti1547.4784) in
                  let aa.4711: Float = quadratic.2771(m.2842, Td1544.4781, Td1546.4782, Td1548.4783) in
                    let Ti1549.4780: Int = 0 in
                      let Td1550.4778: Float = v.2841.(Ti1549.4780) in
                        let Td1551.4779: Float = o_param_a.2666(m.2842) in
                          let Td1552.4777: Float = (Td1550.4778 * Td1551.4779) in
                            let c1.4712: Float = fneg(Td1552.4777) in
                              let Ti1553.4776: Int = 1 in
                                let Td1554.4774: Float = v.2841.(Ti1553.4776) in
                                  let Td1555.4775: Float = o_param_b.2668(m.2842) in
                                    let Td1556.4773: Float = (Td1554.4774 * Td1555.4775) in
                                      let c2.4713: Float = fneg(Td1556.4773) in
                                        let Ti1557.4772: Int = 2 in
                                          let Td1558.4770: Float = v.2841.(Ti1557.4772) in
                                            let Td1559.4771: Float = o_param_c.2670(m.2842) in
                                              let Td1560.4769: Float = (Td1558.4770 * Td1559.4771) in
                                                let c3.4714: Float = fneg(Td1560.4769) in
                                                  let Ti1561.4768: Int = 0 in
                                                    let Tu99.4715: Unit = const.4710.(Ti1561.4768) <- aa.4711 in
                                                      let Ti1562.4723: Int = o_isrot.2664(m.2842) in
                                                        let Ti1563.4724: Int = 0 in
                                                          let Tu98.4716: Unit = if Ti1562.4723 == Ti1563.4724 then
  let Ti1564.4767: Int = 1 in
    let Tu96.4763: Unit = const.4710.(Ti1564.4767) <- c1.4712 in
      let Ti1565.4766: Int = 2 in
        let Tu95.4764: Unit = const.4710.(Ti1565.4766) <- c2.4713 in
          let Ti1566.4765: Int = 3 in
            const.4710.(Ti1566.4765) <- c3.4714
else
  let Ti1567.4751: Int = 1 in
    let Ti1568.4762: Int = 2 in
      let Td1569.4760: Float = v.2841.(Ti1568.4762) in
        let Td1570.4761: Float = o_param_r2.2692(m.2842) in
          let Td1571.4755: Float = (Td1569.4760 * Td1570.4761) in
            let Ti1572.4759: Int = 1 in
              let Td1573.4757: Float = v.2841.(Ti1572.4759) in
                let Td1574.4758: Float = o_param_r3.2694(m.2842) in
                  let Td1575.4756: Float = (Td1573.4757 * Td1574.4758) in
                    let Td1576.4754: Float = (Td1571.4755 + Td1575.4756) in
                      let Td1577.4753: Float = fhalf(Td1576.4754) in
                        let Td1578.4752: Float = (c1.4712 - Td1577.4753) in
                          let Tu94.4725: Unit = const.4710.(Ti1567.4751) <- Td1578.4752 in
                            let Ti1579.4739: Int = 2 in
                              let Ti1580.4750: Int = 2 in
                                let Td1581.4748: Float = v.2841.(Ti1580.4750) in
                                  let Td1582.4749: Float = o_param_r1.2690(m.2842) in
                                    let Td1583.4743: Float = (Td1581.4748 * Td1582.4749) in
                                      let Ti1584.4747: Int = 0 in
                                        let Td1585.4745: Float = v.2841.(Ti1584.4747) in
                                          let Td1586.4746: Float = o_param_r3.2694(m.2842) in
                                            let Td1587.4744: Float = (Td1585.4745 * Td1586.4746) in
                                              let Td1588.4742: Float = (Td1583.4743 + Td1587.4744) in
                                                let Td1589.4741: Float = fhalf(Td1588.4742) in
                                                  let Td1590.4740: Float = (c2.4713 - Td1589.4741) in
                                                    let Tu93.4726: Unit = const.4710.(Ti1579.4739) <- Td1590.4740 in
                                                      let Ti1591.4727: Int = 3 in
                                                        let Ti1592.4738: Int = 1 in
                                                          let Td1593.4736: Float = v.2841.(Ti1592.4738) in
                                                            let Td1594.4737: Float = o_param_r1.2690(m.2842) in
                                                              let Td1595.4731: Float = (Td1593.4736 * Td1594.4737) in
                                                                let Ti1596.4735: Int = 0 in
                                                                  let Td1597.4733: Float = v.2841.(Ti1596.4735) in
                                                                    let Td1598.4734: Float = o_param_r2.2692(m.2842) in
                                                                      let Td1599.4732: Float = (Td1597.4733 * Td1598.4734) in
                                                                        let Td1600.4730: Float = (Td1595.4731 + Td1599.4732) in
                                                                          let Td1601.4729: Float = fhalf(Td1600.4730) in
                                                                            let Td1602.4728: Float = (c3.4714 - Td1601.4729) in
                                                                              const.4710.(Ti1591.4727) <- Td1602.4728 in
                                                            let Tb1603.4718: Bool = fiszero(aa.4711) in
                                                              let Ti1604.4719: Int = 0 in
                                                                let Tu97.4717: Unit = if Tb1603.4718 == Ti1604.4719 then
  let Ti1605.4720: Int = 4 in
    let Td1606.4722: Float = 1. in
      let Td1607.4721: Float = (Td1606.4722 / aa.4711) in
        const.4710.(Ti1605.4720) <- Td1607.4721
else
  () in
                                                                  const.4710 in
                                                                                                                                                            let rec (iter_setup_dirvec_constants.2843: (([Float], [[Float]]), Int) -> Unit) ((dirvec.2844: ([Float], [[Float]])), (index.2845: Int)) = let Ti1532.4696: Int = 0 in
  if Ti1532.4696 <= index.2845 then
    let Ta1533.4709: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
      let m.4697: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = Ta1533.4709.(index.2845) in
        let dconst.4698: [[Float]] = d_const.2719(dirvec.2844) in
          let v.4699: [Float] = d_vec.2717(dirvec.2844) in
            let m_shape.4700: Int = o_form.2658(m.4697) in
              let Ti1534.4704: Int = 1 in
                let Tu100.4701: Unit = if m_shape.4700 == Ti1534.4704 then
  let Ta1535.4708: [Float] = setup_rect_table.2834(v.4699, m.4697) in
    dconst.4698.(index.2845) <- Ta1535.4708
else
  let Ti1536.4705: Int = 2 in
    if m_shape.4700 == Ti1536.4705 then
      let Ta1537.4707: [Float] = setup_surface_table.2837(v.4699, m.4697) in
        dconst.4698.(index.2845) <- Ta1537.4707
    else
      let Ta1538.4706: [Float] = setup_second_table.2840(v.4699, m.4697) in
        dconst.4698.(index.2845) <- Ta1538.4706 in
                  let Ti1539.4703: Int = 1 in
                    let Ti1540.4702: Int = (index.2845 - Ti1539.4703) in
                      iter_setup_dirvec_constants.2843(dirvec.2844, Ti1540.4702)
  else
    () in
                                                                                                                                                              let rec (setup_dirvec_constants.2846: (([Float], [[Float]])) -> Unit) ((dirvec.2847: ([Float], [[Float]]))) = let Ta1527.4694: [Int] = [n_objects] in
  let Ti1528.4695: Int = 0 in
    let Ti1529.4692: Int = Ta1527.4694.(Ti1528.4695) in
      let Ti1530.4693: Int = 1 in
        let Ti1531.4691: Int = (Ti1529.4692 - Ti1530.4693) in
          iter_setup_dirvec_constants.2843(dirvec.2847, Ti1531.4691) in
                                                                                                                                                                let rec (setup_startp_constants.2848: ([Float], Int) -> Unit) ((p.2849: [Float]), (index.2850: Int)) = let Ti1487.4643: Int = 0 in
  if Ti1487.4643 <= index.2850 then
    let Ta1488.4690: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
      let obj.4644: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = Ta1488.4690.(index.2850) in
        let sconst.4645: [Float] = o_param_ctbl.2696(obj.4644) in
          let m_shape.4646: Int = o_form.2658(obj.4644) in
            let Ti1489.4685: Int = 0 in
              let Ti1490.4689: Int = 0 in
                let Td1491.4687: Float = p.2849.(Ti1490.4689) in
                  let Td1492.4688: Float = o_param_x.2674(obj.4644) in
                    let Td1493.4686: Float = (Td1491.4687 - Td1492.4688) in
                      let Tu104.4647: Unit = sconst.4645.(Ti1489.4685) <- Td1493.4686 in
                        let Ti1494.4680: Int = 1 in
                          let Ti1495.4684: Int = 1 in
                            let Td1496.4682: Float = p.2849.(Ti1495.4684) in
                              let Td1497.4683: Float = o_param_y.2676(obj.4644) in
                                let Td1498.4681: Float = (Td1496.4682 - Td1497.4683) in
                                  let Tu103.4648: Unit = sconst.4645.(Ti1494.4680) <- Td1498.4681 in
                                    let Ti1499.4675: Int = 2 in
                                      let Ti1500.4679: Int = 2 in
                                        let Td1501.4677: Float = p.2849.(Ti1500.4679) in
                                          let Td1502.4678: Float = o_param_z.2678(obj.4644) in
                                            let Td1503.4676: Float = (Td1501.4677 - Td1502.4678) in
                                              let Tu102.4649: Unit = sconst.4645.(Ti1499.4675) <- Td1503.4676 in
                                                let Ti1504.4653: Int = 2 in
                                                  let Tu101.4650: Unit = if m_shape.4646 == Ti1504.4653 then
  let Ti1505.4666: Int = 3 in
    let Ta1506.4668: [Float] = o_param_abc.2672(obj.4644) in
      let Ti1507.4674: Int = 0 in
        let Td1508.4669: Float = sconst.4645.(Ti1507.4674) in
          let Ti1509.4673: Int = 1 in
            let Td1510.4670: Float = sconst.4645.(Ti1509.4673) in
              let Ti1511.4672: Int = 2 in
                let Td1512.4671: Float = sconst.4645.(Ti1511.4672) in
                  let Td1513.4667: Float = veciprod2.2634(Ta1506.4668, Td1508.4669, Td1510.4670, Td1512.4671) in
                    sconst.4645.(Ti1505.4666) <- Td1513.4667
else
  let Ti1514.4654: Int = 2 in
    if m_shape.4646 <= Ti1514.4654 then
      ()
    else
      let Ti1515.4665: Int = 0 in
        let Td1516.4660: Float = sconst.4645.(Ti1515.4665) in
          let Ti1517.4664: Int = 1 in
            let Td1518.4661: Float = sconst.4645.(Ti1517.4664) in
              let Ti1519.4663: Int = 2 in
                let Td1520.4662: Float = sconst.4645.(Ti1519.4663) in
                  let cc0.4655: Float = quadratic.2771(obj.4644, Td1516.4660, Td1518.4661, Td1520.4662) in
                    let Ti1521.4656: Int = 3 in
                      let Ti1522.4658: Int = 3 in
                        let Td1524.4657: Float = if m_shape.4646 == Ti1522.4658 then
  let Td1523.4659: Float = 1. in
    (cc0.4655 - Td1523.4659)
else
  cc0.4655 in
                          sconst.4645.(Ti1521.4656) <- Td1524.4657 in
                                                    let Ti1525.4652: Int = 1 in
                                                      let Ti1526.4651: Int = (index.2850 - Ti1525.4652) in
                                                        setup_startp_constants.2848(p.2849, Ti1526.4651)
  else
    () in
                                                                                                                                                                  let rec (setup_startp.2851: ([Float]) -> Unit) ((p.2852: [Float])) = let Ta1481.4642: [Float] = [startp_fast] in
  let Tu105.4636: Unit = veccpy.2620(Ta1481.4642, p.2852) in
    let Ta1482.4640: [Int] = [n_objects] in
      let Ti1483.4641: Int = 0 in
        let Ti1484.4638: Int = Ta1482.4640.(Ti1483.4641) in
          let Ti1485.4639: Int = 1 in
            let Ti1486.4637: Int = (Ti1484.4638 - Ti1485.4639) in
              setup_startp_constants.2848(p.2852, Ti1486.4637) in
                                                                                                                                                                    let rec (is_rect_outside.2853: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Bool) ((m.2854: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (p0.2855: Float), (p1.2856: Float), (p2.2857: Float)) = let Ti1467.4634: Int = fabs(p0.2855) in
  let Td1468.4635: Float = o_param_a.2666(m.2854) in
    let Tb1469.4626: Bool = fless(Ti1467.4634, Td1468.4635) in
      let Ti1470.4627: Int = 0 in
        let Ti1477.4622: Int = if Tb1469.4626 == Ti1470.4627 then
  0
else
  let Ti1471.4632: Int = fabs(p1.2856) in
    let Td1472.4633: Float = o_param_b.2668(m.2854) in
      let Tb1473.4628: Bool = fless(Ti1471.4632, Td1472.4633) in
        let Ti1474.4629: Int = 0 in
          if Tb1473.4628 == Ti1474.4629 then
            0
          else
            let Ti1475.4630: Int = fabs(p2.2857) in
              let Td1476.4631: Float = o_param_c.2670(m.2854) in
                fless(Ti1475.4630, Td1476.4631) in
          let Ti1478.4623: Int = 0 in
            if Ti1477.4622 == Ti1478.4623 then
              let Tb1479.4624: Bool = o_isinvert.2662(m.2854) in
                let Ti1480.4625: Int = 0 in
                  if Tb1479.4624 == Ti1480.4625 then
                    1
                  else
                    0
            else
              o_isinvert.2662(m.2854) in
                                                                                                                                                                      let rec (is_plane_outside.2858: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Bool) ((m.2859: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (p0.2860: Float), (p1.2861: Float), (p2.2862: Float)) = let Ta1462.4621: [Float] = o_param_abc.2672(m.2859) in
  let w.4616: Float = veciprod2.2634(Ta1462.4621, p0.2860, p1.2861, p2.2862) in
    let Tb1463.4619: Bool = o_isinvert.2662(m.2859) in
      let Tb1464.4620: Bool = fisneg(w.4616) in
        let Tb1465.4617: Bool = xor.2599(Tb1463.4619, Tb1464.4620) in
          let Ti1466.4618: Int = 0 in
            if Tb1465.4617 == Ti1466.4618 then
              1
            else
              0 in
                                                                                                                                                                        let rec (is_second_outside.2863: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Bool) ((m.2864: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (p0.2865: Float), (p1.2866: Float), (p2.2867: Float)) = let w.4607: Float = quadratic.2771(m.2864, p0.2865, p1.2866, p2.2867) in
  let Ti1455.4613: Int = o_form.2658(m.2864) in
    let Ti1456.4614: Int = 3 in
      let w2.4608: Float = if Ti1455.4613 == Ti1456.4614 then
  let Td1457.4615: Float = 1. in
    (w.4607 - Td1457.4615)
else
  w.4607 in
        let Tb1458.4611: Bool = o_isinvert.2662(m.2864) in
          let Tb1459.4612: Bool = fisneg(w2.4608) in
            let Tb1460.4609: Bool = xor.2599(Tb1458.4611, Tb1459.4612) in
              let Ti1461.4610: Int = 0 in
                if Tb1460.4609 == Ti1461.4610 then
                  1
                else
                  0 in
                                                                                                                                                                          let rec (is_outside.2868: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), Float, Float, Float) -> Bool) ((m.2869: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (q0.2870: Float), (q1.2871: Float), (q2.2872: Float)) = let Td1450.4606: Float = o_param_x.2674(m.2869) in
  let p0.4598: Float = (q0.2870 - Td1450.4606) in
    let Td1451.4605: Float = o_param_y.2676(m.2869) in
      let p1.4599: Float = (q1.2871 - Td1451.4605) in
        let Td1452.4604: Float = o_param_z.2678(m.2869) in
          let p2.4600: Float = (q2.2872 - Td1452.4604) in
            let m_shape.4601: Int = o_form.2658(m.2869) in
              let Ti1453.4602: Int = 1 in
                if m_shape.4601 == Ti1453.4602 then
                  is_rect_outside.2853(m.2869, p0.4598, p1.4599, p2.4600)
                else
                  let Ti1454.4603: Int = 2 in
                    if m_shape.4601 == Ti1454.4603 then
                      is_plane_outside.2858(m.2869, p0.4598, p1.4599, p2.4600)
                    else
                      is_second_outside.2863(m.2869, p0.4598, p1.4599, p2.4600) in
                                                                                                                                                                            let rec (check_all_inside.2873: (Int, [Int], Float, Float, Float) -> Bool) ((ofs.2874: Int), (iand.2875: [Int]), (q0.2876: Float), (q1.2877: Float), (q2.2878: Float)) = let head.4589: Int = iand.2875.(ofs.2874) in
  let Ti1443.4590: Int = -1 in
    if head.4589 == Ti1443.4590 then
      1
    else
      let Ta1444.4596: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
        let Tt1445.4595: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = Ta1444.4596.(head.4589) in
          let Tb1446.4591: Bool = is_outside.2868(Tt1445.4595, q0.2876, q1.2877, q2.2878) in
            let Ti1447.4592: Int = 0 in
              if Tb1446.4591 == Ti1447.4592 then
                let Ti1448.4594: Int = 1 in
                  let Ti1449.4593: Int = (ofs.2874 + Ti1448.4594) in
                    check_all_inside.2873(Ti1449.4593, iand.2875, q0.2876, q1.2877, q2.2878)
              else
                0 in
                                                                                                                                                                              let rec (shadow_check_and_group.2879: (Int, [Int]) -> Bool) ((iand_ofs.2880: Int), (and_group.2881: [Int])) = let Ti1398.4538: Int = and_group.2881.(iand_ofs.2880) in
  let Ti1400.4539: Int = -1 in
    if Ti1398.4538 == Ti1400.4539 then
      0
    else
      let obj.4540: Int = and_group.2881.(iand_ofs.2880) in
        let Tt1401.4586: ([Float], [[Float]]) = light_dirvec: ([Float], [[Float]]) in
          let Ta1402.4587: [Float] = [intersection_point] in
            let t0.4541: Int = solver_fast.2813(obj.4540, Tt1401.4586, Ta1402.4587) in
              let Ta1403.4584: [Int] = [solver_dist] in
                let Ti1404.4585: Int = 0 in
                  let t0p.4542: Float = Ta1403.4584.(Ti1404.4585) in
                    let Ti1405.4582: Int = 0 in
                      let Ti1407.4543: Int = if t0.4541 == Ti1405.4582 then
  0
else
  let Td1406.4583: Float = -0.2 in
    fless(t0p.4542, Td1406.4583) in
                        let Ti1408.4544: Int = 0 in
                          if Ti1407.4543 == Ti1408.4544 then
                            let Ta1409.4581: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
                              let Tt1410.4580: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = Ta1409.4581.(obj.4540) in
                                let Tb1411.4576: Bool = o_isinvert.2662(Tt1410.4580) in
                                  let Ti1412.4577: Int = 0 in
                                    if Tb1411.4576 == Ti1412.4577 then
                                      0
                                    else
                                      let Ti1413.4579: Int = 1 in
                                        let Ti1414.4578: Int = (iand_ofs.2880 + Ti1413.4579) in
                                          shadow_check_and_group.2879(Ti1414.4578, and_group.2881)
                          else
                            let Td1415.4575: Float = 0.01 in
                              let t.4545: Float = (t0p.4542 + Td1415.4575) in
                                let Ta1416.4573: [Float] = [light] in
                                  let Ti1417.4574: Int = 0 in
                                    let Td1418.4572: Float = Ta1416.4573.(Ti1417.4574) in
                                      let Td1419.4568: Float = (Td1418.4572 * t.4545) in
                                        let Ta1420.4570: [Float] = [intersection_point] in
                                          let Ti1421.4571: Int = 0 in
                                            let Td1422.4569: Float = Ta1420.4570.(Ti1421.4571) in
                                              let q0.4546: Float = (Td1419.4568 + Td1422.4569) in
                                                let Ta1423.4566: [Float] = [light] in
                                                  let Ti1424.4567: Int = 1 in
                                                    let Td1425.4565: Float = Ta1423.4566.(Ti1424.4567) in
                                                      let Td1426.4561: Float = (Td1425.4565 * t.4545) in
                                                        let Ta1427.4563: [Float] = [intersection_point] in
                                                          let Ti1428.4564: Int = 1 in
                                                            let Td1429.4562: Float = Ta1427.4563.(Ti1428.4564) in
                                                              let q1.4547: Float = (Td1426.4561 + Td1429.4562) in
                                                                let Ta1430.4559: [Float] = [light] in
                                                                  let Ti1431.4560: Int = 2 in
                                                                    let Td1432.4558: Float = Ta1430.4559.(Ti1431.4560) in
                                                                      let Td1433.4554: Float = (Td1432.4558 * t.4545) in
                                                                        let Ta1434.4556: [Float] = [intersection_point] in
                                                                          let Ti1435.4557: Int = 2 in
                                                                            let Td1436.4555: Float = Ta1434.4556.(Ti1435.4557) in
                                                                              let q2.4548: Float = (Td1433.4554 + Td1436.4555) in
                                                                                let Ti1437.4553: Int = 0 in
                                                                                  let Tb1438.4549: Bool = check_all_inside.2873(Ti1437.4553, and_group.2881, q0.4546, q1.4547, q2.4548) in
                                                                                    let Ti1439.4550: Int = 0 in
                                                                                      if Tb1438.4549 == Ti1439.4550 then
                                                                                        let Ti1440.4552: Int = 1 in
                                                                                          let Ti1441.4551: Int = (iand_ofs.2880 + Ti1440.4552) in
                                                                                            shadow_check_and_group.2879(Ti1441.4551, and_group.2881)
                                                                                      else
                                                                                        1 in
                                                                                                                                                                                let rec (shadow_check_one_or_group.2882: (Int, [Int]) -> Bool) ((ofs.2883: Int), (or_group.2884: [Int])) = let head.4528: Int = or_group.2884.(ofs.2883) in
  let Ti1392.4529: Int = -1 in
    if head.4528 == Ti1392.4529 then
      0
    else
      let Ta1393.4536: [[Int]] = [and_net] in
        let and_group.4530: [Int] = Ta1393.4536.(head.4528) in
          let Ti1394.4535: Int = 0 in
            let shadow_p.4531: Bool = shadow_check_and_group.2879(Ti1394.4535, and_group.4530) in
              let Ti1395.4532: Int = 0 in
                if shadow_p.4531 == Ti1395.4532 then
                  let Ti1396.4534: Int = 1 in
                    let Ti1397.4533: Int = (ofs.2883 + Ti1396.4534) in
                      shadow_check_one_or_group.2882(Ti1397.4533, or_group.2884)
                else
                  1 in
                                                                                                                                                                                  let rec (shadow_check_one_or_matrix.2885: (Int, [[Int]]) -> Bool) ((ofs.2886: Int), (or_matrix.2887: [[Int]])) = let head.4500: [Int] = or_matrix.2887.(ofs.2886) in
  let Ti1366.4527: Int = 0 in
    let range_primitive.4501: Int = head.4500.(Ti1366.4527) in
      let Ti1368.4502: Int = -1 in
        if range_primitive.4501 == Ti1368.4502 then
          0
        else
          let Ti1369.4512: Int = 99 in
            let Ti1382.4503: Int = if range_primitive.4501 == Ti1369.4512 then
  1
else
  let Tt1370.4524: ([Float], [[Float]]) = light_dirvec: ([Float], [[Float]]) in
    let Ta1371.4525: [Float] = [intersection_point] in
      let t.4513: Int = solver_fast.2813(range_primitive.4501, Tt1370.4524, Ta1371.4525) in
        let Ti1372.4514: Int = 0 in
          if t.4513 == Ti1372.4514 then
            0
          else
            let Ta1373.4522: [Int] = [solver_dist] in
              let Ti1374.4523: Int = 0 in
                let Ti1375.4520: Int = Ta1373.4522.(Ti1374.4523) in
                  let Td1376.4521: Float = -0.1 in
                    let Tb1377.4515: Bool = fless(Ti1375.4520, Td1376.4521) in
                      let Ti1378.4516: Int = 0 in
                        if Tb1377.4515 == Ti1378.4516 then
                          0
                        else
                          let Ti1379.4519: Int = 1 in
                            let Tb1380.4517: Bool = shadow_check_one_or_group.2882(Ti1379.4519, head.4500) in
                              let Ti1381.4518: Int = 0 in
                                if Tb1380.4517 == Ti1381.4518 then
                                  0
                                else
                                  1 in
              let Ti1383.4504: Int = 0 in
                if Ti1382.4503 == Ti1383.4504 then
                  let Ti1384.4511: Int = 1 in
                    let Ti1385.4510: Int = (ofs.2886 + Ti1384.4511) in
                      shadow_check_one_or_matrix.2885(Ti1385.4510, or_matrix.2887)
                else
                  let Ti1386.4509: Int = 1 in
                    let Tb1387.4505: Bool = shadow_check_one_or_group.2882(Ti1386.4509, head.4500) in
                      let Ti1388.4506: Int = 0 in
                        if Tb1387.4505 == Ti1388.4506 then
                          let Ti1389.4508: Int = 1 in
                            let Ti1390.4507: Int = (ofs.2886 + Ti1389.4508) in
                              shadow_check_one_or_matrix.2885(Ti1390.4507, or_matrix.2887)
                        else
                          1 in
                                                                                                                                                                                    let rec (solve_each_element.2888: (Int, [Int], [Float]) -> Unit) ((iand_ofs.2889: Int), (and_group.2890: [Int]), (dirvec.2891: [Float])) = let iobj.4438: Int = and_group.2890.(iand_ofs.2889) in
  let Ti1316.4439: Int = -1 in
    if iobj.4438 == Ti1316.4439 then
      ()
    else
      let Ta1317.4498: [Float] = [startp] in
        let t0.4440: Int = solver.2790(iobj.4438, dirvec.2891, Ta1317.4498) in
          let Ti1318.4441: Int = 0 in
            if t0.4440 == Ti1318.4441 then
              let Ta1319.4497: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
                let Tt1320.4496: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = Ta1319.4497.(iobj.4438) in
                  let Tb1321.4492: Bool = o_isinvert.2662(Tt1320.4496) in
                    let Ti1322.4493: Int = 0 in
                      if Tb1321.4492 == Ti1322.4493 then
                        ()
                      else
                        let Ti1323.4495: Int = 1 in
                          let Ti1324.4494: Int = (iand_ofs.2889 + Ti1323.4495) in
                            solve_each_element.2888(Ti1324.4494, and_group.2890, dirvec.2891)
            else
              let Ta1325.4490: [Int] = [solver_dist] in
                let Ti1326.4491: Int = 0 in
                  let t0p.4442: Float = Ta1325.4490.(Ti1326.4491) in
                    let Td1327.4489: Float = 0. in
                      let Tb1328.4446: Bool = fless(Td1327.4489, t0p.4442) in
                        let Ti1329.4447: Int = 0 in
                          let Tu109.4443: Unit = if Tb1328.4446 == Ti1329.4447 then
  ()
else
  let Ta1330.4487: [Float] = [tmin] in
    let Ti1331.4488: Int = 0 in
      let Td1332.4486: Float = Ta1330.4487.(Ti1331.4488) in
        let Tb1333.4448: Bool = fless(t0p.4442, Td1332.4486) in
          let Ti1334.4449: Int = 0 in
            if Tb1333.4448 == Ti1334.4449 then
              ()
            else
              let Td1335.4485: Float = 0.01 in
                let t.4450: Float = (t0p.4442 + Td1335.4485) in
                  let Ti1336.4484: Int = 0 in
                    let Td1337.4483: Float = dirvec.2891.(Ti1336.4484) in
                      let Td1338.4479: Float = (Td1337.4483 * t.4450) in
                        let Ta1339.4481: [Float] = [startp] in
                          let Ti1340.4482: Int = 0 in
                            let Td1341.4480: Float = Ta1339.4481.(Ti1340.4482) in
                              let q0.4451: Float = (Td1338.4479 + Td1341.4480) in
                                let Ti1342.4478: Int = 1 in
                                  let Td1343.4477: Float = dirvec.2891.(Ti1342.4478) in
                                    let Td1344.4473: Float = (Td1343.4477 * t.4450) in
                                      let Ta1345.4475: [Float] = [startp] in
                                        let Ti1346.4476: Int = 1 in
                                          let Td1347.4474: Float = Ta1345.4475.(Ti1346.4476) in
                                            let q1.4452: Float = (Td1344.4473 + Td1347.4474) in
                                              let Ti1348.4472: Int = 2 in
                                                let Td1349.4471: Float = dirvec.2891.(Ti1348.4472) in
                                                  let Td1350.4467: Float = (Td1349.4471 * t.4450) in
                                                    let Ta1351.4469: [Float] = [startp] in
                                                      let Ti1352.4470: Int = 2 in
                                                        let Td1353.4468: Float = Ta1351.4469.(Ti1352.4470) in
                                                          let q2.4453: Float = (Td1350.4467 + Td1353.4468) in
                                                            let Ti1354.4466: Int = 0 in
                                                              let Tb1355.4454: Bool = check_all_inside.2873(Ti1354.4466, and_group.2890, q0.4451, q1.4452, q2.4453) in
                                                                let Ti1356.4455: Int = 0 in
                                                                  if Tb1355.4454 == Ti1356.4455 then
                                                                    ()
                                                                  else
                                                                    let Ta1357.4464: [Float] = [tmin] in
                                                                      let Ti1358.4465: Int = 0 in
                                                                        let Tu108.4456: Unit = Ta1357.4464.(Ti1358.4465) <- t.4450 in
                                                                          let Ta1359.4463: [Float] = [intersection_point] in
                                                                            let Tu107.4457: Unit = vecset.2610(Ta1359.4463, q0.4451, q1.4452, q2.4453) in
                                                                              let Ta1360.4461: [Int] = [intersected_object_id] in
                                                                                let Ti1361.4462: Int = 0 in
                                                                                  let Tu106.4458: Unit = Ta1360.4461.(Ti1361.4462) <- iobj.4438 in
                                                                                    let Ta1362.4459: [Int] = [intsec_rectside] in
                                                                                      let Ti1363.4460: Int = 0 in
                                                                                        Ta1362.4459.(Ti1363.4460) <- t0.4440 in
                            let Ti1364.4445: Int = 1 in
                              let Ti1365.4444: Int = (iand_ofs.2889 + Ti1364.4445) in
                                solve_each_element.2888(Ti1365.4444, and_group.2890, dirvec.2891) in
                                                                                                                                                                                      let rec (solve_one_or_network.2892: (Int, [Int], [Float]) -> Unit) ((ofs.2893: Int), (or_group.2894: [Int]), (dirvec.2895: [Float])) = let head.4429: Int = or_group.2894.(ofs.2893) in
  let Ti1310.4430: Int = -1 in
    if head.4429 == Ti1310.4430 then
      ()
    else
      let Ta1311.4436: [[Int]] = [and_net] in
        let and_group.4431: [Int] = Ta1311.4436.(head.4429) in
          let Ti1312.4435: Int = 0 in
            let Tu110.4432: Unit = solve_each_element.2888(Ti1312.4435, and_group.4431, dirvec.2895) in
              let Ti1313.4434: Int = 1 in
                let Ti1314.4433: Int = (ofs.2893 + Ti1313.4434) in
                  solve_one_or_network.2892(Ti1314.4433, or_group.2894, dirvec.2895) in
                                                                                                                                                                                        let rec (trace_or_matrix.2896: (Int, [[Int]], [Float]) -> Unit) ((ofs.2897: Int), (or_network.2898: [[Int]]), (dirvec.2899: [Float])) = let head.4407: [Int] = or_network.2898.(ofs.2897) in
  let Ti1292.4428: Int = 0 in
    let range_primitive.4408: Int = head.4407.(Ti1292.4428) in
      let Ti1294.4409: Int = -1 in
        if range_primitive.4408 == Ti1294.4409 then
          ()
        else
          let Ti1295.4413: Int = 99 in
            let Tu111.4410: Unit = if range_primitive.4408 == Ti1295.4413 then
  let Ti1296.4426: Int = 1 in
    solve_one_or_network.2892(Ti1296.4426, head.4407, dirvec.2899)
else
  let Ta1297.4425: [Float] = [startp] in
    let t.4414: Int = solver.2790(range_primitive.4408, dirvec.2899, Ta1297.4425) in
      let Ti1298.4415: Int = 0 in
        if t.4414 == Ti1298.4415 then
          ()
        else
          let Ta1299.4423: [Int] = [solver_dist] in
            let Ti1300.4424: Int = 0 in
              let tp.4416: Int = Ta1299.4423.(Ti1300.4424) in
                let Ta1301.4421: [Float] = [tmin] in
                  let Ti1302.4422: Int = 0 in
                    let Td1303.4420: Float = Ta1301.4421.(Ti1302.4422) in
                      let Tb1304.4417: Bool = fless(tp.4416, Td1303.4420) in
                        let Ti1305.4418: Int = 0 in
                          if Tb1304.4417 == Ti1305.4418 then
                            ()
                          else
                            let Ti1306.4419: Int = 1 in
                              solve_one_or_network.2892(Ti1306.4419, head.4407, dirvec.2899) in
              let Ti1307.4412: Int = 1 in
                let Ti1308.4411: Int = (ofs.2897 + Ti1307.4412) in
                  trace_or_matrix.2896(Ti1308.4411, or_network.2898, dirvec.2899) in
                                                                                                                                                                                          let rec (judge_intersection.2900: ([Float]) -> Bool) ((dirvec.2901: [Float])) = let Ta1279.4404: [Float] = [tmin] in
  let Ti1280.4405: Int = 0 in
    let Td1281.4406: Float = 1000000000. in
      let Tu113.4391: Unit = Ta1279.4404.(Ti1280.4405) <- Td1281.4406 in
        let Ti1282.4400: Int = 0 in
          let Ta1283.4402: [[[Int]]] = [or_net] in
            let Ti1284.4403: Int = 0 in
              let Ta1285.4401: [[Int]] = Ta1283.4402.(Ti1284.4403) in
                let Tu112.4392: Unit = trace_or_matrix.2896(Ti1282.4400, Ta1285.4401, dirvec.2901) in
                  let Ta1286.4398: [Float] = [tmin] in
                    let Ti1287.4399: Int = 0 in
                      let t.4393: Int = Ta1286.4398.(Ti1287.4399) in
                        let Td1288.4397: Float = -0.1 in
                          let Tb1289.4394: Bool = fless(Td1288.4397, t.4393) in
                            let Ti1290.4395: Int = 0 in
                              if Tb1289.4394 == Ti1290.4395 then
                                0
                              else
                                let Td1291.4396: Float = 100000000. in
                                  fless(t.4393, Td1291.4396) in
                                                                                                                                                                                            let rec (solve_each_element_fast.2902: (Int, [Int], ([Float], [[Float]])) -> Unit) ((iand_ofs.2903: Int), (and_group.2904: [Int]), (dirvec.2905: ([Float], [[Float]]))) = let vec.4329: [Float] = d_vec.2717(dirvec.2905) in
  let iobj.4330: Int = and_group.2904.(iand_ofs.2903) in
    let Ti1230.4331: Int = -1 in
      if iobj.4330 == Ti1230.4331 then
        ()
      else
        let t0.4332: Int = solver_fast2.2831(iobj.4330, dirvec.2905) in
          let Ti1231.4333: Int = 0 in
            if t0.4332 == Ti1231.4333 then
              let Ta1232.4389: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
                let Tt1233.4388: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = Ta1232.4389.(iobj.4330) in
                  let Tb1234.4384: Bool = o_isinvert.2662(Tt1233.4388) in
                    let Ti1235.4385: Int = 0 in
                      if Tb1234.4384 == Ti1235.4385 then
                        ()
                      else
                        let Ti1236.4387: Int = 1 in
                          let Ti1237.4386: Int = (iand_ofs.2903 + Ti1236.4387) in
                            solve_each_element_fast.2902(Ti1237.4386, and_group.2904, dirvec.2905)
            else
              let Ta1238.4382: [Int] = [solver_dist] in
                let Ti1239.4383: Int = 0 in
                  let t0p.4334: Float = Ta1238.4382.(Ti1239.4383) in
                    let Td1240.4381: Float = 0. in
                      let Tb1241.4338: Bool = fless(Td1240.4381, t0p.4334) in
                        let Ti1242.4339: Int = 0 in
                          let Tu117.4335: Unit = if Tb1241.4338 == Ti1242.4339 then
  ()
else
  let Ta1243.4379: [Float] = [tmin] in
    let Ti1244.4380: Int = 0 in
      let Td1245.4378: Float = Ta1243.4379.(Ti1244.4380) in
        let Tb1246.4340: Bool = fless(t0p.4334, Td1245.4378) in
          let Ti1247.4341: Int = 0 in
            if Tb1246.4340 == Ti1247.4341 then
              ()
            else
              let Td1248.4377: Float = 0.01 in
                let t.4342: Float = (t0p.4334 + Td1248.4377) in
                  let Ti1249.4376: Int = 0 in
                    let Td1250.4375: Float = vec.4329.(Ti1249.4376) in
                      let Td1251.4371: Float = (Td1250.4375 * t.4342) in
                        let Ta1252.4373: [Float] = [startp_fast] in
                          let Ti1253.4374: Int = 0 in
                            let Td1254.4372: Float = Ta1252.4373.(Ti1253.4374) in
                              let q0.4343: Float = (Td1251.4371 + Td1254.4372) in
                                let Ti1255.4370: Int = 1 in
                                  let Td1256.4369: Float = vec.4329.(Ti1255.4370) in
                                    let Td1257.4365: Float = (Td1256.4369 * t.4342) in
                                      let Ta1258.4367: [Float] = [startp_fast] in
                                        let Ti1259.4368: Int = 1 in
                                          let Td1260.4366: Float = Ta1258.4367.(Ti1259.4368) in
                                            let q1.4344: Float = (Td1257.4365 + Td1260.4366) in
                                              let Ti1261.4364: Int = 2 in
                                                let Td1262.4363: Float = vec.4329.(Ti1261.4364) in
                                                  let Td1263.4359: Float = (Td1262.4363 * t.4342) in
                                                    let Ta1264.4361: [Float] = [startp_fast] in
                                                      let Ti1265.4362: Int = 2 in
                                                        let Td1266.4360: Float = Ta1264.4361.(Ti1265.4362) in
                                                          let q2.4345: Float = (Td1263.4359 + Td1266.4360) in
                                                            let Ti1267.4358: Int = 0 in
                                                              let Tb1268.4346: Bool = check_all_inside.2873(Ti1267.4358, and_group.2904, q0.4343, q1.4344, q2.4345) in
                                                                let Ti1269.4347: Int = 0 in
                                                                  if Tb1268.4346 == Ti1269.4347 then
                                                                    ()
                                                                  else
                                                                    let Ta1270.4356: [Float] = [tmin] in
                                                                      let Ti1271.4357: Int = 0 in
                                                                        let Tu116.4348: Unit = Ta1270.4356.(Ti1271.4357) <- t.4342 in
                                                                          let Ta1272.4355: [Float] = [intersection_point] in
                                                                            let Tu115.4349: Unit = vecset.2610(Ta1272.4355, q0.4343, q1.4344, q2.4345) in
                                                                              let Ta1273.4353: [Int] = [intersected_object_id] in
                                                                                let Ti1274.4354: Int = 0 in
                                                                                  let Tu114.4350: Unit = Ta1273.4353.(Ti1274.4354) <- iobj.4330 in
                                                                                    let Ta1275.4351: [Int] = [intsec_rectside] in
                                                                                      let Ti1276.4352: Int = 0 in
                                                                                        Ta1275.4351.(Ti1276.4352) <- t0.4332 in
                            let Ti1277.4337: Int = 1 in
                              let Ti1278.4336: Int = (iand_ofs.2903 + Ti1277.4337) in
                                solve_each_element_fast.2902(Ti1278.4336, and_group.2904, dirvec.2905) in
                                                                                                                                                                                              let rec (solve_one_or_network_fast.2906: (Int, [Int], ([Float], [[Float]])) -> Unit) ((ofs.2907: Int), (or_group.2908: [Int]), (dirvec.2909: ([Float], [[Float]]))) = let head.4320: Int = or_group.2908.(ofs.2907) in
  let Ti1224.4321: Int = -1 in
    if head.4320 == Ti1224.4321 then
      ()
    else
      let Ta1225.4327: [[Int]] = [and_net] in
        let and_group.4322: [Int] = Ta1225.4327.(head.4320) in
          let Ti1226.4326: Int = 0 in
            let Tu118.4323: Unit = solve_each_element_fast.2902(Ti1226.4326, and_group.4322, dirvec.2909) in
              let Ti1227.4325: Int = 1 in
                let Ti1228.4324: Int = (ofs.2907 + Ti1227.4325) in
                  solve_one_or_network_fast.2906(Ti1228.4324, or_group.2908, dirvec.2909) in
                                                                                                                                                                                                let rec (trace_or_matrix_fast.2910: (Int, [[Int]], ([Float], [[Float]])) -> Unit) ((ofs.2911: Int), (or_network.2912: [[Int]]), (dirvec.2913: ([Float], [[Float]]))) = let head.4299: [Int] = or_network.2912.(ofs.2911) in
  let Ti1207.4319: Int = 0 in
    let range_primitive.4300: Int = head.4299.(Ti1207.4319) in
      let Ti1209.4301: Int = -1 in
        if range_primitive.4300 == Ti1209.4301 then
          ()
        else
          let Ti1210.4305: Int = 99 in
            let Tu119.4302: Unit = if range_primitive.4300 == Ti1210.4305 then
  let Ti1211.4317: Int = 1 in
    solve_one_or_network_fast.2906(Ti1211.4317, head.4299, dirvec.2913)
else
  let t.4306: Int = solver_fast2.2831(range_primitive.4300, dirvec.2913) in
    let Ti1212.4307: Int = 0 in
      if t.4306 == Ti1212.4307 then
        ()
      else
        let Ta1213.4315: [Int] = [solver_dist] in
          let Ti1214.4316: Int = 0 in
            let tp.4308: Int = Ta1213.4315.(Ti1214.4316) in
              let Ta1215.4313: [Float] = [tmin] in
                let Ti1216.4314: Int = 0 in
                  let Td1217.4312: Float = Ta1215.4313.(Ti1216.4314) in
                    let Tb1218.4309: Bool = fless(tp.4308, Td1217.4312) in
                      let Ti1219.4310: Int = 0 in
                        if Tb1218.4309 == Ti1219.4310 then
                          ()
                        else
                          let Ti1220.4311: Int = 1 in
                            solve_one_or_network_fast.2906(Ti1220.4311, head.4299, dirvec.2913) in
              let Ti1221.4304: Int = 1 in
                let Ti1222.4303: Int = (ofs.2911 + Ti1221.4304) in
                  trace_or_matrix_fast.2910(Ti1222.4303, or_network.2912, dirvec.2913) in
                                                                                                                                                                                                  let rec (judge_intersection_fast.2914: (([Float], [[Float]])) -> Bool) ((dirvec.2915: ([Float], [[Float]]))) = let Ta1194.4296: [Float] = [tmin] in
  let Ti1195.4297: Int = 0 in
    let Td1196.4298: Float = 1000000000. in
      let Tu121.4283: Unit = Ta1194.4296.(Ti1195.4297) <- Td1196.4298 in
        let Ti1197.4292: Int = 0 in
          let Ta1198.4294: [[[Int]]] = [or_net] in
            let Ti1199.4295: Int = 0 in
              let Ta1200.4293: [[Int]] = Ta1198.4294.(Ti1199.4295) in
                let Tu120.4284: Unit = trace_or_matrix_fast.2910(Ti1197.4292, Ta1200.4293, dirvec.2915) in
                  let Ta1201.4290: [Float] = [tmin] in
                    let Ti1202.4291: Int = 0 in
                      let t.4285: Int = Ta1201.4290.(Ti1202.4291) in
                        let Td1203.4289: Float = -0.1 in
                          let Tb1204.4286: Bool = fless(Td1203.4289, t.4285) in
                            let Ti1205.4287: Int = 0 in
                              if Tb1204.4286 == Ti1205.4287 then
                                0
                              else
                                let Td1206.4288: Float = 100000000. in
                                  fless(t.4285, Td1206.4288) in
                                                                                                                                                                                                    let rec (get_nvector_rect.2916: ([Float]) -> Unit) ((dirvec.2917: [Float])) = let Ta1183.4281: [Int] = [intsec_rectside] in
  let Ti1184.4282: Int = 0 in
    let rectside.4270: Int = Ta1183.4281.(Ti1184.4282) in
      let Ta1185.4280: [Float] = [nvector] in
        let Tu122.4271: Unit = vecbzero.2618(Ta1185.4280) in
          let Ta1186.4272: [Float] = [nvector] in
            let Ti1187.4279: Int = 1 in
              let Ti1188.4273: Int = (rectside.4270 - Ti1187.4279) in
                let Ti1189.4278: Int = 1 in
                  let Ti1190.4277: Int = (rectside.4270 - Ti1189.4278) in
                    let Td1191.4276: Float = dirvec.2917.(Ti1190.4277) in
                      let Td1192.4275: Float = sgn.2602(Td1191.4276) in
                        let Td1193.4274: Float = fneg(Td1192.4275) in
                          Ta1186.4272.(Ti1188.4273) <- Td1193.4274 in
                                                                                                                                                                                                      let rec (get_nvector_plane.2918: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Unit) ((m.2919: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let Ta1171.4266: [Float] = [nvector] in
  let Ti1172.4267: Int = 0 in
    let Td1173.4269: Float = o_param_a.2666(m.2919) in
      let Td1174.4268: Float = fneg(Td1173.4269) in
        let Tu124.4256: Unit = Ta1171.4266.(Ti1172.4267) <- Td1174.4268 in
          let Ta1175.4262: [Float] = [nvector] in
            let Ti1176.4263: Int = 1 in
              let Td1177.4265: Float = o_param_b.2668(m.2919) in
                let Td1178.4264: Float = fneg(Td1177.4265) in
                  let Tu123.4257: Unit = Ta1175.4262.(Ti1176.4263) <- Td1178.4264 in
                    let Ta1179.4258: [Float] = [nvector] in
                      let Ti1180.4259: Int = 2 in
                        let Td1181.4261: Float = o_param_c.2670(m.2919) in
                          let Td1182.4260: Float = fneg(Td1181.4261) in
                            Ta1179.4258.(Ti1180.4259) <- Td1182.4260 in
                                                                                                                                                                                                        let rec (get_nvector_second.2920: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Unit) ((m.2921: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let Ta1119.4254: [Float] = [intersection_point] in
  let Ti1120.4255: Int = 0 in
    let Td1121.4252: Float = Ta1119.4254.(Ti1120.4255) in
      let Td1122.4253: Float = o_param_x.2674(m.2921) in
        let p0.4193: Float = (Td1121.4252 - Td1122.4253) in
          let Ta1123.4250: [Float] = [intersection_point] in
            let Ti1124.4251: Int = 1 in
              let Td1125.4248: Float = Ta1123.4250.(Ti1124.4251) in
                let Td1126.4249: Float = o_param_y.2676(m.2921) in
                  let p1.4194: Float = (Td1125.4248 - Td1126.4249) in
                    let Ta1127.4246: [Float] = [intersection_point] in
                      let Ti1128.4247: Int = 2 in
                        let Td1129.4244: Float = Ta1127.4246.(Ti1128.4247) in
                          let Td1130.4245: Float = o_param_z.2678(m.2921) in
                            let p2.4195: Float = (Td1129.4244 - Td1130.4245) in
                              let Td1131.4243: Float = o_param_a.2666(m.2921) in
                                let d0.4196: Float = (p0.4193 * Td1131.4243) in
                                  let Td1132.4242: Float = o_param_b.2668(m.2921) in
                                    let d1.4197: Float = (p1.4194 * Td1132.4242) in
                                      let Td1133.4241: Float = o_param_c.2670(m.2921) in
                                        let d2.4198: Float = (p2.4195 * Td1133.4241) in
                                          let Ti1134.4202: Int = o_isrot.2664(m.2921) in
                                            let Ti1135.4203: Int = 0 in
                                              let Tu129.4199: Unit = if Ti1134.4202 == Ti1135.4203 then
  let Ta1136.4239: [Float] = [nvector] in
    let Ti1137.4240: Int = 0 in
      let Tu126.4233: Unit = Ta1136.4239.(Ti1137.4240) <- d0.4196 in
        let Ta1138.4237: [Float] = [nvector] in
          let Ti1139.4238: Int = 1 in
            let Tu125.4234: Unit = Ta1138.4237.(Ti1139.4238) <- d1.4197 in
              let Ta1140.4235: [Float] = [nvector] in
                let Ti1141.4236: Int = 2 in
                  Ta1140.4235.(Ti1141.4236) <- d2.4198
else
  let Ta1142.4224: [Float] = [nvector] in
    let Ti1143.4225: Int = 0 in
      let Td1144.4232: Float = o_param_r3.2694(m.2921) in
        let Td1145.4229: Float = (p1.4194 * Td1144.4232) in
          let Td1146.4231: Float = o_param_r2.2692(m.2921) in
            let Td1147.4230: Float = (p2.4195 * Td1146.4231) in
              let Td1148.4228: Float = (Td1145.4229 + Td1147.4230) in
                let Td1149.4227: Float = fhalf(Td1148.4228) in
                  let Td1150.4226: Float = (d0.4196 + Td1149.4227) in
                    let Tu128.4204: Unit = Ta1142.4224.(Ti1143.4225) <- Td1150.4226 in
                      let Ta1151.4215: [Float] = [nvector] in
                        let Ti1152.4216: Int = 1 in
                          let Td1153.4223: Float = o_param_r3.2694(m.2921) in
                            let Td1154.4220: Float = (p0.4193 * Td1153.4223) in
                              let Td1155.4222: Float = o_param_r1.2690(m.2921) in
                                let Td1156.4221: Float = (p2.4195 * Td1155.4222) in
                                  let Td1157.4219: Float = (Td1154.4220 + Td1156.4221) in
                                    let Td1158.4218: Float = fhalf(Td1157.4219) in
                                      let Td1159.4217: Float = (d1.4197 + Td1158.4218) in
                                        let Tu127.4205: Unit = Ta1151.4215.(Ti1152.4216) <- Td1159.4217 in
                                          let Ta1160.4206: [Float] = [nvector] in
                                            let Ti1161.4207: Int = 2 in
                                              let Td1162.4214: Float = o_param_r2.2692(m.2921) in
                                                let Td1163.4211: Float = (p0.4193 * Td1162.4214) in
                                                  let Td1164.4213: Float = o_param_r1.2690(m.2921) in
                                                    let Td1165.4212: Float = (p1.4194 * Td1164.4213) in
                                                      let Td1166.4210: Float = (Td1163.4211 + Td1165.4212) in
                                                        let Td1167.4209: Float = fhalf(Td1166.4210) in
                                                          let Td1168.4208: Float = (d2.4198 + Td1167.4209) in
                                                            Ta1160.4206.(Ti1161.4207) <- Td1168.4208 in
                                                let Ta1169.4200: [Float] = [nvector] in
                                                  let Tb1170.4201: Bool = o_isinvert.2662(m.2921) in
                                                    vecunit_sgn.2628(Ta1169.4200, Tb1170.4201) in
                                                                                                                                                                                                          let rec (get_nvector.2922: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float]) -> Unit) ((m.2923: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (dirvec.2924: [Float])) = let m_shape.4190: Int = o_form.2658(m.2923) in
  let Ti1117.4191: Int = 1 in
    if m_shape.4190 == Ti1117.4191 then
      get_nvector_rect.2916(dirvec.2924)
    else
      let Ti1118.4192: Int = 2 in
        if m_shape.4190 == Ti1118.4192 then
          get_nvector_plane.2918(m.2923)
        else
          get_nvector_second.2920(m.2923) in
                                                                                                                                                                                                            let rec (utexture.2925: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]), [Float]) -> Unit) ((m.2926: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])), (p.2927: [Float])) = let m_tex.4027: Int = o_texturetype.2656(m.2926) in
  let Ta984.4187: [Float] = [texture_color] in
    let Ti985.4188: Int = 0 in
      let Ti986.4189: Int = o_color_red.2684(m.2926) in
        let Tu134.4028: Unit = Ta984.4187.(Ti985.4188) <- Ti986.4189 in
          let Ta987.4184: [Float] = [texture_color] in
            let Ti988.4185: Int = 1 in
              let Ti989.4186: Int = o_color_green.2686(m.2926) in
                let Tu133.4029: Unit = Ta987.4184.(Ti988.4185) <- Ti989.4186 in
                  let Ta990.4181: [Float] = [texture_color] in
                    let Ti991.4182: Int = 2 in
                      let Ti992.4183: Int = o_color_blue.2688(m.2926) in
                        let Tu132.4030: Unit = Ta990.4181.(Ti991.4182) <- Ti992.4183 in
                          let Ti993.4031: Int = 1 in
                            if m_tex.4027 == Ti993.4031 then
                              let Ti994.4180: Int = 0 in
                                let Td995.4178: Float = p.2927.(Ti994.4180) in
                                  let Td996.4179: Float = o_param_x.2674(m.2926) in
                                    let w1.4151: Float = (Td995.4178 - Td996.4179) in
                                      let Td997.4177: Float = 0.05 in
                                        let Td998.4176: Float = (w1.4151 * Td997.4177) in
                                          let Td999.4174: Float = floor(Td998.4176) in
                                            let Td1000.4175: Float = 20. in
                                              let d1.4171: Float = (Td999.4174 * Td1000.4175) in
                                                let Td1001.4172: Float = (w1.4151 - d1.4171) in
                                                  let Td1002.4173: Float = 10. in
                                                    let flag1.4152: Bool = fless(Td1001.4172, Td1002.4173) in
                                                      let Ti1003.4170: Int = 2 in
                                                        let Td1004.4168: Float = p.2927.(Ti1003.4170) in
                                                          let Td1005.4169: Float = o_param_z.2678(m.2926) in
                                                            let w3.4153: Float = (Td1004.4168 - Td1005.4169) in
                                                              let Td1006.4167: Float = 0.05 in
                                                                let Td1007.4166: Float = (w3.4153 * Td1006.4167) in
                                                                  let Td1008.4164: Float = floor(Td1007.4166) in
                                                                    let Td1009.4165: Float = 20. in
                                                                      let d2.4161: Float = (Td1008.4164 * Td1009.4165) in
                                                                        let Td1010.4162: Float = (w3.4153 - d2.4161) in
                                                                          let Td1011.4163: Float = 10. in
                                                                            let flag2.4154: Bool = fless(Td1010.4162, Td1011.4163) in
                                                                              let Ta1012.4155: [Float] = [texture_color] in
                                                                                let Ti1013.4156: Int = 1 in
                                                                                  let Ti1014.4158: Int = 0 in
                                                                                    let Td1017.4157: Float = if flag1.4152 == Ti1014.4158 then
  let Ti1015.4160: Int = 0 in
    if flag2.4154 == Ti1015.4160 then
      255.
    else
      0.
else
  let Ti1016.4159: Int = 0 in
    if flag2.4154 == Ti1016.4159 then
      0.
    else
      255. in
                                                                                      Ta1012.4155.(Ti1013.4156) <- Td1017.4157
                            else
                              let Ti1018.4032: Int = 2 in
                                if m_tex.4027 == Ti1018.4032 then
                                  let Ti1019.4150: Int = 1 in
                                    let Td1020.4148: Float = p.2927.(Ti1019.4150) in
                                      let Td1021.4149: Float = 0.25 in
                                        let Td1022.4147: Float = (Td1020.4148 * Td1021.4149) in
                                          let Td1023.4146: Float = sin(Td1022.4147) in
                                            let w2.4134: Float = fsqr(Td1023.4146) in
                                              let Ta1024.4142: [Float] = [texture_color] in
                                                let Ti1025.4143: Int = 0 in
                                                  let Td1026.4145: Float = 255. in
                                                    let Td1027.4144: Float = (Td1026.4145 * w2.4134) in
                                                      let Tu130.4135: Unit = Ta1024.4142.(Ti1025.4143) <- Td1027.4144 in
                                                        let Ta1028.4136: [Float] = [texture_color] in
                                                          let Ti1029.4137: Int = 1 in
                                                            let Td1030.4139: Float = 255. in
                                                              let Td1031.4141: Float = 1. in
                                                                let Td1032.4140: Float = (Td1031.4141 - w2.4134) in
                                                                  let Td1033.4138: Float = (Td1030.4139 * Td1032.4140) in
                                                                    Ta1028.4136.(Ti1029.4137) <- Td1033.4138
                                else
                                  let Ti1034.4033: Int = 3 in
                                    if m_tex.4027 == Ti1034.4033 then
                                      let Ti1035.4133: Int = 0 in
                                        let Td1036.4131: Float = p.2927.(Ti1035.4133) in
                                          let Td1037.4132: Float = o_param_x.2674(m.2926) in
                                            let w1.4103: Float = (Td1036.4131 - Td1037.4132) in
                                              let Ti1038.4130: Int = 2 in
                                                let Td1039.4128: Float = p.2927.(Ti1038.4130) in
                                                  let Td1040.4129: Float = o_param_z.2678(m.2926) in
                                                    let w3.4104: Float = (Td1039.4128 - Td1040.4129) in
                                                      let Td1041.4126: Float = fsqr(w1.4103) in
                                                        let Td1042.4127: Float = fsqr(w3.4104) in
                                                          let Td1043.4125: Float = (Td1041.4126 + Td1042.4127) in
                                                            let Td1044.4123: Float = sqrt(Td1043.4125) in
                                                              let Td1045.4124: Float = 10. in
                                                                let w2.4105: Float = (Td1044.4123 / Td1045.4124) in
                                                                  let Td1046.4122: Float = floor(w2.4105) in
                                                                    let Td1047.4120: Float = (w2.4105 - Td1046.4122) in
                                                                      let Td1048.4121: Float = 3.1415927 in
                                                                        let w4.4106: Float = (Td1047.4120 * Td1048.4121) in
                                                                          let Td1049.4119: Float = cos(w4.4106) in
                                                                            let cws.4107: Float = fsqr(Td1049.4119) in
                                                                              let Ta1050.4115: [Float] = [texture_color] in
                                                                                let Ti1051.4116: Int = 1 in
                                                                                  let Td1052.4118: Float = 255. in
                                                                                    let Td1053.4117: Float = (cws.4107 * Td1052.4118) in
                                                                                      let Tu131.4108: Unit = Ta1050.4115.(Ti1051.4116) <- Td1053.4117 in
                                                                                        let Ta1054.4109: [Float] = [texture_color] in
                                                                                          let Ti1055.4110: Int = 2 in
                                                                                            let Td1056.4114: Float = 1. in
                                                                                              let Td1057.4112: Float = (Td1056.4114 - cws.4107) in
                                                                                                let Td1058.4113: Float = 255. in
                                                                                                  let Td1059.4111: Float = (Td1057.4112 * Td1058.4113) in
                                                                                                    Ta1054.4109.(Ti1055.4110) <- Td1059.4111
                                    else
                                      let Ti1060.4034: Int = 4 in
                                        if m_tex.4027 == Ti1060.4034 then
                                          let Ti1061.4102: Int = 0 in
                                            let Td1062.4100: Float = p.2927.(Ti1061.4102) in
                                              let Td1063.4101: Float = o_param_x.2674(m.2926) in
                                                let Td1064.4097: Float = (Td1062.4100 - Td1063.4101) in
                                                  let Td1065.4099: Float = o_param_a.2666(m.2926) in
                                                    let Td1066.4098: Float = sqrt(Td1065.4099) in
                                                      let w1.4035: Float = (Td1064.4097 * Td1066.4098) in
                                                        let Ti1067.4096: Int = 2 in
                                                          let Td1068.4094: Float = p.2927.(Ti1067.4096) in
                                                            let Td1069.4095: Float = o_param_z.2678(m.2926) in
                                                              let Td1070.4091: Float = (Td1068.4094 - Td1069.4095) in
                                                                let Td1071.4093: Float = o_param_c.2670(m.2926) in
                                                                  let Td1072.4092: Float = sqrt(Td1071.4093) in
                                                                    let w3.4036: Float = (Td1070.4091 * Td1072.4092) in
                                                                      let Td1073.4089: Float = fsqr(w1.4035) in
                                                                        let Td1074.4090: Float = fsqr(w3.4036) in
                                                                          let w4.4037: Float = (Td1073.4089 + Td1074.4090) in
                                                                            let Ti1075.4087: Int = fabs(w1.4035) in
                                                                              let Td1076.4088: Float = 0.0001 in
                                                                                let Tb1077.4079: Bool = fless(Ti1075.4087, Td1076.4088) in
                                                                                  let Ti1078.4080: Int = 0 in
                                                                                    let w7.4038: Float = if Tb1077.4079 == Ti1078.4080 then
  let Td1079.4086: Float = (w3.4036 / w1.4035) in
    let w5.4081: Int = fabs(Td1079.4086) in
      let Td1080.4084: Float = atan(w5.4081) in
        let Td1081.4085: Float = 30. in
          let Td1082.4082: Float = (Td1080.4084 * Td1081.4085) in
            let Td1083.4083: Float = 3.1415927 in
              (Td1082.4082 / Td1083.4083)
else
  15. in
                                                                                      let Td1084.4078: Float = floor(w7.4038) in
                                                                                        let w9.4039: Float = (w7.4038 - Td1084.4078) in
                                                                                          let Ti1085.4077: Int = 1 in
                                                                                            let Td1086.4075: Float = p.2927.(Ti1085.4077) in
                                                                                              let Td1087.4076: Float = o_param_y.2676(m.2926) in
                                                                                                let Td1088.4072: Float = (Td1086.4075 - Td1087.4076) in
                                                                                                  let Td1089.4074: Float = o_param_b.2668(m.2926) in
                                                                                                    let Td1090.4073: Float = sqrt(Td1089.4074) in
                                                                                                      let w2.4040: Float = (Td1088.4072 * Td1090.4073) in
                                                                                                        let Ti1091.4070: Int = fabs(w4.4037) in
                                                                                                          let Td1092.4071: Float = 0.0001 in
                                                                                                            let Tb1093.4062: Bool = fless(Ti1091.4070, Td1092.4071) in
                                                                                                              let Ti1094.4063: Int = 0 in
                                                                                                                let w8.4041: Float = if Tb1093.4062 == Ti1094.4063 then
  let Td1095.4069: Float = (w2.4040 / w4.4037) in
    let w6.4064: Int = fabs(Td1095.4069) in
      let Td1096.4067: Float = atan(w6.4064) in
        let Td1097.4068: Float = 30. in
          let Td1098.4065: Float = (Td1096.4067 * Td1097.4068) in
            let Td1099.4066: Float = 3.1415927 in
              (Td1098.4065 / Td1099.4066)
else
  15. in
                                                                                                                  let Td1100.4061: Float = floor(w8.4041) in
                                                                                                                    let w10.4042: Float = (w8.4041 - Td1100.4061) in
                                                                                                                      let Td1101.4057: Float = 0.15 in
                                                                                                                        let Td1102.4060: Float = 0.5 in
                                                                                                                          let Td1103.4059: Float = (Td1102.4060 - w9.4039) in
                                                                                                                            let Td1104.4058: Float = fsqr(Td1103.4059) in
                                                                                                                              let Td1105.4053: Float = (Td1101.4057 - Td1104.4058) in
                                                                                                                                let Td1106.4056: Float = 0.5 in
                                                                                                                                  let Td1107.4055: Float = (Td1106.4056 - w10.4042) in
                                                                                                                                    let Td1108.4054: Float = fsqr(Td1107.4055) in
                                                                                                                                      let w11.4043: Float = (Td1105.4053 - Td1108.4054) in
                                                                                                                                        let Tb1109.4051: Bool = fisneg(w11.4043) in
                                                                                                                                          let Ti1110.4052: Int = 0 in
                                                                                                                                            let w12.4044: Float = if Tb1109.4051 == Ti1110.4052 then
  w11.4043
else
  0. in
                                                                                                                                              let Ta1111.4045: [Float] = [texture_color] in
                                                                                                                                                let Ti1112.4046: Int = 2 in
                                                                                                                                                  let Td1113.4050: Float = 255. in
                                                                                                                                                    let Td1114.4048: Float = (Td1113.4050 * w12.4044) in
                                                                                                                                                      let Td1115.4049: Float = 0.3 in
                                                                                                                                                        let Td1116.4047: Float = (Td1114.4048 / Td1115.4049) in
                                                                                                                                                          Ta1111.4045.(Ti1112.4046) <- Td1116.4047
                                        else
                                          () in
                                                                                                                                                                                                              let rec (add_light.2928: (Float, Float, Float) -> Unit) ((bright.2929: Float), (hilight.2930: Float), (hilight_scale.2931: Float)) = let Tb958.4023: Bool = fispos(bright.2929) in
  let Ti959.4024: Int = 0 in
    let Tu137.3997: Unit = if Tb958.4023 == Ti959.4024 then
  ()
else
  let Ta960.4025: [Float] = [rgb] in
    let Ta961.4026: [Float] = [texture_color] in
      vecaccum.2639(Ta960.4025, bright.2929, Ta961.4026) in
      let Tb962.3998: Bool = fispos(hilight.2930) in
        let Ti963.3999: Int = 0 in
          if Tb962.3998 == Ti963.3999 then
            ()
          else
            let Td964.4022: Float = fsqr(hilight.2930) in
              let Td965.4021: Float = fsqr(Td964.4022) in
                let ihl.4000: Float = (Td965.4021 * hilight_scale.2931) in
                  let Ta966.4015: [Float] = [rgb] in
                    let Ti967.4016: Int = 0 in
                      let Ta968.4019: [Float] = [rgb] in
                        let Ti969.4020: Int = 0 in
                          let Td970.4018: Float = Ta968.4019.(Ti969.4020) in
                            let Td971.4017: Float = (Td970.4018 + ihl.4000) in
                              let Tu136.4001: Unit = Ta966.4015.(Ti967.4016) <- Td971.4017 in
                                let Ta972.4009: [Float] = [rgb] in
                                  let Ti973.4010: Int = 1 in
                                    let Ta974.4013: [Float] = [rgb] in
                                      let Ti975.4014: Int = 1 in
                                        let Td976.4012: Float = Ta974.4013.(Ti975.4014) in
                                          let Td977.4011: Float = (Td976.4012 + ihl.4000) in
                                            let Tu135.4002: Unit = Ta972.4009.(Ti973.4010) <- Td977.4011 in
                                              let Ta978.4003: [Float] = [rgb] in
                                                let Ti979.4004: Int = 2 in
                                                  let Ta980.4007: [Float] = [rgb] in
                                                    let Ti981.4008: Int = 2 in
                                                      let Td982.4006: Float = Ta980.4007.(Ti981.4008) in
                                                        let Td983.4005: Float = (Td982.4006 + ihl.4000) in
                                                          Ta978.4003.(Ti979.4004) <- Td983.4005 in
                                                                                                                                                                                                                let rec (trace_reflections.2932: (Int, Float, Float, [Float]) -> Unit) ((index.2933: Int), (diffuse.2934: Float), (hilight_scale.2935: Float), (dirvec.2936: [Float])) = let Ti932.3963: Int = 0 in
  if Ti932.3963 <= index.2933 then
    let Ta933.3996: [(Int, ([Float], [[Float]]), Float)] = [reflections] in
      let rinfo.3964: (Int, ([Float], [[Float]]), Float) = Ta933.3996.(index.2933) in
        let dvec.3965: ([Float], [[Float]]) = r_dvec.2723(rinfo.3964) in
          let Tb934.3969: Bool = judge_intersection_fast.2914(dvec.3965) in
            let Ti935.3970: Int = 0 in
              let Tu138.3966: Unit = if Tb934.3969 == Ti935.3970 then
  ()
else
  let Ta936.3994: [Int] = [intersected_object_id] in
    let Ti937.3995: Int = 0 in
      let Ti938.3992: Int = Ta936.3994.(Ti937.3995) in
        let Ti939.3993: Int = 4 in
          let Ti940.3988: Int = (Ti938.3992 * Ti939.3993) in
            let Ta941.3990: [Int] = [intsec_rectside] in
              let Ti942.3991: Int = 0 in
                let Ti943.3989: Int = Ta941.3990.(Ti942.3991) in
                  let surface_id.3971: Int = (Ti940.3988 + Ti943.3989) in
                    let Ti944.3972: Int = r_surface_id.2721(rinfo.3964) in
                      if surface_id.3971 == Ti944.3972 then
                        let Ti945.3984: Int = 0 in
                          let Ta946.3986: [[[Int]]] = [or_net] in
                            let Ti947.3987: Int = 0 in
                              let Ta948.3985: [[Int]] = Ta946.3986.(Ti947.3987) in
                                let Tb949.3973: Bool = shadow_check_one_or_matrix.2885(Ti945.3984, Ta948.3985) in
                                  let Ti950.3974: Int = 0 in
                                    if Tb949.3973 == Ti950.3974 then
                                      let Ta951.3982: [Float] = [nvector] in
                                        let Ta952.3983: [Float] = d_vec.2717(dvec.3965) in
                                          let p.3975: Float = veciprod.2631(Ta951.3982, Ta952.3983) in
                                            let scale.3976: Float = r_bright.2725(rinfo.3964) in
                                              let Td953.3981: Float = (scale.3976 * diffuse.2934) in
                                                let bright.3977: Float = (Td953.3981 * p.3975) in
                                                  let Ta954.3980: [Float] = d_vec.2717(dvec.3965) in
                                                    let Td955.3979: Float = veciprod.2631(dirvec.2936, Ta954.3980) in
                                                      let hilight.3978: Float = (scale.3976 * Td955.3979) in
                                                        add_light.2928(bright.3977, hilight.3978, hilight_scale.2935)
                                    else
                                      ()
                      else
                        () in
                let Ti956.3968: Int = 1 in
                  let Ti957.3967: Int = (index.2933 - Ti956.3968) in
                    trace_reflections.2932(Ti957.3967, diffuse.2934, hilight_scale.2935, dirvec.2936)
  else
    () in
                                                                                                                                                                                                                  let rec (trace_ray.2937: (Int, Float, [Float], ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Float) -> Unit) ((nref.2938: Int), (energy.2939: Float), (dirvec.2940: [Float]), (pixel.2941: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (dist.2942: Float)) = let Ti827.3825: Int = 4 in
  if nref.2938 <= Ti827.3825 then
    let surface_ids.3826: [Int] = p_surface_ids.2702(pixel.2941) in
      let Tb828.3827: Bool = judge_intersection.2900(dirvec.2940) in
        let Ti829.3828: Int = 0 in
          if Tb828.3827 == Ti829.3828 then
            let Ti831.3961: Int = -1 in
              let Tu155.3927: Unit = surface_ids.3826.(nref.2938) <- Ti831.3961 in
                let Ti832.3928: Int = 0 in
                  if nref.2938 == Ti832.3928 then
                    ()
                  else
                    let Ta833.3960: [Float] = [light] in
                      let Td834.3959: Float = veciprod.2631(dirvec.2940, Ta833.3960) in
                        let hl.3929: Float = fneg(Td834.3959) in
                          let Tb835.3930: Bool = fispos(hl.3929) in
                            let Ti836.3931: Int = 0 in
                              if Tb835.3930 == Ti836.3931 then
                                ()
                              else
                                let Td837.3958: Float = fsqr(hl.3929) in
                                  let Td838.3957: Float = (Td837.3958 * hl.3929) in
                                    let Td839.3953: Float = (Td838.3957 * energy.2939) in
                                      let Ta840.3955: [Float] = [beam] in
                                        let Ti841.3956: Int = 0 in
                                          let Td842.3954: Float = Ta840.3955.(Ti841.3956) in
                                            let ihl.3932: Float = (Td839.3953 * Td842.3954) in
                                              let Ta843.3947: [Float] = [rgb] in
                                                let Ti844.3948: Int = 0 in
                                                  let Ta845.3951: [Float] = [rgb] in
                                                    let Ti846.3952: Int = 0 in
                                                      let Td847.3950: Float = Ta845.3951.(Ti846.3952) in
                                                        let Td848.3949: Float = (Td847.3950 + ihl.3932) in
                                                          let Tu154.3933: Unit = Ta843.3947.(Ti844.3948) <- Td848.3949 in
                                                            let Ta849.3941: [Float] = [rgb] in
                                                              let Ti850.3942: Int = 1 in
                                                                let Ta851.3945: [Float] = [rgb] in
                                                                  let Ti852.3946: Int = 1 in
                                                                    let Td853.3944: Float = Ta851.3945.(Ti852.3946) in
                                                                      let Td854.3943: Float = (Td853.3944 + ihl.3932) in
                                                                        let Tu153.3934: Unit = Ta849.3941.(Ti850.3942) <- Td854.3943 in
                                                                          let Ta855.3935: [Float] = [rgb] in
                                                                            let Ti856.3936: Int = 2 in
                                                                              let Ta857.3939: [Float] = [rgb] in
                                                                                let Ti858.3940: Int = 2 in
                                                                                  let Td859.3938: Float = Ta857.3939.(Ti858.3940) in
                                                                                    let Td860.3937: Float = (Td859.3938 + ihl.3932) in
                                                                                      Ta855.3935.(Ti856.3936) <- Td860.3937
          else
            let Ta861.3925: [Int] = [intersected_object_id] in
              let Ti862.3926: Int = 0 in
                let obj_id.3829: Int = Ta861.3925.(Ti862.3926) in
                  let Ta863.3924: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
                    let obj.3830: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = Ta863.3924.(obj_id.3829) in
                      let m_surface.3831: Int = o_reflectiontype.2660(obj.3830) in
                        let Td864.3923: Float = o_diffuse.2680(obj.3830) in
                          let diffuse.3832: Float = (Td864.3923 * energy.2939) in
                            let Tu152.3833: Unit = get_nvector.2922(obj.3830, dirvec.2940) in
                              let Ta865.3921: [Float] = [startp] in
                                let Ta866.3922: [Float] = [intersection_point] in
                                  let Tu151.3834: Unit = veccpy.2620(Ta865.3921, Ta866.3922) in
                                    let Ta867.3920: [Float] = [intersection_point] in
                                      let Tu150.3835: Unit = utexture.2925(obj.3830, Ta867.3920) in
                                        let Ti868.3919: Int = 4 in
                                          let Ti869.3915: Int = (obj_id.3829 * Ti868.3919) in
                                            let Ta870.3917: [Int] = [intsec_rectside] in
                                              let Ti871.3918: Int = 0 in
                                                let Ti872.3916: Int = Ta870.3917.(Ti871.3918) in
                                                  let Ti873.3914: Int = (Ti869.3915 + Ti872.3916) in
                                                    let Tu149.3836: Unit = surface_ids.3826.(nref.2938) <- Ti873.3914 in
                                                      let intersection_points.3837: [[Float]] = p_intersection_points.2700(pixel.2941) in
                                                        let Ta874.3912: [Float] = intersection_points.3837.(nref.2938) in
                                                          let Ta875.3913: [Float] = [intersection_point] in
                                                            let Tu148.3838: Unit = veccpy.2620(Ta874.3912, Ta875.3913) in
                                                              let calc_diffuse.3839: [Bool] = p_calc_diffuse.2704(pixel.2941) in
                                                                let Td876.3910: Float = o_diffuse.2680(obj.3830) in
                                                                  let Td877.3911: Float = 0.5 in
                                                                    let Tb878.3892: Bool = fless(Td876.3910, Td877.3911) in
                                                                      let Ti879.3893: Int = 0 in
                                                                        let Tu147.3840: Unit = if Tb878.3892 == Ti879.3893 then
  let Ti880.3909: Int = 1 in
    let Tu141.3895: Unit = calc_diffuse.3839.(nref.2938) <- Ti880.3909 in
      let energya.3896: [[Float]] = p_energy.2706(pixel.2941) in
        let Ta881.3907: [Float] = energya.3896.(nref.2938) in
          let Ta882.3908: [Float] = [texture_color] in
            let Tu140.3897: Unit = veccpy.2620(Ta881.3907, Ta882.3908) in
              let Ta883.3902: [Float] = energya.3896.(nref.2938) in
                let Td886.3904: Float = 0.00390625 in
                  let Td887.3903: Float = (Td886.3904 * diffuse.3832) in
                    let Tu139.3898: Unit = vecscale.2649(Ta883.3902, Td887.3903) in
                      let nvectors.3899: [[Float]] = p_nvectors.2715(pixel.2941) in
                        let Ta888.3900: [Float] = nvectors.3899.(nref.2938) in
                          let Ta889.3901: [Float] = [nvector] in
                            veccpy.2620(Ta888.3900, Ta889.3901)
else
  let Ti890.3894: Int = 0 in
    calc_diffuse.3839.(nref.2938) <- Ti890.3894 in
                                                                          let Td891.3889: Float = -2. in
                                                                            let Ta892.3891: [Float] = [nvector] in
                                                                              let Td893.3890: Float = veciprod.2631(dirvec.2940, Ta892.3891) in
                                                                                let w.3841: Float = (Td891.3889 * Td893.3890) in
                                                                                  let Ta894.3888: [Float] = [nvector] in
                                                                                    let Tu146.3842: Unit = vecaccum.2639(dirvec.2940, w.3841, Ta894.3888) in
                                                                                      let Td895.3887: Float = o_hilight.2682(obj.3830) in
                                                                                        let hilight_scale.3843: Float = (energy.2939 * Td895.3887) in
                                                                                          let Ti896.3883: Int = 0 in
                                                                                            let Ta897.3885: [[[Int]]] = [or_net] in
                                                                                              let Ti898.3886: Int = 0 in
                                                                                                let Ta899.3884: [[Int]] = Ta897.3885.(Ti898.3886) in
                                                                                                  let Tb900.3873: Bool = shadow_check_one_or_matrix.2885(Ti896.3883, Ta899.3884) in
                                                                                                    let Ti901.3874: Int = 0 in
                                                                                                      let Tu145.3844: Unit = if Tb900.3873 == Ti901.3874 then
  let Ta902.3881: [Float] = [nvector] in
    let Ta903.3882: [Float] = [light] in
      let Td904.3880: Float = veciprod.2631(Ta902.3881, Ta903.3882) in
        let Td905.3879: Float = fneg(Td904.3880) in
          let bright.3875: Float = (Td905.3879 * diffuse.3832) in
            let Ta906.3878: [Float] = [light] in
              let Td907.3877: Float = veciprod.2631(dirvec.2940, Ta906.3878) in
                let hilight.3876: Float = fneg(Td907.3877) in
                  add_light.2928(bright.3875, hilight.3876, hilight_scale.3843)
else
  () in
                                                                                                        let Ta908.3872: [Float] = [intersection_point] in
                                                                                                          let Tu144.3845: Unit = setup_startp.2851(Ta908.3872) in
                                                                                                            let Ta909.3870: [Int] = [n_reflections] in
                                                                                                              let Ti910.3871: Int = 0 in
                                                                                                                let Ti911.3868: Int = Ta909.3870.(Ti910.3871) in
                                                                                                                  let Ti912.3869: Int = 1 in
                                                                                                                    let Ti913.3867: Int = (Ti911.3868 - Ti912.3869) in
                                                                                                                      let Tu143.3846: Unit = trace_reflections.2932(Ti913.3867, diffuse.3832, hilight_scale.3843, dirvec.2940) in
                                                                                                                        let Td914.3866: Float = 0.1 in
                                                                                                                          let Tb915.3847: Bool = fless(Td914.3866, energy.2939) in
                                                                                                                            let Ti916.3848: Int = 0 in
                                                                                                                              if Tb915.3847 == Ti916.3848 then
                                                                                                                                ()
                                                                                                                              else
                                                                                                                                let Ti917.3861: Int = 4 in
                                                                                                                                  let Tu142.3849: Unit = if Ti917.3861 <= nref.2938 then
  ()
else
  let Ti918.3865: Int = 1 in
    let Ti919.3862: Int = (nref.2938 + Ti918.3865) in
      let Ti921.3863: Int = -1 in
        surface_ids.3826.(Ti919.3862) <- Ti921.3863 in
                                                                                                                                    let Ti922.3850: Int = 2 in
                                                                                                                                      if m_surface.3831 == Ti922.3850 then
                                                                                                                                        let Td923.3859: Float = 1. in
                                                                                                                                          let Td924.3860: Float = o_diffuse.2680(obj.3830) in
                                                                                                                                            let Td925.3858: Float = (Td923.3859 - Td924.3860) in
                                                                                                                                              let energy2.3851: Float = (energy.2939 * Td925.3858) in
                                                                                                                                                let Ti926.3857: Int = 1 in
                                                                                                                                                  let Ti927.3852: Int = (nref.2938 + Ti926.3857) in
                                                                                                                                                    let Ta928.3855: [Float] = [tmin] in
                                                                                                                                                      let Ti929.3856: Int = 0 in
                                                                                                                                                        let Td930.3854: Float = Ta928.3855.(Ti929.3856) in
                                                                                                                                                          let Td931.3853: Float = (dist.2942 + Td930.3854) in
                                                                                                                                                            trace_ray.2937(Ti927.3852, energy2.3851, dirvec.2940, pixel.2941, Td931.3853)
                                                                                                                                      else
                                                                                                                                        ()
  else
    () in
                                                                                                                                                                                                                    let rec (trace_diffuse_ray.2943: (([Float], [[Float]]), Float) -> Unit) ((dirvec.2944: ([Float], [[Float]])), (energy.2945: Float)) = let Tb803.3796: Bool = judge_intersection_fast.2914(dirvec.2944) in
  let Ti804.3797: Int = 0 in
    if Tb803.3796 == Ti804.3797 then
      ()
    else
      let Ta805.3821: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
        let Ta806.3823: [Int] = [intersected_object_id] in
          let Ti807.3824: Int = 0 in
            let Ti808.3822: Int = Ta806.3823.(Ti807.3824) in
              let obj.3798: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = Ta805.3821.(Ti808.3822) in
                let Ta809.3820: [Float] = d_vec.2717(dirvec.2944) in
                  let Tu157.3799: Unit = get_nvector.2922(obj.3798, Ta809.3820) in
                    let Ta810.3819: [Float] = [intersection_point] in
                      let Tu156.3800: Unit = utexture.2925(obj.3798, Ta810.3819) in
                        let Ti811.3815: Int = 0 in
                          let Ta812.3817: [[[Int]]] = [or_net] in
                            let Ti813.3818: Int = 0 in
                              let Ta814.3816: [[Int]] = Ta812.3817.(Ti813.3818) in
                                let Tb815.3801: Bool = shadow_check_one_or_matrix.2885(Ti811.3815, Ta814.3816) in
                                  let Ti816.3802: Int = 0 in
                                    if Tb815.3801 == Ti816.3802 then
                                      let Ta817.3813: [Float] = [nvector] in
                                        let Ta818.3814: [Float] = [light] in
                                          let Td819.3812: Float = veciprod.2631(Ta817.3813, Ta818.3814) in
                                            let br.3803: Float = fneg(Td819.3812) in
                                              let Tb820.3810: Bool = fispos(br.3803) in
                                                let Ti821.3811: Int = 0 in
                                                  let bright.3804: Float = if Tb820.3810 == Ti821.3811 then
  0.
else
  br.3803 in
                                                    let Ta822.3805: [Float] = [diffuse_ray] in
                                                      let Td823.3808: Float = (energy.2945 * bright.3804) in
                                                        let Td824.3809: Float = o_diffuse.2680(obj.3798) in
                                                          let Td825.3806: Float = (Td823.3808 * Td824.3809) in
                                                            let Ta826.3807: [Float] = [texture_color] in
                                                              vecaccum.2639(Ta822.3805, Td825.3806, Ta826.3807)
                                    else
                                      () in
                                                                                                                                                                                                                      let rec (iter_trace_diffuse_rays.2946: ([([Float], [[Float]])], [Float], [Float], Int) -> Unit) ((dirvec_group.2947: [([Float], [[Float]])]), (nvector.2948: [Float]), (org.2949: [Float]), (index.2950: Int)) = let Ti788.3779: Int = 0 in
  if Ti788.3779 <= index.2950 then
    let Tt789.3795: ([Float], [[Float]]) = dirvec_group.2947.(index.2950) in
      let Ta790.3794: [Float] = d_vec.2717(Tt789.3795) in
        let p.3780: Float = veciprod.2631(Ta790.3794, nvector.2948) in
          let Tb791.3784: Bool = fisneg(p.3780) in
            let Ti792.3785: Int = 0 in
              let Tu158.3781: Unit = if Tb791.3784 == Ti792.3785 then
  let Tt793.3791: ([Float], [[Float]]) = dirvec_group.2947.(index.2950) in
    let Td794.3793: Float = 150. in
      let Td795.3792: Float = (p.3780 / Td794.3793) in
        trace_diffuse_ray.2943(Tt793.3791, Td795.3792)
else
  let Ti796.3790: Int = 1 in
    let Ti797.3789: Int = (index.2950 + Ti796.3790) in
      let Tt798.3786: ([Float], [[Float]]) = dirvec_group.2947.(Ti797.3789) in
        let Td799.3788: Float = -150. in
          let Td800.3787: Float = (p.3780 / Td799.3788) in
            trace_diffuse_ray.2943(Tt798.3786, Td800.3787) in
                let Ti801.3783: Int = 2 in
                  let Ti802.3782: Int = (index.2950 - Ti801.3783) in
                    iter_trace_diffuse_rays.2946(dirvec_group.2947, nvector.2948, org.2949, Ti802.3782)
  else
    () in
                                                                                                                                                                                                                        let rec (trace_diffuse_rays.2951: ([([Float], [[Float]])], [Float], [Float]) -> Unit) ((dirvec_group.2952: [([Float], [[Float]])]), (nvector.2953: [Float]), (org.2954: [Float])) = let Tu159.3777: Unit = setup_startp.2851(org.2954) in
  let Ti787.3778: Int = 118 in
    iter_trace_diffuse_rays.2946(dirvec_group.2952, nvector.2953, org.2954, Ti787.3778) in
                                                                                                                                                                                                                          let rec (trace_diffuse_ray_80percent.2955: (Int, [Float], [Float]) -> Unit) ((group_id.2956: Int), (nvector.2957: [Float]), (org.2958: [Float])) = let Ti767.3773: Int = 0 in
  let Tu163.3753: Unit = if group_id.2956 == Ti767.3773 then
  ()
else
  let Ta768.3775: [[([Float], [[Float]])]] = [dirvecs] in
    let Ti769.3776: Int = 0 in
      let Ta770.3774: [([Float], [[Float]])] = Ta768.3775.(Ti769.3776) in
        trace_diffuse_rays.2951(Ta770.3774, nvector.2957, org.2958) in
    let Ti771.3769: Int = 1 in
      let Tu162.3754: Unit = if group_id.2956 == Ti771.3769 then
  ()
else
  let Ta772.3771: [[([Float], [[Float]])]] = [dirvecs] in
    let Ti773.3772: Int = 1 in
      let Ta774.3770: [([Float], [[Float]])] = Ta772.3771.(Ti773.3772) in
        trace_diffuse_rays.2951(Ta774.3770, nvector.2957, org.2958) in
        let Ti775.3765: Int = 2 in
          let Tu161.3755: Unit = if group_id.2956 == Ti775.3765 then
  ()
else
  let Ta776.3767: [[([Float], [[Float]])]] = [dirvecs] in
    let Ti777.3768: Int = 2 in
      let Ta778.3766: [([Float], [[Float]])] = Ta776.3767.(Ti777.3768) in
        trace_diffuse_rays.2951(Ta778.3766, nvector.2957, org.2958) in
            let Ti779.3761: Int = 3 in
              let Tu160.3756: Unit = if group_id.2956 == Ti779.3761 then
  ()
else
  let Ta780.3763: [[([Float], [[Float]])]] = [dirvecs] in
    let Ti781.3764: Int = 3 in
      let Ta782.3762: [([Float], [[Float]])] = Ta780.3763.(Ti781.3764) in
        trace_diffuse_rays.2951(Ta782.3762, nvector.2957, org.2958) in
                let Ti783.3757: Int = 4 in
                  if group_id.2956 == Ti783.3757 then
                    ()
                  else
                    let Ta784.3759: [[([Float], [[Float]])]] = [dirvecs] in
                      let Ti785.3760: Int = 4 in
                        let Ta786.3758: [([Float], [[Float]])] = Ta784.3759.(Ti785.3760) in
                          trace_diffuse_rays.2951(Ta786.3758, nvector.2957, org.2958) in
                                                                                                                                                                                                                            let rec (calc_diffuse_using_1point.2959: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Unit) ((pixel.2960: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (nref.2961: Int)) = let ray20p.3739: [[Float]] = p_received_ray_20percent.2708(pixel.2960) in
  let nvectors.3740: [[Float]] = p_nvectors.2715(pixel.2960) in
    let intersection_points.3741: [[Float]] = p_intersection_points.2700(pixel.2960) in
      let energya.3742: [[Float]] = p_energy.2706(pixel.2960) in
        let Ta759.3751: [Float] = [diffuse_ray] in
          let Ta760.3752: [Float] = ray20p.3739.(nref.2961) in
            let Tu165.3743: Unit = veccpy.2620(Ta759.3751, Ta760.3752) in
              let Ti761.3748: Int = p_group_id.2710(pixel.2960) in
                let Ta762.3749: [Float] = nvectors.3740.(nref.2961) in
                  let Ta763.3750: [Float] = intersection_points.3741.(nref.2961) in
                    let Tu164.3744: Unit = trace_diffuse_ray_80percent.2955(Ti761.3748, Ta762.3749, Ta763.3750) in
                      let Ta764.3745: [Float] = [rgb] in
                        let Ta765.3746: [Float] = energya.3742.(nref.2961) in
                          let Ta766.3747: [Float] = [diffuse_ray] in
                            vecaccumv.2652(Ta764.3745, Ta765.3746, Ta766.3747) in
                                                                                                                                                                                                                              let rec (calc_diffuse_using_5points.2962: (Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> Unit) ((x.2963: Int), (prev.2964: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur.2965: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next.2966: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (nref.2967: Int)) = let Tt736.3738: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = prev.2964.(x.2963) in
  let r_up.3705: [[Float]] = p_received_ray_20percent.2708(Tt736.3738) in
    let Ti737.3737: Int = 1 in
      let Ti738.3736: Int = (x.2963 - Ti737.3737) in
        let Tt739.3735: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2965.(Ti738.3736) in
          let r_left.3706: [[Float]] = p_received_ray_20percent.2708(Tt739.3735) in
            let Tt740.3734: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2965.(x.2963) in
              let r_center.3707: [[Float]] = p_received_ray_20percent.2708(Tt740.3734) in
                let Ti741.3733: Int = 1 in
                  let Ti742.3732: Int = (x.2963 + Ti741.3733) in
                    let Tt743.3731: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2965.(Ti742.3732) in
                      let r_right.3708: [[Float]] = p_received_ray_20percent.2708(Tt743.3731) in
                        let Tt744.3730: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = next.2966.(x.2963) in
                          let r_down.3709: [[Float]] = p_received_ray_20percent.2708(Tt744.3730) in
                            let Ta745.3728: [Float] = [diffuse_ray] in
                              let Ta746.3729: [Float] = r_up.3705.(nref.2967) in
                                let Tu170.3710: Unit = veccpy.2620(Ta745.3728, Ta746.3729) in
                                  let Ta747.3726: [Float] = [diffuse_ray] in
                                    let Ta748.3727: [Float] = r_left.3706.(nref.2967) in
                                      let Tu169.3711: Unit = vecadd.2643(Ta747.3726, Ta748.3727) in
                                        let Ta749.3724: [Float] = [diffuse_ray] in
                                          let Ta750.3725: [Float] = r_center.3707.(nref.2967) in
                                            let Tu168.3712: Unit = vecadd.2643(Ta749.3724, Ta750.3725) in
                                              let Ta751.3722: [Float] = [diffuse_ray] in
                                                let Ta752.3723: [Float] = r_right.3708.(nref.2967) in
                                                  let Tu167.3713: Unit = vecadd.2643(Ta751.3722, Ta752.3723) in
                                                    let Ta753.3720: [Float] = [diffuse_ray] in
                                                      let Ta754.3721: [Float] = r_down.3709.(nref.2967) in
                                                        let Tu166.3714: Unit = vecadd.2643(Ta753.3720, Ta754.3721) in
                                                          let Tt755.3719: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2965.(x.2963) in
                                                            let energya.3715: [[Float]] = p_energy.2706(Tt755.3719) in
                                                              let Ta756.3716: [Float] = [rgb] in
                                                                let Ta757.3717: [Float] = energya.3715.(nref.2967) in
                                                                  let Ta758.3718: [Float] = [diffuse_ray] in
                                                                    vecaccumv.2652(Ta756.3716, Ta757.3717, Ta758.3718) in
                                                                                                                                                                                                                                let rec (do_without_neighbors.2968: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Unit) ((pixel.2969: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (nref.2970: Int)) = let Ti729.3695: Int = 4 in
  if nref.2970 <= Ti729.3695 then
    let surface_ids.3696: [Int] = p_surface_ids.2702(pixel.2969) in
      let Ti730.3697: Int = 0 in
        let Ti731.3698: Int = surface_ids.3696.(nref.2970) in
          if Ti730.3697 <= Ti731.3698 then
            let calc_diffuse.3699: [Bool] = p_calc_diffuse.2704(pixel.2969) in
              let Tb732.3703: Bool = calc_diffuse.3699.(nref.2970) in
                let Ti733.3704: Int = 0 in
                  let Tu171.3700: Unit = if Tb732.3703 == Ti733.3704 then
  ()
else
  calc_diffuse_using_1point.2959(pixel.2969, nref.2970) in
                    let Ti734.3702: Int = 1 in
                      let Ti735.3701: Int = (nref.2970 + Ti734.3702) in
                        do_without_neighbors.2968(pixel.2969, Ti735.3701)
          else
            ()
  else
    () in
                                                                                                                                                                                                                                  let rec (neighbors_exist.2971: (Int, Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]) -> Bool) ((x.2972: Int), (y.2973: Int), (next.2974: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])])) = let Ta717.3693: [Int] = [image_size] in
  let Ti718.3694: Int = 1 in
    let Ti719.3683: Int = Ta717.3693.(Ti718.3694) in
      let Ti720.3692: Int = 1 in
        let Ti721.3684: Int = (y.2973 + Ti720.3692) in
          if Ti719.3683 <= Ti721.3684 then
            0
          else
            let Ti722.3685: Int = 0 in
              if y.2973 <= Ti722.3685 then
                0
              else
                let Ta723.3690: [Int] = [image_size] in
                  let Ti724.3691: Int = 0 in
                    let Ti725.3686: Int = Ta723.3690.(Ti724.3691) in
                      let Ti726.3689: Int = 1 in
                        let Ti727.3687: Int = (x.2972 + Ti726.3689) in
                          if Ti725.3686 <= Ti727.3687 then
                            0
                          else
                            let Ti728.3688: Int = 0 in
                              if x.2972 <= Ti728.3688 then
                                0
                              else
                                1 in
                                                                                                                                                                                                                                    let rec (get_surface_id.2975: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Int) ((pixel.2976: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (index.2977: Int)) = let surface_ids.3682: [Int] = p_surface_ids.2702(pixel.2976) in
  surface_ids.3682.(index.2977) in
                                                                                                                                                                                                                                      let rec (neighbors_are_available.2978: (Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> Bool) ((x.2979: Int), (prev.2980: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur.2981: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next.2982: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (nref.2983: Int)) = let Tt704.3681: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2981.(x.2979) in
  let sid_center.3668: Int = get_surface_id.2975(Tt704.3681, nref.2983) in
    let Tt705.3680: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = prev.2980.(x.2979) in
      let Ti706.3669: Int = get_surface_id.2975(Tt705.3680, nref.2983) in
        if Ti706.3669 == sid_center.3668 then
          let Tt707.3679: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = next.2982.(x.2979) in
            let Ti708.3670: Int = get_surface_id.2975(Tt707.3679, nref.2983) in
              if Ti708.3670 == sid_center.3668 then
                let Ti709.3678: Int = 1 in
                  let Ti710.3677: Int = (x.2979 - Ti709.3678) in
                    let Tt711.3676: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2981.(Ti710.3677) in
                      let Ti712.3671: Int = get_surface_id.2975(Tt711.3676, nref.2983) in
                        if Ti712.3671 == sid_center.3668 then
                          let Ti713.3675: Int = 1 in
                            let Ti714.3674: Int = (x.2979 + Ti713.3675) in
                              let Tt715.3673: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2981.(Ti714.3674) in
                                let Ti716.3672: Int = get_surface_id.2975(Tt715.3673, nref.2983) in
                                  if Ti716.3672 == sid_center.3668 then
                                    1
                                  else
                                    0
                        else
                          0
              else
                0
        else
          0 in
                                                                                                                                                                                                                                        let rec (try_exploit_neighbors.2984: (Int, Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> Unit) ((x.2985: Int), (y.2986: Int), (prev.2987: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur.2988: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next.2989: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (nref.2990: Int)) = let pixel.3655: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2988.(x.2985) in
  let Ti694.3656: Int = 4 in
    if nref.2990 <= Ti694.3656 then
      let Ti695.3657: Int = 0 in
        let Ti696.3658: Int = get_surface_id.2975(pixel.3655, nref.2990) in
          if Ti695.3657 <= Ti696.3658 then
            let Tb697.3659: Bool = neighbors_are_available.2978(x.2985, prev.2987, cur.2988, next.2989, nref.2990) in
              let Ti698.3660: Int = 0 in
                if Tb697.3659 == Ti698.3660 then
                  let Tt699.3667: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.2988.(x.2985) in
                    do_without_neighbors.2968(Tt699.3667, nref.2990)
                else
                  let calc_diffuse.3661: [Bool] = p_calc_diffuse.2704(pixel.3655) in
                    let Tb700.3665: Bool = calc_diffuse.3661.(nref.2990) in
                      let Ti701.3666: Int = 0 in
                        let Tu172.3662: Unit = if Tb700.3665 == Ti701.3666 then
  ()
else
  calc_diffuse_using_5points.2962(x.2985, prev.2987, cur.2988, next.2989, nref.2990) in
                          let Ti702.3664: Int = 1 in
                            let Ti703.3663: Int = (nref.2990 + Ti702.3664) in
                              try_exploit_neighbors.2984(x.2985, y.2986, prev.2987, cur.2988, next.2989, Ti703.3663)
          else
            ()
    else
      () in
                                                                                                                                                                                                                                          let rec (write_ppm_header.2991: (Unit) -> Unit) ((Tu173.2992: Unit)) = let Ti679.3654: Int = 80 in
  let Tu181.3632: Unit = print_char(Ti679.3654) in
    let Ti682.3651: Int = 51 in
      let Tu180.3633: Unit = print_char(Ti682.3651) in
        let Ti683.3650: Int = 10 in
          let Tu179.3634: Unit = print_char(Ti683.3650) in
            let Ta684.3648: [Int] = [image_size] in
              let Ti685.3649: Int = 0 in
                let Ti686.3647: Int = Ta684.3648.(Ti685.3649) in
                  let Tu178.3635: Unit = print_int(Ti686.3647) in
                    let Ti687.3646: Int = 32 in
                      let Tu177.3636: Unit = print_char(Ti687.3646) in
                        let Ta688.3644: [Int] = [image_size] in
                          let Ti689.3645: Int = 1 in
                            let Ti690.3643: Int = Ta688.3644.(Ti689.3645) in
                              let Tu176.3637: Unit = print_int(Ti690.3643) in
                                let Ti691.3642: Int = 32 in
                                  let Tu175.3638: Unit = print_char(Ti691.3642) in
                                    let Ti692.3641: Int = 255 in
                                      let Tu174.3639: Unit = print_int(Ti692.3641) in
                                        let Ti693.3640: Int = 10 in
                                          print_char(Ti693.3640) in
                                                                                                                                                                                                                                            let rec (write_rgb_element.2993: (Int) -> Unit) ((x.2994: Int)) = let ix.3628: Int = int_of_float(x.2994) in
  let Ti677.3630: Int = 255 in
    let elem.3629: Int = if ix.3628 <= Ti677.3630 then
  let Ti678.3631: Int = 0 in
    if Ti678.3631 <= ix.3628 then
      ix.3628
    else
      0
else
  255 in
      print_int(elem.3629) in
                                                                                                                                                                                                                                              let rec (write_rgb.2995: (Unit) -> Unit) ((Tu182.2996: Unit)) = let Ta665.3626: [Float] = [rgb] in
  let Ti666.3627: Int = 0 in
    let Td667.3625: Float = Ta665.3626.(Ti666.3627) in
      let Tu187.3611: Unit = write_rgb_element.2993(Td667.3625) in
        let Ti668.3624: Int = 32 in
          let Tu186.3612: Unit = print_char(Ti668.3624) in
            let Ta669.3622: [Float] = [rgb] in
              let Ti670.3623: Int = 1 in
                let Td671.3621: Float = Ta669.3622.(Ti670.3623) in
                  let Tu185.3613: Unit = write_rgb_element.2993(Td671.3621) in
                    let Ti672.3620: Int = 32 in
                      let Tu184.3614: Unit = print_char(Ti672.3620) in
                        let Ta673.3618: [Float] = [rgb] in
                          let Ti674.3619: Int = 2 in
                            let Td675.3617: Float = Ta673.3618.(Ti674.3619) in
                              let Tu183.3615: Unit = write_rgb_element.2993(Td675.3617) in
                                let Ti676.3616: Int = 10 in
                                  print_char(Ti676.3616) in
                                                                                                                                                                                                                                                let rec (pretrace_diffuse_rays.2997: (([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]), Int) -> Unit) ((pixel.2998: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])), (nref.2999: Int)) = let Ti652.3589: Int = 4 in
  if nref.2999 <= Ti652.3589 then
    let sid.3590: Int = get_surface_id.2975(pixel.2998, nref.2999) in
      let Ti653.3591: Int = 0 in
        if Ti653.3591 <= sid.3590 then
          let calc_diffuse.3592: [Bool] = p_calc_diffuse.2704(pixel.2998) in
            let Tb654.3596: Bool = calc_diffuse.3592.(nref.2999) in
              let Ti655.3597: Int = 0 in
                let Tu190.3593: Unit = if Tb654.3596 == Ti655.3597 then
  ()
else
  let group_id.3598: Int = p_group_id.2710(pixel.2998) in
    let Ta656.3610: [Float] = [diffuse_ray] in
      let Tu189.3599: Unit = vecbzero.2618(Ta656.3610) in
        let nvectors.3600: [[Float]] = p_nvectors.2715(pixel.2998) in
          let intersection_points.3601: [[Float]] = p_intersection_points.2700(pixel.2998) in
            let Ta657.3609: [[([Float], [[Float]])]] = [dirvecs] in
              let Ta658.3606: [([Float], [[Float]])] = Ta657.3609.(group_id.3598) in
                let Ta659.3607: [Float] = nvectors.3600.(nref.2999) in
                  let Ta660.3608: [Float] = intersection_points.3601.(nref.2999) in
                    let Tu188.3602: Unit = trace_diffuse_rays.2951(Ta658.3606, Ta659.3607, Ta660.3608) in
                      let ray20p.3603: [[Float]] = p_received_ray_20percent.2708(pixel.2998) in
                        let Ta661.3604: [Float] = ray20p.3603.(nref.2999) in
                          let Ta662.3605: [Float] = [diffuse_ray] in
                            veccpy.2620(Ta661.3604, Ta662.3605) in
                  let Ti663.3595: Int = 1 in
                    let Ti664.3594: Int = (nref.2999 + Ti663.3595) in
                      pretrace_diffuse_rays.2997(pixel.2998, Ti664.3594)
        else
          ()
  else
    () in
                                                                                                                                                                                                                                                  let rec (pretrace_pixels.3000: ([([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int, Int, Float, Float, Float) -> Unit) ((line.3001: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (x.3002: Int), (group_id.3003: Int), (lc0.3004: Float), (lc1.3005: Float), (lc2.3006: Float)) = let Ti602.3528: Int = 0 in
  if Ti602.3528 <= x.3002 then
    let Ta603.3587: [Float] = [scan_pitch] in
      let Ti604.3588: Int = 0 in
        let Td605.3581: Float = Ta603.3587.(Ti604.3588) in
          let Ta606.3585: [Int] = [image_center] in
            let Ti607.3586: Int = 0 in
              let Ti608.3584: Int = Ta606.3585.(Ti607.3586) in
                let Ti609.3583: Int = (x.3002 - Ti608.3584) in
                  let Td610.3582: Float = float_of_int(Ti609.3583) in
                    let xdisp.3529: Float = (Td605.3581 * Td610.3582) in
                      let Ta611.3574: [Float] = [ptrace_dirvec] in
                        let Ti612.3575: Int = 0 in
                          let Ta613.3579: [Float] = [screenx_dir] in
                            let Ti614.3580: Int = 0 in
                              let Td615.3578: Float = Ta613.3579.(Ti614.3580) in
                                let Td616.3577: Float = (xdisp.3529 * Td615.3578) in
                                  let Td617.3576: Float = (Td616.3577 + lc0.3004) in
                                    let Tu200.3530: Unit = Ta611.3574.(Ti612.3575) <- Td617.3576 in
                                      let Ta618.3567: [Float] = [ptrace_dirvec] in
                                        let Ti619.3568: Int = 1 in
                                          let Ta620.3572: [Float] = [screenx_dir] in
                                            let Ti621.3573: Int = 1 in
                                              let Td622.3571: Float = Ta620.3572.(Ti621.3573) in
                                                let Td623.3570: Float = (xdisp.3529 * Td622.3571) in
                                                  let Td624.3569: Float = (Td623.3570 + lc1.3005) in
                                                    let Tu199.3531: Unit = Ta618.3567.(Ti619.3568) <- Td624.3569 in
                                                      let Ta625.3560: [Float] = [ptrace_dirvec] in
                                                        let Ti626.3561: Int = 2 in
                                                          let Ta627.3565: [Float] = [screenx_dir] in
                                                            let Ti628.3566: Int = 2 in
                                                              let Td629.3564: Float = Ta627.3565.(Ti628.3566) in
                                                                let Td630.3563: Float = (xdisp.3529 * Td629.3564) in
                                                                  let Td631.3562: Float = (Td630.3563 + lc2.3006) in
                                                                    let Tu198.3532: Unit = Ta625.3560.(Ti626.3561) <- Td631.3562 in
                                                                      let Ta632.3558: [Float] = [ptrace_dirvec] in
                                                                        let Ti633.3559: Int = 0 in
                                                                          let Tu197.3533: Unit = vecunit_sgn.2628(Ta632.3558, Ti633.3559) in
                                                                            let Ta634.3557: [Float] = [rgb] in
                                                                              let Tu196.3534: Unit = vecbzero.2618(Ta634.3557) in
                                                                                let Ta635.3555: [Float] = [startp] in
                                                                                  let Ta636.3556: [Float] = [viewpoint] in
                                                                                    let Tu195.3535: Unit = veccpy.2620(Ta635.3555, Ta636.3556) in
                                                                                      let Ti637.3550: Int = 0 in
                                                                                        let Td638.3551: Float = 1. in
                                                                                          let Ta639.3552: [Float] = [ptrace_dirvec] in
                                                                                            let Tt640.3553: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = line.3001.(x.3002) in
                                                                                              let Td641.3554: Float = 0. in
                                                                                                let Tu194.3536: Unit = trace_ray.2937(Ti637.3550, Td638.3551, Ta639.3552, Tt640.3553, Td641.3554) in
                                                                                                  let Tt642.3549: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = line.3001.(x.3002) in
                                                                                                    let Ta643.3547: [Float] = p_rgb.2698(Tt642.3549) in
                                                                                                      let Ta644.3548: [Float] = [rgb] in
                                                                                                        let Tu193.3537: Unit = veccpy.2620(Ta643.3547, Ta644.3548) in
                                                                                                          let Tt645.3546: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = line.3001.(x.3002) in
                                                                                                            let Tu192.3538: Unit = p_set_group_id.2712(Tt645.3546, group_id.3003) in
                                                                                                              let Tt646.3544: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = line.3001.(x.3002) in
                                                                                                                let Ti647.3545: Int = 0 in
                                                                                                                  let Tu191.3539: Unit = pretrace_diffuse_rays.2997(Tt646.3544, Ti647.3545) in
                                                                                                                    let Ti648.3543: Int = 1 in
                                                                                                                      let Ti649.3540: Int = (x.3002 - Ti648.3543) in
                                                                                                                        let Ti650.3542: Int = 1 in
                                                                                                                          let Ti651.3541: Int = add_mod5.2607(group_id.3003, Ti650.3542) in
                                                                                                                            pretrace_pixels.3000(line.3001, Ti649.3540, Ti651.3541, lc0.3004, lc1.3005, lc2.3006)
  else
    () in
                                                                                                                                                                                                                                                    let rec (pretrace_line.3007: ([([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int, Int) -> Unit) ((line.3008: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (y.3009: Int), (group_id.3010: Int)) = let Ta568.3526: [Float] = [scan_pitch] in
  let Ti569.3527: Int = 0 in
    let Td570.3520: Float = Ta568.3526.(Ti569.3527) in
      let Ta571.3524: [Int] = [image_center] in
        let Ti572.3525: Int = 1 in
          let Ti573.3523: Int = Ta571.3524.(Ti572.3525) in
            let Ti574.3522: Int = (y.3009 - Ti573.3523) in
              let Td575.3521: Float = float_of_int(Ti574.3522) in
                let ydisp.3490: Float = (Td570.3520 * Td575.3521) in
                  let Ta576.3518: [Float] = [screeny_dir] in
                    let Ti577.3519: Int = 0 in
                      let Td578.3517: Float = Ta576.3518.(Ti577.3519) in
                        let Td579.3513: Float = (ydisp.3490 * Td578.3517) in
                          let Ta580.3515: [Float] = [screenz_dir] in
                            let Ti581.3516: Int = 0 in
                              let Td582.3514: Float = Ta580.3515.(Ti581.3516) in
                                let lc0.3491: Float = (Td579.3513 + Td582.3514) in
                                  let Ta583.3511: [Float] = [screeny_dir] in
                                    let Ti584.3512: Int = 1 in
                                      let Td585.3510: Float = Ta583.3511.(Ti584.3512) in
                                        let Td586.3506: Float = (ydisp.3490 * Td585.3510) in
                                          let Ta587.3508: [Float] = [screenz_dir] in
                                            let Ti588.3509: Int = 1 in
                                              let Td589.3507: Float = Ta587.3508.(Ti588.3509) in
                                                let lc1.3492: Float = (Td586.3506 + Td589.3507) in
                                                  let Ta590.3504: [Float] = [screeny_dir] in
                                                    let Ti591.3505: Int = 2 in
                                                      let Td592.3503: Float = Ta590.3504.(Ti591.3505) in
                                                        let Td593.3499: Float = (ydisp.3490 * Td592.3503) in
                                                          let Ta594.3501: [Float] = [screenz_dir] in
                                                            let Ti595.3502: Int = 2 in
                                                              let Td596.3500: Float = Ta594.3501.(Ti595.3502) in
                                                                let lc2.3493: Float = (Td593.3499 + Td596.3500) in
                                                                  let Ta597.3497: [Int] = [image_size] in
                                                                    let Ti598.3498: Int = 0 in
                                                                      let Ti599.3495: Int = Ta597.3497.(Ti598.3498) in
                                                                        let Ti600.3496: Int = 1 in
                                                                          let Ti601.3494: Int = (Ti599.3495 - Ti600.3496) in
                                                                            pretrace_pixels.3000(line.3008, Ti601.3494, group_id.3010, lc0.3491, lc1.3492, lc2.3493) in
                                                                                                                                                                                                                                                      let rec (scan_pixel.3011: (Int, Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]) -> Unit) ((x.3012: Int), (y.3013: Int), (prev.3014: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur.3015: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next.3016: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])])) = let Ta554.3488: [Int] = [image_size] in
  let Ti555.3489: Int = 0 in
    let Ti556.3473: Int = Ta554.3488.(Ti555.3489) in
      if Ti556.3473 <= x.3012 then
        ()
      else
        let Ta557.3485: [Float] = [rgb] in
          let Tt558.3487: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.3015.(x.3012) in
            let Ta559.3486: [Float] = p_rgb.2698(Tt558.3487) in
              let Tu203.3474: Unit = veccpy.2620(Ta557.3485, Ta559.3486) in
                let Tb560.3480: Bool = neighbors_exist.2971(x.3012, y.3013, next.3016) in
                  let Ti561.3481: Int = 0 in
                    let Tu202.3475: Unit = if Tb560.3480 == Ti561.3481 then
  let Tt562.3483: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = cur.3015.(x.3012) in
    let Ti563.3484: Int = 0 in
      do_without_neighbors.2968(Tt562.3483, Ti563.3484)
else
  let Ti564.3482: Int = 0 in
    try_exploit_neighbors.2984(x.3012, y.3013, prev.3014, cur.3015, next.3016, Ti564.3482) in
                      let Tu565.3479: Unit = () in
                        let Tu201.3476: Unit = write_rgb.2995(Tu565.3479) in
                          let Ti566.3478: Int = 1 in
                            let Ti567.3477: Int = (x.3012 + Ti566.3478) in
                              scan_pixel.3011(Ti567.3477, y.3013, prev.3014, cur.3015, next.3016) in
                                                                                                                                                                                                                                                        let rec (scan_line.3017: (Int, [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> Unit) ((y.3018: Int), (prev.3019: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (cur.3020: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (next.3021: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (group_id.3022: Int)) = let Ta539.3471: [Int] = [image_size] in
  let Ti540.3472: Int = 1 in
    let Ti541.3456: Int = Ta539.3471.(Ti540.3472) in
      if Ti541.3456 <= y.3018 then
        ()
      else
        let Ta542.3469: [Int] = [image_size] in
          let Ti543.3470: Int = 1 in
            let Ti544.3467: Int = Ta542.3469.(Ti543.3470) in
              let Ti545.3468: Int = 1 in
                let Ti546.3464: Int = (Ti544.3467 - Ti545.3468) in
                  let Tu205.3457: Unit = if Ti546.3464 <= y.3018 then
  ()
else
  let Ti547.3466: Int = 1 in
    let Ti548.3465: Int = (y.3018 + Ti547.3466) in
      pretrace_line.3007(next.3021, Ti548.3465, group_id.3022) in
                    let Ti549.3463: Int = 0 in
                      let Tu204.3458: Unit = scan_pixel.3011(Ti549.3463, y.3018, prev.3019, cur.3020, next.3021) in
                        let Ti550.3462: Int = 1 in
                          let Ti551.3459: Int = (y.3018 + Ti550.3462) in
                            let Ti552.3461: Int = 2 in
                              let Ti553.3460: Int = add_mod5.2607(group_id.3022, Ti552.3461) in
                                scan_line.3017(Ti551.3459, cur.3020, next.3021, prev.3019, Ti553.3460) in
                                                                                                                                                                                                                                                          let rec (create_float5x3array.3023: (Unit) -> [[Float]]) ((Tu206.3024: Unit)) = let Ti520.3454: Int = 3 in
  let Td521.3455: Float = 0. in
    let vec.3431: [Float] = create_float_array(Ti520.3454, Td521.3455) in
      let Ti522.3453: Int = 5 in
        let array.3432: [[Float]] = create_array(Ti522.3453, vec.3431) in
          let Ti523.3449: Int = 1 in
            let Ti524.3451: Int = 3 in
              let Td525.3452: Float = 0. in
                let Ta526.3450: [Float] = create_float_array(Ti524.3451, Td525.3452) in
                  let Tu210.3433: Unit = array.3432.(Ti523.3449) <- Ta526.3450 in
                    let Ti527.3445: Int = 2 in
                      let Ti528.3447: Int = 3 in
                        let Td529.3448: Float = 0. in
                          let Ta530.3446: [Float] = create_float_array(Ti528.3447, Td529.3448) in
                            let Tu209.3434: Unit = array.3432.(Ti527.3445) <- Ta530.3446 in
                              let Ti531.3441: Int = 3 in
                                let Ti532.3443: Int = 3 in
                                  let Td533.3444: Float = 0. in
                                    let Ta534.3442: [Float] = create_float_array(Ti532.3443, Td533.3444) in
                                      let Tu208.3435: Unit = array.3432.(Ti531.3441) <- Ta534.3442 in
                                        let Ti535.3437: Int = 4 in
                                          let Ti536.3439: Int = 3 in
                                            let Td537.3440: Float = 0. in
                                              let Ta538.3438: [Float] = create_float_array(Ti536.3439, Td537.3440) in
                                                let Tu207.3436: Unit = array.3432.(Ti535.3437) <- Ta538.3438 in
                                                  array.3432 in
                                                                                                                                                                                                                                                            let rec (create_pixel.3025: (Unit) -> ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])) ((Tu211.3026: Unit)) = let Ti508.3429: Int = 3 in
  let Td509.3430: Float = 0. in
    let m_rgb.3411: [Float] = create_float_array(Ti508.3429, Td509.3430) in
      let Tu510.3428: Unit = () in
        let m_isect_ps.3412: [[Float]] = create_float5x3array.3023(Tu510.3428) in
          let Ti511.3426: Int = 5 in
            let Ti512.3427: Int = 0 in
              let m_sids.3413: [Int] = create_array(Ti511.3426, Ti512.3427) in
                let Ti513.3424: Int = 5 in
                  let Ti514.3425: Int = 0 in
                    let m_cdif.3414: [Bool] = create_array(Ti513.3424, Ti514.3425) in
                      let Tu515.3423: Unit = () in
                        let m_engy.3415: [[Float]] = create_float5x3array.3023(Tu515.3423) in
                          let Tu516.3422: Unit = () in
                            let m_r20p.3416: [[Float]] = create_float5x3array.3023(Tu516.3422) in
                              let Ti517.3420: Int = 1 in
                                let Ti518.3421: Int = 0 in
                                  let m_gid.3417: [Int] = create_array(Ti517.3420, Ti518.3421) in
                                    let Tu519.3419: Unit = () in
                                      let m_nvectors.3418: [[Float]] = create_float5x3array.3023(Tu519.3419) in
                                        (m_rgb.3411, m_isect_ps.3412, m_sids.3413, m_cdif.3414, m_engy.3415, m_r20p.3416, m_gid.3417, m_nvectors.3418) in
                                                                                                                                                                                                                                                              let rec (init_line_elements.3027: ([([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])], Int) -> [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]) ((line.3028: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]), (n.3029: Int)) = let Ti503.3405: Int = 0 in
  if Ti503.3405 <= n.3029 then
    let Tu504.3410: Unit = () in
      let Tt505.3409: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = create_pixel.3025(Tu504.3410) in
        let Tu212.3406: Unit = line.3028.(n.3029) <- Tt505.3409 in
          let Ti506.3408: Int = 1 in
            let Ti507.3407: Int = (n.3029 - Ti506.3408) in
              init_line_elements.3027(line.3028, Ti507.3407)
  else
    line.3028 in
                                                                                                                                                                                                                                                                let rec (create_pixelline.3030: (Unit) -> [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])]) ((Tu213.3031: Unit)) = let Ta493.3403: [Int] = [image_size] in
  let Ti494.3404: Int = 0 in
    let Ti495.3400: Int = Ta493.3403.(Ti494.3404) in
      let Tu496.3402: Unit = () in
        let Tt497.3401: ([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]]) = create_pixel.3025(Tu496.3402) in
          let line.3394: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])] = create_array(Ti495.3400, Tt497.3401) in
            let Ta498.3398: [Int] = [image_size] in
              let Ti499.3399: Int = 0 in
                let Ti500.3396: Int = Ta498.3398.(Ti499.3399) in
                  let Ti501.3397: Int = 2 in
                    let Ti502.3395: Int = (Ti500.3396 - Ti501.3397) in
                      init_line_elements.3027(line.3394, Ti502.3395) in
                                                                                                                                                                                                                                                                  let rec (tan.3032: (Float) -> Float) ((x.3033: Float)) = let Td491.3392: Float = sin(x.3033) in
  let Td492.3393: Float = cos(x.3033) in
    (Td491.3392 / Td492.3393) in
                                                                                                                                                                                                                                                                    let rec (adjust_position.3034: (Float, Float) -> Float) ((h.3035: Float), (ratio.3036: Float)) = let Td486.3390: Float = (h.3035 * h.3035) in
  let Td487.3391: Float = 0.1 in
    let Td488.3389: Float = (Td486.3390 + Td487.3391) in
      let l.3383: Float = sqrt(Td488.3389) in
        let Td489.3388: Float = 1. in
          let tan_h.3384: Float = (Td489.3388 / l.3383) in
            let theta_h.3385: Float = atan(tan_h.3384) in
              let Td490.3387: Float = (theta_h.3385 * ratio.3036) in
                let tan_m.3386: Float = tan.3032(Td490.3387) in
                  (tan_m.3386 * l.3383) in
                                                                                                                                                                                                                                                                      let rec (calc_dirvec.3037: (Int, Float, Float, Float, Float, Int, Int) -> Unit) ((icount.3038: Int), (x.3039: Float), (y.3040: Float), (rx.3041: Float), (ry.3042: Float), (group_id.3043: Int), (index.3044: Int)) = let Ti444.3330: Int = 5 in
  if Ti444.3330 <= icount.3038 then
    let Td445.3381: Float = fsqr(x.3039) in
      let Td446.3382: Float = fsqr(y.3040) in
        let Td447.3379: Float = (Td445.3381 + Td446.3382) in
          let Td448.3380: Float = 1. in
            let Td449.3378: Float = (Td447.3379 + Td448.3380) in
              let l.3335: Float = sqrt(Td449.3378) in
                let vx.3336: Float = (x.3039 / l.3335) in
                  let vy.3337: Float = (y.3040 / l.3335) in
                    let Td450.3377: Float = 1. in
                      let vz.3338: Float = (Td450.3377 / l.3335) in
                        let Ta451.3376: [[([Float], [[Float]])]] = [dirvecs] in
                          let dgroup.3339: [([Float], [[Float]])] = Ta451.3376.(group_id.3043) in
                            let Tt452.3375: ([Float], [[Float]]) = dgroup.3339.(index.3044) in
                              let Ta453.3374: [Float] = d_vec.2717(Tt452.3375) in
                                let Tu218.3340: Unit = vecset.2610(Ta453.3374, vx.3336, vy.3337, vz.3338) in
                                  let Ti454.3373: Int = 40 in
                                    let Ti455.3372: Int = (index.3044 + Ti454.3373) in
                                      let Tt456.3371: ([Float], [[Float]]) = dgroup.3339.(Ti455.3372) in
                                        let Ta457.3369: [Float] = d_vec.2717(Tt456.3371) in
                                          let Td458.3370: Float = fneg(vy.3337) in
                                            let Tu217.3341: Unit = vecset.2610(Ta457.3369, vx.3336, vz.3338, Td458.3370) in
                                              let Ti459.3368: Int = 80 in
                                                let Ti460.3367: Int = (index.3044 + Ti459.3368) in
                                                  let Tt461.3366: ([Float], [[Float]]) = dgroup.3339.(Ti460.3367) in
                                                    let Ta462.3363: [Float] = d_vec.2717(Tt461.3366) in
                                                      let Td463.3364: Float = fneg(vx.3336) in
                                                        let Td464.3365: Float = fneg(vy.3337) in
                                                          let Tu216.3342: Unit = vecset.2610(Ta462.3363, vz.3338, Td463.3364, Td464.3365) in
                                                            let Ti465.3362: Int = 1 in
                                                              let Ti466.3361: Int = (index.3044 + Ti465.3362) in
                                                                let Tt467.3360: ([Float], [[Float]]) = dgroup.3339.(Ti466.3361) in
                                                                  let Ta468.3356: [Float] = d_vec.2717(Tt467.3360) in
                                                                    let Td469.3357: Float = fneg(vx.3336) in
                                                                      let Td470.3358: Float = fneg(vy.3337) in
                                                                        let Td471.3359: Float = fneg(vz.3338) in
                                                                          let Tu215.3343: Unit = vecset.2610(Ta468.3356, Td469.3357, Td470.3358, Td471.3359) in
                                                                            let Ti472.3355: Int = 41 in
                                                                              let Ti473.3354: Int = (index.3044 + Ti472.3355) in
                                                                                let Tt474.3353: ([Float], [[Float]]) = dgroup.3339.(Ti473.3354) in
                                                                                  let Ta475.3350: [Float] = d_vec.2717(Tt474.3353) in
                                                                                    let Td476.3351: Float = fneg(vx.3336) in
                                                                                      let Td477.3352: Float = fneg(vz.3338) in
                                                                                        let Tu214.3344: Unit = vecset.2610(Ta475.3350, Td476.3351, Td477.3352, vy.3337) in
                                                                                          let Ti478.3349: Int = 81 in
                                                                                            let Ti479.3348: Int = (index.3044 + Ti478.3349) in
                                                                                              let Tt480.3347: ([Float], [[Float]]) = dgroup.3339.(Ti479.3348) in
                                                                                                let Ta481.3345: [Float] = d_vec.2717(Tt480.3347) in
                                                                                                  let Td482.3346: Float = fneg(vz.3338) in
                                                                                                    vecset.2610(Ta481.3345, Td482.3346, vx.3336, vy.3337)
  else
    let x2.3331: Float = adjust_position.3034(y.3040, rx.3041) in
      let Ti483.3334: Int = 1 in
        let Ti484.3332: Int = (icount.3038 + Ti483.3334) in
          let Td485.3333: Float = adjust_position.3034(x2.3331, ry.3042) in
            calc_dirvec.3037(Ti484.3332, x2.3331, Td485.3333, rx.3041, ry.3042, group_id.3043, index.3044) in
                                                                                                                                                                                                                                                                        let rec (calc_dirvecs.3045: (Int, Float, Int, Int) -> Unit) ((col.3046: Int), (ry.3047: Float), (group_id.3048: Int), (index.3049: Int)) = let Ti423.3305: Int = 0 in
  if Ti423.3305 <= col.3046 then
    let Td424.3328: Float = float_of_int(col.3046) in
      let Td425.3329: Float = 0.2 in
        let Td426.3326: Float = (Td424.3328 * Td425.3329) in
          let Td427.3327: Float = 0.9 in
            let rx.3306: Float = (Td426.3326 - Td427.3327) in
              let Ti428.3323: Int = 0 in
                let Td429.3324: Float = 0. in
                  let Td430.3325: Float = 0. in
                    let Tu220.3307: Unit = calc_dirvec.3037(Ti428.3323, Td429.3324, Td430.3325, rx.3306, ry.3047, group_id.3048, index.3049) in
                      let Td431.3321: Float = float_of_int(col.3046) in
                        let Td432.3322: Float = 0.2 in
                          let Td433.3319: Float = (Td431.3321 * Td432.3322) in
                            let Td434.3320: Float = 0.1 in
                              let rx2.3308: Float = (Td433.3319 + Td434.3320) in
                                let Ti435.3314: Int = 0 in
                                  let Td436.3315: Float = 0. in
                                    let Td437.3316: Float = 0. in
                                      let Ti438.3318: Int = 2 in
                                        let Ti439.3317: Int = (index.3049 + Ti438.3318) in
                                          let Tu219.3309: Unit = calc_dirvec.3037(Ti435.3314, Td436.3315, Td437.3316, rx2.3308, ry.3047, group_id.3048, Ti439.3317) in
                                            let Ti440.3313: Int = 1 in
                                              let Ti441.3310: Int = (col.3046 - Ti440.3313) in
                                                let Ti442.3312: Int = 1 in
                                                  let Ti443.3311: Int = add_mod5.2607(group_id.3048, Ti442.3312) in
                                                    calc_dirvecs.3045(Ti441.3310, ry.3047, Ti443.3311, index.3049)
  else
    () in
                                                                                                                                                                                                                                                                          let rec (calc_dirvec_rows.3050: (Int, Int, Int) -> Unit) ((row.3051: Int), (group_id.3052: Int), (index.3053: Int)) = let Ti411.3291: Int = 0 in
  if Ti411.3291 <= row.3051 then
    let Td412.3303: Float = float_of_int(row.3051) in
      let Td413.3304: Float = 0.2 in
        let Td414.3301: Float = (Td412.3303 * Td413.3304) in
          let Td415.3302: Float = 0.9 in
            let ry.3292: Float = (Td414.3301 - Td415.3302) in
              let Ti416.3300: Int = 4 in
                let Tu221.3293: Unit = calc_dirvecs.3045(Ti416.3300, ry.3292, group_id.3052, index.3053) in
                  let Ti417.3299: Int = 1 in
                    let Ti418.3294: Int = (row.3051 - Ti417.3299) in
                      let Ti419.3298: Int = 2 in
                        let Ti420.3295: Int = add_mod5.2607(group_id.3052, Ti419.3298) in
                          let Ti421.3297: Int = 4 in
                            let Ti422.3296: Int = (index.3053 + Ti421.3297) in
                              calc_dirvec_rows.3050(Ti418.3294, Ti420.3295, Ti422.3296)
  else
    () in
                                                                                                                                                                                                                                                                            let rec (create_dirvec.3054: (Unit) -> ([Float], [[Float]])) ((Tu222.3055: Unit)) = let Ti406.3289: Int = 3 in
  let Td407.3290: Float = 0. in
    let v3.3284: [Float] = create_float_array(Ti406.3289, Td407.3290) in
      let Ta408.3287: [Int] = [n_objects] in
        let Ti409.3288: Int = 0 in
          let Ti410.3286: Int = Ta408.3287.(Ti409.3288) in
            let consts.3285: [[Float]] = create_array(Ti410.3286, v3.3284) in
              (v3.3284, consts.3285) in
                                                                                                                                                                                                                                                                              let rec (create_dirvec_elements.3056: ([([Float], [[Float]])], Int) -> Unit) ((d.3057: [([Float], [[Float]])]), (index.3058: Int)) = let Ti401.3278: Int = 0 in
  if Ti401.3278 <= index.3058 then
    let Tu402.3283: Unit = () in
      let Tt403.3282: ([Float], [[Float]]) = create_dirvec.3054(Tu402.3283) in
        let Tu223.3279: Unit = d.3057.(index.3058) <- Tt403.3282 in
          let Ti404.3281: Int = 1 in
            let Ti405.3280: Int = (index.3058 - Ti404.3281) in
              create_dirvec_elements.3056(d.3057, Ti405.3280)
  else
    () in
                                                                                                                                                                                                                                                                                let rec (create_dirvecs.3059: (Int) -> Unit) ((index.3060: Int)) = let Ti390.3265: Int = 0 in
  if Ti390.3265 <= index.3060 then
    let Ta391.3273: [[([Float], [[Float]])]] = [dirvecs] in
      let Ti392.3275: Int = 120 in
        let Tu393.3277: Unit = () in
          let Tt394.3276: ([Float], [[Float]]) = create_dirvec.3054(Tu393.3277) in
            let Ta395.3274: [([Float], [[Float]])] = create_array(Ti392.3275, Tt394.3276) in
              let Tu225.3266: Unit = Ta391.3273.(index.3060) <- Ta395.3274 in
                let Ta396.3272: [[([Float], [[Float]])]] = [dirvecs] in
                  let Ta397.3270: [([Float], [[Float]])] = Ta396.3272.(index.3060) in
                    let Ti398.3271: Int = 118 in
                      let Tu224.3267: Unit = create_dirvec_elements.3056(Ta397.3270, Ti398.3271) in
                        let Ti399.3269: Int = 1 in
                          let Ti400.3268: Int = (index.3060 - Ti399.3269) in
                            create_dirvecs.3059(Ti400.3268)
  else
    () in
                                                                                                                                                                                                                                                                                  let rec (init_dirvec_constants.3061: ([([Float], [[Float]])], Int) -> Unit) ((vecset.3062: [([Float], [[Float]])]), (index.3063: Int)) = let Ti386.3260: Int = 0 in
  if Ti386.3260 <= index.3063 then
    let Tt387.3264: ([Float], [[Float]]) = vecset.3062.(index.3063) in
      let Tu226.3261: Unit = setup_dirvec_constants.2846(Tt387.3264) in
        let Ti388.3263: Int = 1 in
          let Ti389.3262: Int = (index.3063 - Ti388.3263) in
            init_dirvec_constants.3061(vecset.3062, Ti389.3262)
  else
    () in
                                                                                                                                                                                                                                                                                    let rec (init_vecset_constants.3064: (Int) -> Unit) ((index.3065: Int)) = let Ti380.3253: Int = 0 in
  if Ti380.3253 <= index.3065 then
    let Ta381.3259: [[([Float], [[Float]])]] = [dirvecs] in
      let Ta382.3257: [([Float], [[Float]])] = Ta381.3259.(index.3065) in
        let Ti383.3258: Int = 119 in
          let Tu227.3254: Unit = init_dirvec_constants.3061(Ta382.3257, Ti383.3258) in
            let Ti384.3256: Int = 1 in
              let Ti385.3255: Int = (index.3065 - Ti384.3256) in
                init_vecset_constants.3064(Ti385.3255)
  else
    () in
                                                                                                                                                                                                                                                                                      let rec (init_dirvecs.3066: (Unit) -> Unit) ((Tu228.3067: Unit)) = let Ti375.3252: Int = 4 in
  let Tu230.3246: Unit = create_dirvecs.3059(Ti375.3252) in
    let Ti376.3249: Int = 9 in
      let Ti377.3250: Int = 0 in
        let Ti378.3251: Int = 0 in
          let Tu229.3247: Unit = calc_dirvec_rows.3050(Ti376.3249, Ti377.3250, Ti378.3251) in
            let Ti379.3248: Int = 4 in
              init_vecset_constants.3064(Ti379.3248) in
                                                                                                                                                                                                                                                                                        let rec (add_reflection.3068: (Int, Int, Float, Float, Float, Float) -> Unit) ((index.3069: Int), (surface_id.3070: Int), (bright.3071: Float), (v0.3072: Float), (v1.3073: Float), (v2.3074: Float)) = let Tu371.3245: Unit = () in
  let dvec.3239: ([Float], [[Float]]) = create_dirvec.3054(Tu371.3245) in
    let Ta372.3244: [Float] = d_vec.2717(dvec.3239) in
      let Tu232.3240: Unit = vecset.2610(Ta372.3244, v0.3072, v1.3073, v2.3074) in
        let Tu231.3241: Unit = setup_dirvec_constants.2846(dvec.3239) in
          let Ta373.3242: [(Int, ([Float], [[Float]]), Float)] = [reflections] in
            let Tt374.3243: (Int, ([Float], [[Float]]), Float) = (surface_id.3070, dvec.3239, bright.3071) in
              Ta373.3242.(index.3069) <- Tt374.3243 in
                                                                                                                                                                                                                                                                                          let rec (setup_rect_reflection.3075: (Int, (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Unit) ((obj_id.3076: Int), (obj.3077: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let Ti334.3238: Int = 4 in
  let sid.3193: Int = (obj_id.3076 * Ti334.3238) in
    let Ta335.3236: [Int] = [n_reflections] in
      let Ti336.3237: Int = 0 in
        let nr.3194: Int = Ta335.3236.(Ti336.3237) in
          let Td337.3234: Float = 1. in
            let Td338.3235: Float = o_diffuse.2680(obj.3077) in
              let br.3195: Float = (Td337.3234 - Td338.3235) in
                let Ta339.3232: [Float] = [light] in
                  let Ti340.3233: Int = 0 in
                    let Td341.3231: Float = Ta339.3232.(Ti340.3233) in
                      let n0.3196: Float = fneg(Td341.3231) in
                        let Ta342.3229: [Float] = [light] in
                          let Ti343.3230: Int = 1 in
                            let Td344.3228: Float = Ta342.3229.(Ti343.3230) in
                              let n1.3197: Float = fneg(Td344.3228) in
                                let Ta345.3226: [Float] = [light] in
                                  let Ti346.3227: Int = 2 in
                                    let Td347.3225: Float = Ta345.3226.(Ti346.3227) in
                                      let n2.3198: Float = fneg(Td347.3225) in
                                        let Ti348.3224: Int = 1 in
                                          let Ti349.3220: Int = (sid.3193 + Ti348.3224) in
                                            let Ta350.3222: [Float] = [light] in
                                              let Ti351.3223: Int = 0 in
                                                let Td352.3221: Float = Ta350.3222.(Ti351.3223) in
                                                  let Tu235.3199: Unit = add_reflection.3068(nr.3194, Ti349.3220, br.3195, Td352.3221, n1.3197, n2.3198) in
                                                    let Ti353.3219: Int = 1 in
                                                      let Ti354.3213: Int = (nr.3194 + Ti353.3219) in
                                                        let Ti355.3218: Int = 2 in
                                                          let Ti356.3214: Int = (sid.3193 + Ti355.3218) in
                                                            let Ta357.3216: [Float] = [light] in
                                                              let Ti358.3217: Int = 1 in
                                                                let Td359.3215: Float = Ta357.3216.(Ti358.3217) in
                                                                  let Tu234.3200: Unit = add_reflection.3068(Ti354.3213, Ti356.3214, br.3195, n0.3196, Td359.3215, n2.3198) in
                                                                    let Ti360.3212: Int = 2 in
                                                                      let Ti361.3206: Int = (nr.3194 + Ti360.3212) in
                                                                        let Ti362.3211: Int = 3 in
                                                                          let Ti363.3207: Int = (sid.3193 + Ti362.3211) in
                                                                            let Ta364.3209: [Float] = [light] in
                                                                              let Ti365.3210: Int = 2 in
                                                                                let Td366.3208: Float = Ta364.3209.(Ti365.3210) in
                                                                                  let Tu233.3201: Unit = add_reflection.3068(Ti361.3206, Ti363.3207, br.3195, n0.3196, n1.3197, Td366.3208) in
                                                                                    let Ta367.3202: [Int] = [n_reflections] in
                                                                                      let Ti368.3203: Int = 0 in
                                                                                        let Ti369.3205: Int = 3 in
                                                                                          let Ti370.3204: Int = (nr.3194 + Ti369.3205) in
                                                                                            Ta367.3202.(Ti368.3203) <- Ti370.3204 in
                                                                                                                                                                                                                                                                                            let rec (setup_surface_reflection.3078: (Int, (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])) -> Unit) ((obj_id.3079: Int), (obj.3080: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]))) = let Ti297.3192: Int = 4 in
  let Ti298.3190: Int = (obj_id.3079 * Ti297.3192) in
    let Ti299.3191: Int = 1 in
      let sid.3151: Int = (Ti298.3190 + Ti299.3191) in
        let Ta300.3188: [Int] = [n_reflections] in
          let Ti301.3189: Int = 0 in
            let nr.3152: Int = Ta300.3188.(Ti301.3189) in
              let Td302.3186: Float = 1. in
                let Td303.3187: Float = o_diffuse.2680(obj.3080) in
                  let br.3153: Float = (Td302.3186 - Td303.3187) in
                    let Ta304.3184: [Float] = [light] in
                      let Ta305.3185: [Float] = o_param_abc.2672(obj.3080) in
                        let p.3154: Float = veciprod.2631(Ta304.3184, Ta305.3185) in
                          let Td306.3182: Float = 2. in
                            let Td307.3183: Float = o_param_a.2666(obj.3080) in
                              let Td308.3181: Float = (Td306.3182 * Td307.3183) in
                                let Td309.3177: Float = (Td308.3181 * p.3154) in
                                  let Ta310.3179: [Float] = [light] in
                                    let Ti311.3180: Int = 0 in
                                      let Td312.3178: Float = Ta310.3179.(Ti311.3180) in
                                        let Td313.3160: Float = (Td309.3177 - Td312.3178) in
                                          let Td314.3175: Float = 2. in
                                            let Td315.3176: Float = o_param_b.2668(obj.3080) in
                                              let Td316.3174: Float = (Td314.3175 * Td315.3176) in
                                                let Td317.3170: Float = (Td316.3174 * p.3154) in
                                                  let Ta318.3172: [Float] = [light] in
                                                    let Ti319.3173: Int = 1 in
                                                      let Td320.3171: Float = Ta318.3172.(Ti319.3173) in
                                                        let Td321.3161: Float = (Td317.3170 - Td320.3171) in
                                                          let Td322.3168: Float = 2. in
                                                            let Td323.3169: Float = o_param_c.2670(obj.3080) in
                                                              let Td324.3167: Float = (Td322.3168 * Td323.3169) in
                                                                let Td325.3163: Float = (Td324.3167 * p.3154) in
                                                                  let Ta326.3165: [Float] = [light] in
                                                                    let Ti327.3166: Int = 2 in
                                                                      let Td328.3164: Float = Ta326.3165.(Ti327.3166) in
                                                                        let Td329.3162: Float = (Td325.3163 - Td328.3164) in
                                                                          let Tu236.3155: Unit = add_reflection.3068(nr.3152, sid.3151, br.3153, Td313.3160, Td321.3161, Td329.3162) in
                                                                            let Ta330.3156: [Int] = [n_reflections] in
                                                                              let Ti331.3157: Int = 0 in
                                                                                let Ti332.3159: Int = 1 in
                                                                                  let Ti333.3158: Int = (nr.3152 + Ti332.3159) in
                                                                                    Ta330.3156.(Ti331.3157) <- Ti333.3158 in
                                                                                                                                                                                                                                                                                              let rec (setup_reflections.3081: (Int) -> Unit) ((obj_id.3082: Int)) = let Ti287.3139: Int = 0 in
  if Ti287.3139 <= obj_id.3082 then
    let Ta288.3150: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float])] = [objects] in
      let obj.3140: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float], [Float]) = Ta288.3150.(obj_id.3082) in
        let Ti289.3141: Int = o_reflectiontype.2660(obj.3140) in
          let Ti290.3142: Int = 2 in
            if Ti289.3141 == Ti290.3142 then
              let Td291.3148: Float = o_diffuse.2680(obj.3140) in
                let Td292.3149: Float = 1. in
                  let Tb293.3143: Bool = fless(Td291.3148, Td292.3149) in
                    let Ti294.3144: Int = 0 in
                      if Tb293.3143 == Ti294.3144 then
                        ()
                      else
                        let m_shape.3145: Int = o_form.2658(obj.3140) in
                          let Ti295.3146: Int = 1 in
                            if m_shape.3145 == Ti295.3146 then
                              setup_rect_reflection.3075(obj_id.3082, obj.3140)
                            else
                              let Ti296.3147: Int = 2 in
                                if m_shape.3145 == Ti296.3147 then
                                  setup_surface_reflection.3078(obj_id.3082, obj.3140)
                                else
                                  ()
            else
              ()
  else
    () in
                                                                                                                                                                                                                                                                                                let rec (rt.3083: (Int, Int) -> Unit) ((size_x.3084: Int), (size_y.3085: Int)) = let Ta251.3137: [Int] = [image_size] in
  let Ti252.3138: Int = 0 in
    let Tu248.3088: Unit = Ta251.3137.(Ti252.3138) <- size_x.3084 in
      let Ta253.3135: [Int] = [image_size] in
        let Ti254.3136: Int = 1 in
          let Tu247.3089: Unit = Ta253.3135.(Ti254.3136) <- size_y.3085 in
            let Ta255.3131: [Int] = [image_center] in
              let Ti256.3132: Int = 0 in
                let Ti257.3134: Int = 2 in
                  let Ti258.3133: Int = (size_x.3084 / Ti257.3134) in
                    let Tu246.3090: Unit = Ta255.3131.(Ti256.3132) <- Ti258.3133 in
                      let Ta259.3127: [Int] = [image_center] in
                        let Ti260.3128: Int = 1 in
                          let Ti261.3130: Int = 2 in
                            let Ti262.3129: Int = (size_y.3085 / Ti261.3130) in
                              let Tu245.3091: Unit = Ta259.3127.(Ti260.3128) <- Ti262.3129 in
                                let Ta263.3122: [Float] = [scan_pitch] in
                                  let Ti264.3123: Int = 0 in
                                    let Td265.3125: Float = 128. in
                                      let Td266.3126: Float = float_of_int(size_x.3084) in
                                        let Td267.3124: Float = (Td265.3125 / Td266.3126) in
                                          let Tu244.3092: Unit = Ta263.3122.(Ti264.3123) <- Td267.3124 in
                                            let Tu268.3121: Unit = () in
                                              let prev.3093: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])] = create_pixelline.3030(Tu268.3121) in
                                                let Tu269.3120: Unit = () in
                                                  let cur.3094: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])] = create_pixelline.3030(Tu269.3120) in
                                                    let Tu270.3119: Unit = () in
                                                      let next.3095: [([Float], [[Float]], [Int], [Bool], [[Float]], [[Float]], [Int], [[Float]])] = create_pixelline.3030(Tu270.3119) in
                                                        let Tu271.3118: Unit = () in
                                                          let Tu243.3096: Unit = read_parameter.2748(Tu271.3118) in
                                                            let Tu272.3117: Unit = () in
                                                              let Tu242.3097: Unit = write_ppm_header.2991(Tu272.3117) in
                                                                let Tu273.3116: Unit = () in
                                                                  let Tu241.3098: Unit = init_dirvecs.3066(Tu273.3116) in
                                                                    let Tt274.3115: ([Float], [[Float]]) = light_dirvec: ([Float], [[Float]]) in
                                                                      let Ta275.3113: [Float] = d_vec.2717(Tt274.3115) in
                                                                        let Ta276.3114: [Float] = [light] in
                                                                          let Tu240.3099: Unit = veccpy.2620(Ta275.3113, Ta276.3114) in
                                                                            let Tt277.3112: ([Float], [[Float]]) = light_dirvec: ([Float], [[Float]]) in
                                                                              let Tu239.3100: Unit = setup_dirvec_constants.2846(Tt277.3112) in
                                                                                let Ta278.3110: [Int] = [n_objects] in
                                                                                  let Ti279.3111: Int = 0 in
                                                                                    let Ti280.3108: Int = Ta278.3110.(Ti279.3111) in
                                                                                      let Ti281.3109: Int = 1 in
                                                                                        let Ti282.3107: Int = (Ti280.3108 - Ti281.3109) in
                                                                                          let Tu238.3101: Unit = setup_reflections.3081(Ti282.3107) in
                                                                                            let Ti283.3105: Int = 0 in
                                                                                              let Ti284.3106: Int = 0 in
                                                                                                let Tu237.3102: Unit = pretrace_line.3007(cur.3094, Ti283.3105, Ti284.3106) in
                                                                                                  let Ti285.3103: Int = 0 in
                                                                                                    let Ti286.3104: Int = 2 in
                                                                                                      scan_line.3017(Ti285.3103, prev.3093, cur.3094, next.3095, Ti286.3104) in
                                                                                                                                                                                                                                                                                                  let Ti249.3086: Int = 128 in
                                                                                                                                                                                                                                                                                                    let Ti250.3087: Int = 128 in
                                                                                                                                                                                                                                                                                                      rt.3083(Ti249.3086, Ti250.3087)

