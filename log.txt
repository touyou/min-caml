Parser---
let rec (xor: T) ((x: T), (y: T)) =
if x then 
not(y)
else
y in
let rec (fsqr: T) ((x: T)) =
(x * x) in
let rec (fhalf: T) ((x: T)) =
(x / 2.) in
let rec (o_texturetype: T) ((m: T)) =
let ((m_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_tex in
let rec (o_form: T) ((m: T)) =
let ((xm_tex: T), (m_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_shape in
let rec (o_reflectiontype: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (m_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_surface in
let rec (o_isinvert: T) ((m: T)) =
let ((m_tex: T), (m_shape: T), (m_surface: T), (m_isrot: T), (xm_abc: T), (xm_xyz: T), (m_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_invert in
let rec (o_isrot: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (m_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_isrot in
let rec (o_param_a: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (m_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_abc.(0) in
let rec (o_param_b: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (m_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_abc.(1) in
let rec (o_param_c: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (m_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_abc.(2) in
let rec (o_param_x: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (m_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_xyz.(0) in
let rec (o_param_y: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (m_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_xyz.(1) in
let rec (o_param_z: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (m_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_xyz.(2) in
let rec (o_diffuse: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (m_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_surfparams.(0) in
let rec (o_hilight: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (m_surfparams: T), (xm_color: T), (xm_rot123: T)) =
m in
m_surfparams.(1) in
let rec (o_color_red: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (m_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (m_color: T), (xm_rot123: T)) =
m in
m_color.(0) in
let rec (o_color_green: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (m_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (m_color: T), (xm_rot123: T)) =
m in
m_color.(1) in
let rec (o_color_blue: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (m_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (m_color: T), (xm_rot123: T)) =
m in
m_color.(2) in
let rec (o_param_r1: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (m_rot123: T)) =
m in
m_rot123.(0) in
let rec (o_param_r2: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (m_rot123: T)) =
m in
m_rot123.(1) in
let rec (o_param_r3: T) ((m: T)) =
let ((xm_tex: T), (xm_shape: T), (xm_surface: T), (xm_isrot: T), (xm_abc: T), (xm_xyz: T), (xm_invert: T), (xm_surfparams: T), (xm_color: T), (m_rot123: T)) =
m in
m_rot123.(2) in
let rec (normalize_vector: T) ((v: T), (inv: T)) =
let n0: T =
sqrt(((fsqr(v.(0)) + fsqr(v.(1))) + fsqr(v.(2)))) in
let n: T =
if inv then 
-(n0)
else
n0 in
let Tu2: Unit =
v.(0) <- (v.(0) / n) in
let Tu1: Unit =
v.(1) <- (v.(1) / n) in
v.(2) <- (v.(2) / n) in
let rec (sgn: T) ((x: T)) =
if not(x <= 0.) then 
1.
else
-1. in
let rec (rad: T) ((x: T)) =
(x * 0.017453293) in
let rec (read_environ: T) ((Tu3: T)) =
let Tu19: Unit =
screen.(0) <- read_float(()) in
let Tu18: Unit =
screen.(1) <- read_float(()) in
let Tu17: Unit =
screen.(2) <- read_float(()) in
let v1: T =
rad(read_float(())) in
let Tu16: Unit =
cos_v.(0) <- cos(v1) in
let Tu15: Unit =
sin_v.(0) <- sin(v1) in
let v2: T =
rad(read_float(())) in
let Tu14: Unit =
cos_v.(1) <- cos(v2) in
let Tu13: Unit =
sin_v.(1) <- sin(v2) in
let nl: T =
read_float(()) in
let l1: T =
rad(read_float(())) in
let sl1: T =
sin(l1) in
let Tu12: Unit =
light.(1) <- -(sl1) in
let l2: T =
rad(read_float(())) in
let cl1: T =
cos(l1) in
let sl2: T =
sin(l2) in
let Tu11: Unit =
light.(0) <- (cl1 * sl2) in
let cl2: T =
cos(l2) in
let Tu10: Unit =
light.(2) <- (cl1 * cl2) in
let Tu9: Unit =
beam.(0) <- read_float(()) in
let Tu8: Unit =
vp.(0) <- ((cos_v.(0) * sin_v.(1)) * -200.) in
let Tu7: Unit =
vp.(1) <- (-(sin_v.(0)) * -200.) in
let Tu6: Unit =
vp.(2) <- ((cos_v.(0) * cos_v.(1)) * -200.) in
let Tu5: Unit =
view.(0) <- (vp.(0) + screen.(0)) in
let Tu4: Unit =
view.(1) <- (vp.(1) + screen.(1)) in
view.(2) <- (vp.(2) + screen.(2)) in
let rec (read_nth_object: T) ((n: T)) =
let texture: T =
read_int(()) in
if not(texture == -(1)) then 
let form: T =
read_int(()) in
let refltype: T =
read_int(()) in
let isrot_p: T =
read_int(()) in
let abc: T =
Array.create 3 0. in
let Tu58: Unit =
abc.(0) <- read_float(()) in
let Tu57: Unit =
abc.(1) <- read_float(()) in
let Tu56: Unit =
abc.(2) <- read_float(()) in
let xyz: T =
Array.create 3 0. in
let Tu55: Unit =
xyz.(0) <- read_float(()) in
let Tu54: Unit =
xyz.(1) <- read_float(()) in
let Tu53: Unit =
xyz.(2) <- read_float(()) in
let m_invert: T =
not(0. <= read_float(())) in
let reflparam: T =
Array.create 2 0. in
let Tu52: Unit =
reflparam.(0) <- read_float(()) in
let Tu51: Unit =
reflparam.(1) <- read_float(()) in
let color: T =
Array.create 3 0. in
let Tu50: Unit =
color.(0) <- read_float(()) in
let Tu49: Unit =
color.(1) <- read_float(()) in
let Tu48: Unit =
color.(2) <- read_float(()) in
let rotation: T =
Array.create 3 0. in
let Tu47: Unit =
if not(isrot_p == 0) then 
let Tu21: Unit =
rotation.(0) <- rad(read_float(())) in
let Tu20: Unit =
rotation.(1) <- rad(read_float(())) in
rotation.(2) <- rad(read_float(()))
else
() in
let m_invert2: T =
if form == 2 then 
true
else
m_invert in
let obj: T =
(texture, form, refltype, isrot_p, abc, xyz, m_invert2, reflparam, color, rotation) in
let Tu46: Unit =
objects.(n) <- obj in
let Tu45: Unit =
if form == 3 then 
let a: T =
abc.(0) in
let Tu23: Unit =
abc.(0) <- if 0. == a then 
0.
else
(sgn(a) / fsqr(a)) in
let b: T =
abc.(1) in
let Tu22: Unit =
abc.(1) <- if 0. == b then 
0.
else
(sgn(b) / fsqr(b)) in
let c: T =
abc.(2) in
abc.(2) <- if 0. == c then 
0.
else
(sgn(c) / fsqr(c))
else
if form == 2 then 
normalize_vector(abc, not(m_invert))
else
() in
let Tu44: Unit =
if not(isrot_p == 0) then 
let Tu43: Unit =
cs_temp.(10) <- cos(rotation.(0)) in
let Tu42: Unit =
cs_temp.(11) <- sin(rotation.(0)) in
let Tu41: Unit =
cs_temp.(12) <- cos(rotation.(1)) in
let Tu40: Unit =
cs_temp.(13) <- sin(rotation.(1)) in
let Tu39: Unit =
cs_temp.(14) <- cos(rotation.(2)) in
let Tu38: Unit =
cs_temp.(15) <- sin(rotation.(2)) in
let Tu37: Unit =
cs_temp.(0) <- (cs_temp.(12) * cs_temp.(14)) in
let Tu36: Unit =
cs_temp.(1) <- (((cs_temp.(11) * cs_temp.(13)) * cs_temp.(14)) - (cs_temp.(10) * cs_temp.(15))) in
let Tu35: Unit =
cs_temp.(2) <- (((cs_temp.(10) * cs_temp.(13)) * cs_temp.(14)) + (cs_temp.(11) * cs_temp.(15))) in
let Tu34: Unit =
cs_temp.(3) <- (cs_temp.(12) * cs_temp.(15)) in
let Tu33: Unit =
cs_temp.(4) <- (((cs_temp.(11) * cs_temp.(13)) * cs_temp.(15)) + (cs_temp.(10) * cs_temp.(14))) in
let Tu32: Unit =
cs_temp.(5) <- (((cs_temp.(10) * cs_temp.(13)) * cs_temp.(15)) - (cs_temp.(11) * cs_temp.(14))) in
let Tu31: Unit =
cs_temp.(6) <- -(cs_temp.(13)) in
let Tu30: Unit =
cs_temp.(7) <- (cs_temp.(11) * cs_temp.(12)) in
let Tu29: Unit =
cs_temp.(8) <- (cs_temp.(10) * cs_temp.(12)) in
let ao: T =
abc.(0) in
let bo: T =
abc.(1) in
let co: T =
abc.(2) in
let Tu28: Unit =
abc.(0) <- (((ao * fsqr(cs_temp.(0))) + (bo * fsqr(cs_temp.(3)))) + (co * fsqr(cs_temp.(6)))) in
let Tu27: Unit =
abc.(1) <- (((ao * fsqr(cs_temp.(1))) + (bo * fsqr(cs_temp.(4)))) + (co * fsqr(cs_temp.(7)))) in
let Tu26: Unit =
abc.(2) <- (((ao * fsqr(cs_temp.(2))) + (bo * fsqr(cs_temp.(5)))) + (co * fsqr(cs_temp.(8)))) in
let Tu25: Unit =
rotation.(0) <- (2. * ((((ao * cs_temp.(1)) * cs_temp.(2)) + ((bo * cs_temp.(4)) * cs_temp.(5))) + ((co * cs_temp.(7)) * cs_temp.(8)))) in
let Tu24: Unit =
rotation.(1) <- (2. * ((((ao * cs_temp.(0)) * cs_temp.(2)) + ((bo * cs_temp.(3)) * cs_temp.(5))) + ((co * cs_temp.(6)) * cs_temp.(8)))) in
rotation.(2) <- (2. * ((((ao * cs_temp.(0)) * cs_temp.(1)) + ((bo * cs_temp.(3)) * cs_temp.(4))) + ((co * cs_temp.(6)) * cs_temp.(7))))
else
() in
true
else
false in
let rec (read_object: T) ((n: T)) =
if not(61 <= n) then 
if read_nth_object(n) then 
read_object((n + 1))
else
()
else
() in
let rec (read_all_object: T) ((Tu59: T)) =
read_object(0) in
let rec (read_net_item: T) ((length: T)) =
let item: T =
read_int(()) in
if item == -(1) then 
Array.create (length + 1) -(1)
else
let v: T =
read_net_item((length + 1)) in
let Tu60: Unit =
v.(length) <- item in
v in
let rec (read_or_network: T) ((length: T)) =
let net: T =
read_net_item(0) in
if net.(0) == -(1) then 
Array.create (length + 1) net
else
let v: T =
read_or_network((length + 1)) in
let Tu61: Unit =
v.(length) <- net in
v in
let rec (read_and_network: T) ((n: T)) =
let net: T =
read_net_item(0) in
if net.(0) == -(1) then 
()
else
let Tu62: Unit =
and_net.(n) <- net in
read_and_network((n + 1)) in
let rec (read_parameter: T) ((Tu63: T)) =
let Tu66: Unit =
read_environ(()) in
let Tu65: Unit =
read_all_object(()) in
let Tu64: Unit =
read_and_network(0) in
or_net.(0) <- read_or_network(0) in
let rec (solver_rect: T) ((m: T), (l: T)) =
let answera: T =
if 0. == l.(0) then 
false
else
let d: T =
if xor(o_isinvert(m), not(0. <= l.(0))) then 
o_param_a(m)
else
-(o_param_a(m)) in
let d2: T =
((d - solver_w_vec.(0)) / l.(0)) in
if not(o_param_b(m) <= abs_float(((d2 * l.(1)) + solver_w_vec.(1)))) then 
if not(o_param_c(m) <= abs_float(((d2 * l.(2)) + solver_w_vec.(2)))) then 
let Tu67: Unit =
solver_dist.(0) <- d2 in
true
else
false
else
false in
if answera then 
1
else
let answerb: T =
if 0. == l.(1) then 
false
else
let d: T =
if xor(o_isinvert(m), not(0. <= l.(1))) then 
o_param_b(m)
else
-(o_param_b(m)) in
let d2: T =
((d - solver_w_vec.(1)) / l.(1)) in
if not(o_param_c(m) <= abs_float(((d2 * l.(2)) + solver_w_vec.(2)))) then 
if not(o_param_a(m) <= abs_float(((d2 * l.(0)) + solver_w_vec.(0)))) then 
let Tu68: Unit =
solver_dist.(0) <- d2 in
true
else
false
else
false in
if answerb then 
2
else
let answerc: T =
if 0. == l.(2) then 
false
else
let d: T =
if xor(o_isinvert(m), not(0. <= l.(2))) then 
o_param_c(m)
else
-(o_param_c(m)) in
let d2: T =
((d - solver_w_vec.(2)) / l.(2)) in
if not(o_param_a(m) <= abs_float(((d2 * l.(0)) + solver_w_vec.(0)))) then 
if not(o_param_b(m) <= abs_float(((d2 * l.(1)) + solver_w_vec.(1)))) then 
let Tu69: Unit =
solver_dist.(0) <- d2 in
true
else
false
else
false in
if answerc then 
3
else
0 in
let rec (solver_surface: T) ((m: T), (l: T)) =
let q: T =
(((l.(0) * o_param_a(m)) + (l.(1) * o_param_b(m))) + (l.(2) * o_param_c(m))) in
if not(q <= 0.) then 
let t: T =
((((solver_w_vec.(0) * o_param_a(m)) + (solver_w_vec.(1) * o_param_b(m))) + (solver_w_vec.(2) * o_param_c(m))) / q) in
let Tu70: Unit =
solver_dist.(0) <- -(t) in
1
else
0 in
let rec (in_prod_sqr_obj: T) ((m: T), (v: T)) =
(((fsqr(v.(0)) * o_param_a(m)) + (fsqr(v.(1)) * o_param_b(m))) + (fsqr(v.(2)) * o_param_c(m))) in
let rec (in_prod_co_objrot: T) ((m: T), (v: T)) =
((((v.(1) * v.(2)) * o_param_r1(m)) + ((v.(0) * v.(2)) * o_param_r2(m))) + ((v.(0) * v.(1)) * o_param_r3(m))) in
let rec (solver2nd_mul_b: T) ((m: T), (l: T)) =
((((solver_w_vec.(0) * l.(0)) * o_param_a(m)) + ((solver_w_vec.(1) * l.(1)) * o_param_b(m))) + ((solver_w_vec.(2) * l.(2)) * o_param_c(m))) in
let rec (solver2nd_rot_b: T) ((m: T), (l: T)) =
(((((solver_w_vec.(2) * l.(1)) + (solver_w_vec.(1) * l.(2))) * o_param_r1(m)) + (((solver_w_vec.(0) * l.(2)) + (solver_w_vec.(2) * l.(0))) * o_param_r2(m))) + (((solver_w_vec.(0) * l.(1)) + (solver_w_vec.(1) * l.(0))) * o_param_r3(m))) in
let rec (solver_second: T) ((m: T), (l: T)) =
let aa0: T =
in_prod_sqr_obj(m, l) in
let aa: T =
if not(o_isrot(m) == 0) then 
(aa0 + in_prod_co_objrot(m, l))
else
aa0 in
if 0. == aa then 
0
else
let bb0: T =
(2. * solver2nd_mul_b(m, l)) in
let bb: T =
if not(o_isrot(m) == 0) then 
(bb0 + solver2nd_rot_b(m, l))
else
bb0 in
let cc0: T =
in_prod_sqr_obj(m, solver_w_vec) in
let cc1: T =
if not(o_isrot(m) == 0) then 
(cc0 + in_prod_co_objrot(m, solver_w_vec))
else
cc0 in
let cc: T =
if o_form(m) == 3 then 
(cc1 - 1.)
else
cc1 in
let d: T =
let d2: T =
((4. * aa) * cc) in
(fsqr(bb) - d2) in
if not(d <= 0.) then 
let sd: T =
sqrt(d) in
let t1: T =
if o_isinvert(m) then 
sd
else
-(sd) in
let Tu71: Unit =
solver_dist.(0) <- (((t1 - bb) / 2.) / aa) in
1
else
0 in
let rec (solver: T) ((index: T), (l: T), (p: T)) =
let m: T =
objects.(index) in
let Tu74: Unit =
solver_w_vec.(0) <- (p.(0) - o_param_x(m)) in
let Tu73: Unit =
solver_w_vec.(1) <- (p.(1) - o_param_y(m)) in
let Tu72: Unit =
solver_w_vec.(2) <- (p.(2) - o_param_z(m)) in
let m_shape: T =
o_form(m) in
if m_shape == 1 then 
solver_rect(m, l)
else
if m_shape == 2 then 
solver_surface(m, l)
else
solver_second(m, l) in
let rec (is_rect_outside: T) ((m: T)) =
if if not(o_param_a(m) <= abs_float(isoutside_q.(0))) then 
if not(o_param_b(m) <= abs_float(isoutside_q.(1))) then 
if not(o_param_c(m) <= abs_float(isoutside_q.(2))) then 
true
else
false
else
false
else
false then 
o_isinvert(m)
else
not(o_isinvert(m)) in
let rec (is_plane_outside: T) ((m: T)) =
let w: T =
(((o_param_a(m) * isoutside_q.(0)) + (o_param_b(m) * isoutside_q.(1))) + (o_param_c(m) * isoutside_q.(2))) in
let s: T =
not(0. <= w) in
not(xor(o_isinvert(m), s)) in
let rec (is_second_outside: T) ((m: T)) =
let w: T =
in_prod_sqr_obj(m, isoutside_q) in
let w2: T =
if o_form(m) == 3 then 
(w - 1.)
else
w in
let w3: T =
if not(o_isrot(m) == 0) then 
(w2 + in_prod_co_objrot(m, isoutside_q))
else
w2 in
let s: T =
not(0. <= w3) in
not(xor(o_isinvert(m), s)) in
let rec (is_outside: T) ((m: T)) =
let Tu77: Unit =
isoutside_q.(0) <- (chkinside_p.(0) - o_param_x(m)) in
let Tu76: Unit =
isoutside_q.(1) <- (chkinside_p.(1) - o_param_y(m)) in
let Tu75: Unit =
isoutside_q.(2) <- (chkinside_p.(2) - o_param_z(m)) in
let m_shape: T =
o_form(m) in
if m_shape == 1 then 
is_rect_outside(m)
else
if m_shape == 2 then 
is_plane_outside(m)
else
is_second_outside(m) in
let rec (check_all_inside: T) ((ofs: T), (iand: T)) =
let head: T =
iand.(ofs) in
if head == -(1) then 
true
else
if is_outside(objects.(head)) then 
false
else
check_all_inside((ofs + 1), iand) in
let rec (shadow_check_and_group: T) ((iand_ofs: T), (and_group: T), (p: T)) =
if and_group.(iand_ofs) == -(1) then 
false
else
let obj: T =
and_group.(iand_ofs) in
let t0: T =
solver(obj, light, p) in
let t0p: T =
solver_dist.(0) in
if if not(t0 == 0) then 
not(-0.2 <= t0p)
else
false then 
let t: T =
(t0p + 0.01) in
let Tu80: Unit =
chkinside_p.(0) <- ((light.(0) * t) + p.(0)) in
let Tu79: Unit =
chkinside_p.(1) <- ((light.(1) * t) + p.(1)) in
let Tu78: Unit =
chkinside_p.(2) <- ((light.(2) * t) + p.(2)) in
if check_all_inside(0, and_group) then 
true
else
shadow_check_and_group((iand_ofs + 1), and_group, p)
else
if o_isinvert(objects.(obj)) then 
shadow_check_and_group((iand_ofs + 1), and_group, p)
else
false in
let rec (shadow_check_one_or_group: T) ((ofs: T), (or_group: T), (p: T)) =
let head: T =
or_group.(ofs) in
if head == -(1) then 
false
else
let and_group: T =
and_net.(head) in
let shadow_p: T =
shadow_check_and_group(0, and_group, p) in
if shadow_p then 
true
else
shadow_check_one_or_group((ofs + 1), or_group, p) in
let rec (shadow_check_one_or_matrix: T) ((ofs: T), (or_matrix: T), (p: T)) =
let head: T =
or_matrix.(ofs) in
let range_primitive: T =
head.(0) in
if range_primitive == -(1) then 
false
else
if range_primitive == 99 then 
if shadow_check_one_or_group(1, head, p) then 
true
else
shadow_check_one_or_matrix((ofs + 1), or_matrix, p)
else
let t: T =
solver(range_primitive, light, p) in
if not(t == 0) then 
if not(-0.1 <= solver_dist.(0)) then 
if shadow_check_one_or_group(1, head, p) then 
true
else
shadow_check_one_or_matrix((ofs + 1), or_matrix, p)
else
shadow_check_one_or_matrix((ofs + 1), or_matrix, p)
else
shadow_check_one_or_matrix((ofs + 1), or_matrix, p) in
let rec (solve_each_element: T) ((iand_ofs: T), (and_group: T)) =
let iobj: T =
and_group.(iand_ofs) in
if iobj == -(1) then 
()
else
let t0: T =
solver(iobj, vscan, viewpoint) in
let Tu89: Unit =
if not(t0 == 0) then 
let t0p: T =
solver_dist.(0) in
if not(t0p <= -0.1) then 
if not(tmin.(0) <= t0p) then 
let t: T =
(t0p + 0.01) in
let Tu88: Unit =
chkinside_p.(0) <- ((vscan.(0) * t) + viewpoint.(0)) in
let Tu87: Unit =
chkinside_p.(1) <- ((vscan.(1) * t) + viewpoint.(1)) in
let Tu86: Unit =
chkinside_p.(2) <- ((vscan.(2) * t) + viewpoint.(2)) in
if check_all_inside(0, and_group) then 
let Tu85: Unit =
tmin.(0) <- t in
let Tu84: Unit =
crashed_point.(0) <- chkinside_p.(0) in
let Tu83: Unit =
crashed_point.(1) <- chkinside_p.(1) in
let Tu82: Unit =
crashed_point.(2) <- chkinside_p.(2) in
let Tu81: Unit =
intsec_rectside.(0) <- t0 in
crashed_object.(0) <- iobj
else
()
else
()
else
()
else
if o_isinvert(objects.(iobj)) then 
()
else
end_flag.(0) <- true in
if not(end_flag.(0)) then 
solve_each_element((iand_ofs + 1), and_group)
else
() in
let rec (solve_one_or_network: T) ((ofs: T), (or_group: T)) =
let head: T =
or_group.(ofs) in
if head == -(1) then 
()
else
let and_group: T =
and_net.(head) in
let Tu91: Unit =
end_flag.(0) <- false in
let Tu90: Unit =
solve_each_element(0, and_group) in
solve_one_or_network((ofs + 1), or_group) in
let rec (trace_or_matrix: T) ((ofs: T), (or_network: T)) =
let head: T =
or_network.(ofs) in
let range_primitive: T =
head.(0) in
if range_primitive == -(1) then 
()
else
let Tu92: Unit =
if range_primitive == 99 then 
solve_one_or_network(1, head)
else
let t: T =
solver(range_primitive, vscan, viewpoint) in
if not(t == 0) then 
let tp: T =
solver_dist.(0) in
if not(tmin.(0) <= tp) then 
solve_one_or_network(1, head)
else
()
else
() in
trace_or_matrix((ofs + 1), or_network) in
let rec (tracer: T) ((viewpoint: T), (vscan: T)) =
let Tu94: Unit =
tmin.(0) <- 1000000000. in
let Tu93: Unit =
trace_or_matrix(0, or_net.(0)) in
let t: T =
tmin.(0) in
if not(t <= -0.1) then 
if not(100000000. <= t) then 
true
else
false
else
false in
let rec (get_nvector_rect: T) ((Tu95: T)) =
let rectside: T =
intsec_rectside.(0) in
if rectside == 1 then 
let Tu97: Unit =
nvector.(0) <- -(sgn(vscan.(0))) in
let Tu96: Unit =
nvector.(1) <- 0. in
nvector.(2) <- 0.
else
if rectside == 2 then 
let Tu99: Unit =
nvector.(0) <- 0. in
let Tu98: Unit =
nvector.(1) <- -(sgn(vscan.(1))) in
nvector.(2) <- 0.
else
if rectside == 3 then 
let Tu101: Unit =
nvector.(0) <- 0. in
let Tu100: Unit =
nvector.(1) <- 0. in
nvector.(2) <- -(sgn(vscan.(2)))
else
() in
let rec (get_nvector_plane: T) ((m: T)) =
let Tu103: Unit =
nvector.(0) <- -(o_param_a(m)) in
let Tu102: Unit =
nvector.(1) <- -(o_param_b(m)) in
nvector.(2) <- -(o_param_c(m)) in
let rec (get_nvector_second_norot: T) ((m: T), (p: T)) =
let Tu106: Unit =
nvector.(0) <- ((p.(0) - o_param_x(m)) * o_param_a(m)) in
let Tu105: Unit =
nvector.(1) <- ((p.(1) - o_param_y(m)) * o_param_b(m)) in
let Tu104: Unit =
nvector.(2) <- ((p.(2) - o_param_z(m)) * o_param_c(m)) in
normalize_vector(nvector, o_isinvert(m)) in
let rec (get_nvector_second_rot: T) ((m: T), (p: T)) =
let Tu112: Unit =
nvector_w.(0) <- (p.(0) - o_param_x(m)) in
let Tu111: Unit =
nvector_w.(1) <- (p.(1) - o_param_y(m)) in
let Tu110: Unit =
nvector_w.(2) <- (p.(2) - o_param_z(m)) in
let Tu109: Unit =
nvector.(0) <- ((nvector_w.(0) * o_param_a(m)) + fhalf(((nvector_w.(1) * o_param_r3(m)) + (nvector_w.(2) * o_param_r2(m))))) in
let Tu108: Unit =
nvector.(1) <- ((nvector_w.(1) * o_param_b(m)) + fhalf(((nvector_w.(0) * o_param_r3(m)) + (nvector_w.(2) * o_param_r1(m))))) in
let Tu107: Unit =
nvector.(2) <- ((nvector_w.(2) * o_param_c(m)) + fhalf(((nvector_w.(0) * o_param_r2(m)) + (nvector_w.(1) * o_param_r1(m))))) in
normalize_vector(nvector, o_isinvert(m)) in
let rec (get_nvector: T) ((m: T), (p: T)) =
let m_shape: T =
o_form(m) in
if m_shape == 1 then 
get_nvector_rect(())
else
if m_shape == 2 then 
get_nvector_plane(m)
else
if not(o_isrot(m) == 0) then 
get_nvector_second_rot(m, p)
else
get_nvector_second_norot(m, p) in
let rec (utexture: T) ((m: T), (p: T)) =
let m_tex: T =
o_texturetype(m) in
let Tu117: Unit =
texture_color.(0) <- o_color_red(m) in
let Tu116: Unit =
texture_color.(1) <- o_color_green(m) in
let Tu115: Unit =
texture_color.(2) <- o_color_blue(m) in
if m_tex == 1 then 
let w1: T =
(p.(0) - o_param_x(m)) in
let flag1: T =
let d1: T =
(floor((w1 * 0.05)) * 20.) in
if not(10. <= (w1 - d1)) then 
true
else
false in
let w3: T =
(p.(2) - o_param_z(m)) in
let flag2: T =
let d2: T =
(floor((w3 * 0.05)) * 20.) in
if not(10. <= (w3 - d2)) then 
true
else
false in
texture_color.(1) <- if flag1 then 
if flag2 then 
255.
else
0.
else
if flag2 then 
0.
else
255.
else
if m_tex == 2 then 
let w2: T =
fsqr(sin((p.(1) * 0.25))) in
let Tu113: Unit =
texture_color.(0) <- (255. * w2) in
texture_color.(1) <- (255. * (1. - w2))
else
if m_tex == 3 then 
let w1: T =
(p.(0) - o_param_x(m)) in
let w3: T =
(p.(2) - o_param_z(m)) in
let w2: T =
(sqrt((fsqr(w1) + fsqr(w3))) / 10.) in
let w4: T =
((w2 - floor(w2)) * 3.1415927) in
let cws: T =
fsqr(cos(w4)) in
let Tu114: Unit =
texture_color.(1) <- (cws * 255.) in
texture_color.(2) <- ((1. - cws) * 255.)
else
if m_tex == 4 then 
let w1: T =
((p.(0) - o_param_x(m)) * sqrt(o_param_a(m))) in
let w3: T =
((p.(2) - o_param_z(m)) * sqrt(o_param_c(m))) in
let w4: T =
sqrt((fsqr(w1) + fsqr(w3))) in
let w7: T =
if not(0.0001 <= abs_float(w1)) then 
15.
else
let w5: T =
abs_float((w3 / w1)) in
(atan(w5) * (30. / 3.1415927)) in
let w9: T =
(w7 - floor(w7)) in
let w2: T =
((p.(1) - o_param_y(m)) * sqrt(o_param_b(m))) in
let w8: T =
if not(0.0001 <= abs_float(w7)) then 
15.
else
let w6: T =
abs_float((w2 / w4)) in
(atan(w6) * (30. / 3.1415927)) in
let w10: T =
(w8 - floor(w8)) in
let w11: T =
((0.15 - fsqr((0.5 - w9))) - fsqr((0.5 - w10))) in
texture_color.(2) <- if w11 <= 0. then 
0.
else
(w11 * (255. / 0.3))
else
() in
let rec (in_prod: T) ((v1: T), (v2: T)) =
(((v1.(0) * v2.(0)) + (v1.(1) * v2.(1))) + (v1.(2) * v2.(2))) in
let rec (accumulate_vec_mul: T) ((v1: T), (v2: T), (w: T)) =
let Tu119: Unit =
v1.(0) <- (v1.(0) + (w * v2.(0))) in
let Tu118: Unit =
v1.(1) <- (v1.(1) + (w * v2.(1))) in
v1.(2) <- (v1.(2) + (w * v2.(2))) in
let rec (raytracing: T) ((nref: T), (energy: T)) =
let crashed_p: T =
tracer(viewpoint, vscan) in
let Tu131: Unit =
if not(crashed_p) then 
if not(nref == 0) then 
let hl: T =
-(in_prod(vscan, light)) in
if not(hl <= 0.) then 
let ihl: T =
(((fsqr(hl) * hl) * energy) * beam.(0)) in
let Tu121: Unit =
rgb.(0) <- (rgb.(0) + ihl) in
let Tu120: Unit =
rgb.(1) <- (rgb.(1) + ihl) in
rgb.(2) <- (rgb.(2) + ihl)
else
()
else
()
else
() in
if crashed_p then 
let cobj: T =
objects.(crashed_object.(0)) in
let Tu130: Unit =
get_nvector(cobj, crashed_point) in
let bright: T =
if shadow_check_one_or_matrix(0, or_net.(0), crashed_point) then 
0.
else
let br: T =
-(in_prod(nvector, light)) in
let br1: T =
if not(0. <= br) then 
0.2
else
(br + 0.2) in
((br1 * energy) * o_diffuse(cobj)) in
let Tu129: Unit =
utexture(cobj, crashed_point) in
let Tu128: Unit =
accumulate_vec_mul(rgb, texture_color, bright) in
if not(nref <= 4) then 
()
else
if not(energy <= 0.1) then 
let w: T =
(-2. * in_prod(vscan, nvector)) in
let Tu127: Unit =
accumulate_vec_mul(vscan, nvector, w) in
let m_surface: T =
o_reflectiontype(cobj) in
if m_surface == 1 then 
if 0. == o_hilight(cobj) then 
()
else
let hl: T =
-(in_prod(vscan, light)) in
if not(hl <= 0.) then 
let ihl: T =
(((fsqr(fsqr(hl)) * energy) * bright) * o_hilight(cobj)) in
let Tu123: Unit =
rgb.(0) <- (rgb.(0) + ihl) in
let Tu122: Unit =
rgb.(1) <- (rgb.(1) + ihl) in
rgb.(2) <- (rgb.(2) + ihl)
else
()
else
if m_surface == 2 then 
let Tu126: Unit =
viewpoint.(0) <- crashed_point.(0) in
let Tu125: Unit =
viewpoint.(1) <- crashed_point.(1) in
let Tu124: Unit =
viewpoint.(2) <- crashed_point.(2) in
let energy2: T =
(energy * (1. - o_diffuse(cobj))) in
raytracing((nref + 1), energy2)
else
()
else
()
else
() in
let rec (write_rgb: T) ((Tu132: T)) =
let red: T =
int_of_float(rgb.(0)) in
let red: T =
if not(red <= 255) then 
255
else
red in
let Tu134: Unit =
print_byte(red) in
let green: T =
int_of_float(rgb.(1)) in
let green: T =
if not(green <= 255) then 
255
else
green in
let Tu133: Unit =
print_byte(green) in
let blue: T =
int_of_float(rgb.(2)) in
let blue: T =
if not(blue <= 255) then 
255
else
blue in
print_byte(blue) in
let rec (write_ppm_header: T) ((Tu135: T)) =
let Tu143: Unit =
print_byte(80) in
let Tu142: Unit =
print_byte((48 + 6)) in
let Tu141: Unit =
print_byte(10) in
let Tu140: Unit =
print_int(size.(0)) in
let Tu139: Unit =
print_byte(32) in
let Tu138: Unit =
print_int(size.(1)) in
let Tu137: Unit =
print_byte(10) in
let Tu136: Unit =
print_int(255) in
print_byte(10) in
let rec (scan_point: T) ((scanx: T)) =
if size.(0) <= scanx then 
()
else
let sscanx: T =
((float_of_int(scanx) - scan_offset.(0)) * scan_d.(0)) in
let Tu157: Unit =
vscan.(0) <- ((sscanx * cos_v.(1)) + wscan.(0)) in
let Tu156: Unit =
vscan.(1) <- ((scan_sscany.(0) * cos_v.(0)) - vp.(1)) in
let Tu155: Unit =
vscan.(2) <- ((-(sscanx) * sin_v.(1)) + wscan.(2)) in
let metric: T =
sqrt((fsqr(sscanx) + scan_met1.(0))) in
let Tu154: Unit =
vscan.(0) <- (vscan.(0) / metric) in
let Tu153: Unit =
vscan.(1) <- (vscan.(1) / metric) in
let Tu152: Unit =
vscan.(2) <- (vscan.(2) / metric) in
let Tu151: Unit =
viewpoint.(0) <- view.(0) in
let Tu150: Unit =
viewpoint.(1) <- view.(1) in
let Tu149: Unit =
viewpoint.(2) <- view.(2) in
let Tu148: Unit =
rgb.(0) <- 0. in
let Tu147: Unit =
rgb.(1) <- 0. in
let Tu146: Unit =
rgb.(2) <- 0. in
let Tu145: Unit =
raytracing(0, 1.) in
let Tu144: Unit =
write_rgb(()) in
scan_point((scanx + 1)) in
let rec (scan_line: T) ((scany: T)) =
if not(size.(0) <= scany) then 
let Tu162: Unit =
scan_sscany.(0) <- let t: T =
((scan_offset.(0) - 1.) - float_of_int(scany)) in
(scan_d.(0) * t) in
let Tu161: Unit =
scan_met1.(0) <- (fsqr(scan_sscany.(0)) + 40000.) in
let t1: T =
(scan_sscany.(0) * sin_v.(0)) in
let Tu160: Unit =
wscan.(0) <- ((t1 * sin_v.(1)) - vp.(0)) in
let Tu159: Unit =
wscan.(2) <- ((t1 * cos_v.(1)) - vp.(2)) in
let Tu158: Unit =
scan_point(0) in
scan_line((scany + 1))
else
() in
let rec (scan_start: T) ((Tu163: T)) =
let Tu166: Unit =
write_ppm_header(()) in
let sizex: T =
float_of_int(size.(0)) in
let Tu165: Unit =
scan_d.(0) <- (128. / sizex) in
let Tu164: Unit =
scan_offset.(0) <- (sizex / 2.) in
scan_line(0) in
let rec (rt: T) ((size_x: T), (size_y: T), (debug_p: T)) =
let Tu170: Unit =
size.(0) <- size_x in
let Tu169: Unit =
size.(1) <- size_y in
let Tu168: Unit =
dbg.(0) <- debug_p in
let Tu167: Unit =
read_parameter(()) in
scan_start(()) in
rt(768, 768, false)

kNormal---
let rec (xor: (Bool, Bool) -> Bool) ((x: Bool), (y: Bool)) =
let Ti1975: Int =
0 in
if x == Ti1975 then
y
else
let Ti1976: Int =
0 in
if y == Ti1976 then
1
else
0 in 
let rec (fsqr: (Float) -> Float) ((x: Float)) =
(x * x) in 
let rec (fhalf: (Float) -> Float) ((x: Float)) =
let Td1974: Float =
2. in
(x / Td1974) in 
let rec (o_texturetype: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((m_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
m_tex in 
let rec (o_form: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (m_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
m_shape in 
let rec (o_reflectiontype: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (m_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
m_surface in 
let rec (o_isinvert: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((m_tex: Int), (m_shape: Int), (m_surface: Int), (m_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (m_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
m_invert in 
let rec (o_isrot: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (m_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
m_isrot in 
let rec (o_param_a: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (m_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
let Ti1973: Int =
0 in
m_abc.(Ti1973) in 
let rec (o_param_b: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (m_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
let Ti1972: Int =
1 in
m_abc.(Ti1972) in 
let rec (o_param_c: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (m_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
let Ti1971: Int =
2 in
m_abc.(Ti1971) in 
let rec (o_param_x: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (m_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
let Ti1970: Int =
0 in
m_xyz.(Ti1970) in 
let rec (o_param_y: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (m_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
let Ti1969: Int =
1 in
m_xyz.(Ti1969) in 
let rec (o_param_z: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (m_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
let Ti1968: Int =
2 in
m_xyz.(Ti1968) in 
let rec (o_diffuse: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (m_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
let Ti1967: Int =
0 in
m_surfparams.(Ti1967) in 
let rec (o_hilight: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (m_surfparams: [Float]), (xm_color: [Int]), (xm_rot123: [Float])) =
m in
let Ti1966: Int =
1 in
m_surfparams.(Ti1966) in 
let rec (o_color_red: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (m_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (m_color: [Int]), (xm_rot123: [Float])) =
m in
let Ti1965: Int =
0 in
m_color.(Ti1965) in 
let rec (o_color_green: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (m_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (m_color: [Int]), (xm_rot123: [Float])) =
m in
let Ti1964: Int =
1 in
m_color.(Ti1964) in 
let rec (o_color_blue: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (m_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (m_color: [Int]), (xm_rot123: [Float])) =
m in
let Ti1963: Int =
2 in
m_color.(Ti1963) in 
let rec (o_param_r1: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (m_rot123: [Float])) =
m in
let Ti1962: Int =
0 in
m_rot123.(Ti1962) in 
let rec (o_param_r2: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (m_rot123: [Float])) =
m in
let Ti1961: Int =
1 in
m_rot123.(Ti1961) in 
let rec (o_param_r3: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex: Int), (xm_shape: Int), (xm_surface: Int), (xm_isrot: Int), (xm_abc: [Float]), (xm_xyz: [Float]), (xm_invert: Bool), (xm_surfparams: [Float]), (xm_color: [Int]), (m_rot123: [Float])) =
m in
let Ti1960: Int =
2 in
m_rot123.(Ti1960) in 
let rec (normalize_vector: ([Float], Bool) -> Unit) ((v: [Float]), (inv: Bool)) =
let n0: Float =
let Td1946: Float =
let Td1942: Float =
let Td1938: Float =
let Td1937: Float =
let Ti1936: Int =
0 in
v.(Ti1936) in
fsqr(Td1937) in
let Td1941: Float =
let Td1940: Float =
let Ti1939: Int =
1 in
v.(Ti1939) in
fsqr(Td1940) in
(Td1938 + Td1941) in
let Td1945: Float =
let Td1944: Float =
let Ti1943: Int =
2 in
v.(Ti1943) in
fsqr(Td1944) in
(Td1942 + Td1945) in
sqrt(Td1946) in
let n: Float =
let Ti1947: Int =
0 in
if inv == Ti1947 then
n0
else
-(n0) in
let Tu2: Unit =
let Ti1948: Int =
0 in
let Td1951: Float =
let Td1950: Float =
let Ti1949: Int =
0 in
v.(Ti1949) in
(Td1950 / n) in
v.(Ti1948) <- Td1951 in
let Tu1: Unit =
let Ti1952: Int =
1 in
let Td1955: Float =
let Td1954: Float =
let Ti1953: Int =
1 in
v.(Ti1953) in
(Td1954 / n) in
v.(Ti1952) <- Td1955 in
let Ti1956: Int =
2 in
let Td1959: Float =
let Td1958: Float =
let Ti1957: Int =
2 in
v.(Ti1957) in
(Td1958 / n) in
v.(Ti1956) <- Td1959 in 
let rec (sgn: (Float) -> Float) ((x: Float)) =
let Td1935: Float =
0. in
if x <= Td1935 then
-1.
else
1. in 
let rec (rad: (Float) -> Float) ((x: Float)) =
let Td1934: Float =
0.017453293 in
(x * Td1934) in 
let rec (read_environ: (Unit) -> Unit) ((Tu3: Unit)) =
let Tu19: Unit =
let Ta1831: [Float] =
[screen] in
let Ti1832: Int =
0 in
let Td1834: Float =
let Tu1833: Unit =
() in
read_float(Tu1833) in
Ta1831.(Ti1832) <- Td1834 in
let Tu18: Unit =
let Ta1835: [Float] =
[screen] in
let Ti1836: Int =
1 in
let Td1838: Float =
let Tu1837: Unit =
() in
read_float(Tu1837) in
Ta1835.(Ti1836) <- Td1838 in
let Tu17: Unit =
let Ta1839: [Float] =
[screen] in
let Ti1840: Int =
2 in
let Td1842: Float =
let Tu1841: Unit =
() in
read_float(Tu1841) in
Ta1839.(Ti1840) <- Td1842 in
let v1: Float =
let Td1844: Float =
let Tu1843: Unit =
() in
read_float(Tu1843) in
rad(Td1844) in
let Tu16: Unit =
let Ta1845: [Float] =
[cos_v] in
let Ti1846: Int =
0 in
let Td1847: Float =
cos(v1) in
Ta1845.(Ti1846) <- Td1847 in
let Tu15: Unit =
let Ta1848: [Float] =
[sin_v] in
let Ti1849: Int =
0 in
let Td1850: Float =
sin(v1) in
Ta1848.(Ti1849) <- Td1850 in
let v2: Float =
let Td1852: Float =
let Tu1851: Unit =
() in
read_float(Tu1851) in
rad(Td1852) in
let Tu14: Unit =
let Ta1853: [Float] =
[cos_v] in
let Ti1854: Int =
1 in
let Td1855: Float =
cos(v2) in
Ta1853.(Ti1854) <- Td1855 in
let Tu13: Unit =
let Ta1856: [Float] =
[sin_v] in
let Ti1857: Int =
1 in
let Td1858: Float =
sin(v2) in
Ta1856.(Ti1857) <- Td1858 in
let nl: Int =
let Tu1859: Unit =
() in
read_float(Tu1859) in
let l1: Float =
let Td1861: Float =
let Tu1860: Unit =
() in
read_float(Tu1860) in
rad(Td1861) in
let sl1: Float =
sin(l1) in
let Tu12: Unit =
let Ta1862: [Float] =
[light] in
let Ti1863: Int =
1 in
let Td1864: Float =
-(sl1) in
Ta1862.(Ti1863) <- Td1864 in
let l2: Float =
let Td1866: Float =
let Tu1865: Unit =
() in
read_float(Tu1865) in
rad(Td1866) in
let cl1: Float =
cos(l1) in
let sl2: Float =
sin(l2) in
let Tu11: Unit =
let Ta1867: [Float] =
[light] in
let Ti1868: Int =
0 in
let Td1869: Float =
(cl1 * sl2) in
Ta1867.(Ti1868) <- Td1869 in
let cl2: Float =
cos(l2) in
let Tu10: Unit =
let Ta1870: [Float] =
[light] in
let Ti1871: Int =
2 in
let Td1872: Float =
(cl1 * cl2) in
Ta1870.(Ti1871) <- Td1872 in
let Tu9: Unit =
let Ta1873: [Float] =
[beam] in
let Ti1874: Int =
0 in
let Td1876: Float =
let Tu1875: Unit =
() in
read_float(Tu1875) in
Ta1873.(Ti1874) <- Td1876 in
let Tu8: Unit =
let Ta1877: [Float] =
[vp] in
let Ti1878: Int =
0 in
let Td1887: Float =
let Td1885: Float =
let Td1881: Float =
let Ta1879: [Float] =
[cos_v] in
let Ti1880: Int =
0 in
Ta1879.(Ti1880) in
let Td1884: Float =
let Ta1882: [Float] =
[sin_v] in
let Ti1883: Int =
1 in
Ta1882.(Ti1883) in
(Td1881 * Td1884) in
let Td1886: Float =
-200. in
(Td1885 * Td1886) in
Ta1877.(Ti1878) <- Td1887 in
let Tu7: Unit =
let Ta1888: [Float] =
[vp] in
let Ti1889: Int =
1 in
let Td1895: Float =
let Td1893: Float =
let Td1892: Float =
let Ta1890: [Float] =
[sin_v] in
let Ti1891: Int =
0 in
Ta1890.(Ti1891) in
-(Td1892) in
let Td1894: Float =
-200. in
(Td1893 * Td1894) in
Ta1888.(Ti1889) <- Td1895 in
let Tu6: Unit =
let Ta1896: [Float] =
[vp] in
let Ti1897: Int =
2 in
let Td1906: Float =
let Td1904: Float =
let Td1900: Float =
let Ta1898: [Float] =
[cos_v] in
let Ti1899: Int =
0 in
Ta1898.(Ti1899) in
let Td1903: Float =
let Ta1901: [Float] =
[cos_v] in
let Ti1902: Int =
1 in
Ta1901.(Ti1902) in
(Td1900 * Td1903) in
let Td1905: Float =
-200. in
(Td1904 * Td1905) in
Ta1896.(Ti1897) <- Td1906 in
let Tu5: Unit =
let Ta1907: [Int] =
[view] in
let Ti1908: Int =
0 in
let Td1915: Float =
let Td1911: Float =
let Ta1909: [Float] =
[vp] in
let Ti1910: Int =
0 in
Ta1909.(Ti1910) in
let Td1914: Float =
let Ta1912: [Float] =
[screen] in
let Ti1913: Int =
0 in
Ta1912.(Ti1913) in
(Td1911 + Td1914) in
Ta1907.(Ti1908) <- Td1915 in
let Tu4: Unit =
let Ta1916: [Int] =
[view] in
let Ti1917: Int =
1 in
let Td1924: Float =
let Td1920: Float =
let Ta1918: [Float] =
[vp] in
let Ti1919: Int =
1 in
Ta1918.(Ti1919) in
let Td1923: Float =
let Ta1921: [Float] =
[screen] in
let Ti1922: Int =
1 in
Ta1921.(Ti1922) in
(Td1920 + Td1923) in
Ta1916.(Ti1917) <- Td1924 in
let Ta1925: [Int] =
[view] in
let Ti1926: Int =
2 in
let Td1933: Float =
let Td1929: Float =
let Ta1927: [Float] =
[vp] in
let Ti1928: Int =
2 in
Ta1927.(Ti1928) in
let Td1932: Float =
let Ta1930: [Float] =
[screen] in
let Ti1931: Int =
2 in
Ta1930.(Ti1931) in
(Td1929 + Td1932) in
Ta1925.(Ti1926) <- Td1933 in 
let rec (read_nth_object: (Int) -> Bool) ((n: Int)) =
let texture: Int =
let Tu1441: Unit =
() in
read_int(Tu1441) in
let Ti1443: Int =
let Ti1442: Int =
1 in
-(Ti1442) in
if texture == Ti1443 then
0
else
let form: Int =
let Tu1444: Unit =
() in
read_int(Tu1444) in
let refltype: Int =
let Tu1445: Unit =
() in
read_int(Tu1445) in
let isrot_p: Int =
let Tu1446: Unit =
() in
read_int(Tu1446) in
let abc: [Float] =
let Ti1447: Int =
3 in
let Td1448: Float =
0. in
create_float_array(Ti1447, Td1448) in
let Tu58: Unit =
let Ti1449: Int =
0 in
let Td1451: Float =
let Tu1450: Unit =
() in
read_float(Tu1450) in
abc.(Ti1449) <- Td1451 in
let Tu57: Unit =
let Ti1452: Int =
1 in
let Td1454: Float =
let Tu1453: Unit =
() in
read_float(Tu1453) in
abc.(Ti1452) <- Td1454 in
let Tu56: Unit =
let Ti1455: Int =
2 in
let Td1457: Float =
let Tu1456: Unit =
() in
read_float(Tu1456) in
abc.(Ti1455) <- Td1457 in
let xyz: [Float] =
let Ti1458: Int =
3 in
let Td1459: Float =
0. in
create_float_array(Ti1458, Td1459) in
let Tu55: Unit =
let Ti1460: Int =
0 in
let Td1462: Float =
let Tu1461: Unit =
() in
read_float(Tu1461) in
xyz.(Ti1460) <- Td1462 in
let Tu54: Unit =
let Ti1463: Int =
1 in
let Td1465: Float =
let Tu1464: Unit =
() in
read_float(Tu1464) in
xyz.(Ti1463) <- Td1465 in
let Tu53: Unit =
let Ti1466: Int =
2 in
let Td1468: Float =
let Tu1467: Unit =
() in
read_float(Tu1467) in
xyz.(Ti1466) <- Td1468 in
let m_invert: Bool =
let Td1469: Float =
0. in
let Td1471: Float =
let Tu1470: Unit =
() in
read_float(Tu1470) in
if Td1469 <= Td1471 then
0
else
1 in
let reflparam: [Float] =
let Ti1472: Int =
2 in
let Td1473: Float =
0. in
create_float_array(Ti1472, Td1473) in
let Tu52: Unit =
let Ti1474: Int =
0 in
let Td1476: Float =
let Tu1475: Unit =
() in
read_float(Tu1475) in
reflparam.(Ti1474) <- Td1476 in
let Tu51: Unit =
let Ti1477: Int =
1 in
let Td1479: Float =
let Tu1478: Unit =
() in
read_float(Tu1478) in
reflparam.(Ti1477) <- Td1479 in
let color: [Float] =
let Ti1480: Int =
3 in
let Td1481: Float =
0. in
create_float_array(Ti1480, Td1481) in
let Tu50: Unit =
let Ti1482: Int =
0 in
let Td1484: Float =
let Tu1483: Unit =
() in
read_float(Tu1483) in
color.(Ti1482) <- Td1484 in
let Tu49: Unit =
let Ti1485: Int =
1 in
let Td1487: Float =
let Tu1486: Unit =
() in
read_float(Tu1486) in
color.(Ti1485) <- Td1487 in
let Tu48: Unit =
let Ti1488: Int =
2 in
let Td1490: Float =
let Tu1489: Unit =
() in
read_float(Tu1489) in
color.(Ti1488) <- Td1490 in
let rotation: [Float] =
let Ti1491: Int =
3 in
let Td1492: Float =
0. in
create_float_array(Ti1491, Td1492) in
let Tu47: Unit =
let Ti1493: Int =
0 in
if isrot_p == Ti1493 then
()
else
let Tu21: Unit =
let Ti1494: Int =
0 in
let Td1497: Float =
let Td1496: Float =
let Tu1495: Unit =
() in
read_float(Tu1495) in
rad(Td1496) in
rotation.(Ti1494) <- Td1497 in
let Tu20: Unit =
let Ti1498: Int =
1 in
let Td1501: Float =
let Td1500: Float =
let Tu1499: Unit =
() in
read_float(Tu1499) in
rad(Td1500) in
rotation.(Ti1498) <- Td1501 in
let Ti1502: Int =
2 in
let Td1505: Float =
let Td1504: Float =
let Tu1503: Unit =
() in
read_float(Tu1503) in
rad(Td1504) in
rotation.(Ti1502) <- Td1505 in
let m_invert2: Bool =
let Ti1506: Int =
2 in
if form == Ti1506 then
1
else
m_invert in
let obj: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Float], [Float]) =
(texture, form, refltype, isrot_p, abc, xyz, m_invert2, reflparam, color, rotation) in
let Tu46: Unit =
let Ta1507: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta1507.(n) <- obj in
let Tu45: Unit =
let Ti1508: Int =
3 in
if form == Ti1508 then
let a: Float =
let Ti1509: Int =
0 in
abc.(Ti1509) in
let Tu23: Unit =
let Ti1510: Int =
0 in
let Td1514: Float =
let Td1511: Float =
0. in
if Td1511 == a then
0.
else
let Td1512: Float =
sgn(a) in
let Td1513: Float =
fsqr(a) in
(Td1512 / Td1513) in
abc.(Ti1510) <- Td1514 in
let b: Float =
let Ti1515: Int =
1 in
abc.(Ti1515) in
let Tu22: Unit =
let Ti1516: Int =
1 in
let Td1520: Float =
let Td1517: Float =
0. in
if Td1517 == b then
0.
else
let Td1518: Float =
sgn(b) in
let Td1519: Float =
fsqr(b) in
(Td1518 / Td1519) in
abc.(Ti1516) <- Td1520 in
let c: Float =
let Ti1521: Int =
2 in
abc.(Ti1521) in
let Ti1522: Int =
2 in
let Td1526: Float =
let Td1523: Float =
0. in
if Td1523 == c then
0.
else
let Td1524: Float =
sgn(c) in
let Td1525: Float =
fsqr(c) in
(Td1524 / Td1525) in
abc.(Ti1522) <- Td1526
else
let Ti1527: Int =
2 in
if form == Ti1527 then
let Ti1529: Int =
let Ti1528: Int =
0 in
if m_invert == Ti1528 then
1
else
0 in
normalize_vector(abc, Ti1529)
else
() in
let Tu44: Unit =
let Ti1530: Int =
0 in
if isrot_p == Ti1530 then
()
else
let Tu43: Unit =
let Ta1531: [Float] =
[cs_temp] in
let Ti1532: Int =
10 in
let Td1535: Float =
let Td1534: Float =
let Ti1533: Int =
0 in
rotation.(Ti1533) in
cos(Td1534) in
Ta1531.(Ti1532) <- Td1535 in
let Tu42: Unit =
let Ta1536: [Float] =
[cs_temp] in
let Ti1537: Int =
11 in
let Td1540: Float =
let Td1539: Float =
let Ti1538: Int =
0 in
rotation.(Ti1538) in
sin(Td1539) in
Ta1536.(Ti1537) <- Td1540 in
let Tu41: Unit =
let Ta1541: [Float] =
[cs_temp] in
let Ti1542: Int =
12 in
let Td1545: Float =
let Td1544: Float =
let Ti1543: Int =
1 in
rotation.(Ti1543) in
cos(Td1544) in
Ta1541.(Ti1542) <- Td1545 in
let Tu40: Unit =
let Ta1546: [Float] =
[cs_temp] in
let Ti1547: Int =
13 in
let Td1550: Float =
let Td1549: Float =
let Ti1548: Int =
1 in
rotation.(Ti1548) in
sin(Td1549) in
Ta1546.(Ti1547) <- Td1550 in
let Tu39: Unit =
let Ta1551: [Float] =
[cs_temp] in
let Ti1552: Int =
14 in
let Td1555: Float =
let Td1554: Float =
let Ti1553: Int =
2 in
rotation.(Ti1553) in
cos(Td1554) in
Ta1551.(Ti1552) <- Td1555 in
let Tu38: Unit =
let Ta1556: [Float] =
[cs_temp] in
let Ti1557: Int =
15 in
let Td1560: Float =
let Td1559: Float =
let Ti1558: Int =
2 in
rotation.(Ti1558) in
sin(Td1559) in
Ta1556.(Ti1557) <- Td1560 in
let Tu37: Unit =
let Ta1561: [Float] =
[cs_temp] in
let Ti1562: Int =
0 in
let Td1569: Float =
let Td1565: Float =
let Ta1563: [Float] =
[cs_temp] in
let Ti1564: Int =
12 in
Ta1563.(Ti1564) in
let Td1568: Float =
let Ta1566: [Float] =
[cs_temp] in
let Ti1567: Int =
14 in
Ta1566.(Ti1567) in
(Td1565 * Td1568) in
Ta1561.(Ti1562) <- Td1569 in
let Tu36: Unit =
let Ta1570: [Float] =
[cs_temp] in
let Ti1571: Int =
1 in
let Td1590: Float =
let Td1582: Float =
let Td1578: Float =
let Td1574: Float =
let Ta1572: [Float] =
[cs_temp] in
let Ti1573: Int =
11 in
Ta1572.(Ti1573) in
let Td1577: Float =
let Ta1575: [Float] =
[cs_temp] in
let Ti1576: Int =
13 in
Ta1575.(Ti1576) in
(Td1574 * Td1577) in
let Td1581: Float =
let Ta1579: [Float] =
[cs_temp] in
let Ti1580: Int =
14 in
Ta1579.(Ti1580) in
(Td1578 * Td1581) in
let Td1589: Float =
let Td1585: Float =
let Ta1583: [Float] =
[cs_temp] in
let Ti1584: Int =
10 in
Ta1583.(Ti1584) in
let Td1588: Float =
let Ta1586: [Float] =
[cs_temp] in
let Ti1587: Int =
15 in
Ta1586.(Ti1587) in
(Td1585 * Td1588) in
(Td1582 - Td1589) in
Ta1570.(Ti1571) <- Td1590 in
let Tu35: Unit =
let Ta1591: [Float] =
[cs_temp] in
let Ti1592: Int =
2 in
let Td1611: Float =
let Td1603: Float =
let Td1599: Float =
let Td1595: Float =
let Ta1593: [Float] =
[cs_temp] in
let Ti1594: Int =
10 in
Ta1593.(Ti1594) in
let Td1598: Float =
let Ta1596: [Float] =
[cs_temp] in
let Ti1597: Int =
13 in
Ta1596.(Ti1597) in
(Td1595 * Td1598) in
let Td1602: Float =
let Ta1600: [Float] =
[cs_temp] in
let Ti1601: Int =
14 in
Ta1600.(Ti1601) in
(Td1599 * Td1602) in
let Td1610: Float =
let Td1606: Float =
let Ta1604: [Float] =
[cs_temp] in
let Ti1605: Int =
11 in
Ta1604.(Ti1605) in
let Td1609: Float =
let Ta1607: [Float] =
[cs_temp] in
let Ti1608: Int =
15 in
Ta1607.(Ti1608) in
(Td1606 * Td1609) in
(Td1603 + Td1610) in
Ta1591.(Ti1592) <- Td1611 in
let Tu34: Unit =
let Ta1612: [Float] =
[cs_temp] in
let Ti1613: Int =
3 in
let Td1620: Float =
let Td1616: Float =
let Ta1614: [Float] =
[cs_temp] in
let Ti1615: Int =
12 in
Ta1614.(Ti1615) in
let Td1619: Float =
let Ta1617: [Float] =
[cs_temp] in
let Ti1618: Int =
15 in
Ta1617.(Ti1618) in
(Td1616 * Td1619) in
Ta1612.(Ti1613) <- Td1620 in
let Tu33: Unit =
let Ta1621: [Float] =
[cs_temp] in
let Ti1622: Int =
4 in
let Td1641: Float =
let Td1633: Float =
let Td1629: Float =
let Td1625: Float =
let Ta1623: [Float] =
[cs_temp] in
let Ti1624: Int =
11 in
Ta1623.(Ti1624) in
let Td1628: Float =
let Ta1626: [Float] =
[cs_temp] in
let Ti1627: Int =
13 in
Ta1626.(Ti1627) in
(Td1625 * Td1628) in
let Td1632: Float =
let Ta1630: [Float] =
[cs_temp] in
let Ti1631: Int =
15 in
Ta1630.(Ti1631) in
(Td1629 * Td1632) in
let Td1640: Float =
let Td1636: Float =
let Ta1634: [Float] =
[cs_temp] in
let Ti1635: Int =
10 in
Ta1634.(Ti1635) in
let Td1639: Float =
let Ta1637: [Float] =
[cs_temp] in
let Ti1638: Int =
14 in
Ta1637.(Ti1638) in
(Td1636 * Td1639) in
(Td1633 + Td1640) in
Ta1621.(Ti1622) <- Td1641 in
let Tu32: Unit =
let Ta1642: [Float] =
[cs_temp] in
let Ti1643: Int =
5 in
let Td1662: Float =
let Td1654: Float =
let Td1650: Float =
let Td1646: Float =
let Ta1644: [Float] =
[cs_temp] in
let Ti1645: Int =
10 in
Ta1644.(Ti1645) in
let Td1649: Float =
let Ta1647: [Float] =
[cs_temp] in
let Ti1648: Int =
13 in
Ta1647.(Ti1648) in
(Td1646 * Td1649) in
let Td1653: Float =
let Ta1651: [Float] =
[cs_temp] in
let Ti1652: Int =
15 in
Ta1651.(Ti1652) in
(Td1650 * Td1653) in
let Td1661: Float =
let Td1657: Float =
let Ta1655: [Float] =
[cs_temp] in
let Ti1656: Int =
11 in
Ta1655.(Ti1656) in
let Td1660: Float =
let Ta1658: [Float] =
[cs_temp] in
let Ti1659: Int =
14 in
Ta1658.(Ti1659) in
(Td1657 * Td1660) in
(Td1654 - Td1661) in
Ta1642.(Ti1643) <- Td1662 in
let Tu31: Unit =
let Ta1663: [Float] =
[cs_temp] in
let Ti1664: Int =
6 in
let Td1668: Float =
let Td1667: Float =
let Ta1665: [Float] =
[cs_temp] in
let Ti1666: Int =
13 in
Ta1665.(Ti1666) in
-(Td1667) in
Ta1663.(Ti1664) <- Td1668 in
let Tu30: Unit =
let Ta1669: [Float] =
[cs_temp] in
let Ti1670: Int =
7 in
let Td1677: Float =
let Td1673: Float =
let Ta1671: [Float] =
[cs_temp] in
let Ti1672: Int =
11 in
Ta1671.(Ti1672) in
let Td1676: Float =
let Ta1674: [Float] =
[cs_temp] in
let Ti1675: Int =
12 in
Ta1674.(Ti1675) in
(Td1673 * Td1676) in
Ta1669.(Ti1670) <- Td1677 in
let Tu29: Unit =
let Ta1678: [Float] =
[cs_temp] in
let Ti1679: Int =
8 in
let Td1686: Float =
let Td1682: Float =
let Ta1680: [Float] =
[cs_temp] in
let Ti1681: Int =
10 in
Ta1680.(Ti1681) in
let Td1685: Float =
let Ta1683: [Float] =
[cs_temp] in
let Ti1684: Int =
12 in
Ta1683.(Ti1684) in
(Td1682 * Td1685) in
Ta1678.(Ti1679) <- Td1686 in
let ao: Float =
let Ti1687: Int =
0 in
abc.(Ti1687) in
let bo: Float =
let Ti1688: Int =
1 in
abc.(Ti1688) in
let co: Float =
let Ti1689: Int =
2 in
abc.(Ti1689) in
let Tu28: Unit =
let Ti1690: Int =
0 in
let Td1707: Float =
let Td1701: Float =
let Td1695: Float =
let Td1694: Float =
let Td1693: Float =
let Ta1691: [Float] =
[cs_temp] in
let Ti1692: Int =
0 in
Ta1691.(Ti1692) in
fsqr(Td1693) in
(ao * Td1694) in
let Td1700: Float =
let Td1699: Float =
let Td1698: Float =
let Ta1696: [Float] =
[cs_temp] in
let Ti1697: Int =
3 in
Ta1696.(Ti1697) in
fsqr(Td1698) in
(bo * Td1699) in
(Td1695 + Td1700) in
let Td1706: Float =
let Td1705: Float =
let Td1704: Float =
let Ta1702: [Float] =
[cs_temp] in
let Ti1703: Int =
6 in
Ta1702.(Ti1703) in
fsqr(Td1704) in
(co * Td1705) in
(Td1701 + Td1706) in
abc.(Ti1690) <- Td1707 in
let Tu27: Unit =
let Ti1708: Int =
1 in
let Td1725: Float =
let Td1719: Float =
let Td1713: Float =
let Td1712: Float =
let Td1711: Float =
let Ta1709: [Float] =
[cs_temp] in
let Ti1710: Int =
1 in
Ta1709.(Ti1710) in
fsqr(Td1711) in
(ao * Td1712) in
let Td1718: Float =
let Td1717: Float =
let Td1716: Float =
let Ta1714: [Float] =
[cs_temp] in
let Ti1715: Int =
4 in
Ta1714.(Ti1715) in
fsqr(Td1716) in
(bo * Td1717) in
(Td1713 + Td1718) in
let Td1724: Float =
let Td1723: Float =
let Td1722: Float =
let Ta1720: [Float] =
[cs_temp] in
let Ti1721: Int =
7 in
Ta1720.(Ti1721) in
fsqr(Td1722) in
(co * Td1723) in
(Td1719 + Td1724) in
abc.(Ti1708) <- Td1725 in
let Tu26: Unit =
let Ti1726: Int =
2 in
let Td1743: Float =
let Td1737: Float =
let Td1731: Float =
let Td1730: Float =
let Td1729: Float =
let Ta1727: [Float] =
[cs_temp] in
let Ti1728: Int =
2 in
Ta1727.(Ti1728) in
fsqr(Td1729) in
(ao * Td1730) in
let Td1736: Float =
let Td1735: Float =
let Td1734: Float =
let Ta1732: [Float] =
[cs_temp] in
let Ti1733: Int =
5 in
Ta1732.(Ti1733) in
fsqr(Td1734) in
(bo * Td1735) in
(Td1731 + Td1736) in
let Td1742: Float =
let Td1741: Float =
let Td1740: Float =
let Ta1738: [Float] =
[cs_temp] in
let Ti1739: Int =
8 in
Ta1738.(Ti1739) in
fsqr(Td1740) in
(co * Td1741) in
(Td1737 + Td1742) in
abc.(Ti1726) <- Td1743 in
let Tu25: Unit =
let Ti1744: Int =
0 in
let Td1772: Float =
let Td1745: Float =
2. in
let Td1771: Float =
let Td1762: Float =
let Td1753: Float =
let Td1749: Float =
let Td1748: Float =
let Ta1746: [Float] =
[cs_temp] in
let Ti1747: Int =
1 in
Ta1746.(Ti1747) in
(ao * Td1748) in
let Td1752: Float =
let Ta1750: [Float] =
[cs_temp] in
let Ti1751: Int =
2 in
Ta1750.(Ti1751) in
(Td1749 * Td1752) in
let Td1761: Float =
let Td1757: Float =
let Td1756: Float =
let Ta1754: [Float] =
[cs_temp] in
let Ti1755: Int =
4 in
Ta1754.(Ti1755) in
(bo * Td1756) in
let Td1760: Float =
let Ta1758: [Float] =
[cs_temp] in
let Ti1759: Int =
5 in
Ta1758.(Ti1759) in
(Td1757 * Td1760) in
(Td1753 + Td1761) in
let Td1770: Float =
let Td1766: Float =
let Td1765: Float =
let Ta1763: [Float] =
[cs_temp] in
let Ti1764: Int =
7 in
Ta1763.(Ti1764) in
(co * Td1765) in
let Td1769: Float =
let Ta1767: [Float] =
[cs_temp] in
let Ti1768: Int =
8 in
Ta1767.(Ti1768) in
(Td1766 * Td1769) in
(Td1762 + Td1770) in
(Td1745 * Td1771) in
rotation.(Ti1744) <- Td1772 in
let Tu24: Unit =
let Ti1773: Int =
1 in
let Td1801: Float =
let Td1774: Float =
2. in
let Td1800: Float =
let Td1791: Float =
let Td1782: Float =
let Td1778: Float =
let Td1777: Float =
let Ta1775: [Float] =
[cs_temp] in
let Ti1776: Int =
0 in
Ta1775.(Ti1776) in
(ao * Td1777) in
let Td1781: Float =
let Ta1779: [Float] =
[cs_temp] in
let Ti1780: Int =
2 in
Ta1779.(Ti1780) in
(Td1778 * Td1781) in
let Td1790: Float =
let Td1786: Float =
let Td1785: Float =
let Ta1783: [Float] =
[cs_temp] in
let Ti1784: Int =
3 in
Ta1783.(Ti1784) in
(bo * Td1785) in
let Td1789: Float =
let Ta1787: [Float] =
[cs_temp] in
let Ti1788: Int =
5 in
Ta1787.(Ti1788) in
(Td1786 * Td1789) in
(Td1782 + Td1790) in
let Td1799: Float =
let Td1795: Float =
let Td1794: Float =
let Ta1792: [Float] =
[cs_temp] in
let Ti1793: Int =
6 in
Ta1792.(Ti1793) in
(co * Td1794) in
let Td1798: Float =
let Ta1796: [Float] =
[cs_temp] in
let Ti1797: Int =
8 in
Ta1796.(Ti1797) in
(Td1795 * Td1798) in
(Td1791 + Td1799) in
(Td1774 * Td1800) in
rotation.(Ti1773) <- Td1801 in
let Ti1802: Int =
2 in
let Td1830: Float =
let Td1803: Float =
2. in
let Td1829: Float =
let Td1820: Float =
let Td1811: Float =
let Td1807: Float =
let Td1806: Float =
let Ta1804: [Float] =
[cs_temp] in
let Ti1805: Int =
0 in
Ta1804.(Ti1805) in
(ao * Td1806) in
let Td1810: Float =
let Ta1808: [Float] =
[cs_temp] in
let Ti1809: Int =
1 in
Ta1808.(Ti1809) in
(Td1807 * Td1810) in
let Td1819: Float =
let Td1815: Float =
let Td1814: Float =
let Ta1812: [Float] =
[cs_temp] in
let Ti1813: Int =
3 in
Ta1812.(Ti1813) in
(bo * Td1814) in
let Td1818: Float =
let Ta1816: [Float] =
[cs_temp] in
let Ti1817: Int =
4 in
Ta1816.(Ti1817) in
(Td1815 * Td1818) in
(Td1811 + Td1819) in
let Td1828: Float =
let Td1824: Float =
let Td1823: Float =
let Ta1821: [Float] =
[cs_temp] in
let Ti1822: Int =
6 in
Ta1821.(Ti1822) in
(co * Td1823) in
let Td1827: Float =
let Ta1825: [Float] =
[cs_temp] in
let Ti1826: Int =
7 in
Ta1825.(Ti1826) in
(Td1824 * Td1827) in
(Td1820 + Td1828) in
(Td1803 * Td1829) in
rotation.(Ti1802) <- Td1830 in
1 in 
let rec (read_object: (Int) -> Unit) ((n: Int)) =
let Ti1436: Int =
61 in
if Ti1436 <= n then
()
else
let Tb1437: Bool =
read_nth_object(n) in
let Ti1438: Int =
0 in
if Tb1437 == Ti1438 then
()
else
let Ti1440: Int =
let Ti1439: Int =
1 in
(n + Ti1439) in
read_object(Ti1440) in 
let rec (read_all_object: (Unit) -> Unit) ((Tu59: Unit)) =
let Ti1435: Int =
0 in
read_object(Ti1435) in 
let rec (read_net_item: (Int) -> [Int]) ((length: Int)) =
let item: Int =
let Tu1426: Unit =
() in
read_int(Tu1426) in
let Ti1428: Int =
let Ti1427: Int =
1 in
-(Ti1427) in
if item == Ti1428 then
let Ti1430: Int =
let Ti1429: Int =
1 in
(length + Ti1429) in
let Ti1432: Int =
let Ti1431: Int =
1 in
-(Ti1431) in
create_array(Ti1430, Ti1432)
else
let v: [Int] =
let Ti1434: Int =
let Ti1433: Int =
1 in
(length + Ti1433) in
read_net_item(Ti1434) in
let Tu60: Unit =
v.(length) <- item in
v in 
let rec (read_or_network: (Int) -> [[Int]]) ((length: Int)) =
let net: [Int] =
let Ti1417: Int =
0 in
read_net_item(Ti1417) in
let Ti1419: Int =
let Ti1418: Int =
0 in
net.(Ti1418) in
let Ti1421: Int =
let Ti1420: Int =
1 in
-(Ti1420) in
if Ti1419 == Ti1421 then
let Ti1423: Int =
let Ti1422: Int =
1 in
(length + Ti1422) in
create_array(Ti1423, net)
else
let v: [[Int]] =
let Ti1425: Int =
let Ti1424: Int =
1 in
(length + Ti1424) in
read_or_network(Ti1425) in
let Tu61: Unit =
v.(length) <- net in
v in 
let rec (read_and_network: (Int) -> Unit) ((n: Int)) =
let net: [Int] =
let Ti1409: Int =
0 in
read_net_item(Ti1409) in
let Ti1411: Int =
let Ti1410: Int =
0 in
net.(Ti1410) in
let Ti1413: Int =
let Ti1412: Int =
1 in
-(Ti1412) in
if Ti1411 == Ti1413 then
()
else
let Tu62: Unit =
let Ta1414: [[Int]] =
[and_net] in
Ta1414.(n) <- net in
let Ti1416: Int =
let Ti1415: Int =
1 in
(n + Ti1415) in
read_and_network(Ti1416) in 
let rec (read_parameter: (Unit) -> Unit) ((Tu63: Unit)) =
let Tu66: Unit =
let Tu1402: Unit =
() in
read_environ(Tu1402) in
let Tu65: Unit =
let Tu1403: Unit =
() in
read_all_object(Tu1403) in
let Tu64: Unit =
let Ti1404: Int =
0 in
read_and_network(Ti1404) in
let Ta1405: [[[Int]]] =
[or_net] in
let Ti1406: Int =
0 in
let Ta1408: [[Int]] =
let Ti1407: Int =
0 in
read_or_network(Ti1407) in
Ta1405.(Ti1406) <- Ta1408 in 
let rec (solver_rect: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l: [Float])) =
let answera: Bool =
let Td1288: Float =
0. in
let Td1290: Float =
let Ti1289: Int =
0 in
l.(Ti1289) in
if Td1288 == Td1290 then
0
else
let d: Float =
let Tb1296: Bool =
let Tb1291: Bool =
o_isinvert(m) in
let Ti1295: Int =
let Td1292: Float =
0. in
let Td1294: Float =
let Ti1293: Int =
0 in
l.(Ti1293) in
if Td1292 <= Td1294 then
0
else
1 in
xor(Tb1291, Ti1295) in
let Ti1297: Int =
0 in
if Tb1296 == Ti1297 then
let Td1298: Float =
o_param_a(m) in
-(Td1298)
else
o_param_a(m) in
let d2: Float =
let Td1302: Float =
let Td1301: Float =
let Ta1299: [Float] =
[solver_w_vec] in
let Ti1300: Int =
0 in
Ta1299.(Ti1300) in
(d - Td1301) in
let Td1304: Float =
let Ti1303: Int =
0 in
l.(Ti1303) in
(Td1302 / Td1304) in
let Td1305: Float =
o_param_b(m) in
let Ti1313: Int =
let Td1312: Float =
let Td1308: Float =
let Td1307: Float =
let Ti1306: Int =
1 in
l.(Ti1306) in
(d2 * Td1307) in
let Td1311: Float =
let Ta1309: [Float] =
[solver_w_vec] in
let Ti1310: Int =
1 in
Ta1309.(Ti1310) in
(Td1308 + Td1311) in
abs_float(Td1312) in
if Td1305 <= Ti1313 then
0
else
let Td1314: Float =
o_param_c(m) in
let Ti1322: Int =
let Td1321: Float =
let Td1317: Float =
let Td1316: Float =
let Ti1315: Int =
2 in
l.(Ti1315) in
(d2 * Td1316) in
let Td1320: Float =
let Ta1318: [Float] =
[solver_w_vec] in
let Ti1319: Int =
2 in
Ta1318.(Ti1319) in
(Td1317 + Td1320) in
abs_float(Td1321) in
if Td1314 <= Ti1322 then
0
else
let Tu67: Unit =
let Ta1323: [Int] =
[solver_dist] in
let Ti1324: Int =
0 in
Ta1323.(Ti1324) <- d2 in
1 in
let Ti1325: Int =
0 in
if answera == Ti1325 then
let answerb: Bool =
let Td1326: Float =
0. in
let Td1328: Float =
let Ti1327: Int =
1 in
l.(Ti1327) in
if Td1326 == Td1328 then
0
else
let d: Float =
let Tb1334: Bool =
let Tb1329: Bool =
o_isinvert(m) in
let Ti1333: Int =
let Td1330: Float =
0. in
let Td1332: Float =
let Ti1331: Int =
1 in
l.(Ti1331) in
if Td1330 <= Td1332 then
0
else
1 in
xor(Tb1329, Ti1333) in
let Ti1335: Int =
0 in
if Tb1334 == Ti1335 then
let Td1336: Float =
o_param_b(m) in
-(Td1336)
else
o_param_b(m) in
let d2: Float =
let Td1340: Float =
let Td1339: Float =
let Ta1337: [Float] =
[solver_w_vec] in
let Ti1338: Int =
1 in
Ta1337.(Ti1338) in
(d - Td1339) in
let Td1342: Float =
let Ti1341: Int =
1 in
l.(Ti1341) in
(Td1340 / Td1342) in
let Td1343: Float =
o_param_c(m) in
let Ti1351: Int =
let Td1350: Float =
let Td1346: Float =
let Td1345: Float =
let Ti1344: Int =
2 in
l.(Ti1344) in
(d2 * Td1345) in
let Td1349: Float =
let Ta1347: [Float] =
[solver_w_vec] in
let Ti1348: Int =
2 in
Ta1347.(Ti1348) in
(Td1346 + Td1349) in
abs_float(Td1350) in
if Td1343 <= Ti1351 then
0
else
let Td1352: Float =
o_param_a(m) in
let Ti1360: Int =
let Td1359: Float =
let Td1355: Float =
let Td1354: Float =
let Ti1353: Int =
0 in
l.(Ti1353) in
(d2 * Td1354) in
let Td1358: Float =
let Ta1356: [Float] =
[solver_w_vec] in
let Ti1357: Int =
0 in
Ta1356.(Ti1357) in
(Td1355 + Td1358) in
abs_float(Td1359) in
if Td1352 <= Ti1360 then
0
else
let Tu68: Unit =
let Ta1361: [Int] =
[solver_dist] in
let Ti1362: Int =
0 in
Ta1361.(Ti1362) <- d2 in
1 in
let Ti1363: Int =
0 in
if answerb == Ti1363 then
let answerc: Bool =
let Td1364: Float =
0. in
let Td1366: Float =
let Ti1365: Int =
2 in
l.(Ti1365) in
if Td1364 == Td1366 then
0
else
let d: Float =
let Tb1372: Bool =
let Tb1367: Bool =
o_isinvert(m) in
let Ti1371: Int =
let Td1368: Float =
0. in
let Td1370: Float =
let Ti1369: Int =
2 in
l.(Ti1369) in
if Td1368 <= Td1370 then
0
else
1 in
xor(Tb1367, Ti1371) in
let Ti1373: Int =
0 in
if Tb1372 == Ti1373 then
let Td1374: Float =
o_param_c(m) in
-(Td1374)
else
o_param_c(m) in
let d2: Float =
let Td1378: Float =
let Td1377: Float =
let Ta1375: [Float] =
[solver_w_vec] in
let Ti1376: Int =
2 in
Ta1375.(Ti1376) in
(d - Td1377) in
let Td1380: Float =
let Ti1379: Int =
2 in
l.(Ti1379) in
(Td1378 / Td1380) in
let Td1381: Float =
o_param_a(m) in
let Ti1389: Int =
let Td1388: Float =
let Td1384: Float =
let Td1383: Float =
let Ti1382: Int =
0 in
l.(Ti1382) in
(d2 * Td1383) in
let Td1387: Float =
let Ta1385: [Float] =
[solver_w_vec] in
let Ti1386: Int =
0 in
Ta1385.(Ti1386) in
(Td1384 + Td1387) in
abs_float(Td1388) in
if Td1381 <= Ti1389 then
0
else
let Td1390: Float =
o_param_b(m) in
let Ti1398: Int =
let Td1397: Float =
let Td1393: Float =
let Td1392: Float =
let Ti1391: Int =
1 in
l.(Ti1391) in
(d2 * Td1392) in
let Td1396: Float =
let Ta1394: [Float] =
[solver_w_vec] in
let Ti1395: Int =
1 in
Ta1394.(Ti1395) in
(Td1393 + Td1396) in
abs_float(Td1397) in
if Td1390 <= Ti1398 then
0
else
let Tu69: Unit =
let Ta1399: [Int] =
[solver_dist] in
let Ti1400: Int =
0 in
Ta1399.(Ti1400) <- d2 in
1 in
let Ti1401: Int =
0 in
if answerc == Ti1401 then
0
else
3
else
2
else
1 in 
let rec (solver_surface: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l: [Float])) =
let q: Float =
let Td1262: Float =
let Td1257: Float =
let Td1255: Float =
let Ti1254: Int =
0 in
l.(Ti1254) in
let Td1256: Float =
o_param_a(m) in
(Td1255 * Td1256) in
let Td1261: Float =
let Td1259: Float =
let Ti1258: Int =
1 in
l.(Ti1258) in
let Td1260: Float =
o_param_b(m) in
(Td1259 * Td1260) in
(Td1257 + Td1261) in
let Td1266: Float =
let Td1264: Float =
let Ti1263: Int =
2 in
l.(Ti1263) in
let Td1265: Float =
o_param_c(m) in
(Td1264 * Td1265) in
(Td1262 + Td1266) in
let Td1267: Float =
0. in
if q <= Td1267 then
0
else
let t: Float =
let Td1284: Float =
let Td1278: Float =
let Td1272: Float =
let Td1270: Float =
let Ta1268: [Float] =
[solver_w_vec] in
let Ti1269: Int =
0 in
Ta1268.(Ti1269) in
let Td1271: Float =
o_param_a(m) in
(Td1270 * Td1271) in
let Td1277: Float =
let Td1275: Float =
let Ta1273: [Float] =
[solver_w_vec] in
let Ti1274: Int =
1 in
Ta1273.(Ti1274) in
let Td1276: Float =
o_param_b(m) in
(Td1275 * Td1276) in
(Td1272 + Td1277) in
let Td1283: Float =
let Td1281: Float =
let Ta1279: [Float] =
[solver_w_vec] in
let Ti1280: Int =
2 in
Ta1279.(Ti1280) in
let Td1282: Float =
o_param_c(m) in
(Td1281 * Td1282) in
(Td1278 + Td1283) in
(Td1284 / q) in
let Tu70: Unit =
let Ta1285: [Int] =
[solver_dist] in
let Ti1286: Int =
0 in
let Td1287: Float =
-(t) in
Ta1285.(Ti1286) <- Td1287 in
1 in 
let rec (in_prod_sqr_obj: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (v: [Float])) =
let Td1248: Float =
let Td1242: Float =
let Td1240: Float =
let Td1239: Float =
let Ti1238: Int =
0 in
v.(Ti1238) in
fsqr(Td1239) in
let Td1241: Float =
o_param_a(m) in
(Td1240 * Td1241) in
let Td1247: Float =
let Td1245: Float =
let Td1244: Float =
let Ti1243: Int =
1 in
v.(Ti1243) in
fsqr(Td1244) in
let Td1246: Float =
o_param_b(m) in
(Td1245 * Td1246) in
(Td1242 + Td1247) in
let Td1253: Float =
let Td1251: Float =
let Td1250: Float =
let Ti1249: Int =
2 in
v.(Ti1249) in
fsqr(Td1250) in
let Td1252: Float =
o_param_c(m) in
(Td1251 * Td1252) in
(Td1248 + Td1253) in 
let rec (in_prod_co_objrot: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (v: [Float])) =
let Td1230: Float =
let Td1222: Float =
let Td1220: Float =
let Td1217: Float =
let Ti1216: Int =
1 in
v.(Ti1216) in
let Td1219: Float =
let Ti1218: Int =
2 in
v.(Ti1218) in
(Td1217 * Td1219) in
let Td1221: Float =
o_param_r1(m) in
(Td1220 * Td1221) in
let Td1229: Float =
let Td1227: Float =
let Td1224: Float =
let Ti1223: Int =
0 in
v.(Ti1223) in
let Td1226: Float =
let Ti1225: Int =
2 in
v.(Ti1225) in
(Td1224 * Td1226) in
let Td1228: Float =
o_param_r2(m) in
(Td1227 * Td1228) in
(Td1222 + Td1229) in
let Td1237: Float =
let Td1235: Float =
let Td1232: Float =
let Ti1231: Int =
0 in
v.(Ti1231) in
let Td1234: Float =
let Ti1233: Int =
1 in
v.(Ti1233) in
(Td1232 * Td1234) in
let Td1236: Float =
o_param_r3(m) in
(Td1235 * Td1236) in
(Td1230 + Td1237) in 
let rec (solver2nd_mul_b: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l: [Float])) =
let Td1207: Float =
let Td1198: Float =
let Td1196: Float =
let Td1193: Float =
let Ta1191: [Float] =
[solver_w_vec] in
let Ti1192: Int =
0 in
Ta1191.(Ti1192) in
let Td1195: Float =
let Ti1194: Int =
0 in
l.(Ti1194) in
(Td1193 * Td1195) in
let Td1197: Float =
o_param_a(m) in
(Td1196 * Td1197) in
let Td1206: Float =
let Td1204: Float =
let Td1201: Float =
let Ta1199: [Float] =
[solver_w_vec] in
let Ti1200: Int =
1 in
Ta1199.(Ti1200) in
let Td1203: Float =
let Ti1202: Int =
1 in
l.(Ti1202) in
(Td1201 * Td1203) in
let Td1205: Float =
o_param_b(m) in
(Td1204 * Td1205) in
(Td1198 + Td1206) in
let Td1215: Float =
let Td1213: Float =
let Td1210: Float =
let Ta1208: [Float] =
[solver_w_vec] in
let Ti1209: Int =
2 in
Ta1208.(Ti1209) in
let Td1212: Float =
let Ti1211: Int =
2 in
l.(Ti1211) in
(Td1210 * Td1212) in
let Td1214: Float =
o_param_c(m) in
(Td1213 * Td1214) in
(Td1207 + Td1215) in 
let rec (solver2nd_rot_b: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Float) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l: [Float])) =
let Td1175: Float =
let Td1159: Float =
let Td1157: Float =
let Td1150: Float =
let Td1147: Float =
let Ta1145: [Float] =
[solver_w_vec] in
let Ti1146: Int =
2 in
Ta1145.(Ti1146) in
let Td1149: Float =
let Ti1148: Int =
1 in
l.(Ti1148) in
(Td1147 * Td1149) in
let Td1156: Float =
let Td1153: Float =
let Ta1151: [Float] =
[solver_w_vec] in
let Ti1152: Int =
1 in
Ta1151.(Ti1152) in
let Td1155: Float =
let Ti1154: Int =
2 in
l.(Ti1154) in
(Td1153 * Td1155) in
(Td1150 + Td1156) in
let Td1158: Float =
o_param_r1(m) in
(Td1157 * Td1158) in
let Td1174: Float =
let Td1172: Float =
let Td1165: Float =
let Td1162: Float =
let Ta1160: [Float] =
[solver_w_vec] in
let Ti1161: Int =
0 in
Ta1160.(Ti1161) in
let Td1164: Float =
let Ti1163: Int =
2 in
l.(Ti1163) in
(Td1162 * Td1164) in
let Td1171: Float =
let Td1168: Float =
let Ta1166: [Float] =
[solver_w_vec] in
let Ti1167: Int =
2 in
Ta1166.(Ti1167) in
let Td1170: Float =
let Ti1169: Int =
0 in
l.(Ti1169) in
(Td1168 * Td1170) in
(Td1165 + Td1171) in
let Td1173: Float =
o_param_r2(m) in
(Td1172 * Td1173) in
(Td1159 + Td1174) in
let Td1190: Float =
let Td1188: Float =
let Td1181: Float =
let Td1178: Float =
let Ta1176: [Float] =
[solver_w_vec] in
let Ti1177: Int =
0 in
Ta1176.(Ti1177) in
let Td1180: Float =
let Ti1179: Int =
1 in
l.(Ti1179) in
(Td1178 * Td1180) in
let Td1187: Float =
let Td1184: Float =
let Ta1182: [Float] =
[solver_w_vec] in
let Ti1183: Int =
1 in
Ta1182.(Ti1183) in
let Td1186: Float =
let Ti1185: Int =
0 in
l.(Ti1185) in
(Td1184 * Td1186) in
(Td1181 + Td1187) in
let Td1189: Float =
o_param_r3(m) in
(Td1188 * Td1189) in
(Td1175 + Td1190) in 
let rec (solver_second: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Int) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l: [Float])) =
let aa0: Float =
in_prod_sqr_obj(m, l) in
let aa: Float =
let Ti1116: Int =
o_isrot(m) in
let Ti1117: Int =
0 in
if Ti1116 == Ti1117 then
aa0
else
let Td1118: Float =
in_prod_co_objrot(m, l) in
(aa0 + Td1118) in
let Td1119: Float =
0. in
if Td1119 == aa then
0
else
let bb0: Float =
let Td1120: Float =
2. in
let Td1121: Float =
solver2nd_mul_b(m, l) in
(Td1120 * Td1121) in
let bb: Float =
let Ti1122: Int =
o_isrot(m) in
let Ti1123: Int =
0 in
if Ti1122 == Ti1123 then
bb0
else
let Td1124: Float =
solver2nd_rot_b(m, l) in
(bb0 + Td1124) in
let cc0: Float =
let Ta1125: [Float] =
[solver_w_vec] in
in_prod_sqr_obj(m, Ta1125) in
let cc1: Float =
let Ti1126: Int =
o_isrot(m) in
let Ti1127: Int =
0 in
if Ti1126 == Ti1127 then
cc0
else
let Td1129: Float =
let Ta1128: [Float] =
[solver_w_vec] in
in_prod_co_objrot(m, Ta1128) in
(cc0 + Td1129) in
let cc: Float =
let Ti1130: Int =
o_form(m) in
let Ti1131: Int =
3 in
if Ti1130 == Ti1131 then
let Td1132: Float =
1. in
(cc1 - Td1132)
else
cc1 in
let d: Float =
let d2: Float =
let Td1134: Float =
let Td1133: Float =
4. in
(Td1133 * aa) in
(Td1134 * cc) in
let Td1135: Float =
fsqr(bb) in
(Td1135 - d2) in
let Td1136: Float =
0. in
if d <= Td1136 then
0
else
let sd: Float =
sqrt(d) in
let t1: Float =
let Tb1137: Bool =
o_isinvert(m) in
let Ti1138: Int =
0 in
if Tb1137 == Ti1138 then
-(sd)
else
sd in
let Tu71: Unit =
let Ta1139: [Int] =
[solver_dist] in
let Ti1140: Int =
0 in
let Td1144: Float =
let Td1143: Float =
let Td1141: Float =
(t1 - bb) in
let Td1142: Float =
2. in
(Td1141 / Td1142) in
(Td1143 / aa) in
Ta1139.(Ti1140) <- Td1144 in
1 in 
let rec (solver: (Int, [Float], [Float]) -> Int) ((index: Int), (l: [Float]), (p: [Float])) =
let m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta1095: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta1095.(index) in
let Tu74: Unit =
let Ta1096: [Float] =
[solver_w_vec] in
let Ti1097: Int =
0 in
let Td1101: Float =
let Td1099: Float =
let Ti1098: Int =
0 in
p.(Ti1098) in
let Td1100: Float =
o_param_x(m) in
(Td1099 - Td1100) in
Ta1096.(Ti1097) <- Td1101 in
let Tu73: Unit =
let Ta1102: [Float] =
[solver_w_vec] in
let Ti1103: Int =
1 in
let Td1107: Float =
let Td1105: Float =
let Ti1104: Int =
1 in
p.(Ti1104) in
let Td1106: Float =
o_param_y(m) in
(Td1105 - Td1106) in
Ta1102.(Ti1103) <- Td1107 in
let Tu72: Unit =
let Ta1108: [Float] =
[solver_w_vec] in
let Ti1109: Int =
2 in
let Td1113: Float =
let Td1111: Float =
let Ti1110: Int =
2 in
p.(Ti1110) in
let Td1112: Float =
o_param_z(m) in
(Td1111 - Td1112) in
Ta1108.(Ti1109) <- Td1113 in
let m_shape: Int =
o_form(m) in
let Ti1114: Int =
1 in
if m_shape == Ti1114 then
solver_rect(m, l)
else
let Ti1115: Int =
2 in
if m_shape == Ti1115 then
solver_surface(m, l)
else
solver_second(m, l) in 
let rec (is_rect_outside: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let Ti1091: Int =
let Td1076: Float =
o_param_a(m) in
let Ti1080: Int =
let Td1079: Float =
let Ta1077: [Float] =
[isoutside_q] in
let Ti1078: Int =
0 in
Ta1077.(Ti1078) in
abs_float(Td1079) in
if Td1076 <= Ti1080 then
0
else
let Td1081: Float =
o_param_b(m) in
let Ti1085: Int =
let Td1084: Float =
let Ta1082: [Float] =
[isoutside_q] in
let Ti1083: Int =
1 in
Ta1082.(Ti1083) in
abs_float(Td1084) in
if Td1081 <= Ti1085 then
0
else
let Td1086: Float =
o_param_c(m) in
let Ti1090: Int =
let Td1089: Float =
let Ta1087: [Float] =
[isoutside_q] in
let Ti1088: Int =
2 in
Ta1087.(Ti1088) in
abs_float(Td1089) in
if Td1086 <= Ti1090 then
0
else
1 in
let Ti1092: Int =
0 in
if Ti1091 == Ti1092 then
let Tb1093: Bool =
o_isinvert(m) in
let Ti1094: Int =
0 in
if Tb1093 == Ti1094 then
1
else
0
else
o_isinvert(m) in 
let rec (is_plane_outside: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let w: Float =
let Td1066: Float =
let Td1060: Float =
let Td1056: Float =
o_param_a(m) in
let Td1059: Float =
let Ta1057: [Float] =
[isoutside_q] in
let Ti1058: Int =
0 in
Ta1057.(Ti1058) in
(Td1056 * Td1059) in
let Td1065: Float =
let Td1061: Float =
o_param_b(m) in
let Td1064: Float =
let Ta1062: [Float] =
[isoutside_q] in
let Ti1063: Int =
1 in
Ta1062.(Ti1063) in
(Td1061 * Td1064) in
(Td1060 + Td1065) in
let Td1071: Float =
let Td1067: Float =
o_param_c(m) in
let Td1070: Float =
let Ta1068: [Float] =
[isoutside_q] in
let Ti1069: Int =
2 in
Ta1068.(Ti1069) in
(Td1067 * Td1070) in
(Td1066 + Td1071) in
let s: Bool =
let Td1072: Float =
0. in
if Td1072 <= w then
0
else
1 in
let Tb1074: Bool =
let Tb1073: Bool =
o_isinvert(m) in
xor(Tb1073, s) in
let Ti1075: Int =
0 in
if Tb1074 == Ti1075 then
1
else
0 in 
let rec (is_second_outside: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let w: Float =
let Ta1044: [Float] =
[isoutside_q] in
in_prod_sqr_obj(m, Ta1044) in
let w2: Float =
let Ti1045: Int =
o_form(m) in
let Ti1046: Int =
3 in
if Ti1045 == Ti1046 then
let Td1047: Float =
1. in
(w - Td1047)
else
w in
let w3: Float =
let Ti1048: Int =
o_isrot(m) in
let Ti1049: Int =
0 in
if Ti1048 == Ti1049 then
w2
else
let Td1051: Float =
let Ta1050: [Float] =
[isoutside_q] in
in_prod_co_objrot(m, Ta1050) in
(w2 + Td1051) in
let s: Bool =
let Td1052: Float =
0. in
if Td1052 <= w3 then
0
else
1 in
let Tb1054: Bool =
let Tb1053: Bool =
o_isinvert(m) in
xor(Tb1053, s) in
let Ti1055: Int =
0 in
if Tb1054 == Ti1055 then
1
else
0 in 
let rec (is_outside: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let Tu77: Unit =
let Ta1021: [Float] =
[isoutside_q] in
let Ti1022: Int =
0 in
let Td1027: Float =
let Ti1025: Int =
let Ta1023: [Int] =
[chkinside_p] in
let Ti1024: Int =
0 in
Ta1023.(Ti1024) in
let Td1026: Float =
o_param_x(m) in
(Ti1025 - Td1026) in
Ta1021.(Ti1022) <- Td1027 in
let Tu76: Unit =
let Ta1028: [Float] =
[isoutside_q] in
let Ti1029: Int =
1 in
let Td1034: Float =
let Ti1032: Int =
let Ta1030: [Int] =
[chkinside_p] in
let Ti1031: Int =
1 in
Ta1030.(Ti1031) in
let Td1033: Float =
o_param_y(m) in
(Ti1032 - Td1033) in
Ta1028.(Ti1029) <- Td1034 in
let Tu75: Unit =
let Ta1035: [Float] =
[isoutside_q] in
let Ti1036: Int =
2 in
let Td1041: Float =
let Ti1039: Int =
let Ta1037: [Int] =
[chkinside_p] in
let Ti1038: Int =
2 in
Ta1037.(Ti1038) in
let Td1040: Float =
o_param_z(m) in
(Ti1039 - Td1040) in
Ta1035.(Ti1036) <- Td1041 in
let m_shape: Int =
o_form(m) in
let Ti1042: Int =
1 in
if m_shape == Ti1042 then
is_rect_outside(m)
else
let Ti1043: Int =
2 in
if m_shape == Ti1043 then
is_plane_outside(m)
else
is_second_outside(m) in 
let rec (check_all_inside: (Int, [Int]) -> Bool) ((ofs: Int), (iand: [Int])) =
let head: Int =
iand.(ofs) in
let Ti1014: Int =
let Ti1013: Int =
1 in
-(Ti1013) in
if head == Ti1014 then
1
else
let Tb1017: Bool =
let Tt1016: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta1015: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta1015.(head) in
is_outside(Tt1016) in
let Ti1018: Int =
0 in
if Tb1017 == Ti1018 then
let Ti1020: Int =
let Ti1019: Int =
1 in
(ofs + Ti1019) in
check_all_inside(Ti1020, iand)
else
0 in 
let rec (shadow_check_and_group: (Int, [Int], [Float]) -> Bool) ((iand_ofs: Int), (and_group: [Int]), (p: [Float])) =
let Ti964: Int =
and_group.(iand_ofs) in
let Ti966: Int =
let Ti965: Int =
1 in
-(Ti965) in
if Ti964 == Ti966 then
0
else
let obj: Int =
and_group.(iand_ofs) in
let t0: Int =
let Ta967: [Float] =
[light] in
solver(obj, Ta967, p) in
let t0p: Float =
let Ta968: [Int] =
[solver_dist] in
let Ti969: Int =
0 in
Ta968.(Ti969) in
let Ti972: Int =
let Ti970: Int =
0 in
if t0 == Ti970 then
0
else
let Td971: Float =
-0.2 in
if Td971 <= t0p then
0
else
1 in
let Ti973: Int =
0 in
if Ti972 == Ti973 then
let Tb976: Bool =
let Tt975: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta974: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta974.(obj) in
o_isinvert(Tt975) in
let Ti977: Int =
0 in
if Tb976 == Ti977 then
0
else
let Ti979: Int =
let Ti978: Int =
1 in
(iand_ofs + Ti978) in
shadow_check_and_group(Ti979, and_group, p)
else
let t: Float =
let Td980: Float =
0.01 in
(t0p + Td980) in
let Tu80: Unit =
let Ta981: [Int] =
[chkinside_p] in
let Ti982: Int =
0 in
let Td989: Float =
let Td986: Float =
let Td985: Float =
let Ta983: [Float] =
[light] in
let Ti984: Int =
0 in
Ta983.(Ti984) in
(Td985 * t) in
let Td988: Float =
let Ti987: Int =
0 in
p.(Ti987) in
(Td986 + Td988) in
Ta981.(Ti982) <- Td989 in
let Tu79: Unit =
let Ta990: [Int] =
[chkinside_p] in
let Ti991: Int =
1 in
let Td998: Float =
let Td995: Float =
let Td994: Float =
let Ta992: [Float] =
[light] in
let Ti993: Int =
1 in
Ta992.(Ti993) in
(Td994 * t) in
let Td997: Float =
let Ti996: Int =
1 in
p.(Ti996) in
(Td995 + Td997) in
Ta990.(Ti991) <- Td998 in
let Tu78: Unit =
let Ta999: [Int] =
[chkinside_p] in
let Ti1000: Int =
2 in
let Td1007: Float =
let Td1004: Float =
let Td1003: Float =
let Ta1001: [Float] =
[light] in
let Ti1002: Int =
2 in
Ta1001.(Ti1002) in
(Td1003 * t) in
let Td1006: Float =
let Ti1005: Int =
2 in
p.(Ti1005) in
(Td1004 + Td1006) in
Ta999.(Ti1000) <- Td1007 in
let Tb1009: Bool =
let Ti1008: Int =
0 in
check_all_inside(Ti1008, and_group) in
let Ti1010: Int =
0 in
if Tb1009 == Ti1010 then
let Ti1012: Int =
let Ti1011: Int =
1 in
(iand_ofs + Ti1011) in
shadow_check_and_group(Ti1012, and_group, p)
else
1 in 
let rec (shadow_check_one_or_group: (Int, [Int], [Float]) -> Bool) ((ofs: Int), (or_group: [Int]), (p: [Float])) =
let head: Int =
or_group.(ofs) in
let Ti958: Int =
let Ti957: Int =
1 in
-(Ti957) in
if head == Ti958 then
0
else
let and_group: [Int] =
let Ta959: [[Int]] =
[and_net] in
Ta959.(head) in
let shadow_p: Bool =
let Ti960: Int =
0 in
shadow_check_and_group(Ti960, and_group, p) in
let Ti961: Int =
0 in
if shadow_p == Ti961 then
let Ti963: Int =
let Ti962: Int =
1 in
(ofs + Ti962) in
shadow_check_one_or_group(Ti963, or_group, p)
else
1 in 
let rec (shadow_check_one_or_matrix: (Int, [[Int]], [Float]) -> Bool) ((ofs: Int), (or_matrix: [[Int]]), (p: [Float])) =
let head: [Int] =
or_matrix.(ofs) in
let range_primitive: Int =
let Ti933: Int =
0 in
head.(Ti933) in
let Ti935: Int =
let Ti934: Int =
1 in
-(Ti934) in
if range_primitive == Ti935 then
0
else
let Ti936: Int =
99 in
if range_primitive == Ti936 then
let Tb938: Bool =
let Ti937: Int =
1 in
shadow_check_one_or_group(Ti937, head, p) in
let Ti939: Int =
0 in
if Tb938 == Ti939 then
let Ti941: Int =
let Ti940: Int =
1 in
(ofs + Ti940) in
shadow_check_one_or_matrix(Ti941, or_matrix, p)
else
1
else
let t: Int =
let Ta942: [Float] =
[light] in
solver(range_primitive, Ta942, p) in
let Ti943: Int =
0 in
if t == Ti943 then
let Ti945: Int =
let Ti944: Int =
1 in
(ofs + Ti944) in
shadow_check_one_or_matrix(Ti945, or_matrix, p)
else
let Td946: Float =
-0.1 in
let Ti949: Int =
let Ta947: [Int] =
[solver_dist] in
let Ti948: Int =
0 in
Ta947.(Ti948) in
if Td946 <= Ti949 then
let Ti951: Int =
let Ti950: Int =
1 in
(ofs + Ti950) in
shadow_check_one_or_matrix(Ti951, or_matrix, p)
else
let Tb953: Bool =
let Ti952: Int =
1 in
shadow_check_one_or_group(Ti952, head, p) in
let Ti954: Int =
0 in
if Tb953 == Ti954 then
let Ti956: Int =
let Ti955: Int =
1 in
(ofs + Ti955) in
shadow_check_one_or_matrix(Ti956, or_matrix, p)
else
1 in 
let rec (solve_each_element: (Int, [Int]) -> Unit) ((iand_ofs: Int), (and_group: [Int])) =
let iobj: Int =
and_group.(iand_ofs) in
let Ti855: Int =
let Ti854: Int =
1 in
-(Ti854) in
if iobj == Ti855 then
()
else
let t0: Int =
let Ta856: [Float] =
[vscan] in
let Ta857: [Int] =
[viewpoint] in
solver(iobj, Ta856, Ta857) in
let Tu89: Unit =
let Ti858: Int =
0 in
if t0 == Ti858 then
let Tb861: Bool =
let Tt860: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta859: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta859.(iobj) in
o_isinvert(Tt860) in
let Ti862: Int =
0 in
if Tb861 == Ti862 then
let Ta863: [Bool] =
[end_flag] in
let Ti864: Int =
0 in
let Ti865: Int =
1 in
Ta863.(Ti864) <- Ti865
else
()
else
let t0p: Float =
let Ta866: [Int] =
[solver_dist] in
let Ti867: Int =
0 in
Ta866.(Ti867) in
let Td868: Float =
-0.1 in
if t0p <= Td868 then
()
else
let Td871: Float =
let Ta869: [Float] =
[tmin] in
let Ti870: Int =
0 in
Ta869.(Ti870) in
if Td871 <= t0p then
()
else
let t: Float =
let Td872: Float =
0.01 in
(t0p + Td872) in
let Tu88: Unit =
let Ta873: [Int] =
[chkinside_p] in
let Ti874: Int =
0 in
let Td882: Float =
let Td878: Float =
let Td877: Float =
let Ta875: [Float] =
[vscan] in
let Ti876: Int =
0 in
Ta875.(Ti876) in
(Td877 * t) in
let Ti881: Int =
let Ta879: [Int] =
[viewpoint] in
let Ti880: Int =
0 in
Ta879.(Ti880) in
(Td878 + Ti881) in
Ta873.(Ti874) <- Td882 in
let Tu87: Unit =
let Ta883: [Int] =
[chkinside_p] in
let Ti884: Int =
1 in
let Td892: Float =
let Td888: Float =
let Td887: Float =
let Ta885: [Float] =
[vscan] in
let Ti886: Int =
1 in
Ta885.(Ti886) in
(Td887 * t) in
let Ti891: Int =
let Ta889: [Int] =
[viewpoint] in
let Ti890: Int =
1 in
Ta889.(Ti890) in
(Td888 + Ti891) in
Ta883.(Ti884) <- Td892 in
let Tu86: Unit =
let Ta893: [Int] =
[chkinside_p] in
let Ti894: Int =
2 in
let Td902: Float =
let Td898: Float =
let Td897: Float =
let Ta895: [Float] =
[vscan] in
let Ti896: Int =
2 in
Ta895.(Ti896) in
(Td897 * t) in
let Ti901: Int =
let Ta899: [Int] =
[viewpoint] in
let Ti900: Int =
2 in
Ta899.(Ti900) in
(Td898 + Ti901) in
Ta893.(Ti894) <- Td902 in
let Tb904: Bool =
let Ti903: Int =
0 in
check_all_inside(Ti903, and_group) in
let Ti905: Int =
0 in
if Tb904 == Ti905 then
()
else
let Tu85: Unit =
let Ta906: [Float] =
[tmin] in
let Ti907: Int =
0 in
Ta906.(Ti907) <- t in
let Tu84: Unit =
let Ta908: [Int] =
[crashed_point] in
let Ti909: Int =
0 in
let Ti912: Int =
let Ta910: [Int] =
[chkinside_p] in
let Ti911: Int =
0 in
Ta910.(Ti911) in
Ta908.(Ti909) <- Ti912 in
let Tu83: Unit =
let Ta913: [Int] =
[crashed_point] in
let Ti914: Int =
1 in
let Ti917: Int =
let Ta915: [Int] =
[chkinside_p] in
let Ti916: Int =
1 in
Ta915.(Ti916) in
Ta913.(Ti914) <- Ti917 in
let Tu82: Unit =
let Ta918: [Int] =
[crashed_point] in
let Ti919: Int =
2 in
let Ti922: Int =
let Ta920: [Int] =
[chkinside_p] in
let Ti921: Int =
2 in
Ta920.(Ti921) in
Ta918.(Ti919) <- Ti922 in
let Tu81: Unit =
let Ta923: [Int] =
[intsec_rectside] in
let Ti924: Int =
0 in
Ta923.(Ti924) <- t0 in
let Ta925: [Int] =
[crashed_object] in
let Ti926: Int =
0 in
Ta925.(Ti926) <- iobj in
let Tb929: Bool =
let Ta927: [Bool] =
[end_flag] in
let Ti928: Int =
0 in
Ta927.(Ti928) in
let Ti930: Int =
0 in
if Tb929 == Ti930 then
let Ti932: Int =
let Ti931: Int =
1 in
(iand_ofs + Ti931) in
solve_each_element(Ti932, and_group)
else
() in 
let rec (solve_one_or_network: (Int, [Int]) -> Unit) ((ofs: Int), (or_group: [Int])) =
let head: Int =
or_group.(ofs) in
let Ti846: Int =
let Ti845: Int =
1 in
-(Ti845) in
if head == Ti846 then
()
else
let and_group: [Int] =
let Ta847: [[Int]] =
[and_net] in
Ta847.(head) in
let Tu91: Unit =
let Ta848: [Bool] =
[end_flag] in
let Ti849: Int =
0 in
let Ti850: Int =
0 in
Ta848.(Ti849) <- Ti850 in
let Tu90: Unit =
let Ti851: Int =
0 in
solve_each_element(Ti851, and_group) in
let Ti853: Int =
let Ti852: Int =
1 in
(ofs + Ti852) in
solve_one_or_network(Ti853, or_group) in 
let rec (trace_or_matrix: (Int, [[Int]]) -> Unit) ((ofs: Int), (or_network: [[Int]])) =
let head: [Int] =
or_network.(ofs) in
let range_primitive: Int =
let Ti829: Int =
0 in
head.(Ti829) in
let Ti831: Int =
let Ti830: Int =
1 in
-(Ti830) in
if range_primitive == Ti831 then
()
else
let Tu92: Unit =
let Ti832: Int =
99 in
if range_primitive == Ti832 then
let Ti833: Int =
1 in
solve_one_or_network(Ti833, head)
else
let t: Int =
let Ta834: [Float] =
[vscan] in
let Ta835: [Int] =
[viewpoint] in
solver(range_primitive, Ta834, Ta835) in
let Ti836: Int =
0 in
if t == Ti836 then
()
else
let tp: Int =
let Ta837: [Int] =
[solver_dist] in
let Ti838: Int =
0 in
Ta837.(Ti838) in
let Td841: Float =
let Ta839: [Float] =
[tmin] in
let Ti840: Int =
0 in
Ta839.(Ti840) in
if Td841 <= tp then
()
else
let Ti842: Int =
1 in
solve_one_or_network(Ti842, head) in
let Ti844: Int =
let Ti843: Int =
1 in
(ofs + Ti843) in
trace_or_matrix(Ti844, or_network) in 
let rec (tracer: (Int, Int) -> Bool) ((viewpoint: Int), (vscan: Int)) =
let Tu94: Unit =
let Ta818: [Float] =
[tmin] in
let Ti819: Int =
0 in
let Td820: Float =
1000000000. in
Ta818.(Ti819) <- Td820 in
let Tu93: Unit =
let Ti821: Int =
0 in
let Ta824: [[Int]] =
let Ta822: [[[Int]]] =
[or_net] in
let Ti823: Int =
0 in
Ta822.(Ti823) in
trace_or_matrix(Ti821, Ta824) in
let t: Float =
let Ta825: [Float] =
[tmin] in
let Ti826: Int =
0 in
Ta825.(Ti826) in
let Td827: Float =
-0.1 in
if t <= Td827 then
0
else
let Td828: Float =
100000000. in
if Td828 <= t then
0
else
1 in 
let rec (get_nvector_rect: (Unit) -> Unit) ((Tu95: Unit)) =
let rectside: Int =
let Ta774: [Int] =
[intsec_rectside] in
let Ti775: Int =
0 in
Ta774.(Ti775) in
let Ti776: Int =
1 in
if rectside == Ti776 then
let Tu97: Unit =
let Ta777: [Float] =
[nvector] in
let Ti778: Int =
0 in
let Td783: Float =
let Td782: Float =
let Td781: Float =
let Ta779: [Float] =
[vscan] in
let Ti780: Int =
0 in
Ta779.(Ti780) in
sgn(Td781) in
-(Td782) in
Ta777.(Ti778) <- Td783 in
let Tu96: Unit =
let Ta784: [Float] =
[nvector] in
let Ti785: Int =
1 in
let Td786: Float =
0. in
Ta784.(Ti785) <- Td786 in
let Ta787: [Float] =
[nvector] in
let Ti788: Int =
2 in
let Td789: Float =
0. in
Ta787.(Ti788) <- Td789
else
let Ti790: Int =
2 in
if rectside == Ti790 then
let Tu99: Unit =
let Ta791: [Float] =
[nvector] in
let Ti792: Int =
0 in
let Td793: Float =
0. in
Ta791.(Ti792) <- Td793 in
let Tu98: Unit =
let Ta794: [Float] =
[nvector] in
let Ti795: Int =
1 in
let Td800: Float =
let Td799: Float =
let Td798: Float =
let Ta796: [Float] =
[vscan] in
let Ti797: Int =
1 in
Ta796.(Ti797) in
sgn(Td798) in
-(Td799) in
Ta794.(Ti795) <- Td800 in
let Ta801: [Float] =
[nvector] in
let Ti802: Int =
2 in
let Td803: Float =
0. in
Ta801.(Ti802) <- Td803
else
let Ti804: Int =
3 in
if rectside == Ti804 then
let Tu101: Unit =
let Ta805: [Float] =
[nvector] in
let Ti806: Int =
0 in
let Td807: Float =
0. in
Ta805.(Ti806) <- Td807 in
let Tu100: Unit =
let Ta808: [Float] =
[nvector] in
let Ti809: Int =
1 in
let Td810: Float =
0. in
Ta808.(Ti809) <- Td810 in
let Ta811: [Float] =
[nvector] in
let Ti812: Int =
2 in
let Td817: Float =
let Td816: Float =
let Td815: Float =
let Ta813: [Float] =
[vscan] in
let Ti814: Int =
2 in
Ta813.(Ti814) in
sgn(Td815) in
-(Td816) in
Ta811.(Ti812) <- Td817
else
() in 
let rec (get_nvector_plane: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Unit) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let Tu103: Unit =
let Ta762: [Float] =
[nvector] in
let Ti763: Int =
0 in
let Td765: Float =
let Td764: Float =
o_param_a(m) in
-(Td764) in
Ta762.(Ti763) <- Td765 in
let Tu102: Unit =
let Ta766: [Float] =
[nvector] in
let Ti767: Int =
1 in
let Td769: Float =
let Td768: Float =
o_param_b(m) in
-(Td768) in
Ta766.(Ti767) <- Td769 in
let Ta770: [Float] =
[nvector] in
let Ti771: Int =
2 in
let Td773: Float =
let Td772: Float =
o_param_c(m) in
-(Td772) in
Ta770.(Ti771) <- Td773 in 
let rec (get_nvector_second_norot: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Unit) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (p: [Float])) =
let Tu106: Unit =
let Ta736: [Float] =
[nvector] in
let Ti737: Int =
0 in
let Td743: Float =
let Td741: Float =
let Td739: Float =
let Ti738: Int =
0 in
p.(Ti738) in
let Td740: Float =
o_param_x(m) in
(Td739 - Td740) in
let Td742: Float =
o_param_a(m) in
(Td741 * Td742) in
Ta736.(Ti737) <- Td743 in
let Tu105: Unit =
let Ta744: [Float] =
[nvector] in
let Ti745: Int =
1 in
let Td751: Float =
let Td749: Float =
let Td747: Float =
let Ti746: Int =
1 in
p.(Ti746) in
let Td748: Float =
o_param_y(m) in
(Td747 - Td748) in
let Td750: Float =
o_param_b(m) in
(Td749 * Td750) in
Ta744.(Ti745) <- Td751 in
let Tu104: Unit =
let Ta752: [Float] =
[nvector] in
let Ti753: Int =
2 in
let Td759: Float =
let Td757: Float =
let Td755: Float =
let Ti754: Int =
2 in
p.(Ti754) in
let Td756: Float =
o_param_z(m) in
(Td755 - Td756) in
let Td758: Float =
o_param_c(m) in
(Td757 * Td758) in
Ta752.(Ti753) <- Td759 in
let Ta760: [Float] =
[nvector] in
let Tb761: Bool =
o_isinvert(m) in
normalize_vector(Ta760, Tb761) in 
let rec (get_nvector_second_rot: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Unit) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (p: [Float])) =
let Tu112: Unit =
let Ta656: [Float] =
[nvector_w] in
let Ti657: Int =
0 in
let Td661: Float =
let Td659: Float =
let Ti658: Int =
0 in
p.(Ti658) in
let Td660: Float =
o_param_x(m) in
(Td659 - Td660) in
Ta656.(Ti657) <- Td661 in
let Tu111: Unit =
let Ta662: [Float] =
[nvector_w] in
let Ti663: Int =
1 in
let Td667: Float =
let Td665: Float =
let Ti664: Int =
1 in
p.(Ti664) in
let Td666: Float =
o_param_y(m) in
(Td665 - Td666) in
Ta662.(Ti663) <- Td667 in
let Tu110: Unit =
let Ta668: [Float] =
[nvector_w] in
let Ti669: Int =
2 in
let Td673: Float =
let Td671: Float =
let Ti670: Int =
2 in
p.(Ti670) in
let Td672: Float =
o_param_z(m) in
(Td671 - Td672) in
Ta668.(Ti669) <- Td673 in
let Tu109: Unit =
let Ta674: [Float] =
[nvector] in
let Ti675: Int =
0 in
let Td693: Float =
let Td680: Float =
let Td678: Float =
let Ta676: [Float] =
[nvector_w] in
let Ti677: Int =
0 in
Ta676.(Ti677) in
let Td679: Float =
o_param_a(m) in
(Td678 * Td679) in
let Td692: Float =
let Td691: Float =
let Td685: Float =
let Td683: Float =
let Ta681: [Float] =
[nvector_w] in
let Ti682: Int =
1 in
Ta681.(Ti682) in
let Td684: Float =
o_param_r3(m) in
(Td683 * Td684) in
let Td690: Float =
let Td688: Float =
let Ta686: [Float] =
[nvector_w] in
let Ti687: Int =
2 in
Ta686.(Ti687) in
let Td689: Float =
o_param_r2(m) in
(Td688 * Td689) in
(Td685 + Td690) in
fhalf(Td691) in
(Td680 + Td692) in
Ta674.(Ti675) <- Td693 in
let Tu108: Unit =
let Ta694: [Float] =
[nvector] in
let Ti695: Int =
1 in
let Td713: Float =
let Td700: Float =
let Td698: Float =
let Ta696: [Float] =
[nvector_w] in
let Ti697: Int =
1 in
Ta696.(Ti697) in
let Td699: Float =
o_param_b(m) in
(Td698 * Td699) in
let Td712: Float =
let Td711: Float =
let Td705: Float =
let Td703: Float =
let Ta701: [Float] =
[nvector_w] in
let Ti702: Int =
0 in
Ta701.(Ti702) in
let Td704: Float =
o_param_r3(m) in
(Td703 * Td704) in
let Td710: Float =
let Td708: Float =
let Ta706: [Float] =
[nvector_w] in
let Ti707: Int =
2 in
Ta706.(Ti707) in
let Td709: Float =
o_param_r1(m) in
(Td708 * Td709) in
(Td705 + Td710) in
fhalf(Td711) in
(Td700 + Td712) in
Ta694.(Ti695) <- Td713 in
let Tu107: Unit =
let Ta714: [Float] =
[nvector] in
let Ti715: Int =
2 in
let Td733: Float =
let Td720: Float =
let Td718: Float =
let Ta716: [Float] =
[nvector_w] in
let Ti717: Int =
2 in
Ta716.(Ti717) in
let Td719: Float =
o_param_c(m) in
(Td718 * Td719) in
let Td732: Float =
let Td731: Float =
let Td725: Float =
let Td723: Float =
let Ta721: [Float] =
[nvector_w] in
let Ti722: Int =
0 in
Ta721.(Ti722) in
let Td724: Float =
o_param_r2(m) in
(Td723 * Td724) in
let Td730: Float =
let Td728: Float =
let Ta726: [Float] =
[nvector_w] in
let Ti727: Int =
1 in
Ta726.(Ti727) in
let Td729: Float =
o_param_r1(m) in
(Td728 * Td729) in
(Td725 + Td730) in
fhalf(Td731) in
(Td720 + Td732) in
Ta714.(Ti715) <- Td733 in
let Ta734: [Float] =
[nvector] in
let Tb735: Bool =
o_isinvert(m) in
normalize_vector(Ta734, Tb735) in 
let rec (get_nvector: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Unit) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (p: [Float])) =
let m_shape: Int =
o_form(m) in
let Ti651: Int =
1 in
if m_shape == Ti651 then
let Tu652: Unit =
() in
get_nvector_rect(Tu652)
else
let Ti653: Int =
2 in
if m_shape == Ti653 then
get_nvector_plane(m)
else
let Ti654: Int =
o_isrot(m) in
let Ti655: Int =
0 in
if Ti654 == Ti655 then
get_nvector_second_norot(m, p)
else
get_nvector_second_rot(m, p) in 
let rec (utexture: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Unit) ((m: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (p: [Float])) =
let m_tex: Int =
o_texturetype(m) in
let Tu117: Unit =
let Ta522: [Float] =
[texture_color] in
let Ti523: Int =
0 in
let Ti524: Int =
o_color_red(m) in
Ta522.(Ti523) <- Ti524 in
let Tu116: Unit =
let Ta525: [Float] =
[texture_color] in
let Ti526: Int =
1 in
let Ti527: Int =
o_color_green(m) in
Ta525.(Ti526) <- Ti527 in
let Tu115: Unit =
let Ta528: [Float] =
[texture_color] in
let Ti529: Int =
2 in
let Ti530: Int =
o_color_blue(m) in
Ta528.(Ti529) <- Ti530 in
let Ti531: Int =
1 in
if m_tex == Ti531 then
let w1: Float =
let Td533: Float =
let Ti532: Int =
0 in
p.(Ti532) in
let Td534: Float =
o_param_x(m) in
(Td533 - Td534) in
let flag1: Bool =
let d1: Float =
let Td537: Float =
let Td536: Float =
let Td535: Float =
0.05 in
(w1 * Td535) in
floor(Td536) in
let Td538: Float =
20. in
(Td537 * Td538) in
let Td539: Float =
10. in
let Td540: Float =
(w1 - d1) in
if Td539 <= Td540 then
0
else
1 in
let w3: Float =
let Td542: Float =
let Ti541: Int =
2 in
p.(Ti541) in
let Td543: Float =
o_param_z(m) in
(Td542 - Td543) in
let flag2: Bool =
let d2: Float =
let Td546: Float =
let Td545: Float =
let Td544: Float =
0.05 in
(w3 * Td544) in
floor(Td545) in
let Td547: Float =
20. in
(Td546 * Td547) in
let Td548: Float =
10. in
let Td549: Float =
(w3 - d2) in
if Td548 <= Td549 then
0
else
1 in
let Ta550: [Float] =
[texture_color] in
let Ti551: Int =
1 in
let Td555: Float =
let Ti552: Int =
0 in
if flag1 == Ti552 then
let Ti553: Int =
0 in
if flag2 == Ti553 then
255.
else
0.
else
let Ti554: Int =
0 in
if flag2 == Ti554 then
0.
else
255. in
Ta550.(Ti551) <- Td555
else
let Ti556: Int =
2 in
if m_tex == Ti556 then
let w2: Float =
let Td561: Float =
let Td560: Float =
let Td558: Float =
let Ti557: Int =
1 in
p.(Ti557) in
let Td559: Float =
0.25 in
(Td558 * Td559) in
sin(Td560) in
fsqr(Td561) in
let Tu113: Unit =
let Ta562: [Float] =
[texture_color] in
let Ti563: Int =
0 in
let Td565: Float =
let Td564: Float =
255. in
(Td564 * w2) in
Ta562.(Ti563) <- Td565 in
let Ta566: [Float] =
[texture_color] in
let Ti567: Int =
1 in
let Td571: Float =
let Td568: Float =
255. in
let Td570: Float =
let Td569: Float =
1. in
(Td569 - w2) in
(Td568 * Td570) in
Ta566.(Ti567) <- Td571
else
let Ti572: Int =
3 in
if m_tex == Ti572 then
let w1: Float =
let Td574: Float =
let Ti573: Int =
0 in
p.(Ti573) in
let Td575: Float =
o_param_x(m) in
(Td574 - Td575) in
let w3: Float =
let Td577: Float =
let Ti576: Int =
2 in
p.(Ti576) in
let Td578: Float =
o_param_z(m) in
(Td577 - Td578) in
let w2: Float =
let Td582: Float =
let Td581: Float =
let Td579: Float =
fsqr(w1) in
let Td580: Float =
fsqr(w3) in
(Td579 + Td580) in
sqrt(Td581) in
let Td583: Float =
10. in
(Td582 / Td583) in
let w4: Float =
let Td585: Float =
let Td584: Float =
floor(w2) in
(w2 - Td584) in
let Td586: Float =
3.1415927 in
(Td585 * Td586) in
let cws: Float =
let Td587: Float =
cos(w4) in
fsqr(Td587) in
let Tu114: Unit =
let Ta588: [Float] =
[texture_color] in
let Ti589: Int =
1 in
let Td591: Float =
let Td590: Float =
255. in
(cws * Td590) in
Ta588.(Ti589) <- Td591 in
let Ta592: [Float] =
[texture_color] in
let Ti593: Int =
2 in
let Td597: Float =
let Td595: Float =
let Td594: Float =
1. in
(Td594 - cws) in
let Td596: Float =
255. in
(Td595 * Td596) in
Ta592.(Ti593) <- Td597
else
let Ti598: Int =
4 in
if m_tex == Ti598 then
let w1: Float =
let Td602: Float =
let Td600: Float =
let Ti599: Int =
0 in
p.(Ti599) in
let Td601: Float =
o_param_x(m) in
(Td600 - Td601) in
let Td604: Float =
let Td603: Float =
o_param_a(m) in
sqrt(Td603) in
(Td602 * Td604) in
let w3: Float =
let Td608: Float =
let Td606: Float =
let Ti605: Int =
2 in
p.(Ti605) in
let Td607: Float =
o_param_z(m) in
(Td606 - Td607) in
let Td610: Float =
let Td609: Float =
o_param_c(m) in
sqrt(Td609) in
(Td608 * Td610) in
let w4: Float =
let Td613: Float =
let Td611: Float =
fsqr(w1) in
let Td612: Float =
fsqr(w3) in
(Td611 + Td612) in
sqrt(Td613) in
let w7: Float =
let Td614: Float =
0.0001 in
let Ti615: Int =
abs_float(w1) in
if Td614 <= Ti615 then
let w5: Int =
let Td616: Float =
(w3 / w1) in
abs_float(Td616) in
let Td617: Float =
atan(w5) in
let Td620: Float =
let Td618: Float =
30. in
let Td619: Float =
3.1415927 in
(Td618 / Td619) in
(Td617 * Td620)
else
15. in
let w9: Float =
let Td621: Float =
floor(w7) in
(w7 - Td621) in
let w2: Float =
let Td625: Float =
let Td623: Float =
let Ti622: Int =
1 in
p.(Ti622) in
let Td624: Float =
o_param_y(m) in
(Td623 - Td624) in
let Td627: Float =
let Td626: Float =
o_param_b(m) in
sqrt(Td626) in
(Td625 * Td627) in
let w8: Float =
let Td628: Float =
0.0001 in
let Ti629: Int =
abs_float(w7) in
if Td628 <= Ti629 then
let w6: Int =
let Td630: Float =
(w2 / w4) in
abs_float(Td630) in
let Td631: Float =
atan(w6) in
let Td634: Float =
let Td632: Float =
30. in
let Td633: Float =
3.1415927 in
(Td632 / Td633) in
(Td631 * Td634)
else
15. in
let w10: Float =
let Td635: Float =
floor(w8) in
(w8 - Td635) in
let w11: Float =
let Td640: Float =
let Td636: Float =
0.15 in
let Td639: Float =
let Td638: Float =
let Td637: Float =
0.5 in
(Td637 - w9) in
fsqr(Td638) in
(Td636 - Td639) in
let Td643: Float =
let Td642: Float =
let Td641: Float =
0.5 in
(Td641 - w10) in
fsqr(Td642) in
(Td640 - Td643) in
let Ta644: [Float] =
[texture_color] in
let Ti645: Int =
2 in
let Td650: Float =
let Td646: Float =
0. in
if w11 <= Td646 then
0.
else
let Td649: Float =
let Td647: Float =
255. in
let Td648: Float =
0.3 in
(Td647 / Td648) in
(w11 * Td649) in
Ta644.(Ti645) <- Td650
else
() in 
let rec (in_prod: ([Float], [Float]) -> Float) ((v1: [Float]), (v2: [Float])) =
let Td516: Float =
let Td510: Float =
let Td507: Float =
let Ti506: Int =
0 in
v1.(Ti506) in
let Td509: Float =
let Ti508: Int =
0 in
v2.(Ti508) in
(Td507 * Td509) in
let Td515: Float =
let Td512: Float =
let Ti511: Int =
1 in
v1.(Ti511) in
let Td514: Float =
let Ti513: Int =
1 in
v2.(Ti513) in
(Td512 * Td514) in
(Td510 + Td515) in
let Td521: Float =
let Td518: Float =
let Ti517: Int =
2 in
v1.(Ti517) in
let Td520: Float =
let Ti519: Int =
2 in
v2.(Ti519) in
(Td518 * Td520) in
(Td516 + Td521) in 
let rec (accumulate_vec_mul: ([Float], [Float], Float) -> Unit) ((v1: [Float]), (v2: [Float]), (w: Float)) =
let Tu119: Unit =
let Ti485: Int =
0 in
let Td491: Float =
let Td487: Float =
let Ti486: Int =
0 in
v1.(Ti486) in
let Td490: Float =
let Td489: Float =
let Ti488: Int =
0 in
v2.(Ti488) in
(w * Td489) in
(Td487 + Td490) in
v1.(Ti485) <- Td491 in
let Tu118: Unit =
let Ti492: Int =
1 in
let Td498: Float =
let Td494: Float =
let Ti493: Int =
1 in
v1.(Ti493) in
let Td497: Float =
let Td496: Float =
let Ti495: Int =
1 in
v2.(Ti495) in
(w * Td496) in
(Td494 + Td497) in
v1.(Ti492) <- Td498 in
let Ti499: Int =
2 in
let Td505: Float =
let Td501: Float =
let Ti500: Int =
2 in
v1.(Ti500) in
let Td504: Float =
let Td503: Float =
let Ti502: Int =
2 in
v2.(Ti502) in
(w * Td503) in
(Td501 + Td504) in
v1.(Ti499) <- Td505 in 
let rec (raytracing: (Int, Float) -> Unit) ((nref: Int), (energy: Float)) =
let crashed_p: Bool =
let Ta371: [Int] =
[viewpoint] in
let Ta372: [Float] =
[vscan] in
tracer(Ta371, Ta372) in
let Tu131: Unit =
let Ti373: Int =
0 in
if crashed_p == Ti373 then
let Ti374: Int =
0 in
if nref == Ti374 then
()
else
let hl: Float =
let Td377: Float =
let Ta375: [Float] =
[vscan] in
let Ta376: [Float] =
[light] in
in_prod(Ta375, Ta376) in
-(Td377) in
let Td378: Float =
0. in
if hl <= Td378 then
()
else
let ihl: Float =
let Td381: Float =
let Td380: Float =
let Td379: Float =
fsqr(hl) in
(Td379 * hl) in
(Td380 * energy) in
let Td384: Float =
let Ta382: [Float] =
[beam] in
let Ti383: Int =
0 in
Ta382.(Ti383) in
(Td381 * Td384) in
let Tu121: Unit =
let Ta385: [Float] =
[rgb] in
let Ti386: Int =
0 in
let Td390: Float =
let Td389: Float =
let Ta387: [Float] =
[rgb] in
let Ti388: Int =
0 in
Ta387.(Ti388) in
(Td389 + ihl) in
Ta385.(Ti386) <- Td390 in
let Tu120: Unit =
let Ta391: [Float] =
[rgb] in
let Ti392: Int =
1 in
let Td396: Float =
let Td395: Float =
let Ta393: [Float] =
[rgb] in
let Ti394: Int =
1 in
Ta393.(Ti394) in
(Td395 + ihl) in
Ta391.(Ti392) <- Td396 in
let Ta397: [Float] =
[rgb] in
let Ti398: Int =
2 in
let Td402: Float =
let Td401: Float =
let Ta399: [Float] =
[rgb] in
let Ti400: Int =
2 in
Ta399.(Ti400) in
(Td401 + ihl) in
Ta397.(Ti398) <- Td402
else
() in
let Ti403: Int =
0 in
if crashed_p == Ti403 then
()
else
let cobj: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta404: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
let Ti407: Int =
let Ta405: [Int] =
[crashed_object] in
let Ti406: Int =
0 in
Ta405.(Ti406) in
Ta404.(Ti407) in
let Tu130: Unit =
let Ta408: [Int] =
[crashed_point] in
get_nvector(cobj, Ta408) in
let bright: Float =
let Tb414: Bool =
let Ti409: Int =
0 in
let Ta412: [[Int]] =
let Ta410: [[[Int]]] =
[or_net] in
let Ti411: Int =
0 in
Ta410.(Ti411) in
let Ta413: [Int] =
[crashed_point] in
shadow_check_one_or_matrix(Ti409, Ta412, Ta413) in
let Ti415: Int =
0 in
if Tb414 == Ti415 then
let br: Float =
let Td418: Float =
let Ta416: [Float] =
[nvector] in
let Ta417: [Float] =
[light] in
in_prod(Ta416, Ta417) in
-(Td418) in
let br1: Float =
let Td419: Float =
0. in
if Td419 <= br then
let Td420: Float =
0.2 in
(br + Td420)
else
0.2 in
let Td421: Float =
(br1 * energy) in
let Td422: Float =
o_diffuse(cobj) in
(Td421 * Td422)
else
0. in
let Tu129: Unit =
let Ta423: [Int] =
[crashed_point] in
utexture(cobj, Ta423) in
let Tu128: Unit =
let Ta424: [Float] =
[rgb] in
let Ta425: [Float] =
[texture_color] in
accumulate_vec_mul(Ta424, Ta425, bright) in
let Ti426: Int =
4 in
if nref <= Ti426 then
let Td427: Float =
0.1 in
if energy <= Td427 then
()
else
let w: Float =
let Td428: Float =
-2. in
let Td431: Float =
let Ta429: [Float] =
[vscan] in
let Ta430: [Float] =
[nvector] in
in_prod(Ta429, Ta430) in
(Td428 * Td431) in
let Tu127: Unit =
let Ta432: [Float] =
[vscan] in
let Ta433: [Float] =
[nvector] in
accumulate_vec_mul(Ta432, Ta433, w) in
let m_surface: Int =
o_reflectiontype(cobj) in
let Ti434: Int =
1 in
if m_surface == Ti434 then
let Td435: Float =
0. in
let Td436: Float =
o_hilight(cobj) in
if Td435 == Td436 then
()
else
let hl: Float =
let Td439: Float =
let Ta437: [Float] =
[vscan] in
let Ta438: [Float] =
[light] in
in_prod(Ta437, Ta438) in
-(Td439) in
let Td440: Float =
0. in
if hl <= Td440 then
()
else
let ihl: Float =
let Td444: Float =
let Td443: Float =
let Td442: Float =
let Td441: Float =
fsqr(hl) in
fsqr(Td441) in
(Td442 * energy) in
(Td443 * bright) in
let Td445: Float =
o_hilight(cobj) in
(Td444 * Td445) in
let Tu123: Unit =
let Ta446: [Float] =
[rgb] in
let Ti447: Int =
0 in
let Td451: Float =
let Td450: Float =
let Ta448: [Float] =
[rgb] in
let Ti449: Int =
0 in
Ta448.(Ti449) in
(Td450 + ihl) in
Ta446.(Ti447) <- Td451 in
let Tu122: Unit =
let Ta452: [Float] =
[rgb] in
let Ti453: Int =
1 in
let Td457: Float =
let Td456: Float =
let Ta454: [Float] =
[rgb] in
let Ti455: Int =
1 in
Ta454.(Ti455) in
(Td456 + ihl) in
Ta452.(Ti453) <- Td457 in
let Ta458: [Float] =
[rgb] in
let Ti459: Int =
2 in
let Td463: Float =
let Td462: Float =
let Ta460: [Float] =
[rgb] in
let Ti461: Int =
2 in
Ta460.(Ti461) in
(Td462 + ihl) in
Ta458.(Ti459) <- Td463
else
let Ti464: Int =
2 in
if m_surface == Ti464 then
let Tu126: Unit =
let Ta465: [Int] =
[viewpoint] in
let Ti466: Int =
0 in
let Ti469: Int =
let Ta467: [Int] =
[crashed_point] in
let Ti468: Int =
0 in
Ta467.(Ti468) in
Ta465.(Ti466) <- Ti469 in
let Tu125: Unit =
let Ta470: [Int] =
[viewpoint] in
let Ti471: Int =
1 in
let Ti474: Int =
let Ta472: [Int] =
[crashed_point] in
let Ti473: Int =
1 in
Ta472.(Ti473) in
Ta470.(Ti471) <- Ti474 in
let Tu124: Unit =
let Ta475: [Int] =
[viewpoint] in
let Ti476: Int =
2 in
let Ti479: Int =
let Ta477: [Int] =
[crashed_point] in
let Ti478: Int =
2 in
Ta477.(Ti478) in
Ta475.(Ti476) <- Ti479 in
let energy2: Float =
let Td482: Float =
let Td480: Float =
1. in
let Td481: Float =
o_diffuse(cobj) in
(Td480 - Td481) in
(energy * Td482) in
let Ti484: Int =
let Ti483: Int =
1 in
(nref + Ti483) in
raytracing(Ti484, energy2)
else
()
else
() in 
let rec (write_rgb: (Unit) -> Unit) ((Tu132: Unit)) =
let red: Int =
let Td361: Float =
let Ta359: [Float] =
[rgb] in
let Ti360: Int =
0 in
Ta359.(Ti360) in
int_of_float(Td361) in
let red: Int =
let Ti362: Int =
255 in
if red <= Ti362 then
red
else
255 in
let Tu134: Unit =
print_byte(red) in
let green: Int =
let Td365: Float =
let Ta363: [Float] =
[rgb] in
let Ti364: Int =
1 in
Ta363.(Ti364) in
int_of_float(Td365) in
let green: Int =
let Ti366: Int =
255 in
if green <= Ti366 then
green
else
255 in
let Tu133: Unit =
print_byte(green) in
let blue: Int =
let Td369: Float =
let Ta367: [Float] =
[rgb] in
let Ti368: Int =
2 in
Ta367.(Ti368) in
int_of_float(Td369) in
let blue: Int =
let Ti370: Int =
255 in
if blue <= Ti370 then
blue
else
255 in
print_byte(blue) in 
let rec (write_ppm_header: (Unit) -> Unit) ((Tu135: Unit)) =
let Tu143: Unit =
let Ti344: Int =
80 in
print_byte(Ti344) in
let Tu142: Unit =
let Ti347: Int =
let Ti345: Int =
48 in
let Ti346: Int =
6 in
(Ti345 + Ti346) in
print_byte(Ti347) in
let Tu141: Unit =
let Ti348: Int =
10 in
print_byte(Ti348) in
let Tu140: Unit =
let Ti351: Int =
let Ta349: [Int] =
[size] in
let Ti350: Int =
0 in
Ta349.(Ti350) in
print_int(Ti351) in
let Tu139: Unit =
let Ti352: Int =
32 in
print_byte(Ti352) in
let Tu138: Unit =
let Ti355: Int =
let Ta353: [Int] =
[size] in
let Ti354: Int =
1 in
Ta353.(Ti354) in
print_int(Ti355) in
let Tu137: Unit =
let Ti356: Int =
10 in
print_byte(Ti356) in
let Tu136: Unit =
let Ti357: Int =
255 in
print_int(Ti357) in
let Ti358: Int =
10 in
print_byte(Ti358) in 
let rec (scan_point: (Int) -> Unit) ((scanx: Int)) =
let Ti249: Int =
let Ta247: [Int] =
[size] in
let Ti248: Int =
0 in
Ta247.(Ti248) in
if Ti249 <= scanx then
()
else
let sscanx: Float =
let Td254: Float =
let Td250: Float =
float_of_int(scanx) in
let Td253: Float =
let Ta251: [Float] =
[scan_offset] in
let Ti252: Int =
0 in
Ta251.(Ti252) in
(Td250 - Td253) in
let Td257: Float =
let Ta255: [Float] =
[scan_d] in
let Ti256: Int =
0 in
Ta255.(Ti256) in
(Td254 * Td257) in
let Tu157: Unit =
let Ta258: [Float] =
[vscan] in
let Ti259: Int =
0 in
let Td267: Float =
let Td263: Float =
let Td262: Float =
let Ta260: [Float] =
[cos_v] in
let Ti261: Int =
1 in
Ta260.(Ti261) in
(sscanx * Td262) in
let Td266: Float =
let Ta264: [Float] =
[wscan] in
let Ti265: Int =
0 in
Ta264.(Ti265) in
(Td263 + Td266) in
Ta258.(Ti259) <- Td267 in
let Tu156: Unit =
let Ta268: [Float] =
[vscan] in
let Ti269: Int =
1 in
let Td280: Float =
let Td276: Float =
let Td272: Float =
let Ta270: [Float] =
[scan_sscany] in
let Ti271: Int =
0 in
Ta270.(Ti271) in
let Td275: Float =
let Ta273: [Float] =
[cos_v] in
let Ti274: Int =
0 in
Ta273.(Ti274) in
(Td272 * Td275) in
let Td279: Float =
let Ta277: [Float] =
[vp] in
let Ti278: Int =
1 in
Ta277.(Ti278) in
(Td276 - Td279) in
Ta268.(Ti269) <- Td280 in
let Tu155: Unit =
let Ta281: [Float] =
[vscan] in
let Ti282: Int =
2 in
let Td291: Float =
let Td287: Float =
let Td283: Float =
-(sscanx) in
let Td286: Float =
let Ta284: [Float] =
[sin_v] in
let Ti285: Int =
1 in
Ta284.(Ti285) in
(Td283 * Td286) in
let Td290: Float =
let Ta288: [Float] =
[wscan] in
let Ti289: Int =
2 in
Ta288.(Ti289) in
(Td287 + Td290) in
Ta281.(Ti282) <- Td291 in
let metric: Float =
let Td296: Float =
let Td292: Float =
fsqr(sscanx) in
let Td295: Float =
let Ta293: [Float] =
[scan_met1] in
let Ti294: Int =
0 in
Ta293.(Ti294) in
(Td292 + Td295) in
sqrt(Td296) in
let Tu154: Unit =
let Ta297: [Float] =
[vscan] in
let Ti298: Int =
0 in
let Td302: Float =
let Td301: Float =
let Ta299: [Float] =
[vscan] in
let Ti300: Int =
0 in
Ta299.(Ti300) in
(Td301 / metric) in
Ta297.(Ti298) <- Td302 in
let Tu153: Unit =
let Ta303: [Float] =
[vscan] in
let Ti304: Int =
1 in
let Td308: Float =
let Td307: Float =
let Ta305: [Float] =
[vscan] in
let Ti306: Int =
1 in
Ta305.(Ti306) in
(Td307 / metric) in
Ta303.(Ti304) <- Td308 in
let Tu152: Unit =
let Ta309: [Float] =
[vscan] in
let Ti310: Int =
2 in
let Td314: Float =
let Td313: Float =
let Ta311: [Float] =
[vscan] in
let Ti312: Int =
2 in
Ta311.(Ti312) in
(Td313 / metric) in
Ta309.(Ti310) <- Td314 in
let Tu151: Unit =
let Ta315: [Int] =
[viewpoint] in
let Ti316: Int =
0 in
let Ti319: Int =
let Ta317: [Int] =
[view] in
let Ti318: Int =
0 in
Ta317.(Ti318) in
Ta315.(Ti316) <- Ti319 in
let Tu150: Unit =
let Ta320: [Int] =
[viewpoint] in
let Ti321: Int =
1 in
let Ti324: Int =
let Ta322: [Int] =
[view] in
let Ti323: Int =
1 in
Ta322.(Ti323) in
Ta320.(Ti321) <- Ti324 in
let Tu149: Unit =
let Ta325: [Int] =
[viewpoint] in
let Ti326: Int =
2 in
let Ti329: Int =
let Ta327: [Int] =
[view] in
let Ti328: Int =
2 in
Ta327.(Ti328) in
Ta325.(Ti326) <- Ti329 in
let Tu148: Unit =
let Ta330: [Float] =
[rgb] in
let Ti331: Int =
0 in
let Td332: Float =
0. in
Ta330.(Ti331) <- Td332 in
let Tu147: Unit =
let Ta333: [Float] =
[rgb] in
let Ti334: Int =
1 in
let Td335: Float =
0. in
Ta333.(Ti334) <- Td335 in
let Tu146: Unit =
let Ta336: [Float] =
[rgb] in
let Ti337: Int =
2 in
let Td338: Float =
0. in
Ta336.(Ti337) <- Td338 in
let Tu145: Unit =
let Ti339: Int =
0 in
let Td340: Float =
1. in
raytracing(Ti339, Td340) in
let Tu144: Unit =
let Tu341: Unit =
() in
write_rgb(Tu341) in
let Ti343: Int =
let Ti342: Int =
1 in
(scanx + Ti342) in
scan_point(Ti343) in 
let rec (scan_line: (Int) -> Unit) ((scany: Int)) =
let Ti197: Int =
let Ta195: [Int] =
[size] in
let Ti196: Int =
0 in
Ta195.(Ti196) in
if Ti197 <= scany then
()
else
let Tu162: Unit =
let Ta198: [Float] =
[scan_sscany] in
let Ti199: Int =
0 in
let Td209: Float =
let t: Float =
let Td204: Float =
let Td202: Float =
let Ta200: [Float] =
[scan_offset] in
let Ti201: Int =
0 in
Ta200.(Ti201) in
let Td203: Float =
1. in
(Td202 - Td203) in
let Td205: Float =
float_of_int(scany) in
(Td204 - Td205) in
let Td208: Float =
let Ta206: [Float] =
[scan_d] in
let Ti207: Int =
0 in
Ta206.(Ti207) in
(Td208 * t) in
Ta198.(Ti199) <- Td209 in
let Tu161: Unit =
let Ta210: [Float] =
[scan_met1] in
let Ti211: Int =
0 in
let Td217: Float =
let Td215: Float =
let Td214: Float =
let Ta212: [Float] =
[scan_sscany] in
let Ti213: Int =
0 in
Ta212.(Ti213) in
fsqr(Td214) in
let Td216: Float =
40000. in
(Td215 + Td216) in
Ta210.(Ti211) <- Td217 in
let t1: Float =
let Td220: Float =
let Ta218: [Float] =
[scan_sscany] in
let Ti219: Int =
0 in
Ta218.(Ti219) in
let Td223: Float =
let Ta221: [Float] =
[sin_v] in
let Ti222: Int =
0 in
Ta221.(Ti222) in
(Td220 * Td223) in
let Tu160: Unit =
let Ta224: [Float] =
[wscan] in
let Ti225: Int =
0 in
let Td233: Float =
let Td229: Float =
let Td228: Float =
let Ta226: [Float] =
[sin_v] in
let Ti227: Int =
1 in
Ta226.(Ti227) in
(t1 * Td228) in
let Td232: Float =
let Ta230: [Float] =
[vp] in
let Ti231: Int =
0 in
Ta230.(Ti231) in
(Td229 - Td232) in
Ta224.(Ti225) <- Td233 in
let Tu159: Unit =
let Ta234: [Float] =
[wscan] in
let Ti235: Int =
2 in
let Td243: Float =
let Td239: Float =
let Td238: Float =
let Ta236: [Float] =
[cos_v] in
let Ti237: Int =
1 in
Ta236.(Ti237) in
(t1 * Td238) in
let Td242: Float =
let Ta240: [Float] =
[vp] in
let Ti241: Int =
2 in
Ta240.(Ti241) in
(Td239 - Td242) in
Ta234.(Ti235) <- Td243 in
let Tu158: Unit =
let Ti244: Int =
0 in
scan_point(Ti244) in
let Ti246: Int =
let Ti245: Int =
1 in
(scany + Ti245) in
scan_line(Ti246) in 
let rec (scan_start: (Unit) -> Unit) ((Tu163: Unit)) =
let Tu166: Unit =
let Tu182: Unit =
() in
write_ppm_header(Tu182) in
let sizex: Float =
let Ti185: Int =
let Ta183: [Int] =
[size] in
let Ti184: Int =
0 in
Ta183.(Ti184) in
float_of_int(Ti185) in
let Tu165: Unit =
let Ta186: [Float] =
[scan_d] in
let Ti187: Int =
0 in
let Td189: Float =
let Td188: Float =
128. in
(Td188 / sizex) in
Ta186.(Ti187) <- Td189 in
let Tu164: Unit =
let Ta190: [Float] =
[scan_offset] in
let Ti191: Int =
0 in
let Td193: Float =
let Td192: Float =
2. in
(sizex / Td192) in
Ta190.(Ti191) <- Td193 in
let Ti194: Int =
0 in
scan_line(Ti194) in 
let rec (rt: (Int, Int, Bool) -> Unit) ((size_x: Int), (size_y: Int), (debug_p: Bool)) =
let Tu170: Unit =
let Ta174: [Int] =
[size] in
let Ti175: Int =
0 in
Ta174.(Ti175) <- size_x in
let Tu169: Unit =
let Ta176: [Int] =
[size] in
let Ti177: Int =
1 in
Ta176.(Ti177) <- size_y in
let Tu168: Unit =
let Ta178: [Bool] =
[dbg] in
let Ti179: Int =
0 in
Ta178.(Ti179) <- debug_p in
let Tu167: Unit =
let Tu180: Unit =
() in
read_parameter(Tu180) in
let Tu181: Unit =
() in
scan_start(Tu181) in 
let Ti171: Int =
768 in
let Ti172: Int =
768 in
let Ti173: Int =
0 in
rt(Ti171, Ti172, Ti173)

Alpha---
let rec (xor.1977: (Bool, Bool) -> Bool) ((x.1978: Bool), (y.1979: Bool)) =
let Ti1975.4438: Int =
0 in
if x.1978 == Ti1975.4438 then
y.1979
else
let Ti1976.4439: Int =
0 in
if y.1979 == Ti1976.4439 then
1
else
0 in 
let rec (fsqr.1980: (Float) -> Float) ((x.1981: Float)) =
(x.1981 * x.1981) in 
let rec (fhalf.1982: (Float) -> Float) ((x.1983: Float)) =
let Td1974.4437: Float =
2. in
(x.1983 / Td1974.4437) in 
let rec (o_texturetype.1984: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.1985: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((m_tex.4427: Int), (xm_shape.4428: Int), (xm_surface.4429: Int), (xm_isrot.4430: Int), (xm_abc.4431: [Float]), (xm_xyz.4432: [Float]), (xm_invert.4433: Bool), (xm_surfparams.4434: [Float]), (xm_color.4435: [Int]), (xm_rot123.4436: [Float])) =
m.1985 in
m_tex.4427 in 
let rec (o_form.1986: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.1987: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4417: Int), (m_shape.4418: Int), (xm_surface.4419: Int), (xm_isrot.4420: Int), (xm_abc.4421: [Float]), (xm_xyz.4422: [Float]), (xm_invert.4423: Bool), (xm_surfparams.4424: [Float]), (xm_color.4425: [Int]), (xm_rot123.4426: [Float])) =
m.1987 in
m_shape.4418 in 
let rec (o_reflectiontype.1988: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.1989: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4407: Int), (xm_shape.4408: Int), (m_surface.4409: Int), (xm_isrot.4410: Int), (xm_abc.4411: [Float]), (xm_xyz.4412: [Float]), (xm_invert.4413: Bool), (xm_surfparams.4414: [Float]), (xm_color.4415: [Int]), (xm_rot123.4416: [Float])) =
m.1989 in
m_surface.4409 in 
let rec (o_isinvert.1990: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m.1991: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((m_tex.4397: Int), (m_shape.4398: Int), (m_surface.4399: Int), (m_isrot.4400: Int), (xm_abc.4401: [Float]), (xm_xyz.4402: [Float]), (m_invert.4403: Bool), (xm_surfparams.4404: [Float]), (xm_color.4405: [Int]), (xm_rot123.4406: [Float])) =
m.1991 in
m_invert.4403 in 
let rec (o_isrot.1992: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.1993: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4387: Int), (xm_shape.4388: Int), (xm_surface.4389: Int), (m_isrot.4390: Int), (xm_abc.4391: [Float]), (xm_xyz.4392: [Float]), (xm_invert.4393: Bool), (xm_surfparams.4394: [Float]), (xm_color.4395: [Int]), (xm_rot123.4396: [Float])) =
m.1993 in
m_isrot.4390 in 
let rec (o_param_a.1994: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.1995: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4376: Int), (xm_shape.4377: Int), (xm_surface.4378: Int), (xm_isrot.4379: Int), (m_abc.4380: [Float]), (xm_xyz.4381: [Float]), (xm_invert.4382: Bool), (xm_surfparams.4383: [Float]), (xm_color.4384: [Int]), (xm_rot123.4385: [Float])) =
m.1995 in
let Ti1973.4386: Int =
0 in
m_abc.4380.(Ti1973.4386) in 
let rec (o_param_b.1996: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.1997: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4365: Int), (xm_shape.4366: Int), (xm_surface.4367: Int), (xm_isrot.4368: Int), (m_abc.4369: [Float]), (xm_xyz.4370: [Float]), (xm_invert.4371: Bool), (xm_surfparams.4372: [Float]), (xm_color.4373: [Int]), (xm_rot123.4374: [Float])) =
m.1997 in
let Ti1972.4375: Int =
1 in
m_abc.4369.(Ti1972.4375) in 
let rec (o_param_c.1998: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.1999: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4354: Int), (xm_shape.4355: Int), (xm_surface.4356: Int), (xm_isrot.4357: Int), (m_abc.4358: [Float]), (xm_xyz.4359: [Float]), (xm_invert.4360: Bool), (xm_surfparams.4361: [Float]), (xm_color.4362: [Int]), (xm_rot123.4363: [Float])) =
m.1999 in
let Ti1971.4364: Int =
2 in
m_abc.4358.(Ti1971.4364) in 
let rec (o_param_x.2000: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2001: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4343: Int), (xm_shape.4344: Int), (xm_surface.4345: Int), (xm_isrot.4346: Int), (xm_abc.4347: [Float]), (m_xyz.4348: [Float]), (xm_invert.4349: Bool), (xm_surfparams.4350: [Float]), (xm_color.4351: [Int]), (xm_rot123.4352: [Float])) =
m.2001 in
let Ti1970.4353: Int =
0 in
m_xyz.4348.(Ti1970.4353) in 
let rec (o_param_y.2002: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2003: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4332: Int), (xm_shape.4333: Int), (xm_surface.4334: Int), (xm_isrot.4335: Int), (xm_abc.4336: [Float]), (m_xyz.4337: [Float]), (xm_invert.4338: Bool), (xm_surfparams.4339: [Float]), (xm_color.4340: [Int]), (xm_rot123.4341: [Float])) =
m.2003 in
let Ti1969.4342: Int =
1 in
m_xyz.4337.(Ti1969.4342) in 
let rec (o_param_z.2004: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2005: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4321: Int), (xm_shape.4322: Int), (xm_surface.4323: Int), (xm_isrot.4324: Int), (xm_abc.4325: [Float]), (m_xyz.4326: [Float]), (xm_invert.4327: Bool), (xm_surfparams.4328: [Float]), (xm_color.4329: [Int]), (xm_rot123.4330: [Float])) =
m.2005 in
let Ti1968.4331: Int =
2 in
m_xyz.4326.(Ti1968.4331) in 
let rec (o_diffuse.2006: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2007: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4310: Int), (xm_shape.4311: Int), (xm_surface.4312: Int), (xm_isrot.4313: Int), (xm_abc.4314: [Float]), (xm_xyz.4315: [Float]), (xm_invert.4316: Bool), (m_surfparams.4317: [Float]), (xm_color.4318: [Int]), (xm_rot123.4319: [Float])) =
m.2007 in
let Ti1967.4320: Int =
0 in
m_surfparams.4317.(Ti1967.4320) in 
let rec (o_hilight.2008: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2009: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4299: Int), (xm_shape.4300: Int), (xm_surface.4301: Int), (xm_isrot.4302: Int), (xm_abc.4303: [Float]), (xm_xyz.4304: [Float]), (xm_invert.4305: Bool), (m_surfparams.4306: [Float]), (xm_color.4307: [Int]), (xm_rot123.4308: [Float])) =
m.2009 in
let Ti1966.4309: Int =
1 in
m_surfparams.4306.(Ti1966.4309) in 
let rec (o_color_red.2010: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.2011: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4288: Int), (xm_shape.4289: Int), (m_surface.4290: Int), (xm_isrot.4291: Int), (xm_abc.4292: [Float]), (xm_xyz.4293: [Float]), (xm_invert.4294: Bool), (xm_surfparams.4295: [Float]), (m_color.4296: [Int]), (xm_rot123.4297: [Float])) =
m.2011 in
let Ti1965.4298: Int =
0 in
m_color.4296.(Ti1965.4298) in 
let rec (o_color_green.2012: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.2013: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4277: Int), (xm_shape.4278: Int), (m_surface.4279: Int), (xm_isrot.4280: Int), (xm_abc.4281: [Float]), (xm_xyz.4282: [Float]), (xm_invert.4283: Bool), (xm_surfparams.4284: [Float]), (m_color.4285: [Int]), (xm_rot123.4286: [Float])) =
m.2013 in
let Ti1964.4287: Int =
1 in
m_color.4285.(Ti1964.4287) in 
let rec (o_color_blue.2014: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.2015: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4266: Int), (xm_shape.4267: Int), (m_surface.4268: Int), (xm_isrot.4269: Int), (xm_abc.4270: [Float]), (xm_xyz.4271: [Float]), (xm_invert.4272: Bool), (xm_surfparams.4273: [Float]), (m_color.4274: [Int]), (xm_rot123.4275: [Float])) =
m.2015 in
let Ti1963.4276: Int =
2 in
m_color.4274.(Ti1963.4276) in 
let rec (o_param_r1.2016: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2017: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4255: Int), (xm_shape.4256: Int), (xm_surface.4257: Int), (xm_isrot.4258: Int), (xm_abc.4259: [Float]), (xm_xyz.4260: [Float]), (xm_invert.4261: Bool), (xm_surfparams.4262: [Float]), (xm_color.4263: [Int]), (m_rot123.4264: [Float])) =
m.2017 in
let Ti1962.4265: Int =
0 in
m_rot123.4264.(Ti1962.4265) in 
let rec (o_param_r2.2018: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2019: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4244: Int), (xm_shape.4245: Int), (xm_surface.4246: Int), (xm_isrot.4247: Int), (xm_abc.4248: [Float]), (xm_xyz.4249: [Float]), (xm_invert.4250: Bool), (xm_surfparams.4251: [Float]), (xm_color.4252: [Int]), (m_rot123.4253: [Float])) =
m.2019 in
let Ti1961.4254: Int =
1 in
m_rot123.4253.(Ti1961.4254) in 
let rec (o_param_r3.2020: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2021: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4233: Int), (xm_shape.4234: Int), (xm_surface.4235: Int), (xm_isrot.4236: Int), (xm_abc.4237: [Float]), (xm_xyz.4238: [Float]), (xm_invert.4239: Bool), (xm_surfparams.4240: [Float]), (xm_color.4241: [Int]), (m_rot123.4242: [Float])) =
m.2021 in
let Ti1960.4243: Int =
2 in
m_rot123.4242.(Ti1960.4243) in 
let rec (normalize_vector.2022: ([Float], Bool) -> Unit) ((v.2023: [Float]), (inv.2024: Bool)) =
let n0.4205: Float =
let Td1946.4222: Float =
let Td1942.4223: Float =
let Td1938.4227: Float =
let Td1937.4231: Float =
let Ti1936.4232: Int =
0 in
v.2023.(Ti1936.4232) in
fsqr.1980(Td1937.4231) in
let Td1941.4228: Float =
let Td1940.4229: Float =
let Ti1939.4230: Int =
1 in
v.2023.(Ti1939.4230) in
fsqr.1980(Td1940.4229) in
(Td1938.4227 + Td1941.4228) in
let Td1945.4224: Float =
let Td1944.4225: Float =
let Ti1943.4226: Int =
2 in
v.2023.(Ti1943.4226) in
fsqr.1980(Td1944.4225) in
(Td1942.4223 + Td1945.4224) in
sqrt(Td1946.4222) in
let n.4206: Float =
let Ti1947.4221: Int =
0 in
if inv.2024 == Ti1947.4221 then
n0.4205
else
-(n0.4205) in
let Tu2.4207: Unit =
let Ti1948.4217: Int =
0 in
let Td1951.4218: Float =
let Td1950.4219: Float =
let Ti1949.4220: Int =
0 in
v.2023.(Ti1949.4220) in
(Td1950.4219 / n.4206) in
v.2023.(Ti1948.4217) <- Td1951.4218 in
let Tu1.4208: Unit =
let Ti1952.4213: Int =
1 in
let Td1955.4214: Float =
let Td1954.4215: Float =
let Ti1953.4216: Int =
1 in
v.2023.(Ti1953.4216) in
(Td1954.4215 / n.4206) in
v.2023.(Ti1952.4213) <- Td1955.4214 in
let Ti1956.4209: Int =
2 in
let Td1959.4210: Float =
let Td1958.4211: Float =
let Ti1957.4212: Int =
2 in
v.2023.(Ti1957.4212) in
(Td1958.4211 / n.4206) in
v.2023.(Ti1956.4209) <- Td1959.4210 in 
let rec (sgn.2025: (Float) -> Float) ((x.2026: Float)) =
let Td1935.4204: Float =
0. in
if x.2026 <= Td1935.4204 then
-1.
else
1. in 
let rec (rad.2027: (Float) -> Float) ((x.2028: Float)) =
let Td1934.4203: Float =
0.017453293 in
(x.2028 * Td1934.4203) in 
let rec (read_environ.2029: (Unit) -> Unit) ((Tu3.2030: Unit)) =
let Tu19.4075: Unit =
let Ta1831.4199: [Float] =
[screen] in
let Ti1832.4200: Int =
0 in
let Td1834.4201: Float =
let Tu1833.4202: Unit =
() in
read_float(Tu1833.4202) in
Ta1831.4199.(Ti1832.4200) <- Td1834.4201 in
let Tu18.4076: Unit =
let Ta1835.4195: [Float] =
[screen] in
let Ti1836.4196: Int =
1 in
let Td1838.4197: Float =
let Tu1837.4198: Unit =
() in
read_float(Tu1837.4198) in
Ta1835.4195.(Ti1836.4196) <- Td1838.4197 in
let Tu17.4077: Unit =
let Ta1839.4191: [Float] =
[screen] in
let Ti1840.4192: Int =
2 in
let Td1842.4193: Float =
let Tu1841.4194: Unit =
() in
read_float(Tu1841.4194) in
Ta1839.4191.(Ti1840.4192) <- Td1842.4193 in
let v1.4078: Float =
let Td1844.4189: Float =
let Tu1843.4190: Unit =
() in
read_float(Tu1843.4190) in
rad.2027(Td1844.4189) in
let Tu16.4079: Unit =
let Ta1845.4186: [Float] =
[cos_v] in
let Ti1846.4187: Int =
0 in
let Td1847.4188: Float =
cos(v1.4078) in
Ta1845.4186.(Ti1846.4187) <- Td1847.4188 in
let Tu15.4080: Unit =
let Ta1848.4183: [Float] =
[sin_v] in
let Ti1849.4184: Int =
0 in
let Td1850.4185: Float =
sin(v1.4078) in
Ta1848.4183.(Ti1849.4184) <- Td1850.4185 in
let v2.4081: Float =
let Td1852.4181: Float =
let Tu1851.4182: Unit =
() in
read_float(Tu1851.4182) in
rad.2027(Td1852.4181) in
let Tu14.4082: Unit =
let Ta1853.4178: [Float] =
[cos_v] in
let Ti1854.4179: Int =
1 in
let Td1855.4180: Float =
cos(v2.4081) in
Ta1853.4178.(Ti1854.4179) <- Td1855.4180 in
let Tu13.4083: Unit =
let Ta1856.4175: [Float] =
[sin_v] in
let Ti1857.4176: Int =
1 in
let Td1858.4177: Float =
sin(v2.4081) in
Ta1856.4175.(Ti1857.4176) <- Td1858.4177 in
let nl.4084: Int =
let Tu1859.4174: Unit =
() in
read_float(Tu1859.4174) in
let l1.4085: Float =
let Td1861.4172: Float =
let Tu1860.4173: Unit =
() in
read_float(Tu1860.4173) in
rad.2027(Td1861.4172) in
let sl1.4086: Float =
sin(l1.4085) in
let Tu12.4087: Unit =
let Ta1862.4169: [Float] =
[light] in
let Ti1863.4170: Int =
1 in
let Td1864.4171: Float =
-(sl1.4086) in
Ta1862.4169.(Ti1863.4170) <- Td1864.4171 in
let l2.4088: Float =
let Td1866.4167: Float =
let Tu1865.4168: Unit =
() in
read_float(Tu1865.4168) in
rad.2027(Td1866.4167) in
let cl1.4089: Float =
cos(l1.4085) in
let sl2.4090: Float =
sin(l2.4088) in
let Tu11.4091: Unit =
let Ta1867.4164: [Float] =
[light] in
let Ti1868.4165: Int =
0 in
let Td1869.4166: Float =
(cl1.4089 * sl2.4090) in
Ta1867.4164.(Ti1868.4165) <- Td1869.4166 in
let cl2.4092: Float =
cos(l2.4088) in
let Tu10.4093: Unit =
let Ta1870.4161: [Float] =
[light] in
let Ti1871.4162: Int =
2 in
let Td1872.4163: Float =
(cl1.4089 * cl2.4092) in
Ta1870.4161.(Ti1871.4162) <- Td1872.4163 in
let Tu9.4094: Unit =
let Ta1873.4157: [Float] =
[beam] in
let Ti1874.4158: Int =
0 in
let Td1876.4159: Float =
let Tu1875.4160: Unit =
() in
read_float(Tu1875.4160) in
Ta1873.4157.(Ti1874.4158) <- Td1876.4159 in
let Tu8.4095: Unit =
let Ta1877.4146: [Float] =
[vp] in
let Ti1878.4147: Int =
0 in
let Td1887.4148: Float =
let Td1885.4149: Float =
let Td1881.4151: Float =
let Ta1879.4155: [Float] =
[cos_v] in
let Ti1880.4156: Int =
0 in
Ta1879.4155.(Ti1880.4156) in
let Td1884.4152: Float =
let Ta1882.4153: [Float] =
[sin_v] in
let Ti1883.4154: Int =
1 in
Ta1882.4153.(Ti1883.4154) in
(Td1881.4151 * Td1884.4152) in
let Td1886.4150: Float =
-200. in
(Td1885.4149 * Td1886.4150) in
Ta1877.4146.(Ti1878.4147) <- Td1887.4148 in
let Tu7.4096: Unit =
let Ta1888.4138: [Float] =
[vp] in
let Ti1889.4139: Int =
1 in
let Td1895.4140: Float =
let Td1893.4141: Float =
let Td1892.4143: Float =
let Ta1890.4144: [Float] =
[sin_v] in
let Ti1891.4145: Int =
0 in
Ta1890.4144.(Ti1891.4145) in
-(Td1892.4143) in
let Td1894.4142: Float =
-200. in
(Td1893.4141 * Td1894.4142) in
Ta1888.4138.(Ti1889.4139) <- Td1895.4140 in
let Tu6.4097: Unit =
let Ta1896.4127: [Float] =
[vp] in
let Ti1897.4128: Int =
2 in
let Td1906.4129: Float =
let Td1904.4130: Float =
let Td1900.4132: Float =
let Ta1898.4136: [Float] =
[cos_v] in
let Ti1899.4137: Int =
0 in
Ta1898.4136.(Ti1899.4137) in
let Td1903.4133: Float =
let Ta1901.4134: [Float] =
[cos_v] in
let Ti1902.4135: Int =
1 in
Ta1901.4134.(Ti1902.4135) in
(Td1900.4132 * Td1903.4133) in
let Td1905.4131: Float =
-200. in
(Td1904.4130 * Td1905.4131) in
Ta1896.4127.(Ti1897.4128) <- Td1906.4129 in
let Tu5.4098: Unit =
let Ta1907.4118: [Int] =
[view] in
let Ti1908.4119: Int =
0 in
let Td1915.4120: Float =
let Td1911.4121: Float =
let Ta1909.4125: [Float] =
[vp] in
let Ti1910.4126: Int =
0 in
Ta1909.4125.(Ti1910.4126) in
let Td1914.4122: Float =
let Ta1912.4123: [Float] =
[screen] in
let Ti1913.4124: Int =
0 in
Ta1912.4123.(Ti1913.4124) in
(Td1911.4121 + Td1914.4122) in
Ta1907.4118.(Ti1908.4119) <- Td1915.4120 in
let Tu4.4099: Unit =
let Ta1916.4109: [Int] =
[view] in
let Ti1917.4110: Int =
1 in
let Td1924.4111: Float =
let Td1920.4112: Float =
let Ta1918.4116: [Float] =
[vp] in
let Ti1919.4117: Int =
1 in
Ta1918.4116.(Ti1919.4117) in
let Td1923.4113: Float =
let Ta1921.4114: [Float] =
[screen] in
let Ti1922.4115: Int =
1 in
Ta1921.4114.(Ti1922.4115) in
(Td1920.4112 + Td1923.4113) in
Ta1916.4109.(Ti1917.4110) <- Td1924.4111 in
let Ta1925.4100: [Int] =
[view] in
let Ti1926.4101: Int =
2 in
let Td1933.4102: Float =
let Td1929.4103: Float =
let Ta1927.4107: [Float] =
[vp] in
let Ti1928.4108: Int =
2 in
Ta1927.4107.(Ti1928.4108) in
let Td1932.4104: Float =
let Ta1930.4105: [Float] =
[screen] in
let Ti1931.4106: Int =
2 in
Ta1930.4105.(Ti1931.4106) in
(Td1929.4103 + Td1932.4104) in
Ta1925.4100.(Ti1926.4101) <- Td1933.4102 in 
let rec (read_nth_object.2031: (Int) -> Bool) ((n.2032: Int)) =
let texture.3628: Int =
let Tu1441.4074: Unit =
() in
read_int(Tu1441.4074) in
let Ti1443.3629: Int =
let Ti1442.4073: Int =
1 in
-(Ti1442.4073) in
if texture.3628 == Ti1443.3629 then
0
else
let form.3630: Int =
let Tu1444.4072: Unit =
() in
read_int(Tu1444.4072) in
let refltype.3631: Int =
let Tu1445.4071: Unit =
() in
read_int(Tu1445.4071) in
let isrot_p.3632: Int =
let Tu1446.4070: Unit =
() in
read_int(Tu1446.4070) in
let abc.3633: [Float] =
let Ti1447.4068: Int =
3 in
let Td1448.4069: Float =
0. in
create_float_array(Ti1447.4068, Td1448.4069) in
let Tu58.3634: Unit =
let Ti1449.4065: Int =
0 in
let Td1451.4066: Float =
let Tu1450.4067: Unit =
() in
read_float(Tu1450.4067) in
abc.3633.(Ti1449.4065) <- Td1451.4066 in
let Tu57.3635: Unit =
let Ti1452.4062: Int =
1 in
let Td1454.4063: Float =
let Tu1453.4064: Unit =
() in
read_float(Tu1453.4064) in
abc.3633.(Ti1452.4062) <- Td1454.4063 in
let Tu56.3636: Unit =
let Ti1455.4059: Int =
2 in
let Td1457.4060: Float =
let Tu1456.4061: Unit =
() in
read_float(Tu1456.4061) in
abc.3633.(Ti1455.4059) <- Td1457.4060 in
let xyz.3637: [Float] =
let Ti1458.4057: Int =
3 in
let Td1459.4058: Float =
0. in
create_float_array(Ti1458.4057, Td1459.4058) in
let Tu55.3638: Unit =
let Ti1460.4054: Int =
0 in
let Td1462.4055: Float =
let Tu1461.4056: Unit =
() in
read_float(Tu1461.4056) in
xyz.3637.(Ti1460.4054) <- Td1462.4055 in
let Tu54.3639: Unit =
let Ti1463.4051: Int =
1 in
let Td1465.4052: Float =
let Tu1464.4053: Unit =
() in
read_float(Tu1464.4053) in
xyz.3637.(Ti1463.4051) <- Td1465.4052 in
let Tu53.3640: Unit =
let Ti1466.4048: Int =
2 in
let Td1468.4049: Float =
let Tu1467.4050: Unit =
() in
read_float(Tu1467.4050) in
xyz.3637.(Ti1466.4048) <- Td1468.4049 in
let m_invert.3641: Bool =
let Td1469.4045: Float =
0. in
let Td1471.4046: Float =
let Tu1470.4047: Unit =
() in
read_float(Tu1470.4047) in
if Td1469.4045 <= Td1471.4046 then
0
else
1 in
let reflparam.3642: [Float] =
let Ti1472.4043: Int =
2 in
let Td1473.4044: Float =
0. in
create_float_array(Ti1472.4043, Td1473.4044) in
let Tu52.3643: Unit =
let Ti1474.4040: Int =
0 in
let Td1476.4041: Float =
let Tu1475.4042: Unit =
() in
read_float(Tu1475.4042) in
reflparam.3642.(Ti1474.4040) <- Td1476.4041 in
let Tu51.3644: Unit =
let Ti1477.4037: Int =
1 in
let Td1479.4038: Float =
let Tu1478.4039: Unit =
() in
read_float(Tu1478.4039) in
reflparam.3642.(Ti1477.4037) <- Td1479.4038 in
let color.3645: [Float] =
let Ti1480.4035: Int =
3 in
let Td1481.4036: Float =
0. in
create_float_array(Ti1480.4035, Td1481.4036) in
let Tu50.3646: Unit =
let Ti1482.4032: Int =
0 in
let Td1484.4033: Float =
let Tu1483.4034: Unit =
() in
read_float(Tu1483.4034) in
color.3645.(Ti1482.4032) <- Td1484.4033 in
let Tu49.3647: Unit =
let Ti1485.4029: Int =
1 in
let Td1487.4030: Float =
let Tu1486.4031: Unit =
() in
read_float(Tu1486.4031) in
color.3645.(Ti1485.4029) <- Td1487.4030 in
let Tu48.3648: Unit =
let Ti1488.4026: Int =
2 in
let Td1490.4027: Float =
let Tu1489.4028: Unit =
() in
read_float(Tu1489.4028) in
color.3645.(Ti1488.4026) <- Td1490.4027 in
let rotation.3649: [Float] =
let Ti1491.4024: Int =
3 in
let Td1492.4025: Float =
0. in
create_float_array(Ti1491.4024, Td1492.4025) in
let Tu47.3650: Unit =
let Ti1493.4009: Int =
0 in
if isrot_p.3632 == Ti1493.4009 then
()
else
let Tu21.4010: Unit =
let Ti1494.4020: Int =
0 in
let Td1497.4021: Float =
let Td1496.4022: Float =
let Tu1495.4023: Unit =
() in
read_float(Tu1495.4023) in
rad.2027(Td1496.4022) in
rotation.3649.(Ti1494.4020) <- Td1497.4021 in
let Tu20.4011: Unit =
let Ti1498.4016: Int =
1 in
let Td1501.4017: Float =
let Td1500.4018: Float =
let Tu1499.4019: Unit =
() in
read_float(Tu1499.4019) in
rad.2027(Td1500.4018) in
rotation.3649.(Ti1498.4016) <- Td1501.4017 in
let Ti1502.4012: Int =
2 in
let Td1505.4013: Float =
let Td1504.4014: Float =
let Tu1503.4015: Unit =
() in
read_float(Tu1503.4015) in
rad.2027(Td1504.4014) in
rotation.3649.(Ti1502.4012) <- Td1505.4013 in
let m_invert2.3651: Bool =
let Ti1506.4008: Int =
2 in
if form.3630 == Ti1506.4008 then
1
else
m_invert.3641 in
let obj.3652: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Float], [Float]) =
(texture.3628, form.3630, refltype.3631, isrot_p.3632, abc.3633, xyz.3637, m_invert2.3651, reflparam.3642, color.3645, rotation.3649) in
let Tu46.3653: Unit =
let Ta1507.4007: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta1507.4007.(n.2032) <- obj.3652 in
let Tu45.3654: Unit =
let Ti1508.3980: Int =
3 in
if form.3630 == Ti1508.3980 then
let a.3984: Float =
let Ti1509.4006: Int =
0 in
abc.3633.(Ti1509.4006) in
let Tu23.3985: Unit =
let Ti1510.4001: Int =
0 in
let Td1514.4002: Float =
let Td1511.4003: Float =
0. in
if Td1511.4003 == a.3984 then
0.
else
let Td1512.4004: Float =
sgn.2025(a.3984) in
let Td1513.4005: Float =
fsqr.1980(a.3984) in
(Td1512.4004 / Td1513.4005) in
abc.3633.(Ti1510.4001) <- Td1514.4002 in
let b.3986: Float =
let Ti1515.4000: Int =
1 in
abc.3633.(Ti1515.4000) in
let Tu22.3987: Unit =
let Ti1516.3995: Int =
1 in
let Td1520.3996: Float =
let Td1517.3997: Float =
0. in
if Td1517.3997 == b.3986 then
0.
else
let Td1518.3998: Float =
sgn.2025(b.3986) in
let Td1519.3999: Float =
fsqr.1980(b.3986) in
(Td1518.3998 / Td1519.3999) in
abc.3633.(Ti1516.3995) <- Td1520.3996 in
let c.3988: Float =
let Ti1521.3994: Int =
2 in
abc.3633.(Ti1521.3994) in
let Ti1522.3989: Int =
2 in
let Td1526.3990: Float =
let Td1523.3991: Float =
0. in
if Td1523.3991 == c.3988 then
0.
else
let Td1524.3992: Float =
sgn.2025(c.3988) in
let Td1525.3993: Float =
fsqr.1980(c.3988) in
(Td1524.3992 / Td1525.3993) in
abc.3633.(Ti1522.3989) <- Td1526.3990
else
let Ti1527.3981: Int =
2 in
if form.3630 == Ti1527.3981 then
let Ti1529.3982: Int =
let Ti1528.3983: Int =
0 in
if m_invert.3641 == Ti1528.3983 then
1
else
0 in
normalize_vector.2022(abc.3633, Ti1529.3982)
else
() in
let Tu44.3655: Unit =
let Ti1530.3656: Int =
0 in
if isrot_p.3632 == Ti1530.3656 then
()
else
let Tu43.3657: Unit =
let Ta1531.3975: [Float] =
[cs_temp] in
let Ti1532.3976: Int =
10 in
let Td1535.3977: Float =
let Td1534.3978: Float =
let Ti1533.3979: Int =
0 in
rotation.3649.(Ti1533.3979) in
cos(Td1534.3978) in
Ta1531.3975.(Ti1532.3976) <- Td1535.3977 in
let Tu42.3658: Unit =
let Ta1536.3970: [Float] =
[cs_temp] in
let Ti1537.3971: Int =
11 in
let Td1540.3972: Float =
let Td1539.3973: Float =
let Ti1538.3974: Int =
0 in
rotation.3649.(Ti1538.3974) in
sin(Td1539.3973) in
Ta1536.3970.(Ti1537.3971) <- Td1540.3972 in
let Tu41.3659: Unit =
let Ta1541.3965: [Float] =
[cs_temp] in
let Ti1542.3966: Int =
12 in
let Td1545.3967: Float =
let Td1544.3968: Float =
let Ti1543.3969: Int =
1 in
rotation.3649.(Ti1543.3969) in
cos(Td1544.3968) in
Ta1541.3965.(Ti1542.3966) <- Td1545.3967 in
let Tu40.3660: Unit =
let Ta1546.3960: [Float] =
[cs_temp] in
let Ti1547.3961: Int =
13 in
let Td1550.3962: Float =
let Td1549.3963: Float =
let Ti1548.3964: Int =
1 in
rotation.3649.(Ti1548.3964) in
sin(Td1549.3963) in
Ta1546.3960.(Ti1547.3961) <- Td1550.3962 in
let Tu39.3661: Unit =
let Ta1551.3955: [Float] =
[cs_temp] in
let Ti1552.3956: Int =
14 in
let Td1555.3957: Float =
let Td1554.3958: Float =
let Ti1553.3959: Int =
2 in
rotation.3649.(Ti1553.3959) in
cos(Td1554.3958) in
Ta1551.3955.(Ti1552.3956) <- Td1555.3957 in
let Tu38.3662: Unit =
let Ta1556.3950: [Float] =
[cs_temp] in
let Ti1557.3951: Int =
15 in
let Td1560.3952: Float =
let Td1559.3953: Float =
let Ti1558.3954: Int =
2 in
rotation.3649.(Ti1558.3954) in
sin(Td1559.3953) in
Ta1556.3950.(Ti1557.3951) <- Td1560.3952 in
let Tu37.3663: Unit =
let Ta1561.3941: [Float] =
[cs_temp] in
let Ti1562.3942: Int =
0 in
let Td1569.3943: Float =
let Td1565.3944: Float =
let Ta1563.3948: [Float] =
[cs_temp] in
let Ti1564.3949: Int =
12 in
Ta1563.3948.(Ti1564.3949) in
let Td1568.3945: Float =
let Ta1566.3946: [Float] =
[cs_temp] in
let Ti1567.3947: Int =
14 in
Ta1566.3946.(Ti1567.3947) in
(Td1565.3944 * Td1568.3945) in
Ta1561.3941.(Ti1562.3942) <- Td1569.3943 in
let Tu36.3664: Unit =
let Ta1570.3920: [Float] =
[cs_temp] in
let Ti1571.3921: Int =
1 in
let Td1590.3922: Float =
let Td1582.3923: Float =
let Td1578.3931: Float =
let Td1574.3935: Float =
let Ta1572.3939: [Float] =
[cs_temp] in
let Ti1573.3940: Int =
11 in
Ta1572.3939.(Ti1573.3940) in
let Td1577.3936: Float =
let Ta1575.3937: [Float] =
[cs_temp] in
let Ti1576.3938: Int =
13 in
Ta1575.3937.(Ti1576.3938) in
(Td1574.3935 * Td1577.3936) in
let Td1581.3932: Float =
let Ta1579.3933: [Float] =
[cs_temp] in
let Ti1580.3934: Int =
14 in
Ta1579.3933.(Ti1580.3934) in
(Td1578.3931 * Td1581.3932) in
let Td1589.3924: Float =
let Td1585.3925: Float =
let Ta1583.3929: [Float] =
[cs_temp] in
let Ti1584.3930: Int =
10 in
Ta1583.3929.(Ti1584.3930) in
let Td1588.3926: Float =
let Ta1586.3927: [Float] =
[cs_temp] in
let Ti1587.3928: Int =
15 in
Ta1586.3927.(Ti1587.3928) in
(Td1585.3925 * Td1588.3926) in
(Td1582.3923 - Td1589.3924) in
Ta1570.3920.(Ti1571.3921) <- Td1590.3922 in
let Tu35.3665: Unit =
let Ta1591.3899: [Float] =
[cs_temp] in
let Ti1592.3900: Int =
2 in
let Td1611.3901: Float =
let Td1603.3902: Float =
let Td1599.3910: Float =
let Td1595.3914: Float =
let Ta1593.3918: [Float] =
[cs_temp] in
let Ti1594.3919: Int =
10 in
Ta1593.3918.(Ti1594.3919) in
let Td1598.3915: Float =
let Ta1596.3916: [Float] =
[cs_temp] in
let Ti1597.3917: Int =
13 in
Ta1596.3916.(Ti1597.3917) in
(Td1595.3914 * Td1598.3915) in
let Td1602.3911: Float =
let Ta1600.3912: [Float] =
[cs_temp] in
let Ti1601.3913: Int =
14 in
Ta1600.3912.(Ti1601.3913) in
(Td1599.3910 * Td1602.3911) in
let Td1610.3903: Float =
let Td1606.3904: Float =
let Ta1604.3908: [Float] =
[cs_temp] in
let Ti1605.3909: Int =
11 in
Ta1604.3908.(Ti1605.3909) in
let Td1609.3905: Float =
let Ta1607.3906: [Float] =
[cs_temp] in
let Ti1608.3907: Int =
15 in
Ta1607.3906.(Ti1608.3907) in
(Td1606.3904 * Td1609.3905) in
(Td1603.3902 + Td1610.3903) in
Ta1591.3899.(Ti1592.3900) <- Td1611.3901 in
let Tu34.3666: Unit =
let Ta1612.3890: [Float] =
[cs_temp] in
let Ti1613.3891: Int =
3 in
let Td1620.3892: Float =
let Td1616.3893: Float =
let Ta1614.3897: [Float] =
[cs_temp] in
let Ti1615.3898: Int =
12 in
Ta1614.3897.(Ti1615.3898) in
let Td1619.3894: Float =
let Ta1617.3895: [Float] =
[cs_temp] in
let Ti1618.3896: Int =
15 in
Ta1617.3895.(Ti1618.3896) in
(Td1616.3893 * Td1619.3894) in
Ta1612.3890.(Ti1613.3891) <- Td1620.3892 in
let Tu33.3667: Unit =
let Ta1621.3869: [Float] =
[cs_temp] in
let Ti1622.3870: Int =
4 in
let Td1641.3871: Float =
let Td1633.3872: Float =
let Td1629.3880: Float =
let Td1625.3884: Float =
let Ta1623.3888: [Float] =
[cs_temp] in
let Ti1624.3889: Int =
11 in
Ta1623.3888.(Ti1624.3889) in
let Td1628.3885: Float =
let Ta1626.3886: [Float] =
[cs_temp] in
let Ti1627.3887: Int =
13 in
Ta1626.3886.(Ti1627.3887) in
(Td1625.3884 * Td1628.3885) in
let Td1632.3881: Float =
let Ta1630.3882: [Float] =
[cs_temp] in
let Ti1631.3883: Int =
15 in
Ta1630.3882.(Ti1631.3883) in
(Td1629.3880 * Td1632.3881) in
let Td1640.3873: Float =
let Td1636.3874: Float =
let Ta1634.3878: [Float] =
[cs_temp] in
let Ti1635.3879: Int =
10 in
Ta1634.3878.(Ti1635.3879) in
let Td1639.3875: Float =
let Ta1637.3876: [Float] =
[cs_temp] in
let Ti1638.3877: Int =
14 in
Ta1637.3876.(Ti1638.3877) in
(Td1636.3874 * Td1639.3875) in
(Td1633.3872 + Td1640.3873) in
Ta1621.3869.(Ti1622.3870) <- Td1641.3871 in
let Tu32.3668: Unit =
let Ta1642.3848: [Float] =
[cs_temp] in
let Ti1643.3849: Int =
5 in
let Td1662.3850: Float =
let Td1654.3851: Float =
let Td1650.3859: Float =
let Td1646.3863: Float =
let Ta1644.3867: [Float] =
[cs_temp] in
let Ti1645.3868: Int =
10 in
Ta1644.3867.(Ti1645.3868) in
let Td1649.3864: Float =
let Ta1647.3865: [Float] =
[cs_temp] in
let Ti1648.3866: Int =
13 in
Ta1647.3865.(Ti1648.3866) in
(Td1646.3863 * Td1649.3864) in
let Td1653.3860: Float =
let Ta1651.3861: [Float] =
[cs_temp] in
let Ti1652.3862: Int =
15 in
Ta1651.3861.(Ti1652.3862) in
(Td1650.3859 * Td1653.3860) in
let Td1661.3852: Float =
let Td1657.3853: Float =
let Ta1655.3857: [Float] =
[cs_temp] in
let Ti1656.3858: Int =
11 in
Ta1655.3857.(Ti1656.3858) in
let Td1660.3854: Float =
let Ta1658.3855: [Float] =
[cs_temp] in
let Ti1659.3856: Int =
14 in
Ta1658.3855.(Ti1659.3856) in
(Td1657.3853 * Td1660.3854) in
(Td1654.3851 - Td1661.3852) in
Ta1642.3848.(Ti1643.3849) <- Td1662.3850 in
let Tu31.3669: Unit =
let Ta1663.3842: [Float] =
[cs_temp] in
let Ti1664.3843: Int =
6 in
let Td1668.3844: Float =
let Td1667.3845: Float =
let Ta1665.3846: [Float] =
[cs_temp] in
let Ti1666.3847: Int =
13 in
Ta1665.3846.(Ti1666.3847) in
-(Td1667.3845) in
Ta1663.3842.(Ti1664.3843) <- Td1668.3844 in
let Tu30.3670: Unit =
let Ta1669.3833: [Float] =
[cs_temp] in
let Ti1670.3834: Int =
7 in
let Td1677.3835: Float =
let Td1673.3836: Float =
let Ta1671.3840: [Float] =
[cs_temp] in
let Ti1672.3841: Int =
11 in
Ta1671.3840.(Ti1672.3841) in
let Td1676.3837: Float =
let Ta1674.3838: [Float] =
[cs_temp] in
let Ti1675.3839: Int =
12 in
Ta1674.3838.(Ti1675.3839) in
(Td1673.3836 * Td1676.3837) in
Ta1669.3833.(Ti1670.3834) <- Td1677.3835 in
let Tu29.3671: Unit =
let Ta1678.3824: [Float] =
[cs_temp] in
let Ti1679.3825: Int =
8 in
let Td1686.3826: Float =
let Td1682.3827: Float =
let Ta1680.3831: [Float] =
[cs_temp] in
let Ti1681.3832: Int =
10 in
Ta1680.3831.(Ti1681.3832) in
let Td1685.3828: Float =
let Ta1683.3829: [Float] =
[cs_temp] in
let Ti1684.3830: Int =
12 in
Ta1683.3829.(Ti1684.3830) in
(Td1682.3827 * Td1685.3828) in
Ta1678.3824.(Ti1679.3825) <- Td1686.3826 in
let ao.3672: Float =
let Ti1687.3823: Int =
0 in
abc.3633.(Ti1687.3823) in
let bo.3673: Float =
let Ti1688.3822: Int =
1 in
abc.3633.(Ti1688.3822) in
let co.3674: Float =
let Ti1689.3821: Int =
2 in
abc.3633.(Ti1689.3821) in
let Tu28.3675: Unit =
let Ti1690.3803: Int =
0 in
let Td1707.3804: Float =
let Td1701.3805: Float =
let Td1695.3811: Float =
let Td1694.3817: Float =
let Td1693.3818: Float =
let Ta1691.3819: [Float] =
[cs_temp] in
let Ti1692.3820: Int =
0 in
Ta1691.3819.(Ti1692.3820) in
fsqr.1980(Td1693.3818) in
(ao.3672 * Td1694.3817) in
let Td1700.3812: Float =
let Td1699.3813: Float =
let Td1698.3814: Float =
let Ta1696.3815: [Float] =
[cs_temp] in
let Ti1697.3816: Int =
3 in
Ta1696.3815.(Ti1697.3816) in
fsqr.1980(Td1698.3814) in
(bo.3673 * Td1699.3813) in
(Td1695.3811 + Td1700.3812) in
let Td1706.3806: Float =
let Td1705.3807: Float =
let Td1704.3808: Float =
let Ta1702.3809: [Float] =
[cs_temp] in
let Ti1703.3810: Int =
6 in
Ta1702.3809.(Ti1703.3810) in
fsqr.1980(Td1704.3808) in
(co.3674 * Td1705.3807) in
(Td1701.3805 + Td1706.3806) in
abc.3633.(Ti1690.3803) <- Td1707.3804 in
let Tu27.3676: Unit =
let Ti1708.3785: Int =
1 in
let Td1725.3786: Float =
let Td1719.3787: Float =
let Td1713.3793: Float =
let Td1712.3799: Float =
let Td1711.3800: Float =
let Ta1709.3801: [Float] =
[cs_temp] in
let Ti1710.3802: Int =
1 in
Ta1709.3801.(Ti1710.3802) in
fsqr.1980(Td1711.3800) in
(ao.3672 * Td1712.3799) in
let Td1718.3794: Float =
let Td1717.3795: Float =
let Td1716.3796: Float =
let Ta1714.3797: [Float] =
[cs_temp] in
let Ti1715.3798: Int =
4 in
Ta1714.3797.(Ti1715.3798) in
fsqr.1980(Td1716.3796) in
(bo.3673 * Td1717.3795) in
(Td1713.3793 + Td1718.3794) in
let Td1724.3788: Float =
let Td1723.3789: Float =
let Td1722.3790: Float =
let Ta1720.3791: [Float] =
[cs_temp] in
let Ti1721.3792: Int =
7 in
Ta1720.3791.(Ti1721.3792) in
fsqr.1980(Td1722.3790) in
(co.3674 * Td1723.3789) in
(Td1719.3787 + Td1724.3788) in
abc.3633.(Ti1708.3785) <- Td1725.3786 in
let Tu26.3677: Unit =
let Ti1726.3767: Int =
2 in
let Td1743.3768: Float =
let Td1737.3769: Float =
let Td1731.3775: Float =
let Td1730.3781: Float =
let Td1729.3782: Float =
let Ta1727.3783: [Float] =
[cs_temp] in
let Ti1728.3784: Int =
2 in
Ta1727.3783.(Ti1728.3784) in
fsqr.1980(Td1729.3782) in
(ao.3672 * Td1730.3781) in
let Td1736.3776: Float =
let Td1735.3777: Float =
let Td1734.3778: Float =
let Ta1732.3779: [Float] =
[cs_temp] in
let Ti1733.3780: Int =
5 in
Ta1732.3779.(Ti1733.3780) in
fsqr.1980(Td1734.3778) in
(bo.3673 * Td1735.3777) in
(Td1731.3775 + Td1736.3776) in
let Td1742.3770: Float =
let Td1741.3771: Float =
let Td1740.3772: Float =
let Ta1738.3773: [Float] =
[cs_temp] in
let Ti1739.3774: Int =
8 in
Ta1738.3773.(Ti1739.3774) in
fsqr.1980(Td1740.3772) in
(co.3674 * Td1741.3771) in
(Td1737.3769 + Td1742.3770) in
abc.3633.(Ti1726.3767) <- Td1743.3768 in
let Tu25.3678: Unit =
let Ti1744.3738: Int =
0 in
let Td1772.3739: Float =
let Td1745.3740: Float =
2. in
let Td1771.3741: Float =
let Td1762.3742: Float =
let Td1753.3751: Float =
let Td1749.3760: Float =
let Td1748.3764: Float =
let Ta1746.3765: [Float] =
[cs_temp] in
let Ti1747.3766: Int =
1 in
Ta1746.3765.(Ti1747.3766) in
(ao.3672 * Td1748.3764) in
let Td1752.3761: Float =
let Ta1750.3762: [Float] =
[cs_temp] in
let Ti1751.3763: Int =
2 in
Ta1750.3762.(Ti1751.3763) in
(Td1749.3760 * Td1752.3761) in
let Td1761.3752: Float =
let Td1757.3753: Float =
let Td1756.3757: Float =
let Ta1754.3758: [Float] =
[cs_temp] in
let Ti1755.3759: Int =
4 in
Ta1754.3758.(Ti1755.3759) in
(bo.3673 * Td1756.3757) in
let Td1760.3754: Float =
let Ta1758.3755: [Float] =
[cs_temp] in
let Ti1759.3756: Int =
5 in
Ta1758.3755.(Ti1759.3756) in
(Td1757.3753 * Td1760.3754) in
(Td1753.3751 + Td1761.3752) in
let Td1770.3743: Float =
let Td1766.3744: Float =
let Td1765.3748: Float =
let Ta1763.3749: [Float] =
[cs_temp] in
let Ti1764.3750: Int =
7 in
Ta1763.3749.(Ti1764.3750) in
(co.3674 * Td1765.3748) in
let Td1769.3745: Float =
let Ta1767.3746: [Float] =
[cs_temp] in
let Ti1768.3747: Int =
8 in
Ta1767.3746.(Ti1768.3747) in
(Td1766.3744 * Td1769.3745) in
(Td1762.3742 + Td1770.3743) in
(Td1745.3740 * Td1771.3741) in
rotation.3649.(Ti1744.3738) <- Td1772.3739 in
let Tu24.3679: Unit =
let Ti1773.3709: Int =
1 in
let Td1801.3710: Float =
let Td1774.3711: Float =
2. in
let Td1800.3712: Float =
let Td1791.3713: Float =
let Td1782.3722: Float =
let Td1778.3731: Float =
let Td1777.3735: Float =
let Ta1775.3736: [Float] =
[cs_temp] in
let Ti1776.3737: Int =
0 in
Ta1775.3736.(Ti1776.3737) in
(ao.3672 * Td1777.3735) in
let Td1781.3732: Float =
let Ta1779.3733: [Float] =
[cs_temp] in
let Ti1780.3734: Int =
2 in
Ta1779.3733.(Ti1780.3734) in
(Td1778.3731 * Td1781.3732) in
let Td1790.3723: Float =
let Td1786.3724: Float =
let Td1785.3728: Float =
let Ta1783.3729: [Float] =
[cs_temp] in
let Ti1784.3730: Int =
3 in
Ta1783.3729.(Ti1784.3730) in
(bo.3673 * Td1785.3728) in
let Td1789.3725: Float =
let Ta1787.3726: [Float] =
[cs_temp] in
let Ti1788.3727: Int =
5 in
Ta1787.3726.(Ti1788.3727) in
(Td1786.3724 * Td1789.3725) in
(Td1782.3722 + Td1790.3723) in
let Td1799.3714: Float =
let Td1795.3715: Float =
let Td1794.3719: Float =
let Ta1792.3720: [Float] =
[cs_temp] in
let Ti1793.3721: Int =
6 in
Ta1792.3720.(Ti1793.3721) in
(co.3674 * Td1794.3719) in
let Td1798.3716: Float =
let Ta1796.3717: [Float] =
[cs_temp] in
let Ti1797.3718: Int =
8 in
Ta1796.3717.(Ti1797.3718) in
(Td1795.3715 * Td1798.3716) in
(Td1791.3713 + Td1799.3714) in
(Td1774.3711 * Td1800.3712) in
rotation.3649.(Ti1773.3709) <- Td1801.3710 in
let Ti1802.3680: Int =
2 in
let Td1830.3681: Float =
let Td1803.3682: Float =
2. in
let Td1829.3683: Float =
let Td1820.3684: Float =
let Td1811.3693: Float =
let Td1807.3702: Float =
let Td1806.3706: Float =
let Ta1804.3707: [Float] =
[cs_temp] in
let Ti1805.3708: Int =
0 in
Ta1804.3707.(Ti1805.3708) in
(ao.3672 * Td1806.3706) in
let Td1810.3703: Float =
let Ta1808.3704: [Float] =
[cs_temp] in
let Ti1809.3705: Int =
1 in
Ta1808.3704.(Ti1809.3705) in
(Td1807.3702 * Td1810.3703) in
let Td1819.3694: Float =
let Td1815.3695: Float =
let Td1814.3699: Float =
let Ta1812.3700: [Float] =
[cs_temp] in
let Ti1813.3701: Int =
3 in
Ta1812.3700.(Ti1813.3701) in
(bo.3673 * Td1814.3699) in
let Td1818.3696: Float =
let Ta1816.3697: [Float] =
[cs_temp] in
let Ti1817.3698: Int =
4 in
Ta1816.3697.(Ti1817.3698) in
(Td1815.3695 * Td1818.3696) in
(Td1811.3693 + Td1819.3694) in
let Td1828.3685: Float =
let Td1824.3686: Float =
let Td1823.3690: Float =
let Ta1821.3691: [Float] =
[cs_temp] in
let Ti1822.3692: Int =
6 in
Ta1821.3691.(Ti1822.3692) in
(co.3674 * Td1823.3690) in
let Td1827.3687: Float =
let Ta1825.3688: [Float] =
[cs_temp] in
let Ti1826.3689: Int =
7 in
Ta1825.3688.(Ti1826.3689) in
(Td1824.3686 * Td1827.3687) in
(Td1820.3684 + Td1828.3685) in
(Td1803.3682 * Td1829.3683) in
rotation.3649.(Ti1802.3680) <- Td1830.3681 in
1 in 
let rec (read_object.2033: (Int) -> Unit) ((n.2034: Int)) =
let Ti1436.3623: Int =
61 in
if Ti1436.3623 <= n.2034 then
()
else
let Tb1437.3624: Bool =
read_nth_object.2031(n.2034) in
let Ti1438.3625: Int =
0 in
if Tb1437.3624 == Ti1438.3625 then
()
else
let Ti1440.3626: Int =
let Ti1439.3627: Int =
1 in
(n.2034 + Ti1439.3627) in
read_object.2033(Ti1440.3626) in 
let rec (read_all_object.2035: (Unit) -> Unit) ((Tu59.2036: Unit)) =
let Ti1435.3622: Int =
0 in
read_object.2033(Ti1435.3622) in 
let rec (read_net_item.2037: (Int) -> [Int]) ((length.2038: Int)) =
let item.3610: Int =
let Tu1426.3621: Unit =
() in
read_int(Tu1426.3621) in
let Ti1428.3611: Int =
let Ti1427.3620: Int =
1 in
-(Ti1427.3620) in
if item.3610 == Ti1428.3611 then
let Ti1430.3616: Int =
let Ti1429.3619: Int =
1 in
(length.2038 + Ti1429.3619) in
let Ti1432.3617: Int =
let Ti1431.3618: Int =
1 in
-(Ti1431.3618) in
create_array(Ti1430.3616, Ti1432.3617)
else
let v.3612: [Int] =
let Ti1434.3614: Int =
let Ti1433.3615: Int =
1 in
(length.2038 + Ti1433.3615) in
read_net_item.2037(Ti1434.3614) in
let Tu60.3613: Unit =
v.3612.(length.2038) <- item.3610 in
v.3612 in 
let rec (read_or_network.2039: (Int) -> [[Int]]) ((length.2040: Int)) =
let net.3598: [Int] =
let Ti1417.3609: Int =
0 in
read_net_item.2037(Ti1417.3609) in
let Ti1419.3599: Int =
let Ti1418.3608: Int =
0 in
net.3598.(Ti1418.3608) in
let Ti1421.3600: Int =
let Ti1420.3607: Int =
1 in
-(Ti1420.3607) in
if Ti1419.3599 == Ti1421.3600 then
let Ti1423.3605: Int =
let Ti1422.3606: Int =
1 in
(length.2040 + Ti1422.3606) in
create_array(Ti1423.3605, net.3598)
else
let v.3601: [[Int]] =
let Ti1425.3603: Int =
let Ti1424.3604: Int =
1 in
(length.2040 + Ti1424.3604) in
read_or_network.2039(Ti1425.3603) in
let Tu61.3602: Unit =
v.3601.(length.2040) <- net.3598 in
v.3601 in 
let rec (read_and_network.2041: (Int) -> Unit) ((n.2042: Int)) =
let net.3588: [Int] =
let Ti1409.3597: Int =
0 in
read_net_item.2037(Ti1409.3597) in
let Ti1411.3589: Int =
let Ti1410.3596: Int =
0 in
net.3588.(Ti1410.3596) in
let Ti1413.3590: Int =
let Ti1412.3595: Int =
1 in
-(Ti1412.3595) in
if Ti1411.3589 == Ti1413.3590 then
()
else
let Tu62.3591: Unit =
let Ta1414.3594: [[Int]] =
[and_net] in
Ta1414.3594.(n.2042) <- net.3588 in
let Ti1416.3592: Int =
let Ti1415.3593: Int =
1 in
(n.2042 + Ti1415.3593) in
read_and_network.2041(Ti1416.3592) in 
let rec (read_parameter.2043: (Unit) -> Unit) ((Tu63.2044: Unit)) =
let Tu66.3578: Unit =
let Tu1402.3587: Unit =
() in
read_environ.2029(Tu1402.3587) in
let Tu65.3579: Unit =
let Tu1403.3586: Unit =
() in
read_all_object.2035(Tu1403.3586) in
let Tu64.3580: Unit =
let Ti1404.3585: Int =
0 in
read_and_network.2041(Ti1404.3585) in
let Ta1405.3581: [[[Int]]] =
[or_net] in
let Ti1406.3582: Int =
0 in
let Ta1408.3583: [[Int]] =
let Ti1407.3584: Int =
0 in
read_or_network.2039(Ti1407.3584) in
Ta1405.3581.(Ti1406.3582) <- Ta1408.3583 in 
let rec (solver_rect.2045: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Int) ((m.2046: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l.2047: [Float])) =
let answera.3452: Bool =
let Td1288.3538: Float =
0. in
let Td1290.3539: Float =
let Ti1289.3577: Int =
0 in
l.2047.(Ti1289.3577) in
if Td1288.3538 == Td1290.3539 then
0
else
let d.3540: Float =
let Tb1296.3569: Bool =
let Tb1291.3572: Bool =
o_isinvert.1990(m.2046) in
let Ti1295.3573: Int =
let Td1292.3574: Float =
0. in
let Td1294.3575: Float =
let Ti1293.3576: Int =
0 in
l.2047.(Ti1293.3576) in
if Td1292.3574 <= Td1294.3575 then
0
else
1 in
xor.1977(Tb1291.3572, Ti1295.3573) in
let Ti1297.3570: Int =
0 in
if Tb1296.3569 == Ti1297.3570 then
let Td1298.3571: Float =
o_param_a.1994(m.2046) in
-(Td1298.3571)
else
o_param_a.1994(m.2046) in
let d2.3541: Float =
let Td1302.3563: Float =
let Td1301.3566: Float =
let Ta1299.3567: [Float] =
[solver_w_vec] in
let Ti1300.3568: Int =
0 in
Ta1299.3567.(Ti1300.3568) in
(d.3540 - Td1301.3566) in
let Td1304.3564: Float =
let Ti1303.3565: Int =
0 in
l.2047.(Ti1303.3565) in
(Td1302.3563 / Td1304.3564) in
let Td1305.3542: Float =
o_param_b.1996(m.2046) in
let Ti1313.3543: Int =
let Td1312.3556: Float =
let Td1308.3557: Float =
let Td1307.3561: Float =
let Ti1306.3562: Int =
1 in
l.2047.(Ti1306.3562) in
(d2.3541 * Td1307.3561) in
let Td1311.3558: Float =
let Ta1309.3559: [Float] =
[solver_w_vec] in
let Ti1310.3560: Int =
1 in
Ta1309.3559.(Ti1310.3560) in
(Td1308.3557 + Td1311.3558) in
abs_float(Td1312.3556) in
if Td1305.3542 <= Ti1313.3543 then
0
else
let Td1314.3544: Float =
o_param_c.1998(m.2046) in
let Ti1322.3545: Int =
let Td1321.3549: Float =
let Td1317.3550: Float =
let Td1316.3554: Float =
let Ti1315.3555: Int =
2 in
l.2047.(Ti1315.3555) in
(d2.3541 * Td1316.3554) in
let Td1320.3551: Float =
let Ta1318.3552: [Float] =
[solver_w_vec] in
let Ti1319.3553: Int =
2 in
Ta1318.3552.(Ti1319.3553) in
(Td1317.3550 + Td1320.3551) in
abs_float(Td1321.3549) in
if Td1314.3544 <= Ti1322.3545 then
0
else
let Tu67.3546: Unit =
let Ta1323.3547: [Int] =
[solver_dist] in
let Ti1324.3548: Int =
0 in
Ta1323.3547.(Ti1324.3548) <- d2.3541 in
1 in
let Ti1325.3453: Int =
0 in
if answera.3452 == Ti1325.3453 then
let answerb.3454: Bool =
let Td1326.3498: Float =
0. in
let Td1328.3499: Float =
let Ti1327.3537: Int =
1 in
l.2047.(Ti1327.3537) in
if Td1326.3498 == Td1328.3499 then
0
else
let d.3500: Float =
let Tb1334.3529: Bool =
let Tb1329.3532: Bool =
o_isinvert.1990(m.2046) in
let Ti1333.3533: Int =
let Td1330.3534: Float =
0. in
let Td1332.3535: Float =
let Ti1331.3536: Int =
1 in
l.2047.(Ti1331.3536) in
if Td1330.3534 <= Td1332.3535 then
0
else
1 in
xor.1977(Tb1329.3532, Ti1333.3533) in
let Ti1335.3530: Int =
0 in
if Tb1334.3529 == Ti1335.3530 then
let Td1336.3531: Float =
o_param_b.1996(m.2046) in
-(Td1336.3531)
else
o_param_b.1996(m.2046) in
let d2.3501: Float =
let Td1340.3523: Float =
let Td1339.3526: Float =
let Ta1337.3527: [Float] =
[solver_w_vec] in
let Ti1338.3528: Int =
1 in
Ta1337.3527.(Ti1338.3528) in
(d.3500 - Td1339.3526) in
let Td1342.3524: Float =
let Ti1341.3525: Int =
1 in
l.2047.(Ti1341.3525) in
(Td1340.3523 / Td1342.3524) in
let Td1343.3502: Float =
o_param_c.1998(m.2046) in
let Ti1351.3503: Int =
let Td1350.3516: Float =
let Td1346.3517: Float =
let Td1345.3521: Float =
let Ti1344.3522: Int =
2 in
l.2047.(Ti1344.3522) in
(d2.3501 * Td1345.3521) in
let Td1349.3518: Float =
let Ta1347.3519: [Float] =
[solver_w_vec] in
let Ti1348.3520: Int =
2 in
Ta1347.3519.(Ti1348.3520) in
(Td1346.3517 + Td1349.3518) in
abs_float(Td1350.3516) in
if Td1343.3502 <= Ti1351.3503 then
0
else
let Td1352.3504: Float =
o_param_a.1994(m.2046) in
let Ti1360.3505: Int =
let Td1359.3509: Float =
let Td1355.3510: Float =
let Td1354.3514: Float =
let Ti1353.3515: Int =
0 in
l.2047.(Ti1353.3515) in
(d2.3501 * Td1354.3514) in
let Td1358.3511: Float =
let Ta1356.3512: [Float] =
[solver_w_vec] in
let Ti1357.3513: Int =
0 in
Ta1356.3512.(Ti1357.3513) in
(Td1355.3510 + Td1358.3511) in
abs_float(Td1359.3509) in
if Td1352.3504 <= Ti1360.3505 then
0
else
let Tu68.3506: Unit =
let Ta1361.3507: [Int] =
[solver_dist] in
let Ti1362.3508: Int =
0 in
Ta1361.3507.(Ti1362.3508) <- d2.3501 in
1 in
let Ti1363.3455: Int =
0 in
if answerb.3454 == Ti1363.3455 then
let answerc.3456: Bool =
let Td1364.3458: Float =
0. in
let Td1366.3459: Float =
let Ti1365.3497: Int =
2 in
l.2047.(Ti1365.3497) in
if Td1364.3458 == Td1366.3459 then
0
else
let d.3460: Float =
let Tb1372.3489: Bool =
let Tb1367.3492: Bool =
o_isinvert.1990(m.2046) in
let Ti1371.3493: Int =
let Td1368.3494: Float =
0. in
let Td1370.3495: Float =
let Ti1369.3496: Int =
2 in
l.2047.(Ti1369.3496) in
if Td1368.3494 <= Td1370.3495 then
0
else
1 in
xor.1977(Tb1367.3492, Ti1371.3493) in
let Ti1373.3490: Int =
0 in
if Tb1372.3489 == Ti1373.3490 then
let Td1374.3491: Float =
o_param_c.1998(m.2046) in
-(Td1374.3491)
else
o_param_c.1998(m.2046) in
let d2.3461: Float =
let Td1378.3483: Float =
let Td1377.3486: Float =
let Ta1375.3487: [Float] =
[solver_w_vec] in
let Ti1376.3488: Int =
2 in
Ta1375.3487.(Ti1376.3488) in
(d.3460 - Td1377.3486) in
let Td1380.3484: Float =
let Ti1379.3485: Int =
2 in
l.2047.(Ti1379.3485) in
(Td1378.3483 / Td1380.3484) in
let Td1381.3462: Float =
o_param_a.1994(m.2046) in
let Ti1389.3463: Int =
let Td1388.3476: Float =
let Td1384.3477: Float =
let Td1383.3481: Float =
let Ti1382.3482: Int =
0 in
l.2047.(Ti1382.3482) in
(d2.3461 * Td1383.3481) in
let Td1387.3478: Float =
let Ta1385.3479: [Float] =
[solver_w_vec] in
let Ti1386.3480: Int =
0 in
Ta1385.3479.(Ti1386.3480) in
(Td1384.3477 + Td1387.3478) in
abs_float(Td1388.3476) in
if Td1381.3462 <= Ti1389.3463 then
0
else
let Td1390.3464: Float =
o_param_b.1996(m.2046) in
let Ti1398.3465: Int =
let Td1397.3469: Float =
let Td1393.3470: Float =
let Td1392.3474: Float =
let Ti1391.3475: Int =
1 in
l.2047.(Ti1391.3475) in
(d2.3461 * Td1392.3474) in
let Td1396.3471: Float =
let Ta1394.3472: [Float] =
[solver_w_vec] in
let Ti1395.3473: Int =
1 in
Ta1394.3472.(Ti1395.3473) in
(Td1393.3470 + Td1396.3471) in
abs_float(Td1397.3469) in
if Td1390.3464 <= Ti1398.3465 then
0
else
let Tu69.3466: Unit =
let Ta1399.3467: [Int] =
[solver_dist] in
let Ti1400.3468: Int =
0 in
Ta1399.3467.(Ti1400.3468) <- d2.3461 in
1 in
let Ti1401.3457: Int =
0 in
if answerc.3456 == Ti1401.3457 then
0
else
3
else
2
else
1 in 
let rec (solver_surface.2048: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Int) ((m.2049: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l.2050: [Float])) =
let q.3415: Float =
let Td1262.3439: Float =
let Td1257.3444: Float =
let Td1255.3449: Float =
let Ti1254.3451: Int =
0 in
l.2050.(Ti1254.3451) in
let Td1256.3450: Float =
o_param_a.1994(m.2049) in
(Td1255.3449 * Td1256.3450) in
let Td1261.3445: Float =
let Td1259.3446: Float =
let Ti1258.3448: Int =
1 in
l.2050.(Ti1258.3448) in
let Td1260.3447: Float =
o_param_b.1996(m.2049) in
(Td1259.3446 * Td1260.3447) in
(Td1257.3444 + Td1261.3445) in
let Td1266.3440: Float =
let Td1264.3441: Float =
let Ti1263.3443: Int =
2 in
l.2050.(Ti1263.3443) in
let Td1265.3442: Float =
o_param_c.1998(m.2049) in
(Td1264.3441 * Td1265.3442) in
(Td1262.3439 + Td1266.3440) in
let Td1267.3416: Float =
0. in
if q.3415 <= Td1267.3416 then
0
else
let t.3417: Float =
let Td1284.3422: Float =
let Td1278.3423: Float =
let Td1272.3429: Float =
let Td1270.3435: Float =
let Ta1268.3437: [Float] =
[solver_w_vec] in
let Ti1269.3438: Int =
0 in
Ta1268.3437.(Ti1269.3438) in
let Td1271.3436: Float =
o_param_a.1994(m.2049) in
(Td1270.3435 * Td1271.3436) in
let Td1277.3430: Float =
let Td1275.3431: Float =
let Ta1273.3433: [Float] =
[solver_w_vec] in
let Ti1274.3434: Int =
1 in
Ta1273.3433.(Ti1274.3434) in
let Td1276.3432: Float =
o_param_b.1996(m.2049) in
(Td1275.3431 * Td1276.3432) in
(Td1272.3429 + Td1277.3430) in
let Td1283.3424: Float =
let Td1281.3425: Float =
let Ta1279.3427: [Float] =
[solver_w_vec] in
let Ti1280.3428: Int =
2 in
Ta1279.3427.(Ti1280.3428) in
let Td1282.3426: Float =
o_param_c.1998(m.2049) in
(Td1281.3425 * Td1282.3426) in
(Td1278.3423 + Td1283.3424) in
(Td1284.3422 / q.3415) in
let Tu70.3418: Unit =
let Ta1285.3419: [Int] =
[solver_dist] in
let Ti1286.3420: Int =
0 in
let Td1287.3421: Float =
-(t.3417) in
Ta1285.3419.(Ti1286.3420) <- Td1287.3421 in
1 in 
let rec (in_prod_sqr_obj.2051: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Float) ((m.2052: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (v.2053: [Float])) =
let Td1248.3399: Float =
let Td1242.3405: Float =
let Td1240.3411: Float =
let Td1239.3413: Float =
let Ti1238.3414: Int =
0 in
v.2053.(Ti1238.3414) in
fsqr.1980(Td1239.3413) in
let Td1241.3412: Float =
o_param_a.1994(m.2052) in
(Td1240.3411 * Td1241.3412) in
let Td1247.3406: Float =
let Td1245.3407: Float =
let Td1244.3409: Float =
let Ti1243.3410: Int =
1 in
v.2053.(Ti1243.3410) in
fsqr.1980(Td1244.3409) in
let Td1246.3408: Float =
o_param_b.1996(m.2052) in
(Td1245.3407 * Td1246.3408) in
(Td1242.3405 + Td1247.3406) in
let Td1253.3400: Float =
let Td1251.3401: Float =
let Td1250.3403: Float =
let Ti1249.3404: Int =
2 in
v.2053.(Ti1249.3404) in
fsqr.1980(Td1250.3403) in
let Td1252.3402: Float =
o_param_c.1998(m.2052) in
(Td1251.3401 * Td1252.3402) in
(Td1248.3399 + Td1253.3400) in 
let rec (in_prod_co_objrot.2054: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Float) ((m.2055: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (v.2056: [Float])) =
let Td1230.3377: Float =
let Td1222.3385: Float =
let Td1220.3393: Float =
let Td1217.3395: Float =
let Ti1216.3398: Int =
1 in
v.2056.(Ti1216.3398) in
let Td1219.3396: Float =
let Ti1218.3397: Int =
2 in
v.2056.(Ti1218.3397) in
(Td1217.3395 * Td1219.3396) in
let Td1221.3394: Float =
o_param_r1.2016(m.2055) in
(Td1220.3393 * Td1221.3394) in
let Td1229.3386: Float =
let Td1227.3387: Float =
let Td1224.3389: Float =
let Ti1223.3392: Int =
0 in
v.2056.(Ti1223.3392) in
let Td1226.3390: Float =
let Ti1225.3391: Int =
2 in
v.2056.(Ti1225.3391) in
(Td1224.3389 * Td1226.3390) in
let Td1228.3388: Float =
o_param_r2.2018(m.2055) in
(Td1227.3387 * Td1228.3388) in
(Td1222.3385 + Td1229.3386) in
let Td1237.3378: Float =
let Td1235.3379: Float =
let Td1232.3381: Float =
let Ti1231.3384: Int =
0 in
v.2056.(Ti1231.3384) in
let Td1234.3382: Float =
let Ti1233.3383: Int =
1 in
v.2056.(Ti1233.3383) in
(Td1232.3381 * Td1234.3382) in
let Td1236.3380: Float =
o_param_r3.2020(m.2055) in
(Td1235.3379 * Td1236.3380) in
(Td1230.3377 + Td1237.3378) in 
let rec (solver2nd_mul_b.2057: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Float) ((m.2058: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l.2059: [Float])) =
let Td1207.3352: Float =
let Td1198.3361: Float =
let Td1196.3370: Float =
let Td1193.3372: Float =
let Ta1191.3375: [Float] =
[solver_w_vec] in
let Ti1192.3376: Int =
0 in
Ta1191.3375.(Ti1192.3376) in
let Td1195.3373: Float =
let Ti1194.3374: Int =
0 in
l.2059.(Ti1194.3374) in
(Td1193.3372 * Td1195.3373) in
let Td1197.3371: Float =
o_param_a.1994(m.2058) in
(Td1196.3370 * Td1197.3371) in
let Td1206.3362: Float =
let Td1204.3363: Float =
let Td1201.3365: Float =
let Ta1199.3368: [Float] =
[solver_w_vec] in
let Ti1200.3369: Int =
1 in
Ta1199.3368.(Ti1200.3369) in
let Td1203.3366: Float =
let Ti1202.3367: Int =
1 in
l.2059.(Ti1202.3367) in
(Td1201.3365 * Td1203.3366) in
let Td1205.3364: Float =
o_param_b.1996(m.2058) in
(Td1204.3363 * Td1205.3364) in
(Td1198.3361 + Td1206.3362) in
let Td1215.3353: Float =
let Td1213.3354: Float =
let Td1210.3356: Float =
let Ta1208.3359: [Float] =
[solver_w_vec] in
let Ti1209.3360: Int =
2 in
Ta1208.3359.(Ti1209.3360) in
let Td1212.3357: Float =
let Ti1211.3358: Int =
2 in
l.2059.(Ti1211.3358) in
(Td1210.3356 * Td1212.3357) in
let Td1214.3355: Float =
o_param_c.1998(m.2058) in
(Td1213.3354 * Td1214.3355) in
(Td1207.3352 + Td1215.3353) in 
let rec (solver2nd_rot_b.2060: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Float) ((m.2061: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l.2062: [Float])) =
let Td1175.3306: Float =
let Td1159.3322: Float =
let Td1157.3338: Float =
let Td1150.3340: Float =
let Td1147.3347: Float =
let Ta1145.3350: [Float] =
[solver_w_vec] in
let Ti1146.3351: Int =
2 in
Ta1145.3350.(Ti1146.3351) in
let Td1149.3348: Float =
let Ti1148.3349: Int =
1 in
l.2062.(Ti1148.3349) in
(Td1147.3347 * Td1149.3348) in
let Td1156.3341: Float =
let Td1153.3342: Float =
let Ta1151.3345: [Float] =
[solver_w_vec] in
let Ti1152.3346: Int =
1 in
Ta1151.3345.(Ti1152.3346) in
let Td1155.3343: Float =
let Ti1154.3344: Int =
2 in
l.2062.(Ti1154.3344) in
(Td1153.3342 * Td1155.3343) in
(Td1150.3340 + Td1156.3341) in
let Td1158.3339: Float =
o_param_r1.2016(m.2061) in
(Td1157.3338 * Td1158.3339) in
let Td1174.3323: Float =
let Td1172.3324: Float =
let Td1165.3326: Float =
let Td1162.3333: Float =
let Ta1160.3336: [Float] =
[solver_w_vec] in
let Ti1161.3337: Int =
0 in
Ta1160.3336.(Ti1161.3337) in
let Td1164.3334: Float =
let Ti1163.3335: Int =
2 in
l.2062.(Ti1163.3335) in
(Td1162.3333 * Td1164.3334) in
let Td1171.3327: Float =
let Td1168.3328: Float =
let Ta1166.3331: [Float] =
[solver_w_vec] in
let Ti1167.3332: Int =
2 in
Ta1166.3331.(Ti1167.3332) in
let Td1170.3329: Float =
let Ti1169.3330: Int =
0 in
l.2062.(Ti1169.3330) in
(Td1168.3328 * Td1170.3329) in
(Td1165.3326 + Td1171.3327) in
let Td1173.3325: Float =
o_param_r2.2018(m.2061) in
(Td1172.3324 * Td1173.3325) in
(Td1159.3322 + Td1174.3323) in
let Td1190.3307: Float =
let Td1188.3308: Float =
let Td1181.3310: Float =
let Td1178.3317: Float =
let Ta1176.3320: [Float] =
[solver_w_vec] in
let Ti1177.3321: Int =
0 in
Ta1176.3320.(Ti1177.3321) in
let Td1180.3318: Float =
let Ti1179.3319: Int =
1 in
l.2062.(Ti1179.3319) in
(Td1178.3317 * Td1180.3318) in
let Td1187.3311: Float =
let Td1184.3312: Float =
let Ta1182.3315: [Float] =
[solver_w_vec] in
let Ti1183.3316: Int =
1 in
Ta1182.3315.(Ti1183.3316) in
let Td1186.3313: Float =
let Ti1185.3314: Int =
0 in
l.2062.(Ti1185.3314) in
(Td1184.3312 * Td1186.3313) in
(Td1181.3310 + Td1187.3311) in
let Td1189.3309: Float =
o_param_r3.2020(m.2061) in
(Td1188.3308 * Td1189.3309) in
(Td1175.3306 + Td1190.3307) in 
let rec (solver_second.2063: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Int) ((m.2064: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l.2065: [Float])) =
let aa0.3265: Float =
in_prod_sqr_obj.2051(m.2064, l.2065) in
let aa.3266: Float =
let Ti1116.3303: Int =
o_isrot.1992(m.2064) in
let Ti1117.3304: Int =
0 in
if Ti1116.3303 == Ti1117.3304 then
aa0.3265
else
let Td1118.3305: Float =
in_prod_co_objrot.2054(m.2064, l.2065) in
(aa0.3265 + Td1118.3305) in
let Td1119.3267: Float =
0. in
if Td1119.3267 == aa.3266 then
0
else
let bb0.3268: Float =
let Td1120.3301: Float =
2. in
let Td1121.3302: Float =
solver2nd_mul_b.2057(m.2064, l.2065) in
(Td1120.3301 * Td1121.3302) in
let bb.3269: Float =
let Ti1122.3298: Int =
o_isrot.1992(m.2064) in
let Ti1123.3299: Int =
0 in
if Ti1122.3298 == Ti1123.3299 then
bb0.3268
else
let Td1124.3300: Float =
solver2nd_rot_b.2060(m.2064, l.2065) in
(bb0.3268 + Td1124.3300) in
let cc0.3270: Float =
let Ta1125.3297: [Float] =
[solver_w_vec] in
in_prod_sqr_obj.2051(m.2064, Ta1125.3297) in
let cc1.3271: Float =
let Ti1126.3293: Int =
o_isrot.1992(m.2064) in
let Ti1127.3294: Int =
0 in
if Ti1126.3293 == Ti1127.3294 then
cc0.3270
else
let Td1129.3295: Float =
let Ta1128.3296: [Float] =
[solver_w_vec] in
in_prod_co_objrot.2054(m.2064, Ta1128.3296) in
(cc0.3270 + Td1129.3295) in
let cc.3272: Float =
let Ti1130.3290: Int =
o_form.1986(m.2064) in
let Ti1131.3291: Int =
3 in
if Ti1130.3290 == Ti1131.3291 then
let Td1132.3292: Float =
1. in
(cc1.3271 - Td1132.3292)
else
cc1.3271 in
let d.3273: Float =
let d2.3286: Float =
let Td1134.3288: Float =
let Td1133.3289: Float =
4. in
(Td1133.3289 * aa.3266) in
(Td1134.3288 * cc.3272) in
let Td1135.3287: Float =
fsqr.1980(bb.3269) in
(Td1135.3287 - d2.3286) in
let Td1136.3274: Float =
0. in
if d.3273 <= Td1136.3274 then
0
else
let sd.3275: Float =
sqrt(d.3273) in
let t1.3276: Float =
let Tb1137.3284: Bool =
o_isinvert.1990(m.2064) in
let Ti1138.3285: Int =
0 in
if Tb1137.3284 == Ti1138.3285 then
-(sd.3275)
else
sd.3275 in
let Tu71.3277: Unit =
let Ta1139.3278: [Int] =
[solver_dist] in
let Ti1140.3279: Int =
0 in
let Td1144.3280: Float =
let Td1143.3281: Float =
let Td1141.3282: Float =
(t1.3276 - bb.3269) in
let Td1142.3283: Float =
2. in
(Td1141.3282 / Td1142.3283) in
(Td1143.3281 / aa.3266) in
Ta1139.3278.(Ti1140.3279) <- Td1144.3280 in
1 in 
let rec (solver.2066: (Int, [Float], [Float]) -> Int) ((index.2067: Int), (l.2068: [Float]), (p.2069: [Float])) =
let m.3239: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta1095.3264: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta1095.3264.(index.2067) in
let Tu74.3240: Unit =
let Ta1096.3258: [Float] =
[solver_w_vec] in
let Ti1097.3259: Int =
0 in
let Td1101.3260: Float =
let Td1099.3261: Float =
let Ti1098.3263: Int =
0 in
p.2069.(Ti1098.3263) in
let Td1100.3262: Float =
o_param_x.2000(m.3239) in
(Td1099.3261 - Td1100.3262) in
Ta1096.3258.(Ti1097.3259) <- Td1101.3260 in
let Tu73.3241: Unit =
let Ta1102.3252: [Float] =
[solver_w_vec] in
let Ti1103.3253: Int =
1 in
let Td1107.3254: Float =
let Td1105.3255: Float =
let Ti1104.3257: Int =
1 in
p.2069.(Ti1104.3257) in
let Td1106.3256: Float =
o_param_y.2002(m.3239) in
(Td1105.3255 - Td1106.3256) in
Ta1102.3252.(Ti1103.3253) <- Td1107.3254 in
let Tu72.3242: Unit =
let Ta1108.3246: [Float] =
[solver_w_vec] in
let Ti1109.3247: Int =
2 in
let Td1113.3248: Float =
let Td1111.3249: Float =
let Ti1110.3251: Int =
2 in
p.2069.(Ti1110.3251) in
let Td1112.3250: Float =
o_param_z.2004(m.3239) in
(Td1111.3249 - Td1112.3250) in
Ta1108.3246.(Ti1109.3247) <- Td1113.3248 in
let m_shape.3243: Int =
o_form.1986(m.3239) in
let Ti1114.3244: Int =
1 in
if m_shape.3243 == Ti1114.3244 then
solver_rect.2045(m.3239, l.2068)
else
let Ti1115.3245: Int =
2 in
if m_shape.3243 == Ti1115.3245 then
solver_surface.2048(m.3239, l.2068)
else
solver_second.2063(m.3239, l.2068) in 
let rec (is_rect_outside.2070: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m.2071: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let Ti1091.3220: Int =
let Td1076.3224: Float =
o_param_a.1994(m.2071) in
let Ti1080.3225: Int =
let Td1079.3236: Float =
let Ta1077.3237: [Float] =
[isoutside_q] in
let Ti1078.3238: Int =
0 in
Ta1077.3237.(Ti1078.3238) in
abs_float(Td1079.3236) in
if Td1076.3224 <= Ti1080.3225 then
0
else
let Td1081.3226: Float =
o_param_b.1996(m.2071) in
let Ti1085.3227: Int =
let Td1084.3233: Float =
let Ta1082.3234: [Float] =
[isoutside_q] in
let Ti1083.3235: Int =
1 in
Ta1082.3234.(Ti1083.3235) in
abs_float(Td1084.3233) in
if Td1081.3226 <= Ti1085.3227 then
0
else
let Td1086.3228: Float =
o_param_c.1998(m.2071) in
let Ti1090.3229: Int =
let Td1089.3230: Float =
let Ta1087.3231: [Float] =
[isoutside_q] in
let Ti1088.3232: Int =
2 in
Ta1087.3231.(Ti1088.3232) in
abs_float(Td1089.3230) in
if Td1086.3228 <= Ti1090.3229 then
0
else
1 in
let Ti1092.3221: Int =
0 in
if Ti1091.3220 == Ti1092.3221 then
let Tb1093.3222: Bool =
o_isinvert.1990(m.2071) in
let Ti1094.3223: Int =
0 in
if Tb1093.3222 == Ti1094.3223 then
1
else
0
else
o_isinvert.1990(m.2071) in 
let rec (is_plane_outside.2072: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m.2073: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let w.3198: Float =
let Td1066.3204: Float =
let Td1060.3210: Float =
let Td1056.3216: Float =
o_param_a.1994(m.2073) in
let Td1059.3217: Float =
let Ta1057.3218: [Float] =
[isoutside_q] in
let Ti1058.3219: Int =
0 in
Ta1057.3218.(Ti1058.3219) in
(Td1056.3216 * Td1059.3217) in
let Td1065.3211: Float =
let Td1061.3212: Float =
o_param_b.1996(m.2073) in
let Td1064.3213: Float =
let Ta1062.3214: [Float] =
[isoutside_q] in
let Ti1063.3215: Int =
1 in
Ta1062.3214.(Ti1063.3215) in
(Td1061.3212 * Td1064.3213) in
(Td1060.3210 + Td1065.3211) in
let Td1071.3205: Float =
let Td1067.3206: Float =
o_param_c.1998(m.2073) in
let Td1070.3207: Float =
let Ta1068.3208: [Float] =
[isoutside_q] in
let Ti1069.3209: Int =
2 in
Ta1068.3208.(Ti1069.3209) in
(Td1067.3206 * Td1070.3207) in
(Td1066.3204 + Td1071.3205) in
let s.3199: Bool =
let Td1072.3203: Float =
0. in
if Td1072.3203 <= w.3198 then
0
else
1 in
let Tb1074.3200: Bool =
let Tb1073.3202: Bool =
o_isinvert.1990(m.2073) in
xor.1977(Tb1073.3202, s.3199) in
let Ti1075.3201: Int =
0 in
if Tb1074.3200 == Ti1075.3201 then
1
else
0 in 
let rec (is_second_outside.2074: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m.2075: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let w.3182: Float =
let Ta1044.3197: [Float] =
[isoutside_q] in
in_prod_sqr_obj.2051(m.2075, Ta1044.3197) in
let w2.3183: Float =
let Ti1045.3194: Int =
o_form.1986(m.2075) in
let Ti1046.3195: Int =
3 in
if Ti1045.3194 == Ti1046.3195 then
let Td1047.3196: Float =
1. in
(w.3182 - Td1047.3196)
else
w.3182 in
let w3.3184: Float =
let Ti1048.3190: Int =
o_isrot.1992(m.2075) in
let Ti1049.3191: Int =
0 in
if Ti1048.3190 == Ti1049.3191 then
w2.3183
else
let Td1051.3192: Float =
let Ta1050.3193: [Float] =
[isoutside_q] in
in_prod_co_objrot.2054(m.2075, Ta1050.3193) in
(w2.3183 + Td1051.3192) in
let s.3185: Bool =
let Td1052.3189: Float =
0. in
if Td1052.3189 <= w3.3184 then
0
else
1 in
let Tb1054.3186: Bool =
let Tb1053.3188: Bool =
o_isinvert.1990(m.2075) in
xor.1977(Tb1053.3188, s.3185) in
let Ti1055.3187: Int =
0 in
if Tb1054.3186 == Ti1055.3187 then
1
else
0 in 
let rec (is_outside.2076: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m.2077: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let Tu77.3155: Unit =
let Ta1021.3175: [Float] =
[isoutside_q] in
let Ti1022.3176: Int =
0 in
let Td1027.3177: Float =
let Ti1025.3178: Int =
let Ta1023.3180: [Int] =
[chkinside_p] in
let Ti1024.3181: Int =
0 in
Ta1023.3180.(Ti1024.3181) in
let Td1026.3179: Float =
o_param_x.2000(m.2077) in
(Ti1025.3178 - Td1026.3179) in
Ta1021.3175.(Ti1022.3176) <- Td1027.3177 in
let Tu76.3156: Unit =
let Ta1028.3168: [Float] =
[isoutside_q] in
let Ti1029.3169: Int =
1 in
let Td1034.3170: Float =
let Ti1032.3171: Int =
let Ta1030.3173: [Int] =
[chkinside_p] in
let Ti1031.3174: Int =
1 in
Ta1030.3173.(Ti1031.3174) in
let Td1033.3172: Float =
o_param_y.2002(m.2077) in
(Ti1032.3171 - Td1033.3172) in
Ta1028.3168.(Ti1029.3169) <- Td1034.3170 in
let Tu75.3157: Unit =
let Ta1035.3161: [Float] =
[isoutside_q] in
let Ti1036.3162: Int =
2 in
let Td1041.3163: Float =
let Ti1039.3164: Int =
let Ta1037.3166: [Int] =
[chkinside_p] in
let Ti1038.3167: Int =
2 in
Ta1037.3166.(Ti1038.3167) in
let Td1040.3165: Float =
o_param_z.2004(m.2077) in
(Ti1039.3164 - Td1040.3165) in
Ta1035.3161.(Ti1036.3162) <- Td1041.3163 in
let m_shape.3158: Int =
o_form.1986(m.2077) in
let Ti1042.3159: Int =
1 in
if m_shape.3158 == Ti1042.3159 then
is_rect_outside.2070(m.2077)
else
let Ti1043.3160: Int =
2 in
if m_shape.3158 == Ti1043.3160 then
is_plane_outside.2072(m.2077)
else
is_second_outside.2074(m.2077) in 
let rec (check_all_inside.2078: (Int, [Int]) -> Bool) ((ofs.2079: Int), (iand.2080: [Int])) =
let head.3146: Int =
iand.2080.(ofs.2079) in
let Ti1014.3147: Int =
let Ti1013.3154: Int =
1 in
-(Ti1013.3154) in
if head.3146 == Ti1014.3147 then
1
else
let Tb1017.3148: Bool =
let Tt1016.3152: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta1015.3153: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta1015.3153.(head.3146) in
is_outside.2076(Tt1016.3152) in
let Ti1018.3149: Int =
0 in
if Tb1017.3148 == Ti1018.3149 then
let Ti1020.3150: Int =
let Ti1019.3151: Int =
1 in
(ofs.2079 + Ti1019.3151) in
check_all_inside.2078(Ti1020.3150, iand.2080)
else
0 in 
let rec (shadow_check_and_group.2081: (Int, [Int], [Float]) -> Bool) ((iand_ofs.2082: Int), (and_group.2083: [Int]), (p.2084: [Float])) =
let Ti964.3090: Int =
and_group.2083.(iand_ofs.2082) in
let Ti966.3091: Int =
let Ti965.3145: Int =
1 in
-(Ti965.3145) in
if Ti964.3090 == Ti966.3091 then
0
else
let obj.3092: Int =
and_group.2083.(iand_ofs.2082) in
let t0.3093: Int =
let Ta967.3144: [Float] =
[light] in
solver.2066(obj.3092, Ta967.3144, p.2084) in
let t0p.3094: Float =
let Ta968.3142: [Int] =
[solver_dist] in
let Ti969.3143: Int =
0 in
Ta968.3142.(Ti969.3143) in
let Ti972.3095: Int =
let Ti970.3140: Int =
0 in
if t0.3093 == Ti970.3140 then
0
else
let Td971.3141: Float =
-0.2 in
if Td971.3141 <= t0p.3094 then
0
else
1 in
let Ti973.3096: Int =
0 in
if Ti972.3095 == Ti973.3096 then
let Tb976.3134: Bool =
let Tt975.3138: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta974.3139: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta974.3139.(obj.3092) in
o_isinvert.1990(Tt975.3138) in
let Ti977.3135: Int =
0 in
if Tb976.3134 == Ti977.3135 then
0
else
let Ti979.3136: Int =
let Ti978.3137: Int =
1 in
(iand_ofs.2082 + Ti978.3137) in
shadow_check_and_group.2081(Ti979.3136, and_group.2083, p.2084)
else
let t.3097: Float =
let Td980.3133: Float =
0.01 in
(t0p.3094 + Td980.3133) in
let Tu80.3098: Unit =
let Ta981.3124: [Int] =
[chkinside_p] in
let Ti982.3125: Int =
0 in
let Td989.3126: Float =
let Td986.3127: Float =
let Td985.3130: Float =
let Ta983.3131: [Float] =
[light] in
let Ti984.3132: Int =
0 in
Ta983.3131.(Ti984.3132) in
(Td985.3130 * t.3097) in
let Td988.3128: Float =
let Ti987.3129: Int =
0 in
p.2084.(Ti987.3129) in
(Td986.3127 + Td988.3128) in
Ta981.3124.(Ti982.3125) <- Td989.3126 in
let Tu79.3099: Unit =
let Ta990.3115: [Int] =
[chkinside_p] in
let Ti991.3116: Int =
1 in
let Td998.3117: Float =
let Td995.3118: Float =
let Td994.3121: Float =
let Ta992.3122: [Float] =
[light] in
let Ti993.3123: Int =
1 in
Ta992.3122.(Ti993.3123) in
(Td994.3121 * t.3097) in
let Td997.3119: Float =
let Ti996.3120: Int =
1 in
p.2084.(Ti996.3120) in
(Td995.3118 + Td997.3119) in
Ta990.3115.(Ti991.3116) <- Td998.3117 in
let Tu78.3100: Unit =
let Ta999.3106: [Int] =
[chkinside_p] in
let Ti1000.3107: Int =
2 in
let Td1007.3108: Float =
let Td1004.3109: Float =
let Td1003.3112: Float =
let Ta1001.3113: [Float] =
[light] in
let Ti1002.3114: Int =
2 in
Ta1001.3113.(Ti1002.3114) in
(Td1003.3112 * t.3097) in
let Td1006.3110: Float =
let Ti1005.3111: Int =
2 in
p.2084.(Ti1005.3111) in
(Td1004.3109 + Td1006.3110) in
Ta999.3106.(Ti1000.3107) <- Td1007.3108 in
let Tb1009.3101: Bool =
let Ti1008.3105: Int =
0 in
check_all_inside.2078(Ti1008.3105, and_group.2083) in
let Ti1010.3102: Int =
0 in
if Tb1009.3101 == Ti1010.3102 then
let Ti1012.3103: Int =
let Ti1011.3104: Int =
1 in
(iand_ofs.2082 + Ti1011.3104) in
shadow_check_and_group.2081(Ti1012.3103, and_group.2083, p.2084)
else
1 in 
let rec (shadow_check_one_or_group.2085: (Int, [Int], [Float]) -> Bool) ((ofs.2086: Int), (or_group.2087: [Int]), (p.2088: [Float])) =
let head.3080: Int =
or_group.2087.(ofs.2086) in
let Ti958.3081: Int =
let Ti957.3089: Int =
1 in
-(Ti957.3089) in
if head.3080 == Ti958.3081 then
0
else
let and_group.3082: [Int] =
let Ta959.3088: [[Int]] =
[and_net] in
Ta959.3088.(head.3080) in
let shadow_p.3083: Bool =
let Ti960.3087: Int =
0 in
shadow_check_and_group.2081(Ti960.3087, and_group.3082, p.2088) in
let Ti961.3084: Int =
0 in
if shadow_p.3083 == Ti961.3084 then
let Ti963.3085: Int =
let Ti962.3086: Int =
1 in
(ofs.2086 + Ti962.3086) in
shadow_check_one_or_group.2085(Ti963.3085, or_group.2087, p.2088)
else
1 in 
let rec (shadow_check_one_or_matrix.2089: (Int, [[Int]], [Float]) -> Bool) ((ofs.2090: Int), (or_matrix.2091: [[Int]]), (p.2092: [Float])) =
let head.3053: [Int] =
or_matrix.2091.(ofs.2090) in
let range_primitive.3054: Int =
let Ti933.3079: Int =
0 in
head.3053.(Ti933.3079) in
let Ti935.3055: Int =
let Ti934.3078: Int =
1 in
-(Ti934.3078) in
if range_primitive.3054 == Ti935.3055 then
0
else
let Ti936.3056: Int =
99 in
if range_primitive.3054 == Ti936.3056 then
let Tb938.3073: Bool =
let Ti937.3077: Int =
1 in
shadow_check_one_or_group.2085(Ti937.3077, head.3053, p.2092) in
let Ti939.3074: Int =
0 in
if Tb938.3073 == Ti939.3074 then
let Ti941.3075: Int =
let Ti940.3076: Int =
1 in
(ofs.2090 + Ti940.3076) in
shadow_check_one_or_matrix.2089(Ti941.3075, or_matrix.2091, p.2092)
else
1
else
let t.3057: Int =
let Ta942.3072: [Float] =
[light] in
solver.2066(range_primitive.3054, Ta942.3072, p.2092) in
let Ti943.3058: Int =
0 in
if t.3057 == Ti943.3058 then
let Ti945.3070: Int =
let Ti944.3071: Int =
1 in
(ofs.2090 + Ti944.3071) in
shadow_check_one_or_matrix.2089(Ti945.3070, or_matrix.2091, p.2092)
else
let Td946.3059: Float =
-0.1 in
let Ti949.3060: Int =
let Ta947.3068: [Int] =
[solver_dist] in
let Ti948.3069: Int =
0 in
Ta947.3068.(Ti948.3069) in
if Td946.3059 <= Ti949.3060 then
let Ti951.3066: Int =
let Ti950.3067: Int =
1 in
(ofs.2090 + Ti950.3067) in
shadow_check_one_or_matrix.2089(Ti951.3066, or_matrix.2091, p.2092)
else
let Tb953.3061: Bool =
let Ti952.3065: Int =
1 in
shadow_check_one_or_group.2085(Ti952.3065, head.3053, p.2092) in
let Ti954.3062: Int =
0 in
if Tb953.3061 == Ti954.3062 then
let Ti956.3063: Int =
let Ti955.3064: Int =
1 in
(ofs.2090 + Ti955.3064) in
shadow_check_one_or_matrix.2089(Ti956.3063, or_matrix.2091, p.2092)
else
1 in 
let rec (solve_each_element.2093: (Int, [Int]) -> Unit) ((iand_ofs.2094: Int), (and_group.2095: [Int])) =
let iobj.2961: Int =
and_group.2095.(iand_ofs.2094) in
let Ti855.2962: Int =
let Ti854.3052: Int =
1 in
-(Ti854.3052) in
if iobj.2961 == Ti855.2962 then
()
else
let t0.2963: Int =
let Ta856.3050: [Float] =
[vscan] in
let Ta857.3051: [Int] =
[viewpoint] in
solver.2066(iobj.2961, Ta856.3050, Ta857.3051) in
let Tu89.2964: Unit =
let Ti858.2971: Int =
0 in
if t0.2963 == Ti858.2971 then
let Tb861.3043: Bool =
let Tt860.3048: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta859.3049: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta859.3049.(iobj.2961) in
o_isinvert.1990(Tt860.3048) in
let Ti862.3044: Int =
0 in
if Tb861.3043 == Ti862.3044 then
let Ta863.3045: [Bool] =
[end_flag] in
let Ti864.3046: Int =
0 in
let Ti865.3047: Int =
1 in
Ta863.3045.(Ti864.3046) <- Ti865.3047
else
()
else
let t0p.2972: Float =
let Ta866.3041: [Int] =
[solver_dist] in
let Ti867.3042: Int =
0 in
Ta866.3041.(Ti867.3042) in
let Td868.2973: Float =
-0.1 in
if t0p.2972 <= Td868.2973 then
()
else
let Td871.2974: Float =
let Ta869.3039: [Float] =
[tmin] in
let Ti870.3040: Int =
0 in
Ta869.3039.(Ti870.3040) in
if Td871.2974 <= t0p.2972 then
()
else
let t.2975: Float =
let Td872.3038: Float =
0.01 in
(t0p.2972 + Td872.3038) in
let Tu88.2976: Unit =
let Ta873.3028: [Int] =
[chkinside_p] in
let Ti874.3029: Int =
0 in
let Td882.3030: Float =
let Td878.3031: Float =
let Td877.3035: Float =
let Ta875.3036: [Float] =
[vscan] in
let Ti876.3037: Int =
0 in
Ta875.3036.(Ti876.3037) in
(Td877.3035 * t.2975) in
let Ti881.3032: Int =
let Ta879.3033: [Int] =
[viewpoint] in
let Ti880.3034: Int =
0 in
Ta879.3033.(Ti880.3034) in
(Td878.3031 + Ti881.3032) in
Ta873.3028.(Ti874.3029) <- Td882.3030 in
let Tu87.2977: Unit =
let Ta883.3018: [Int] =
[chkinside_p] in
let Ti884.3019: Int =
1 in
let Td892.3020: Float =
let Td888.3021: Float =
let Td887.3025: Float =
let Ta885.3026: [Float] =
[vscan] in
let Ti886.3027: Int =
1 in
Ta885.3026.(Ti886.3027) in
(Td887.3025 * t.2975) in
let Ti891.3022: Int =
let Ta889.3023: [Int] =
[viewpoint] in
let Ti890.3024: Int =
1 in
Ta889.3023.(Ti890.3024) in
(Td888.3021 + Ti891.3022) in
Ta883.3018.(Ti884.3019) <- Td892.3020 in
let Tu86.2978: Unit =
let Ta893.3008: [Int] =
[chkinside_p] in
let Ti894.3009: Int =
2 in
let Td902.3010: Float =
let Td898.3011: Float =
let Td897.3015: Float =
let Ta895.3016: [Float] =
[vscan] in
let Ti896.3017: Int =
2 in
Ta895.3016.(Ti896.3017) in
(Td897.3015 * t.2975) in
let Ti901.3012: Int =
let Ta899.3013: [Int] =
[viewpoint] in
let Ti900.3014: Int =
2 in
Ta899.3013.(Ti900.3014) in
(Td898.3011 + Ti901.3012) in
Ta893.3008.(Ti894.3009) <- Td902.3010 in
let Tb904.2979: Bool =
let Ti903.3007: Int =
0 in
check_all_inside.2078(Ti903.3007, and_group.2095) in
let Ti905.2980: Int =
0 in
if Tb904.2979 == Ti905.2980 then
()
else
let Tu85.2981: Unit =
let Ta906.3005: [Float] =
[tmin] in
let Ti907.3006: Int =
0 in
Ta906.3005.(Ti907.3006) <- t.2975 in
let Tu84.2982: Unit =
let Ta908.3000: [Int] =
[crashed_point] in
let Ti909.3001: Int =
0 in
let Ti912.3002: Int =
let Ta910.3003: [Int] =
[chkinside_p] in
let Ti911.3004: Int =
0 in
Ta910.3003.(Ti911.3004) in
Ta908.3000.(Ti909.3001) <- Ti912.3002 in
let Tu83.2983: Unit =
let Ta913.2995: [Int] =
[crashed_point] in
let Ti914.2996: Int =
1 in
let Ti917.2997: Int =
let Ta915.2998: [Int] =
[chkinside_p] in
let Ti916.2999: Int =
1 in
Ta915.2998.(Ti916.2999) in
Ta913.2995.(Ti914.2996) <- Ti917.2997 in
let Tu82.2984: Unit =
let Ta918.2990: [Int] =
[crashed_point] in
let Ti919.2991: Int =
2 in
let Ti922.2992: Int =
let Ta920.2993: [Int] =
[chkinside_p] in
let Ti921.2994: Int =
2 in
Ta920.2993.(Ti921.2994) in
Ta918.2990.(Ti919.2991) <- Ti922.2992 in
let Tu81.2985: Unit =
let Ta923.2988: [Int] =
[intsec_rectside] in
let Ti924.2989: Int =
0 in
Ta923.2988.(Ti924.2989) <- t0.2963 in
let Ta925.2986: [Int] =
[crashed_object] in
let Ti926.2987: Int =
0 in
Ta925.2986.(Ti926.2987) <- iobj.2961 in
let Tb929.2965: Bool =
let Ta927.2969: [Bool] =
[end_flag] in
let Ti928.2970: Int =
0 in
Ta927.2969.(Ti928.2970) in
let Ti930.2966: Int =
0 in
if Tb929.2965 == Ti930.2966 then
let Ti932.2967: Int =
let Ti931.2968: Int =
1 in
(iand_ofs.2094 + Ti931.2968) in
solve_each_element.2093(Ti932.2967, and_group.2095)
else
() in 
let rec (solve_one_or_network.2096: (Int, [Int]) -> Unit) ((ofs.2097: Int), (or_group.2098: [Int])) =
let head.2948: Int =
or_group.2098.(ofs.2097) in
let Ti846.2949: Int =
let Ti845.2960: Int =
1 in
-(Ti845.2960) in
if head.2948 == Ti846.2949 then
()
else
let and_group.2950: [Int] =
let Ta847.2959: [[Int]] =
[and_net] in
Ta847.2959.(head.2948) in
let Tu91.2951: Unit =
let Ta848.2956: [Bool] =
[end_flag] in
let Ti849.2957: Int =
0 in
let Ti850.2958: Int =
0 in
Ta848.2956.(Ti849.2957) <- Ti850.2958 in
let Tu90.2952: Unit =
let Ti851.2955: Int =
0 in
solve_each_element.2093(Ti851.2955, and_group.2950) in
let Ti853.2953: Int =
let Ti852.2954: Int =
1 in
(ofs.2097 + Ti852.2954) in
solve_one_or_network.2096(Ti853.2953, or_group.2098) in 
let rec (trace_or_matrix.2099: (Int, [[Int]]) -> Unit) ((ofs.2100: Int), (or_network.2101: [[Int]])) =
let head.2927: [Int] =
or_network.2101.(ofs.2100) in
let range_primitive.2928: Int =
let Ti829.2947: Int =
0 in
head.2927.(Ti829.2947) in
let Ti831.2929: Int =
let Ti830.2946: Int =
1 in
-(Ti830.2946) in
if range_primitive.2928 == Ti831.2929 then
()
else
let Tu92.2930: Unit =
let Ti832.2933: Int =
99 in
if range_primitive.2928 == Ti832.2933 then
let Ti833.2945: Int =
1 in
solve_one_or_network.2096(Ti833.2945, head.2927)
else
let t.2934: Int =
let Ta834.2943: [Float] =
[vscan] in
let Ta835.2944: [Int] =
[viewpoint] in
solver.2066(range_primitive.2928, Ta834.2943, Ta835.2944) in
let Ti836.2935: Int =
0 in
if t.2934 == Ti836.2935 then
()
else
let tp.2936: Int =
let Ta837.2941: [Int] =
[solver_dist] in
let Ti838.2942: Int =
0 in
Ta837.2941.(Ti838.2942) in
let Td841.2937: Float =
let Ta839.2939: [Float] =
[tmin] in
let Ti840.2940: Int =
0 in
Ta839.2939.(Ti840.2940) in
if Td841.2937 <= tp.2936 then
()
else
let Ti842.2938: Int =
1 in
solve_one_or_network.2096(Ti842.2938, head.2927) in
let Ti844.2931: Int =
let Ti843.2932: Int =
1 in
(ofs.2100 + Ti843.2932) in
trace_or_matrix.2099(Ti844.2931, or_network.2101) in 
let rec (tracer.2102: (Int, Int) -> Bool) ((viewpoint.2103: Int), (vscan.2104: Int)) =
let Tu94.2913: Unit =
let Ta818.2924: [Float] =
[tmin] in
let Ti819.2925: Int =
0 in
let Td820.2926: Float =
1000000000. in
Ta818.2924.(Ti819.2925) <- Td820.2926 in
let Tu93.2914: Unit =
let Ti821.2920: Int =
0 in
let Ta824.2921: [[Int]] =
let Ta822.2922: [[[Int]]] =
[or_net] in
let Ti823.2923: Int =
0 in
Ta822.2922.(Ti823.2923) in
trace_or_matrix.2099(Ti821.2920, Ta824.2921) in
let t.2915: Float =
let Ta825.2918: [Float] =
[tmin] in
let Ti826.2919: Int =
0 in
Ta825.2918.(Ti826.2919) in
let Td827.2916: Float =
-0.1 in
if t.2915 <= Td827.2916 then
0
else
let Td828.2917: Float =
100000000. in
if Td828.2917 <= t.2915 then
0
else
1 in 
let rec (get_nvector_rect.2105: (Unit) -> Unit) ((Tu95.2106: Unit)) =
let rectside.2862: Int =
let Ta774.2911: [Int] =
[intsec_rectside] in
let Ti775.2912: Int =
0 in
Ta774.2911.(Ti775.2912) in
let Ti776.2863: Int =
1 in
if rectside.2862 == Ti776.2863 then
let Tu97.2896: Unit =
let Ta777.2904: [Float] =
[nvector] in
let Ti778.2905: Int =
0 in
let Td783.2906: Float =
let Td782.2907: Float =
let Td781.2908: Float =
let Ta779.2909: [Float] =
[vscan] in
let Ti780.2910: Int =
0 in
Ta779.2909.(Ti780.2910) in
sgn.2025(Td781.2908) in
-(Td782.2907) in
Ta777.2904.(Ti778.2905) <- Td783.2906 in
let Tu96.2897: Unit =
let Ta784.2901: [Float] =
[nvector] in
let Ti785.2902: Int =
1 in
let Td786.2903: Float =
0. in
Ta784.2901.(Ti785.2902) <- Td786.2903 in
let Ta787.2898: [Float] =
[nvector] in
let Ti788.2899: Int =
2 in
let Td789.2900: Float =
0. in
Ta787.2898.(Ti788.2899) <- Td789.2900
else
let Ti790.2864: Int =
2 in
if rectside.2862 == Ti790.2864 then
let Tu99.2881: Unit =
let Ta791.2893: [Float] =
[nvector] in
let Ti792.2894: Int =
0 in
let Td793.2895: Float =
0. in
Ta791.2893.(Ti792.2894) <- Td793.2895 in
let Tu98.2882: Unit =
let Ta794.2886: [Float] =
[nvector] in
let Ti795.2887: Int =
1 in
let Td800.2888: Float =
let Td799.2889: Float =
let Td798.2890: Float =
let Ta796.2891: [Float] =
[vscan] in
let Ti797.2892: Int =
1 in
Ta796.2891.(Ti797.2892) in
sgn.2025(Td798.2890) in
-(Td799.2889) in
Ta794.2886.(Ti795.2887) <- Td800.2888 in
let Ta801.2883: [Float] =
[nvector] in
let Ti802.2884: Int =
2 in
let Td803.2885: Float =
0. in
Ta801.2883.(Ti802.2884) <- Td803.2885
else
let Ti804.2865: Int =
3 in
if rectside.2862 == Ti804.2865 then
let Tu101.2866: Unit =
let Ta805.2878: [Float] =
[nvector] in
let Ti806.2879: Int =
0 in
let Td807.2880: Float =
0. in
Ta805.2878.(Ti806.2879) <- Td807.2880 in
let Tu100.2867: Unit =
let Ta808.2875: [Float] =
[nvector] in
let Ti809.2876: Int =
1 in
let Td810.2877: Float =
0. in
Ta808.2875.(Ti809.2876) <- Td810.2877 in
let Ta811.2868: [Float] =
[nvector] in
let Ti812.2869: Int =
2 in
let Td817.2870: Float =
let Td816.2871: Float =
let Td815.2872: Float =
let Ta813.2873: [Float] =
[vscan] in
let Ti814.2874: Int =
2 in
Ta813.2873.(Ti814.2874) in
sgn.2025(Td815.2872) in
-(Td816.2871) in
Ta811.2868.(Ti812.2869) <- Td817.2870
else
() in 
let rec (get_nvector_plane.2107: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Unit) ((m.2108: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let Tu103.2848: Unit =
let Ta762.2858: [Float] =
[nvector] in
let Ti763.2859: Int =
0 in
let Td765.2860: Float =
let Td764.2861: Float =
o_param_a.1994(m.2108) in
-(Td764.2861) in
Ta762.2858.(Ti763.2859) <- Td765.2860 in
let Tu102.2849: Unit =
let Ta766.2854: [Float] =
[nvector] in
let Ti767.2855: Int =
1 in
let Td769.2856: Float =
let Td768.2857: Float =
o_param_b.1996(m.2108) in
-(Td768.2857) in
Ta766.2854.(Ti767.2855) <- Td769.2856 in
let Ta770.2850: [Float] =
[nvector] in
let Ti771.2851: Int =
2 in
let Td773.2852: Float =
let Td772.2853: Float =
o_param_c.1998(m.2108) in
-(Td772.2853) in
Ta770.2850.(Ti771.2851) <- Td773.2852 in 
let rec (get_nvector_second_norot.2109: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Unit) ((m.2110: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (p.2111: [Float])) =
let Tu106.2819: Unit =
let Ta736.2840: [Float] =
[nvector] in
let Ti737.2841: Int =
0 in
let Td743.2842: Float =
let Td741.2843: Float =
let Td739.2845: Float =
let Ti738.2847: Int =
0 in
p.2111.(Ti738.2847) in
let Td740.2846: Float =
o_param_x.2000(m.2110) in
(Td739.2845 - Td740.2846) in
let Td742.2844: Float =
o_param_a.1994(m.2110) in
(Td741.2843 * Td742.2844) in
Ta736.2840.(Ti737.2841) <- Td743.2842 in
let Tu105.2820: Unit =
let Ta744.2832: [Float] =
[nvector] in
let Ti745.2833: Int =
1 in
let Td751.2834: Float =
let Td749.2835: Float =
let Td747.2837: Float =
let Ti746.2839: Int =
1 in
p.2111.(Ti746.2839) in
let Td748.2838: Float =
o_param_y.2002(m.2110) in
(Td747.2837 - Td748.2838) in
let Td750.2836: Float =
o_param_b.1996(m.2110) in
(Td749.2835 * Td750.2836) in
Ta744.2832.(Ti745.2833) <- Td751.2834 in
let Tu104.2821: Unit =
let Ta752.2824: [Float] =
[nvector] in
let Ti753.2825: Int =
2 in
let Td759.2826: Float =
let Td757.2827: Float =
let Td755.2829: Float =
let Ti754.2831: Int =
2 in
p.2111.(Ti754.2831) in
let Td756.2830: Float =
o_param_z.2004(m.2110) in
(Td755.2829 - Td756.2830) in
let Td758.2828: Float =
o_param_c.1998(m.2110) in
(Td757.2827 * Td758.2828) in
Ta752.2824.(Ti753.2825) <- Td759.2826 in
let Ta760.2822: [Float] =
[nvector] in
let Tb761.2823: Bool =
o_isinvert.1990(m.2110) in
normalize_vector.2022(Ta760.2822, Tb761.2823) in 
let rec (get_nvector_second_rot.2112: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Unit) ((m.2113: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (p.2114: [Float])) =
let Tu112.2733: Unit =
let Ta656.2813: [Float] =
[nvector_w] in
let Ti657.2814: Int =
0 in
let Td661.2815: Float =
let Td659.2816: Float =
let Ti658.2818: Int =
0 in
p.2114.(Ti658.2818) in
let Td660.2817: Float =
o_param_x.2000(m.2113) in
(Td659.2816 - Td660.2817) in
Ta656.2813.(Ti657.2814) <- Td661.2815 in
let Tu111.2734: Unit =
let Ta662.2807: [Float] =
[nvector_w] in
let Ti663.2808: Int =
1 in
let Td667.2809: Float =
let Td665.2810: Float =
let Ti664.2812: Int =
1 in
p.2114.(Ti664.2812) in
let Td666.2811: Float =
o_param_y.2002(m.2113) in
(Td665.2810 - Td666.2811) in
Ta662.2807.(Ti663.2808) <- Td667.2809 in
let Tu110.2735: Unit =
let Ta668.2801: [Float] =
[nvector_w] in
let Ti669.2802: Int =
2 in
let Td673.2803: Float =
let Td671.2804: Float =
let Ti670.2806: Int =
2 in
p.2114.(Ti670.2806) in
let Td672.2805: Float =
o_param_z.2004(m.2113) in
(Td671.2804 - Td672.2805) in
Ta668.2801.(Ti669.2802) <- Td673.2803 in
let Tu109.2736: Unit =
let Ta674.2781: [Float] =
[nvector] in
let Ti675.2782: Int =
0 in
let Td693.2783: Float =
let Td680.2784: Float =
let Td678.2797: Float =
let Ta676.2799: [Float] =
[nvector_w] in
let Ti677.2800: Int =
0 in
Ta676.2799.(Ti677.2800) in
let Td679.2798: Float =
o_param_a.1994(m.2113) in
(Td678.2797 * Td679.2798) in
let Td692.2785: Float =
let Td691.2786: Float =
let Td685.2787: Float =
let Td683.2793: Float =
let Ta681.2795: [Float] =
[nvector_w] in
let Ti682.2796: Int =
1 in
Ta681.2795.(Ti682.2796) in
let Td684.2794: Float =
o_param_r3.2020(m.2113) in
(Td683.2793 * Td684.2794) in
let Td690.2788: Float =
let Td688.2789: Float =
let Ta686.2791: [Float] =
[nvector_w] in
let Ti687.2792: Int =
2 in
Ta686.2791.(Ti687.2792) in
let Td689.2790: Float =
o_param_r2.2018(m.2113) in
(Td688.2789 * Td689.2790) in
(Td685.2787 + Td690.2788) in
fhalf.1982(Td691.2786) in
(Td680.2784 + Td692.2785) in
Ta674.2781.(Ti675.2782) <- Td693.2783 in
let Tu108.2737: Unit =
let Ta694.2761: [Float] =
[nvector] in
let Ti695.2762: Int =
1 in
let Td713.2763: Float =
let Td700.2764: Float =
let Td698.2777: Float =
let Ta696.2779: [Float] =
[nvector_w] in
let Ti697.2780: Int =
1 in
Ta696.2779.(Ti697.2780) in
let Td699.2778: Float =
o_param_b.1996(m.2113) in
(Td698.2777 * Td699.2778) in
let Td712.2765: Float =
let Td711.2766: Float =
let Td705.2767: Float =
let Td703.2773: Float =
let Ta701.2775: [Float] =
[nvector_w] in
let Ti702.2776: Int =
0 in
Ta701.2775.(Ti702.2776) in
let Td704.2774: Float =
o_param_r3.2020(m.2113) in
(Td703.2773 * Td704.2774) in
let Td710.2768: Float =
let Td708.2769: Float =
let Ta706.2771: [Float] =
[nvector_w] in
let Ti707.2772: Int =
2 in
Ta706.2771.(Ti707.2772) in
let Td709.2770: Float =
o_param_r1.2016(m.2113) in
(Td708.2769 * Td709.2770) in
(Td705.2767 + Td710.2768) in
fhalf.1982(Td711.2766) in
(Td700.2764 + Td712.2765) in
Ta694.2761.(Ti695.2762) <- Td713.2763 in
let Tu107.2738: Unit =
let Ta714.2741: [Float] =
[nvector] in
let Ti715.2742: Int =
2 in
let Td733.2743: Float =
let Td720.2744: Float =
let Td718.2757: Float =
let Ta716.2759: [Float] =
[nvector_w] in
let Ti717.2760: Int =
2 in
Ta716.2759.(Ti717.2760) in
let Td719.2758: Float =
o_param_c.1998(m.2113) in
(Td718.2757 * Td719.2758) in
let Td732.2745: Float =
let Td731.2746: Float =
let Td725.2747: Float =
let Td723.2753: Float =
let Ta721.2755: [Float] =
[nvector_w] in
let Ti722.2756: Int =
0 in
Ta721.2755.(Ti722.2756) in
let Td724.2754: Float =
o_param_r2.2018(m.2113) in
(Td723.2753 * Td724.2754) in
let Td730.2748: Float =
let Td728.2749: Float =
let Ta726.2751: [Float] =
[nvector_w] in
let Ti727.2752: Int =
1 in
Ta726.2751.(Ti727.2752) in
let Td729.2750: Float =
o_param_r1.2016(m.2113) in
(Td728.2749 * Td729.2750) in
(Td725.2747 + Td730.2748) in
fhalf.1982(Td731.2746) in
(Td720.2744 + Td732.2745) in
Ta714.2741.(Ti715.2742) <- Td733.2743 in
let Ta734.2739: [Float] =
[nvector] in
let Tb735.2740: Bool =
o_isinvert.1990(m.2113) in
normalize_vector.2022(Ta734.2739, Tb735.2740) in 
let rec (get_nvector.2115: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Unit) ((m.2116: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (p.2117: [Float])) =
let m_shape.2727: Int =
o_form.1986(m.2116) in
let Ti651.2728: Int =
1 in
if m_shape.2727 == Ti651.2728 then
let Tu652.2732: Unit =
() in
get_nvector_rect.2105(Tu652.2732)
else
let Ti653.2729: Int =
2 in
if m_shape.2727 == Ti653.2729 then
get_nvector_plane.2107(m.2116)
else
let Ti654.2730: Int =
o_isrot.1992(m.2116) in
let Ti655.2731: Int =
0 in
if Ti654.2730 == Ti655.2731 then
get_nvector_second_norot.2109(m.2116, p.2117)
else
get_nvector_second_rot.2112(m.2116, p.2117) in 
let rec (utexture.2118: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Unit) ((m.2119: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (p.2120: [Float])) =
let m_tex.2569: Int =
o_texturetype.1984(m.2119) in
let Tu117.2570: Unit =
let Ta522.2724: [Float] =
[texture_color] in
let Ti523.2725: Int =
0 in
let Ti524.2726: Int =
o_color_red.2010(m.2119) in
Ta522.2724.(Ti523.2725) <- Ti524.2726 in
let Tu116.2571: Unit =
let Ta525.2721: [Float] =
[texture_color] in
let Ti526.2722: Int =
1 in
let Ti527.2723: Int =
o_color_green.2012(m.2119) in
Ta525.2721.(Ti526.2722) <- Ti527.2723 in
let Tu115.2572: Unit =
let Ta528.2718: [Float] =
[texture_color] in
let Ti529.2719: Int =
2 in
let Ti530.2720: Int =
o_color_blue.2014(m.2119) in
Ta528.2718.(Ti529.2719) <- Ti530.2720 in
let Ti531.2573: Int =
1 in
if m_tex.2569 == Ti531.2573 then
let w1.2688: Float =
let Td533.2715: Float =
let Ti532.2717: Int =
0 in
p.2120.(Ti532.2717) in
let Td534.2716: Float =
o_param_x.2000(m.2119) in
(Td533.2715 - Td534.2716) in
let flag1.2689: Bool =
let d1.2708: Float =
let Td537.2711: Float =
let Td536.2713: Float =
let Td535.2714: Float =
0.05 in
(w1.2688 * Td535.2714) in
floor(Td536.2713) in
let Td538.2712: Float =
20. in
(Td537.2711 * Td538.2712) in
let Td539.2709: Float =
10. in
let Td540.2710: Float =
(w1.2688 - d1.2708) in
if Td539.2709 <= Td540.2710 then
0
else
1 in
let w3.2690: Float =
let Td542.2705: Float =
let Ti541.2707: Int =
2 in
p.2120.(Ti541.2707) in
let Td543.2706: Float =
o_param_z.2004(m.2119) in
(Td542.2705 - Td543.2706) in
let flag2.2691: Bool =
let d2.2698: Float =
let Td546.2701: Float =
let Td545.2703: Float =
let Td544.2704: Float =
0.05 in
(w3.2690 * Td544.2704) in
floor(Td545.2703) in
let Td547.2702: Float =
20. in
(Td546.2701 * Td547.2702) in
let Td548.2699: Float =
10. in
let Td549.2700: Float =
(w3.2690 - d2.2698) in
if Td548.2699 <= Td549.2700 then
0
else
1 in
let Ta550.2692: [Float] =
[texture_color] in
let Ti551.2693: Int =
1 in
let Td555.2694: Float =
let Ti552.2695: Int =
0 in
if flag1.2689 == Ti552.2695 then
let Ti553.2697: Int =
0 in
if flag2.2691 == Ti553.2697 then
255.
else
0.
else
let Ti554.2696: Int =
0 in
if flag2.2691 == Ti554.2696 then
0.
else
255. in
Ta550.2692.(Ti551.2693) <- Td555.2694
else
let Ti556.2574: Int =
2 in
if m_tex.2569 == Ti556.2574 then
let w2.2671: Float =
let Td561.2683: Float =
let Td560.2684: Float =
let Td558.2685: Float =
let Ti557.2687: Int =
1 in
p.2120.(Ti557.2687) in
let Td559.2686: Float =
0.25 in
(Td558.2685 * Td559.2686) in
sin(Td560.2684) in
fsqr.1980(Td561.2683) in
let Tu113.2672: Unit =
let Ta562.2679: [Float] =
[texture_color] in
let Ti563.2680: Int =
0 in
let Td565.2681: Float =
let Td564.2682: Float =
255. in
(Td564.2682 * w2.2671) in
Ta562.2679.(Ti563.2680) <- Td565.2681 in
let Ta566.2673: [Float] =
[texture_color] in
let Ti567.2674: Int =
1 in
let Td571.2675: Float =
let Td568.2676: Float =
255. in
let Td570.2677: Float =
let Td569.2678: Float =
1. in
(Td569.2678 - w2.2671) in
(Td568.2676 * Td570.2677) in
Ta566.2673.(Ti567.2674) <- Td571.2675
else
let Ti572.2575: Int =
3 in
if m_tex.2569 == Ti572.2575 then
let w1.2640: Float =
let Td574.2668: Float =
let Ti573.2670: Int =
0 in
p.2120.(Ti573.2670) in
let Td575.2669: Float =
o_param_x.2000(m.2119) in
(Td574.2668 - Td575.2669) in
let w3.2641: Float =
let Td577.2665: Float =
let Ti576.2667: Int =
2 in
p.2120.(Ti576.2667) in
let Td578.2666: Float =
o_param_z.2004(m.2119) in
(Td577.2665 - Td578.2666) in
let w2.2642: Float =
let Td582.2660: Float =
let Td581.2662: Float =
let Td579.2663: Float =
fsqr.1980(w1.2640) in
let Td580.2664: Float =
fsqr.1980(w3.2641) in
(Td579.2663 + Td580.2664) in
sqrt(Td581.2662) in
let Td583.2661: Float =
10. in
(Td582.2660 / Td583.2661) in
let w4.2643: Float =
let Td585.2657: Float =
let Td584.2659: Float =
floor(w2.2642) in
(w2.2642 - Td584.2659) in
let Td586.2658: Float =
3.1415927 in
(Td585.2657 * Td586.2658) in
let cws.2644: Float =
let Td587.2656: Float =
cos(w4.2643) in
fsqr.1980(Td587.2656) in
let Tu114.2645: Unit =
let Ta588.2652: [Float] =
[texture_color] in
let Ti589.2653: Int =
1 in
let Td591.2654: Float =
let Td590.2655: Float =
255. in
(cws.2644 * Td590.2655) in
Ta588.2652.(Ti589.2653) <- Td591.2654 in
let Ta592.2646: [Float] =
[texture_color] in
let Ti593.2647: Int =
2 in
let Td597.2648: Float =
let Td595.2649: Float =
let Td594.2651: Float =
1. in
(Td594.2651 - cws.2644) in
let Td596.2650: Float =
255. in
(Td595.2649 * Td596.2650) in
Ta592.2646.(Ti593.2647) <- Td597.2648
else
let Ti598.2576: Int =
4 in
if m_tex.2569 == Ti598.2576 then
let w1.2577: Float =
let Td602.2634: Float =
let Td600.2637: Float =
let Ti599.2639: Int =
0 in
p.2120.(Ti599.2639) in
let Td601.2638: Float =
o_param_x.2000(m.2119) in
(Td600.2637 - Td601.2638) in
let Td604.2635: Float =
let Td603.2636: Float =
o_param_a.1994(m.2119) in
sqrt(Td603.2636) in
(Td602.2634 * Td604.2635) in
let w3.2578: Float =
let Td608.2628: Float =
let Td606.2631: Float =
let Ti605.2633: Int =
2 in
p.2120.(Ti605.2633) in
let Td607.2632: Float =
o_param_z.2004(m.2119) in
(Td606.2631 - Td607.2632) in
let Td610.2629: Float =
let Td609.2630: Float =
o_param_c.1998(m.2119) in
sqrt(Td609.2630) in
(Td608.2628 * Td610.2629) in
let w4.2579: Float =
let Td613.2625: Float =
let Td611.2626: Float =
fsqr.1980(w1.2577) in
let Td612.2627: Float =
fsqr.1980(w3.2578) in
(Td611.2626 + Td612.2627) in
sqrt(Td613.2625) in
let w7.2580: Float =
let Td614.2617: Float =
0.0001 in
let Ti615.2618: Int =
abs_float(w1.2577) in
if Td614.2617 <= Ti615.2618 then
let w5.2619: Int =
let Td616.2624: Float =
(w3.2578 / w1.2577) in
abs_float(Td616.2624) in
let Td617.2620: Float =
atan(w5.2619) in
let Td620.2621: Float =
let Td618.2622: Float =
30. in
let Td619.2623: Float =
3.1415927 in
(Td618.2622 / Td619.2623) in
(Td617.2620 * Td620.2621)
else
15. in
let w9.2581: Float =
let Td621.2616: Float =
floor(w7.2580) in
(w7.2580 - Td621.2616) in
let w2.2582: Float =
let Td625.2610: Float =
let Td623.2613: Float =
let Ti622.2615: Int =
1 in
p.2120.(Ti622.2615) in
let Td624.2614: Float =
o_param_y.2002(m.2119) in
(Td623.2613 - Td624.2614) in
let Td627.2611: Float =
let Td626.2612: Float =
o_param_b.1996(m.2119) in
sqrt(Td626.2612) in
(Td625.2610 * Td627.2611) in
let w8.2583: Float =
let Td628.2602: Float =
0.0001 in
let Ti629.2603: Int =
abs_float(w7.2580) in
if Td628.2602 <= Ti629.2603 then
let w6.2604: Int =
let Td630.2609: Float =
(w2.2582 / w4.2579) in
abs_float(Td630.2609) in
let Td631.2605: Float =
atan(w6.2604) in
let Td634.2606: Float =
let Td632.2607: Float =
30. in
let Td633.2608: Float =
3.1415927 in
(Td632.2607 / Td633.2608) in
(Td631.2605 * Td634.2606)
else
15. in
let w10.2584: Float =
let Td635.2601: Float =
floor(w8.2583) in
(w8.2583 - Td635.2601) in
let w11.2585: Float =
let Td640.2593: Float =
let Td636.2597: Float =
0.15 in
let Td639.2598: Float =
let Td638.2599: Float =
let Td637.2600: Float =
0.5 in
(Td637.2600 - w9.2581) in
fsqr.1980(Td638.2599) in
(Td636.2597 - Td639.2598) in
let Td643.2594: Float =
let Td642.2595: Float =
let Td641.2596: Float =
0.5 in
(Td641.2596 - w10.2584) in
fsqr.1980(Td642.2595) in
(Td640.2593 - Td643.2594) in
let Ta644.2586: [Float] =
[texture_color] in
let Ti645.2587: Int =
2 in
let Td650.2588: Float =
let Td646.2589: Float =
0. in
if w11.2585 <= Td646.2589 then
0.
else
let Td649.2590: Float =
let Td647.2591: Float =
255. in
let Td648.2592: Float =
0.3 in
(Td647.2591 / Td648.2592) in
(w11.2585 * Td649.2590) in
Ta644.2586.(Ti645.2587) <- Td650.2588
else
() in 
let rec (in_prod.2121: ([Float], [Float]) -> Float) ((v1.2122: [Float]), (v2.2123: [Float])) =
let Td516.2553: Float =
let Td510.2559: Float =
let Td507.2565: Float =
let Ti506.2568: Int =
0 in
v1.2122.(Ti506.2568) in
let Td509.2566: Float =
let Ti508.2567: Int =
0 in
v2.2123.(Ti508.2567) in
(Td507.2565 * Td509.2566) in
let Td515.2560: Float =
let Td512.2561: Float =
let Ti511.2564: Int =
1 in
v1.2122.(Ti511.2564) in
let Td514.2562: Float =
let Ti513.2563: Int =
1 in
v2.2123.(Ti513.2563) in
(Td512.2561 * Td514.2562) in
(Td510.2559 + Td515.2560) in
let Td521.2554: Float =
let Td518.2555: Float =
let Ti517.2558: Int =
2 in
v1.2122.(Ti517.2558) in
let Td520.2556: Float =
let Ti519.2557: Int =
2 in
v2.2123.(Ti519.2557) in
(Td518.2555 * Td520.2556) in
(Td516.2553 + Td521.2554) in 
let rec (accumulate_vec_mul.2124: ([Float], [Float], Float) -> Unit) ((v1.2125: [Float]), (v2.2126: [Float]), (w.2127: Float)) =
let Tu119.2530: Unit =
let Ti485.2546: Int =
0 in
let Td491.2547: Float =
let Td487.2548: Float =
let Ti486.2552: Int =
0 in
v1.2125.(Ti486.2552) in
let Td490.2549: Float =
let Td489.2550: Float =
let Ti488.2551: Int =
0 in
v2.2126.(Ti488.2551) in
(w.2127 * Td489.2550) in
(Td487.2548 + Td490.2549) in
v1.2125.(Ti485.2546) <- Td491.2547 in
let Tu118.2531: Unit =
let Ti492.2539: Int =
1 in
let Td498.2540: Float =
let Td494.2541: Float =
let Ti493.2545: Int =
1 in
v1.2125.(Ti493.2545) in
let Td497.2542: Float =
let Td496.2543: Float =
let Ti495.2544: Int =
1 in
v2.2126.(Ti495.2544) in
(w.2127 * Td496.2543) in
(Td494.2541 + Td497.2542) in
v1.2125.(Ti492.2539) <- Td498.2540 in
let Ti499.2532: Int =
2 in
let Td505.2533: Float =
let Td501.2534: Float =
let Ti500.2538: Int =
2 in
v1.2125.(Ti500.2538) in
let Td504.2535: Float =
let Td503.2536: Float =
let Ti502.2537: Int =
2 in
v2.2126.(Ti502.2537) in
(w.2127 * Td503.2536) in
(Td501.2534 + Td504.2535) in
v1.2125.(Ti499.2532) <- Td505.2533 in 
let rec (raytracing.2128: (Int, Float) -> Unit) ((nref.2129: Int), (energy.2130: Float)) =
let crashed_p.2392: Bool =
let Ta371.2528: [Int] =
[viewpoint] in
let Ta372.2529: [Float] =
[vscan] in
tracer.2102(Ta371.2528, Ta372.2529) in
let Tu131.2393: Unit =
let Ti373.2494: Int =
0 in
if crashed_p.2392 == Ti373.2494 then
let Ti374.2495: Int =
0 in
if nref.2129 == Ti374.2495 then
()
else
let hl.2496: Float =
let Td377.2525: Float =
let Ta375.2526: [Float] =
[vscan] in
let Ta376.2527: [Float] =
[light] in
in_prod.2121(Ta375.2526, Ta376.2527) in
-(Td377.2525) in
let Td378.2497: Float =
0. in
if hl.2496 <= Td378.2497 then
()
else
let ihl.2498: Float =
let Td381.2519: Float =
let Td380.2523: Float =
let Td379.2524: Float =
fsqr.1980(hl.2496) in
(Td379.2524 * hl.2496) in
(Td380.2523 * energy.2130) in
let Td384.2520: Float =
let Ta382.2521: [Float] =
[beam] in
let Ti383.2522: Int =
0 in
Ta382.2521.(Ti383.2522) in
(Td381.2519 * Td384.2520) in
let Tu121.2499: Unit =
let Ta385.2513: [Float] =
[rgb] in
let Ti386.2514: Int =
0 in
let Td390.2515: Float =
let Td389.2516: Float =
let Ta387.2517: [Float] =
[rgb] in
let Ti388.2518: Int =
0 in
Ta387.2517.(Ti388.2518) in
(Td389.2516 + ihl.2498) in
Ta385.2513.(Ti386.2514) <- Td390.2515 in
let Tu120.2500: Unit =
let Ta391.2507: [Float] =
[rgb] in
let Ti392.2508: Int =
1 in
let Td396.2509: Float =
let Td395.2510: Float =
let Ta393.2511: [Float] =
[rgb] in
let Ti394.2512: Int =
1 in
Ta393.2511.(Ti394.2512) in
(Td395.2510 + ihl.2498) in
Ta391.2507.(Ti392.2508) <- Td396.2509 in
let Ta397.2501: [Float] =
[rgb] in
let Ti398.2502: Int =
2 in
let Td402.2503: Float =
let Td401.2504: Float =
let Ta399.2505: [Float] =
[rgb] in
let Ti400.2506: Int =
2 in
Ta399.2505.(Ti400.2506) in
(Td401.2504 + ihl.2498) in
Ta397.2501.(Ti398.2502) <- Td402.2503
else
() in
let Ti403.2394: Int =
0 in
if crashed_p.2392 == Ti403.2394 then
()
else
let cobj.2395: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta404.2490: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
let Ti407.2491: Int =
let Ta405.2492: [Int] =
[crashed_object] in
let Ti406.2493: Int =
0 in
Ta405.2492.(Ti406.2493) in
Ta404.2490.(Ti407.2491) in
let Tu130.2396: Unit =
let Ta408.2489: [Int] =
[crashed_point] in
get_nvector.2115(cobj.2395, Ta408.2489) in
let bright.2397: Float =
let Tb414.2473: Bool =
let Ti409.2484: Int =
0 in
let Ta412.2485: [[Int]] =
let Ta410.2487: [[[Int]]] =
[or_net] in
let Ti411.2488: Int =
0 in
Ta410.2487.(Ti411.2488) in
let Ta413.2486: [Int] =
[crashed_point] in
shadow_check_one_or_matrix.2089(Ti409.2484, Ta412.2485, Ta413.2486) in
let Ti415.2474: Int =
0 in
if Tb414.2473 == Ti415.2474 then
let br.2475: Float =
let Td418.2481: Float =
let Ta416.2482: [Float] =
[nvector] in
let Ta417.2483: [Float] =
[light] in
in_prod.2121(Ta416.2482, Ta417.2483) in
-(Td418.2481) in
let br1.2476: Float =
let Td419.2479: Float =
0. in
if Td419.2479 <= br.2475 then
let Td420.2480: Float =
0.2 in
(br.2475 + Td420.2480)
else
0.2 in
let Td421.2477: Float =
(br1.2476 * energy.2130) in
let Td422.2478: Float =
o_diffuse.2006(cobj.2395) in
(Td421.2477 * Td422.2478)
else
0. in
let Tu129.2398: Unit =
let Ta423.2472: [Int] =
[crashed_point] in
utexture.2118(cobj.2395, Ta423.2472) in
let Tu128.2399: Unit =
let Ta424.2470: [Float] =
[rgb] in
let Ta425.2471: [Float] =
[texture_color] in
accumulate_vec_mul.2124(Ta424.2470, Ta425.2471, bright.2397) in
let Ti426.2400: Int =
4 in
if nref.2129 <= Ti426.2400 then
let Td427.2401: Float =
0.1 in
if energy.2130 <= Td427.2401 then
()
else
let w.2402: Float =
let Td428.2466: Float =
-2. in
let Td431.2467: Float =
let Ta429.2468: [Float] =
[vscan] in
let Ta430.2469: [Float] =
[nvector] in
in_prod.2121(Ta429.2468, Ta430.2469) in
(Td428.2466 * Td431.2467) in
let Tu127.2403: Unit =
let Ta432.2464: [Float] =
[vscan] in
let Ta433.2465: [Float] =
[nvector] in
accumulate_vec_mul.2124(Ta432.2464, Ta433.2465, w.2402) in
let m_surface.2404: Int =
o_reflectiontype.1988(cobj.2395) in
let Ti434.2405: Int =
1 in
if m_surface.2404 == Ti434.2405 then
let Td435.2431: Float =
0. in
let Td436.2432: Float =
o_hilight.2008(cobj.2395) in
if Td435.2431 == Td436.2432 then
()
else
let hl.2433: Float =
let Td439.2461: Float =
let Ta437.2462: [Float] =
[vscan] in
let Ta438.2463: [Float] =
[light] in
in_prod.2121(Ta437.2462, Ta438.2463) in
-(Td439.2461) in
let Td440.2434: Float =
0. in
if hl.2433 <= Td440.2434 then
()
else
let ihl.2435: Float =
let Td444.2456: Float =
let Td443.2458: Float =
let Td442.2459: Float =
let Td441.2460: Float =
fsqr.1980(hl.2433) in
fsqr.1980(Td441.2460) in
(Td442.2459 * energy.2130) in
(Td443.2458 * bright.2397) in
let Td445.2457: Float =
o_hilight.2008(cobj.2395) in
(Td444.2456 * Td445.2457) in
let Tu123.2436: Unit =
let Ta446.2450: [Float] =
[rgb] in
let Ti447.2451: Int =
0 in
let Td451.2452: Float =
let Td450.2453: Float =
let Ta448.2454: [Float] =
[rgb] in
let Ti449.2455: Int =
0 in
Ta448.2454.(Ti449.2455) in
(Td450.2453 + ihl.2435) in
Ta446.2450.(Ti447.2451) <- Td451.2452 in
let Tu122.2437: Unit =
let Ta452.2444: [Float] =
[rgb] in
let Ti453.2445: Int =
1 in
let Td457.2446: Float =
let Td456.2447: Float =
let Ta454.2448: [Float] =
[rgb] in
let Ti455.2449: Int =
1 in
Ta454.2448.(Ti455.2449) in
(Td456.2447 + ihl.2435) in
Ta452.2444.(Ti453.2445) <- Td457.2446 in
let Ta458.2438: [Float] =
[rgb] in
let Ti459.2439: Int =
2 in
let Td463.2440: Float =
let Td462.2441: Float =
let Ta460.2442: [Float] =
[rgb] in
let Ti461.2443: Int =
2 in
Ta460.2442.(Ti461.2443) in
(Td462.2441 + ihl.2435) in
Ta458.2438.(Ti459.2439) <- Td463.2440
else
let Ti464.2406: Int =
2 in
if m_surface.2404 == Ti464.2406 then
let Tu126.2407: Unit =
let Ta465.2426: [Int] =
[viewpoint] in
let Ti466.2427: Int =
0 in
let Ti469.2428: Int =
let Ta467.2429: [Int] =
[crashed_point] in
let Ti468.2430: Int =
0 in
Ta467.2429.(Ti468.2430) in
Ta465.2426.(Ti466.2427) <- Ti469.2428 in
let Tu125.2408: Unit =
let Ta470.2421: [Int] =
[viewpoint] in
let Ti471.2422: Int =
1 in
let Ti474.2423: Int =
let Ta472.2424: [Int] =
[crashed_point] in
let Ti473.2425: Int =
1 in
Ta472.2424.(Ti473.2425) in
Ta470.2421.(Ti471.2422) <- Ti474.2423 in
let Tu124.2409: Unit =
let Ta475.2416: [Int] =
[viewpoint] in
let Ti476.2417: Int =
2 in
let Ti479.2418: Int =
let Ta477.2419: [Int] =
[crashed_point] in
let Ti478.2420: Int =
2 in
Ta477.2419.(Ti478.2420) in
Ta475.2416.(Ti476.2417) <- Ti479.2418 in
let energy2.2410: Float =
let Td482.2413: Float =
let Td480.2414: Float =
1. in
let Td481.2415: Float =
o_diffuse.2006(cobj.2395) in
(Td480.2414 - Td481.2415) in
(energy.2130 * Td482.2413) in
let Ti484.2411: Int =
let Ti483.2412: Int =
1 in
(nref.2129 + Ti483.2412) in
raytracing.2128(Ti484.2411, energy2.2410)
else
()
else
() in 
let rec (write_rgb.2131: (Unit) -> Unit) ((Tu132.2132: Unit)) =
let red.2372: Int =
let Td361.2389: Float =
let Ta359.2390: [Float] =
[rgb] in
let Ti360.2391: Int =
0 in
Ta359.2390.(Ti360.2391) in
int_of_float(Td361.2389) in
let red.2373: Int =
let Ti362.2388: Int =
255 in
if red.2372 <= Ti362.2388 then
red.2372
else
255 in
let Tu134.2374: Unit =
print_byte(red.2373) in
let green.2375: Int =
let Td365.2385: Float =
let Ta363.2386: [Float] =
[rgb] in
let Ti364.2387: Int =
1 in
Ta363.2386.(Ti364.2387) in
int_of_float(Td365.2385) in
let green.2376: Int =
let Ti366.2384: Int =
255 in
if green.2375 <= Ti366.2384 then
green.2375
else
255 in
let Tu133.2377: Unit =
print_byte(green.2376) in
let blue.2378: Int =
let Td369.2381: Float =
let Ta367.2382: [Float] =
[rgb] in
let Ti368.2383: Int =
2 in
Ta367.2382.(Ti368.2383) in
int_of_float(Td369.2381) in
let blue.2379: Int =
let Ti370.2380: Int =
255 in
if blue.2378 <= Ti370.2380 then
blue.2378
else
255 in
print_byte(blue.2379) in 
let rec (write_ppm_header.2133: (Unit) -> Unit) ((Tu135.2134: Unit)) =
let Tu143.2349: Unit =
let Ti344.2371: Int =
80 in
print_byte(Ti344.2371) in
let Tu142.2350: Unit =
let Ti347.2368: Int =
let Ti345.2369: Int =
48 in
let Ti346.2370: Int =
6 in
(Ti345.2369 + Ti346.2370) in
print_byte(Ti347.2368) in
let Tu141.2351: Unit =
let Ti348.2367: Int =
10 in
print_byte(Ti348.2367) in
let Tu140.2352: Unit =
let Ti351.2364: Int =
let Ta349.2365: [Int] =
[size] in
let Ti350.2366: Int =
0 in
Ta349.2365.(Ti350.2366) in
print_int(Ti351.2364) in
let Tu139.2353: Unit =
let Ti352.2363: Int =
32 in
print_byte(Ti352.2363) in
let Tu138.2354: Unit =
let Ti355.2360: Int =
let Ta353.2361: [Int] =
[size] in
let Ti354.2362: Int =
1 in
Ta353.2361.(Ti354.2362) in
print_int(Ti355.2360) in
let Tu137.2355: Unit =
let Ti356.2359: Int =
10 in
print_byte(Ti356.2359) in
let Tu136.2356: Unit =
let Ti357.2358: Int =
255 in
print_int(Ti357.2358) in
let Ti358.2357: Int =
10 in
print_byte(Ti358.2357) in 
let rec (scan_point.2135: (Int) -> Unit) ((scanx.2136: Int)) =
let Ti249.2236: Int =
let Ta247.2347: [Int] =
[size] in
let Ti248.2348: Int =
0 in
Ta247.2347.(Ti248.2348) in
if Ti249.2236 <= scanx.2136 then
()
else
let sscanx.2237: Float =
let Td254.2339: Float =
let Td250.2343: Float =
float_of_int(scanx.2136) in
let Td253.2344: Float =
let Ta251.2345: [Float] =
[scan_offset] in
let Ti252.2346: Int =
0 in
Ta251.2345.(Ti252.2346) in
(Td250.2343 - Td253.2344) in
let Td257.2340: Float =
let Ta255.2341: [Float] =
[scan_d] in
let Ti256.2342: Int =
0 in
Ta255.2341.(Ti256.2342) in
(Td254.2339 * Td257.2340) in
let Tu157.2238: Unit =
let Ta258.2329: [Float] =
[vscan] in
let Ti259.2330: Int =
0 in
let Td267.2331: Float =
let Td263.2332: Float =
let Td262.2336: Float =
let Ta260.2337: [Float] =
[cos_v] in
let Ti261.2338: Int =
1 in
Ta260.2337.(Ti261.2338) in
(sscanx.2237 * Td262.2336) in
let Td266.2333: Float =
let Ta264.2334: [Float] =
[wscan] in
let Ti265.2335: Int =
0 in
Ta264.2334.(Ti265.2335) in
(Td263.2332 + Td266.2333) in
Ta258.2329.(Ti259.2330) <- Td267.2331 in
let Tu156.2239: Unit =
let Ta268.2316: [Float] =
[vscan] in
let Ti269.2317: Int =
1 in
let Td280.2318: Float =
let Td276.2319: Float =
let Td272.2323: Float =
let Ta270.2327: [Float] =
[scan_sscany] in
let Ti271.2328: Int =
0 in
Ta270.2327.(Ti271.2328) in
let Td275.2324: Float =
let Ta273.2325: [Float] =
[cos_v] in
let Ti274.2326: Int =
0 in
Ta273.2325.(Ti274.2326) in
(Td272.2323 * Td275.2324) in
let Td279.2320: Float =
let Ta277.2321: [Float] =
[vp] in
let Ti278.2322: Int =
1 in
Ta277.2321.(Ti278.2322) in
(Td276.2319 - Td279.2320) in
Ta268.2316.(Ti269.2317) <- Td280.2318 in
let Tu155.2240: Unit =
let Ta281.2305: [Float] =
[vscan] in
let Ti282.2306: Int =
2 in
let Td291.2307: Float =
let Td287.2308: Float =
let Td283.2312: Float =
-(sscanx.2237) in
let Td286.2313: Float =
let Ta284.2314: [Float] =
[sin_v] in
let Ti285.2315: Int =
1 in
Ta284.2314.(Ti285.2315) in
(Td283.2312 * Td286.2313) in
let Td290.2309: Float =
let Ta288.2310: [Float] =
[wscan] in
let Ti289.2311: Int =
2 in
Ta288.2310.(Ti289.2311) in
(Td287.2308 + Td290.2309) in
Ta281.2305.(Ti282.2306) <- Td291.2307 in
let metric.2241: Float =
let Td296.2300: Float =
let Td292.2301: Float =
fsqr.1980(sscanx.2237) in
let Td295.2302: Float =
let Ta293.2303: [Float] =
[scan_met1] in
let Ti294.2304: Int =
0 in
Ta293.2303.(Ti294.2304) in
(Td292.2301 + Td295.2302) in
sqrt(Td296.2300) in
let Tu154.2242: Unit =
let Ta297.2294: [Float] =
[vscan] in
let Ti298.2295: Int =
0 in
let Td302.2296: Float =
let Td301.2297: Float =
let Ta299.2298: [Float] =
[vscan] in
let Ti300.2299: Int =
0 in
Ta299.2298.(Ti300.2299) in
(Td301.2297 / metric.2241) in
Ta297.2294.(Ti298.2295) <- Td302.2296 in
let Tu153.2243: Unit =
let Ta303.2288: [Float] =
[vscan] in
let Ti304.2289: Int =
1 in
let Td308.2290: Float =
let Td307.2291: Float =
let Ta305.2292: [Float] =
[vscan] in
let Ti306.2293: Int =
1 in
Ta305.2292.(Ti306.2293) in
(Td307.2291 / metric.2241) in
Ta303.2288.(Ti304.2289) <- Td308.2290 in
let Tu152.2244: Unit =
let Ta309.2282: [Float] =
[vscan] in
let Ti310.2283: Int =
2 in
let Td314.2284: Float =
let Td313.2285: Float =
let Ta311.2286: [Float] =
[vscan] in
let Ti312.2287: Int =
2 in
Ta311.2286.(Ti312.2287) in
(Td313.2285 / metric.2241) in
Ta309.2282.(Ti310.2283) <- Td314.2284 in
let Tu151.2245: Unit =
let Ta315.2277: [Int] =
[viewpoint] in
let Ti316.2278: Int =
0 in
let Ti319.2279: Int =
let Ta317.2280: [Int] =
[view] in
let Ti318.2281: Int =
0 in
Ta317.2280.(Ti318.2281) in
Ta315.2277.(Ti316.2278) <- Ti319.2279 in
let Tu150.2246: Unit =
let Ta320.2272: [Int] =
[viewpoint] in
let Ti321.2273: Int =
1 in
let Ti324.2274: Int =
let Ta322.2275: [Int] =
[view] in
let Ti323.2276: Int =
1 in
Ta322.2275.(Ti323.2276) in
Ta320.2272.(Ti321.2273) <- Ti324.2274 in
let Tu149.2247: Unit =
let Ta325.2267: [Int] =
[viewpoint] in
let Ti326.2268: Int =
2 in
let Ti329.2269: Int =
let Ta327.2270: [Int] =
[view] in
let Ti328.2271: Int =
2 in
Ta327.2270.(Ti328.2271) in
Ta325.2267.(Ti326.2268) <- Ti329.2269 in
let Tu148.2248: Unit =
let Ta330.2264: [Float] =
[rgb] in
let Ti331.2265: Int =
0 in
let Td332.2266: Float =
0. in
Ta330.2264.(Ti331.2265) <- Td332.2266 in
let Tu147.2249: Unit =
let Ta333.2261: [Float] =
[rgb] in
let Ti334.2262: Int =
1 in
let Td335.2263: Float =
0. in
Ta333.2261.(Ti334.2262) <- Td335.2263 in
let Tu146.2250: Unit =
let Ta336.2258: [Float] =
[rgb] in
let Ti337.2259: Int =
2 in
let Td338.2260: Float =
0. in
Ta336.2258.(Ti337.2259) <- Td338.2260 in
let Tu145.2251: Unit =
let Ti339.2256: Int =
0 in
let Td340.2257: Float =
1. in
raytracing.2128(Ti339.2256, Td340.2257) in
let Tu144.2252: Unit =
let Tu341.2255: Unit =
() in
write_rgb.2131(Tu341.2255) in
let Ti343.2253: Int =
let Ti342.2254: Int =
1 in
(scanx.2136 + Ti342.2254) in
scan_point.2135(Ti343.2253) in 
let rec (scan_line.2137: (Int) -> Unit) ((scany.2138: Int)) =
let Ti197.2177: Int =
let Ta195.2234: [Int] =
[size] in
let Ti196.2235: Int =
0 in
Ta195.2234.(Ti196.2235) in
if Ti197.2177 <= scany.2138 then
()
else
let Tu162.2178: Unit =
let Ta198.2221: [Float] =
[scan_sscany] in
let Ti199.2222: Int =
0 in
let Td209.2223: Float =
let t.2224: Float =
let Td204.2228: Float =
let Td202.2230: Float =
let Ta200.2232: [Float] =
[scan_offset] in
let Ti201.2233: Int =
0 in
Ta200.2232.(Ti201.2233) in
let Td203.2231: Float =
1. in
(Td202.2230 - Td203.2231) in
let Td205.2229: Float =
float_of_int(scany.2138) in
(Td204.2228 - Td205.2229) in
let Td208.2225: Float =
let Ta206.2226: [Float] =
[scan_d] in
let Ti207.2227: Int =
0 in
Ta206.2226.(Ti207.2227) in
(Td208.2225 * t.2224) in
Ta198.2221.(Ti199.2222) <- Td209.2223 in
let Tu161.2179: Unit =
let Ta210.2213: [Float] =
[scan_met1] in
let Ti211.2214: Int =
0 in
let Td217.2215: Float =
let Td215.2216: Float =
let Td214.2218: Float =
let Ta212.2219: [Float] =
[scan_sscany] in
let Ti213.2220: Int =
0 in
Ta212.2219.(Ti213.2220) in
fsqr.1980(Td214.2218) in
let Td216.2217: Float =
40000. in
(Td215.2216 + Td216.2217) in
Ta210.2213.(Ti211.2214) <- Td217.2215 in
let t1.2180: Float =
let Td220.2207: Float =
let Ta218.2211: [Float] =
[scan_sscany] in
let Ti219.2212: Int =
0 in
Ta218.2211.(Ti219.2212) in
let Td223.2208: Float =
let Ta221.2209: [Float] =
[sin_v] in
let Ti222.2210: Int =
0 in
Ta221.2209.(Ti222.2210) in
(Td220.2207 * Td223.2208) in
let Tu160.2181: Unit =
let Ta224.2197: [Float] =
[wscan] in
let Ti225.2198: Int =
0 in
let Td233.2199: Float =
let Td229.2200: Float =
let Td228.2204: Float =
let Ta226.2205: [Float] =
[sin_v] in
let Ti227.2206: Int =
1 in
Ta226.2205.(Ti227.2206) in
(t1.2180 * Td228.2204) in
let Td232.2201: Float =
let Ta230.2202: [Float] =
[vp] in
let Ti231.2203: Int =
0 in
Ta230.2202.(Ti231.2203) in
(Td229.2200 - Td232.2201) in
Ta224.2197.(Ti225.2198) <- Td233.2199 in
let Tu159.2182: Unit =
let Ta234.2187: [Float] =
[wscan] in
let Ti235.2188: Int =
2 in
let Td243.2189: Float =
let Td239.2190: Float =
let Td238.2194: Float =
let Ta236.2195: [Float] =
[cos_v] in
let Ti237.2196: Int =
1 in
Ta236.2195.(Ti237.2196) in
(t1.2180 * Td238.2194) in
let Td242.2191: Float =
let Ta240.2192: [Float] =
[vp] in
let Ti241.2193: Int =
2 in
Ta240.2192.(Ti241.2193) in
(Td239.2190 - Td242.2191) in
Ta234.2187.(Ti235.2188) <- Td243.2189 in
let Tu158.2183: Unit =
let Ti244.2186: Int =
0 in
scan_point.2135(Ti244.2186) in
let Ti246.2184: Int =
let Ti245.2185: Int =
1 in
(scany.2138 + Ti245.2185) in
scan_line.2137(Ti246.2184) in 
let rec (scan_start.2139: (Unit) -> Unit) ((Tu163.2140: Unit)) =
let Tu166.2160: Unit =
let Tu182.2176: Unit =
() in
write_ppm_header.2133(Tu182.2176) in
let sizex.2161: Float =
let Ti185.2173: Int =
let Ta183.2174: [Int] =
[size] in
let Ti184.2175: Int =
0 in
Ta183.2174.(Ti184.2175) in
float_of_int(Ti185.2173) in
let Tu165.2162: Unit =
let Ta186.2169: [Float] =
[scan_d] in
let Ti187.2170: Int =
0 in
let Td189.2171: Float =
let Td188.2172: Float =
128. in
(Td188.2172 / sizex.2161) in
Ta186.2169.(Ti187.2170) <- Td189.2171 in
let Tu164.2163: Unit =
let Ta190.2165: [Float] =
[scan_offset] in
let Ti191.2166: Int =
0 in
let Td193.2167: Float =
let Td192.2168: Float =
2. in
(sizex.2161 / Td192.2168) in
Ta190.2165.(Ti191.2166) <- Td193.2167 in
let Ti194.2164: Int =
0 in
scan_line.2137(Ti194.2164) in 
let rec (rt.2141: (Int, Int, Bool) -> Unit) ((size_x.2142: Int), (size_y.2143: Int), (debug_p.2144: Bool)) =
let Tu170.2148: Unit =
let Ta174.2158: [Int] =
[size] in
let Ti175.2159: Int =
0 in
Ta174.2158.(Ti175.2159) <- size_x.2142 in
let Tu169.2149: Unit =
let Ta176.2156: [Int] =
[size] in
let Ti177.2157: Int =
1 in
Ta176.2156.(Ti177.2157) <- size_y.2143 in
let Tu168.2150: Unit =
let Ta178.2154: [Bool] =
[dbg] in
let Ti179.2155: Int =
0 in
Ta178.2154.(Ti179.2155) <- debug_p.2144 in
let Tu167.2151: Unit =
let Tu180.2153: Unit =
() in
read_parameter.2043(Tu180.2153) in
let Tu181.2152: Unit =
() in
scan_start.2139(Tu181.2152) in 
let Ti171.2145: Int =
768 in
let Ti172.2146: Int =
768 in
let Ti173.2147: Int =
0 in
rt.2141(Ti171.2145, Ti172.2146, Ti173.2147)

Optimize---
let rec (xor.1977: (Bool, Bool) -> Bool) ((x.1978: Bool), (y.1979: Bool)) =
let Ti1975.4438: Int =
0 in
if x.1978 == Ti1975.4438 then
y.1979
else
let Ti1976.4439: Int =
0 in
if y.1979 == Ti1976.4439 then
1
else
0 in 
let rec (fsqr.1980: (Float) -> Float) ((x.1981: Float)) =
(x.1981 * x.1981) in 
let rec (fhalf.1982: (Float) -> Float) ((x.1983: Float)) =
let Td1974.4437: Float =
2. in
(x.1983 / Td1974.4437) in 
let rec (o_texturetype.1984: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.1985: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((m_tex.4427: Int), (xm_shape.4428: Int), (xm_surface.4429: Int), (xm_isrot.4430: Int), (xm_abc.4431: [Float]), (xm_xyz.4432: [Float]), (xm_invert.4433: Bool), (xm_surfparams.4434: [Float]), (xm_color.4435: [Int]), (xm_rot123.4436: [Float])) =
m.1985 in
m_tex.4427 in 
let rec (o_form.1986: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.1987: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4417: Int), (m_shape.4418: Int), (xm_surface.4419: Int), (xm_isrot.4420: Int), (xm_abc.4421: [Float]), (xm_xyz.4422: [Float]), (xm_invert.4423: Bool), (xm_surfparams.4424: [Float]), (xm_color.4425: [Int]), (xm_rot123.4426: [Float])) =
m.1987 in
m_shape.4418 in 
let rec (o_reflectiontype.1988: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.1989: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4407: Int), (xm_shape.4408: Int), (m_surface.4409: Int), (xm_isrot.4410: Int), (xm_abc.4411: [Float]), (xm_xyz.4412: [Float]), (xm_invert.4413: Bool), (xm_surfparams.4414: [Float]), (xm_color.4415: [Int]), (xm_rot123.4416: [Float])) =
m.1989 in
m_surface.4409 in 
let rec (o_isinvert.1990: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m.1991: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((m_tex.4397: Int), (m_shape.4398: Int), (m_surface.4399: Int), (m_isrot.4400: Int), (xm_abc.4401: [Float]), (xm_xyz.4402: [Float]), (m_invert.4403: Bool), (xm_surfparams.4404: [Float]), (xm_color.4405: [Int]), (xm_rot123.4406: [Float])) =
m.1991 in
m_invert.4403 in 
let rec (o_isrot.1992: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.1993: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4387: Int), (xm_shape.4388: Int), (xm_surface.4389: Int), (m_isrot.4390: Int), (xm_abc.4391: [Float]), (xm_xyz.4392: [Float]), (xm_invert.4393: Bool), (xm_surfparams.4394: [Float]), (xm_color.4395: [Int]), (xm_rot123.4396: [Float])) =
m.1993 in
m_isrot.4390 in 
let rec (o_param_a.1994: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.1995: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4376: Int), (xm_shape.4377: Int), (xm_surface.4378: Int), (xm_isrot.4379: Int), (m_abc.4380: [Float]), (xm_xyz.4381: [Float]), (xm_invert.4382: Bool), (xm_surfparams.4383: [Float]), (xm_color.4384: [Int]), (xm_rot123.4385: [Float])) =
m.1995 in
let Ti1973.4386: Int =
0 in
m_abc.4380.(Ti1973.4386) in 
let rec (o_param_b.1996: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.1997: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4365: Int), (xm_shape.4366: Int), (xm_surface.4367: Int), (xm_isrot.4368: Int), (m_abc.4369: [Float]), (xm_xyz.4370: [Float]), (xm_invert.4371: Bool), (xm_surfparams.4372: [Float]), (xm_color.4373: [Int]), (xm_rot123.4374: [Float])) =
m.1997 in
let Ti1972.4375: Int =
1 in
m_abc.4369.(Ti1972.4375) in 
let rec (o_param_c.1998: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.1999: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4354: Int), (xm_shape.4355: Int), (xm_surface.4356: Int), (xm_isrot.4357: Int), (m_abc.4358: [Float]), (xm_xyz.4359: [Float]), (xm_invert.4360: Bool), (xm_surfparams.4361: [Float]), (xm_color.4362: [Int]), (xm_rot123.4363: [Float])) =
m.1999 in
let Ti1971.4364: Int =
2 in
m_abc.4358.(Ti1971.4364) in 
let rec (o_param_x.2000: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2001: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4343: Int), (xm_shape.4344: Int), (xm_surface.4345: Int), (xm_isrot.4346: Int), (xm_abc.4347: [Float]), (m_xyz.4348: [Float]), (xm_invert.4349: Bool), (xm_surfparams.4350: [Float]), (xm_color.4351: [Int]), (xm_rot123.4352: [Float])) =
m.2001 in
let Ti1970.4353: Int =
0 in
m_xyz.4348.(Ti1970.4353) in 
let rec (o_param_y.2002: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2003: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4332: Int), (xm_shape.4333: Int), (xm_surface.4334: Int), (xm_isrot.4335: Int), (xm_abc.4336: [Float]), (m_xyz.4337: [Float]), (xm_invert.4338: Bool), (xm_surfparams.4339: [Float]), (xm_color.4340: [Int]), (xm_rot123.4341: [Float])) =
m.2003 in
let Ti1969.4342: Int =
1 in
m_xyz.4337.(Ti1969.4342) in 
let rec (o_param_z.2004: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2005: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4321: Int), (xm_shape.4322: Int), (xm_surface.4323: Int), (xm_isrot.4324: Int), (xm_abc.4325: [Float]), (m_xyz.4326: [Float]), (xm_invert.4327: Bool), (xm_surfparams.4328: [Float]), (xm_color.4329: [Int]), (xm_rot123.4330: [Float])) =
m.2005 in
let Ti1968.4331: Int =
2 in
m_xyz.4326.(Ti1968.4331) in 
let rec (o_diffuse.2006: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2007: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4310: Int), (xm_shape.4311: Int), (xm_surface.4312: Int), (xm_isrot.4313: Int), (xm_abc.4314: [Float]), (xm_xyz.4315: [Float]), (xm_invert.4316: Bool), (m_surfparams.4317: [Float]), (xm_color.4318: [Int]), (xm_rot123.4319: [Float])) =
m.2007 in
let Ti1967.4320: Int =
0 in
m_surfparams.4317.(Ti1967.4320) in 
let rec (o_hilight.2008: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2009: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4299: Int), (xm_shape.4300: Int), (xm_surface.4301: Int), (xm_isrot.4302: Int), (xm_abc.4303: [Float]), (xm_xyz.4304: [Float]), (xm_invert.4305: Bool), (m_surfparams.4306: [Float]), (xm_color.4307: [Int]), (xm_rot123.4308: [Float])) =
m.2009 in
let Ti1966.4309: Int =
1 in
m_surfparams.4306.(Ti1966.4309) in 
let rec (o_color_red.2010: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.2011: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4288: Int), (xm_shape.4289: Int), (m_surface.4290: Int), (xm_isrot.4291: Int), (xm_abc.4292: [Float]), (xm_xyz.4293: [Float]), (xm_invert.4294: Bool), (xm_surfparams.4295: [Float]), (m_color.4296: [Int]), (xm_rot123.4297: [Float])) =
m.2011 in
let Ti1965.4298: Int =
0 in
m_color.4296.(Ti1965.4298) in 
let rec (o_color_green.2012: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.2013: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4277: Int), (xm_shape.4278: Int), (m_surface.4279: Int), (xm_isrot.4280: Int), (xm_abc.4281: [Float]), (xm_xyz.4282: [Float]), (xm_invert.4283: Bool), (xm_surfparams.4284: [Float]), (m_color.4285: [Int]), (xm_rot123.4286: [Float])) =
m.2013 in
let Ti1964.4287: Int =
1 in
m_color.4285.(Ti1964.4287) in 
let rec (o_color_blue.2014: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Int) ((m.2015: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4266: Int), (xm_shape.4267: Int), (m_surface.4268: Int), (xm_isrot.4269: Int), (xm_abc.4270: [Float]), (xm_xyz.4271: [Float]), (xm_invert.4272: Bool), (xm_surfparams.4273: [Float]), (m_color.4274: [Int]), (xm_rot123.4275: [Float])) =
m.2015 in
let Ti1963.4276: Int =
2 in
m_color.4274.(Ti1963.4276) in 
let rec (o_param_r1.2016: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2017: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4255: Int), (xm_shape.4256: Int), (xm_surface.4257: Int), (xm_isrot.4258: Int), (xm_abc.4259: [Float]), (xm_xyz.4260: [Float]), (xm_invert.4261: Bool), (xm_surfparams.4262: [Float]), (xm_color.4263: [Int]), (m_rot123.4264: [Float])) =
m.2017 in
let Ti1962.4265: Int =
0 in
m_rot123.4264.(Ti1962.4265) in 
let rec (o_param_r2.2018: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2019: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4244: Int), (xm_shape.4245: Int), (xm_surface.4246: Int), (xm_isrot.4247: Int), (xm_abc.4248: [Float]), (xm_xyz.4249: [Float]), (xm_invert.4250: Bool), (xm_surfparams.4251: [Float]), (xm_color.4252: [Int]), (m_rot123.4253: [Float])) =
m.2019 in
let Ti1961.4254: Int =
1 in
m_rot123.4253.(Ti1961.4254) in 
let rec (o_param_r3.2020: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Float) ((m.2021: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let ((xm_tex.4233: Int), (xm_shape.4234: Int), (xm_surface.4235: Int), (xm_isrot.4236: Int), (xm_abc.4237: [Float]), (xm_xyz.4238: [Float]), (xm_invert.4239: Bool), (xm_surfparams.4240: [Float]), (xm_color.4241: [Int]), (m_rot123.4242: [Float])) =
m.2021 in
let Ti1960.4243: Int =
2 in
m_rot123.4242.(Ti1960.4243) in 
let rec (normalize_vector.2022: ([Float], Bool) -> Unit) ((v.2023: [Float]), (inv.2024: Bool)) =
let n0.4205: Float =
let Td1946.4222: Float =
let Td1942.4223: Float =
let Td1938.4227: Float =
let Td1937.4231: Float =
let Ti1936.4232: Int =
0 in
v.2023.(Ti1936.4232) in
fsqr.1980(Td1937.4231) in
let Td1941.4228: Float =
let Td1940.4229: Float =
let Ti1939.4230: Int =
1 in
v.2023.(Ti1939.4230) in
fsqr.1980(Td1940.4229) in
(Td1938.4227 + Td1941.4228) in
let Td1945.4224: Float =
let Td1944.4225: Float =
let Ti1943.4226: Int =
2 in
v.2023.(Ti1943.4226) in
fsqr.1980(Td1944.4225) in
(Td1942.4223 + Td1945.4224) in
sqrt(Td1946.4222) in
let n.4206: Float =
let Ti1947.4221: Int =
0 in
if inv.2024 == Ti1947.4221 then
n0.4205
else
-(n0.4205) in
let Tu2.4207: Unit =
let Ti1948.4217: Int =
0 in
let Td1951.4218: Float =
let Td1950.4219: Float =
let Ti1949.4220: Int =
0 in
v.2023.(Ti1949.4220) in
(Td1950.4219 / n.4206) in
v.2023.(Ti1948.4217) <- Td1951.4218 in
let Tu1.4208: Unit =
let Ti1952.4213: Int =
1 in
let Td1955.4214: Float =
let Td1954.4215: Float =
let Ti1953.4216: Int =
1 in
v.2023.(Ti1953.4216) in
(Td1954.4215 / n.4206) in
v.2023.(Ti1952.4213) <- Td1955.4214 in
let Ti1956.4209: Int =
2 in
let Td1959.4210: Float =
let Td1958.4211: Float =
let Ti1957.4212: Int =
2 in
v.2023.(Ti1957.4212) in
(Td1958.4211 / n.4206) in
v.2023.(Ti1956.4209) <- Td1959.4210 in 
let rec (sgn.2025: (Float) -> Float) ((x.2026: Float)) =
let Td1935.4204: Float =
0. in
if x.2026 <= Td1935.4204 then
-1.
else
1. in 
let rec (rad.2027: (Float) -> Float) ((x.2028: Float)) =
let Td1934.4203: Float =
0.017453293 in
(x.2028 * Td1934.4203) in 
let rec (read_environ.2029: (Unit) -> Unit) ((Tu3.2030: Unit)) =
let Tu19.4075: Unit =
let Ta1831.4199: [Float] =
[screen] in
let Ti1832.4200: Int =
0 in
let Td1834.4201: Float =
let Tu1833.4202: Unit =
() in
read_float(Tu1833.4202) in
Ta1831.4199.(Ti1832.4200) <- Td1834.4201 in
let Tu18.4076: Unit =
let Ta1835.4195: [Float] =
[screen] in
let Ti1836.4196: Int =
1 in
let Td1838.4197: Float =
let Tu1837.4198: Unit =
() in
read_float(Tu1837.4198) in
Ta1835.4195.(Ti1836.4196) <- Td1838.4197 in
let Tu17.4077: Unit =
let Ta1839.4191: [Float] =
[screen] in
let Ti1840.4192: Int =
2 in
let Td1842.4193: Float =
let Tu1841.4194: Unit =
() in
read_float(Tu1841.4194) in
Ta1839.4191.(Ti1840.4192) <- Td1842.4193 in
let v1.4078: Float =
let Td1844.4189: Float =
let Tu1843.4190: Unit =
() in
read_float(Tu1843.4190) in
rad.2027(Td1844.4189) in
let Tu16.4079: Unit =
let Ta1845.4186: [Float] =
[cos_v] in
let Ti1846.4187: Int =
0 in
let Td1847.4188: Float =
cos(v1.4078) in
Ta1845.4186.(Ti1846.4187) <- Td1847.4188 in
let Tu15.4080: Unit =
let Ta1848.4183: [Float] =
[sin_v] in
let Ti1849.4184: Int =
0 in
let Td1850.4185: Float =
sin(v1.4078) in
Ta1848.4183.(Ti1849.4184) <- Td1850.4185 in
let v2.4081: Float =
let Td1852.4181: Float =
let Tu1851.4182: Unit =
() in
read_float(Tu1851.4182) in
rad.2027(Td1852.4181) in
let Tu14.4082: Unit =
let Ta1853.4178: [Float] =
[cos_v] in
let Ti1854.4179: Int =
1 in
let Td1855.4180: Float =
cos(v2.4081) in
Ta1853.4178.(Ti1854.4179) <- Td1855.4180 in
let Tu13.4083: Unit =
let Ta1856.4175: [Float] =
[sin_v] in
let Ti1857.4176: Int =
1 in
let Td1858.4177: Float =
sin(v2.4081) in
Ta1856.4175.(Ti1857.4176) <- Td1858.4177 in
let nl.4084: Int =
let Tu1859.4174: Unit =
() in
read_float(Tu1859.4174) in
let l1.4085: Float =
let Td1861.4172: Float =
let Tu1860.4173: Unit =
() in
read_float(Tu1860.4173) in
rad.2027(Td1861.4172) in
let sl1.4086: Float =
sin(l1.4085) in
let Tu12.4087: Unit =
let Ta1862.4169: [Float] =
[light] in
let Ti1863.4170: Int =
1 in
let Td1864.4171: Float =
-(sl1.4086) in
Ta1862.4169.(Ti1863.4170) <- Td1864.4171 in
let l2.4088: Float =
let Td1866.4167: Float =
let Tu1865.4168: Unit =
() in
read_float(Tu1865.4168) in
rad.2027(Td1866.4167) in
let cl1.4089: Float =
cos(l1.4085) in
let sl2.4090: Float =
sin(l2.4088) in
let Tu11.4091: Unit =
let Ta1867.4164: [Float] =
[light] in
let Ti1868.4165: Int =
0 in
let Td1869.4166: Float =
(cl1.4089 * sl2.4090) in
Ta1867.4164.(Ti1868.4165) <- Td1869.4166 in
let cl2.4092: Float =
cos(l2.4088) in
let Tu10.4093: Unit =
let Ta1870.4161: [Float] =
[light] in
let Ti1871.4162: Int =
2 in
let Td1872.4163: Float =
(cl1.4089 * cl2.4092) in
Ta1870.4161.(Ti1871.4162) <- Td1872.4163 in
let Tu9.4094: Unit =
let Ta1873.4157: [Float] =
[beam] in
let Ti1874.4158: Int =
0 in
let Td1876.4159: Float =
let Tu1875.4160: Unit =
() in
read_float(Tu1875.4160) in
Ta1873.4157.(Ti1874.4158) <- Td1876.4159 in
let Tu8.4095: Unit =
let Ta1877.4146: [Float] =
[vp] in
let Ti1878.4147: Int =
0 in
let Td1887.4148: Float =
let Td1885.4149: Float =
let Td1881.4151: Float =
let Ta1879.4155: [Float] =
[cos_v] in
let Ti1880.4156: Int =
0 in
Ta1879.4155.(Ti1880.4156) in
let Td1884.4152: Float =
let Ta1882.4153: [Float] =
[sin_v] in
let Ti1883.4154: Int =
1 in
Ta1882.4153.(Ti1883.4154) in
(Td1881.4151 * Td1884.4152) in
let Td1886.4150: Float =
-200. in
(Td1885.4149 * Td1886.4150) in
Ta1877.4146.(Ti1878.4147) <- Td1887.4148 in
let Tu7.4096: Unit =
let Ta1888.4138: [Float] =
[vp] in
let Ti1889.4139: Int =
1 in
let Td1895.4140: Float =
let Td1893.4141: Float =
let Td1892.4143: Float =
let Ta1890.4144: [Float] =
[sin_v] in
let Ti1891.4145: Int =
0 in
Ta1890.4144.(Ti1891.4145) in
-(Td1892.4143) in
let Td1894.4142: Float =
-200. in
(Td1893.4141 * Td1894.4142) in
Ta1888.4138.(Ti1889.4139) <- Td1895.4140 in
let Tu6.4097: Unit =
let Ta1896.4127: [Float] =
[vp] in
let Ti1897.4128: Int =
2 in
let Td1906.4129: Float =
let Td1904.4130: Float =
let Td1900.4132: Float =
let Ta1898.4136: [Float] =
[cos_v] in
let Ti1899.4137: Int =
0 in
Ta1898.4136.(Ti1899.4137) in
let Td1903.4133: Float =
let Ta1901.4134: [Float] =
[cos_v] in
let Ti1902.4135: Int =
1 in
Ta1901.4134.(Ti1902.4135) in
(Td1900.4132 * Td1903.4133) in
let Td1905.4131: Float =
-200. in
(Td1904.4130 * Td1905.4131) in
Ta1896.4127.(Ti1897.4128) <- Td1906.4129 in
let Tu5.4098: Unit =
let Ta1907.4118: [Int] =
[view] in
let Ti1908.4119: Int =
0 in
let Td1915.4120: Float =
let Td1911.4121: Float =
let Ta1909.4125: [Float] =
[vp] in
let Ti1910.4126: Int =
0 in
Ta1909.4125.(Ti1910.4126) in
let Td1914.4122: Float =
let Ta1912.4123: [Float] =
[screen] in
let Ti1913.4124: Int =
0 in
Ta1912.4123.(Ti1913.4124) in
(Td1911.4121 + Td1914.4122) in
Ta1907.4118.(Ti1908.4119) <- Td1915.4120 in
let Tu4.4099: Unit =
let Ta1916.4109: [Int] =
[view] in
let Ti1917.4110: Int =
1 in
let Td1924.4111: Float =
let Td1920.4112: Float =
let Ta1918.4116: [Float] =
[vp] in
let Ti1919.4117: Int =
1 in
Ta1918.4116.(Ti1919.4117) in
let Td1923.4113: Float =
let Ta1921.4114: [Float] =
[screen] in
let Ti1922.4115: Int =
1 in
Ta1921.4114.(Ti1922.4115) in
(Td1920.4112 + Td1923.4113) in
Ta1916.4109.(Ti1917.4110) <- Td1924.4111 in
let Ta1925.4100: [Int] =
[view] in
let Ti1926.4101: Int =
2 in
let Td1933.4102: Float =
let Td1929.4103: Float =
let Ta1927.4107: [Float] =
[vp] in
let Ti1928.4108: Int =
2 in
Ta1927.4107.(Ti1928.4108) in
let Td1932.4104: Float =
let Ta1930.4105: [Float] =
[screen] in
let Ti1931.4106: Int =
2 in
Ta1930.4105.(Ti1931.4106) in
(Td1929.4103 + Td1932.4104) in
Ta1925.4100.(Ti1926.4101) <- Td1933.4102 in 
let rec (read_nth_object.2031: (Int) -> Bool) ((n.2032: Int)) =
let texture.3628: Int =
let Tu1441.4074: Unit =
() in
read_int(Tu1441.4074) in
let Ti1443.3629: Int =
let Ti1442.4073: Int =
1 in
-(Ti1442.4073) in
if texture.3628 == Ti1443.3629 then
0
else
let form.3630: Int =
let Tu1444.4072: Unit =
() in
read_int(Tu1444.4072) in
let refltype.3631: Int =
let Tu1445.4071: Unit =
() in
read_int(Tu1445.4071) in
let isrot_p.3632: Int =
let Tu1446.4070: Unit =
() in
read_int(Tu1446.4070) in
let abc.3633: [Float] =
let Ti1447.4068: Int =
3 in
let Td1448.4069: Float =
0. in
create_float_array(Ti1447.4068, Td1448.4069) in
let Tu58.3634: Unit =
let Ti1449.4065: Int =
0 in
let Td1451.4066: Float =
let Tu1450.4067: Unit =
() in
read_float(Tu1450.4067) in
abc.3633.(Ti1449.4065) <- Td1451.4066 in
let Tu57.3635: Unit =
let Ti1452.4062: Int =
1 in
let Td1454.4063: Float =
let Tu1453.4064: Unit =
() in
read_float(Tu1453.4064) in
abc.3633.(Ti1452.4062) <- Td1454.4063 in
let Tu56.3636: Unit =
let Ti1455.4059: Int =
2 in
let Td1457.4060: Float =
let Tu1456.4061: Unit =
() in
read_float(Tu1456.4061) in
abc.3633.(Ti1455.4059) <- Td1457.4060 in
let xyz.3637: [Float] =
let Ti1458.4057: Int =
3 in
let Td1459.4058: Float =
0. in
create_float_array(Ti1458.4057, Td1459.4058) in
let Tu55.3638: Unit =
let Ti1460.4054: Int =
0 in
let Td1462.4055: Float =
let Tu1461.4056: Unit =
() in
read_float(Tu1461.4056) in
xyz.3637.(Ti1460.4054) <- Td1462.4055 in
let Tu54.3639: Unit =
let Ti1463.4051: Int =
1 in
let Td1465.4052: Float =
let Tu1464.4053: Unit =
() in
read_float(Tu1464.4053) in
xyz.3637.(Ti1463.4051) <- Td1465.4052 in
let Tu53.3640: Unit =
let Ti1466.4048: Int =
2 in
let Td1468.4049: Float =
let Tu1467.4050: Unit =
() in
read_float(Tu1467.4050) in
xyz.3637.(Ti1466.4048) <- Td1468.4049 in
let m_invert.3641: Bool =
let Td1469.4045: Float =
0. in
let Td1471.4046: Float =
let Tu1470.4047: Unit =
() in
read_float(Tu1470.4047) in
if Td1469.4045 <= Td1471.4046 then
0
else
1 in
let reflparam.3642: [Float] =
let Ti1472.4043: Int =
2 in
let Td1473.4044: Float =
0. in
create_float_array(Ti1472.4043, Td1473.4044) in
let Tu52.3643: Unit =
let Ti1474.4040: Int =
0 in
let Td1476.4041: Float =
let Tu1475.4042: Unit =
() in
read_float(Tu1475.4042) in
reflparam.3642.(Ti1474.4040) <- Td1476.4041 in
let Tu51.3644: Unit =
let Ti1477.4037: Int =
1 in
let Td1479.4038: Float =
let Tu1478.4039: Unit =
() in
read_float(Tu1478.4039) in
reflparam.3642.(Ti1477.4037) <- Td1479.4038 in
let color.3645: [Float] =
let Ti1480.4035: Int =
3 in
let Td1481.4036: Float =
0. in
create_float_array(Ti1480.4035, Td1481.4036) in
let Tu50.3646: Unit =
let Ti1482.4032: Int =
0 in
let Td1484.4033: Float =
let Tu1483.4034: Unit =
() in
read_float(Tu1483.4034) in
color.3645.(Ti1482.4032) <- Td1484.4033 in
let Tu49.3647: Unit =
let Ti1485.4029: Int =
1 in
let Td1487.4030: Float =
let Tu1486.4031: Unit =
() in
read_float(Tu1486.4031) in
color.3645.(Ti1485.4029) <- Td1487.4030 in
let Tu48.3648: Unit =
let Ti1488.4026: Int =
2 in
let Td1490.4027: Float =
let Tu1489.4028: Unit =
() in
read_float(Tu1489.4028) in
color.3645.(Ti1488.4026) <- Td1490.4027 in
let rotation.3649: [Float] =
let Ti1491.4024: Int =
3 in
let Td1492.4025: Float =
0. in
create_float_array(Ti1491.4024, Td1492.4025) in
let Tu47.3650: Unit =
let Ti1493.4009: Int =
0 in
if isrot_p.3632 == Ti1493.4009 then
()
else
let Tu21.4010: Unit =
let Ti1494.4020: Int =
0 in
let Td1497.4021: Float =
let Td1496.4022: Float =
let Tu1495.4023: Unit =
() in
read_float(Tu1495.4023) in
rad.2027(Td1496.4022) in
rotation.3649.(Ti1494.4020) <- Td1497.4021 in
let Tu20.4011: Unit =
let Ti1498.4016: Int =
1 in
let Td1501.4017: Float =
let Td1500.4018: Float =
let Tu1499.4019: Unit =
() in
read_float(Tu1499.4019) in
rad.2027(Td1500.4018) in
rotation.3649.(Ti1498.4016) <- Td1501.4017 in
let Ti1502.4012: Int =
2 in
let Td1505.4013: Float =
let Td1504.4014: Float =
let Tu1503.4015: Unit =
() in
read_float(Tu1503.4015) in
rad.2027(Td1504.4014) in
rotation.3649.(Ti1502.4012) <- Td1505.4013 in
let m_invert2.3651: Bool =
let Ti1506.4008: Int =
2 in
if form.3630 == Ti1506.4008 then
1
else
m_invert.3641 in
let obj.3652: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Float], [Float]) =
(texture.3628, form.3630, refltype.3631, isrot_p.3632, abc.3633, xyz.3637, m_invert2.3651, reflparam.3642, color.3645, rotation.3649) in
let Tu46.3653: Unit =
let Ta1507.4007: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta1507.4007.(n.2032) <- obj.3652 in
let Tu45.3654: Unit =
let Ti1508.3980: Int =
3 in
if form.3630 == Ti1508.3980 then
let a.3984: Float =
let Ti1509.4006: Int =
0 in
abc.3633.(Ti1509.4006) in
let Tu23.3985: Unit =
let Ti1510.4001: Int =
0 in
let Td1514.4002: Float =
let Td1511.4003: Float =
0. in
if Td1511.4003 == a.3984 then
0.
else
let Td1512.4004: Float =
sgn.2025(a.3984) in
let Td1513.4005: Float =
fsqr.1980(a.3984) in
(Td1512.4004 / Td1513.4005) in
abc.3633.(Ti1510.4001) <- Td1514.4002 in
let b.3986: Float =
let Ti1515.4000: Int =
1 in
abc.3633.(Ti1515.4000) in
let Tu22.3987: Unit =
let Ti1516.3995: Int =
1 in
let Td1520.3996: Float =
let Td1517.3997: Float =
0. in
if Td1517.3997 == b.3986 then
0.
else
let Td1518.3998: Float =
sgn.2025(b.3986) in
let Td1519.3999: Float =
fsqr.1980(b.3986) in
(Td1518.3998 / Td1519.3999) in
abc.3633.(Ti1516.3995) <- Td1520.3996 in
let c.3988: Float =
let Ti1521.3994: Int =
2 in
abc.3633.(Ti1521.3994) in
let Ti1522.3989: Int =
2 in
let Td1526.3990: Float =
let Td1523.3991: Float =
0. in
if Td1523.3991 == c.3988 then
0.
else
let Td1524.3992: Float =
sgn.2025(c.3988) in
let Td1525.3993: Float =
fsqr.1980(c.3988) in
(Td1524.3992 / Td1525.3993) in
abc.3633.(Ti1522.3989) <- Td1526.3990
else
let Ti1527.3981: Int =
2 in
if form.3630 == Ti1527.3981 then
let Ti1529.3982: Int =
let Ti1528.3983: Int =
0 in
if m_invert.3641 == Ti1528.3983 then
1
else
0 in
normalize_vector.2022(abc.3633, Ti1529.3982)
else
() in
let Tu44.3655: Unit =
let Ti1530.3656: Int =
0 in
if isrot_p.3632 == Ti1530.3656 then
()
else
let Tu43.3657: Unit =
let Ta1531.3975: [Float] =
[cs_temp] in
let Ti1532.3976: Int =
10 in
let Td1535.3977: Float =
let Td1534.3978: Float =
let Ti1533.3979: Int =
0 in
rotation.3649.(Ti1533.3979) in
cos(Td1534.3978) in
Ta1531.3975.(Ti1532.3976) <- Td1535.3977 in
let Tu42.3658: Unit =
let Ta1536.3970: [Float] =
[cs_temp] in
let Ti1537.3971: Int =
11 in
let Td1540.3972: Float =
let Td1539.3973: Float =
let Ti1538.3974: Int =
0 in
rotation.3649.(Ti1538.3974) in
sin(Td1539.3973) in
Ta1536.3970.(Ti1537.3971) <- Td1540.3972 in
let Tu41.3659: Unit =
let Ta1541.3965: [Float] =
[cs_temp] in
let Ti1542.3966: Int =
12 in
let Td1545.3967: Float =
let Td1544.3968: Float =
let Ti1543.3969: Int =
1 in
rotation.3649.(Ti1543.3969) in
cos(Td1544.3968) in
Ta1541.3965.(Ti1542.3966) <- Td1545.3967 in
let Tu40.3660: Unit =
let Ta1546.3960: [Float] =
[cs_temp] in
let Ti1547.3961: Int =
13 in
let Td1550.3962: Float =
let Td1549.3963: Float =
let Ti1548.3964: Int =
1 in
rotation.3649.(Ti1548.3964) in
sin(Td1549.3963) in
Ta1546.3960.(Ti1547.3961) <- Td1550.3962 in
let Tu39.3661: Unit =
let Ta1551.3955: [Float] =
[cs_temp] in
let Ti1552.3956: Int =
14 in
let Td1555.3957: Float =
let Td1554.3958: Float =
let Ti1553.3959: Int =
2 in
rotation.3649.(Ti1553.3959) in
cos(Td1554.3958) in
Ta1551.3955.(Ti1552.3956) <- Td1555.3957 in
let Tu38.3662: Unit =
let Ta1556.3950: [Float] =
[cs_temp] in
let Ti1557.3951: Int =
15 in
let Td1560.3952: Float =
let Td1559.3953: Float =
let Ti1558.3954: Int =
2 in
rotation.3649.(Ti1558.3954) in
sin(Td1559.3953) in
Ta1556.3950.(Ti1557.3951) <- Td1560.3952 in
let Tu37.3663: Unit =
let Ta1561.3941: [Float] =
[cs_temp] in
let Ti1562.3942: Int =
0 in
let Td1569.3943: Float =
let Td1565.3944: Float =
let Ta1563.3948: [Float] =
[cs_temp] in
let Ti1564.3949: Int =
12 in
Ta1563.3948.(Ti1564.3949) in
let Td1568.3945: Float =
let Ta1566.3946: [Float] =
[cs_temp] in
let Ti1567.3947: Int =
14 in
Ta1566.3946.(Ti1567.3947) in
(Td1565.3944 * Td1568.3945) in
Ta1561.3941.(Ti1562.3942) <- Td1569.3943 in
let Tu36.3664: Unit =
let Ta1570.3920: [Float] =
[cs_temp] in
let Ti1571.3921: Int =
1 in
let Td1590.3922: Float =
let Td1582.3923: Float =
let Td1578.3931: Float =
let Td1574.3935: Float =
let Ta1572.3939: [Float] =
[cs_temp] in
let Ti1573.3940: Int =
11 in
Ta1572.3939.(Ti1573.3940) in
let Td1577.3936: Float =
let Ta1575.3937: [Float] =
[cs_temp] in
let Ti1576.3938: Int =
13 in
Ta1575.3937.(Ti1576.3938) in
(Td1574.3935 * Td1577.3936) in
let Td1581.3932: Float =
let Ta1579.3933: [Float] =
[cs_temp] in
let Ti1580.3934: Int =
14 in
Ta1579.3933.(Ti1580.3934) in
(Td1578.3931 * Td1581.3932) in
let Td1589.3924: Float =
let Td1585.3925: Float =
let Ta1583.3929: [Float] =
[cs_temp] in
let Ti1584.3930: Int =
10 in
Ta1583.3929.(Ti1584.3930) in
let Td1588.3926: Float =
let Ta1586.3927: [Float] =
[cs_temp] in
let Ti1587.3928: Int =
15 in
Ta1586.3927.(Ti1587.3928) in
(Td1585.3925 * Td1588.3926) in
(Td1582.3923 - Td1589.3924) in
Ta1570.3920.(Ti1571.3921) <- Td1590.3922 in
let Tu35.3665: Unit =
let Ta1591.3899: [Float] =
[cs_temp] in
let Ti1592.3900: Int =
2 in
let Td1611.3901: Float =
let Td1603.3902: Float =
let Td1599.3910: Float =
let Td1595.3914: Float =
let Ta1593.3918: [Float] =
[cs_temp] in
let Ti1594.3919: Int =
10 in
Ta1593.3918.(Ti1594.3919) in
let Td1598.3915: Float =
let Ta1596.3916: [Float] =
[cs_temp] in
let Ti1597.3917: Int =
13 in
Ta1596.3916.(Ti1597.3917) in
(Td1595.3914 * Td1598.3915) in
let Td1602.3911: Float =
let Ta1600.3912: [Float] =
[cs_temp] in
let Ti1601.3913: Int =
14 in
Ta1600.3912.(Ti1601.3913) in
(Td1599.3910 * Td1602.3911) in
let Td1610.3903: Float =
let Td1606.3904: Float =
let Ta1604.3908: [Float] =
[cs_temp] in
let Ti1605.3909: Int =
11 in
Ta1604.3908.(Ti1605.3909) in
let Td1609.3905: Float =
let Ta1607.3906: [Float] =
[cs_temp] in
let Ti1608.3907: Int =
15 in
Ta1607.3906.(Ti1608.3907) in
(Td1606.3904 * Td1609.3905) in
(Td1603.3902 + Td1610.3903) in
Ta1591.3899.(Ti1592.3900) <- Td1611.3901 in
let Tu34.3666: Unit =
let Ta1612.3890: [Float] =
[cs_temp] in
let Ti1613.3891: Int =
3 in
let Td1620.3892: Float =
let Td1616.3893: Float =
let Ta1614.3897: [Float] =
[cs_temp] in
let Ti1615.3898: Int =
12 in
Ta1614.3897.(Ti1615.3898) in
let Td1619.3894: Float =
let Ta1617.3895: [Float] =
[cs_temp] in
let Ti1618.3896: Int =
15 in
Ta1617.3895.(Ti1618.3896) in
(Td1616.3893 * Td1619.3894) in
Ta1612.3890.(Ti1613.3891) <- Td1620.3892 in
let Tu33.3667: Unit =
let Ta1621.3869: [Float] =
[cs_temp] in
let Ti1622.3870: Int =
4 in
let Td1641.3871: Float =
let Td1633.3872: Float =
let Td1629.3880: Float =
let Td1625.3884: Float =
let Ta1623.3888: [Float] =
[cs_temp] in
let Ti1624.3889: Int =
11 in
Ta1623.3888.(Ti1624.3889) in
let Td1628.3885: Float =
let Ta1626.3886: [Float] =
[cs_temp] in
let Ti1627.3887: Int =
13 in
Ta1626.3886.(Ti1627.3887) in
(Td1625.3884 * Td1628.3885) in
let Td1632.3881: Float =
let Ta1630.3882: [Float] =
[cs_temp] in
let Ti1631.3883: Int =
15 in
Ta1630.3882.(Ti1631.3883) in
(Td1629.3880 * Td1632.3881) in
let Td1640.3873: Float =
let Td1636.3874: Float =
let Ta1634.3878: [Float] =
[cs_temp] in
let Ti1635.3879: Int =
10 in
Ta1634.3878.(Ti1635.3879) in
let Td1639.3875: Float =
let Ta1637.3876: [Float] =
[cs_temp] in
let Ti1638.3877: Int =
14 in
Ta1637.3876.(Ti1638.3877) in
(Td1636.3874 * Td1639.3875) in
(Td1633.3872 + Td1640.3873) in
Ta1621.3869.(Ti1622.3870) <- Td1641.3871 in
let Tu32.3668: Unit =
let Ta1642.3848: [Float] =
[cs_temp] in
let Ti1643.3849: Int =
5 in
let Td1662.3850: Float =
let Td1654.3851: Float =
let Td1650.3859: Float =
let Td1646.3863: Float =
let Ta1644.3867: [Float] =
[cs_temp] in
let Ti1645.3868: Int =
10 in
Ta1644.3867.(Ti1645.3868) in
let Td1649.3864: Float =
let Ta1647.3865: [Float] =
[cs_temp] in
let Ti1648.3866: Int =
13 in
Ta1647.3865.(Ti1648.3866) in
(Td1646.3863 * Td1649.3864) in
let Td1653.3860: Float =
let Ta1651.3861: [Float] =
[cs_temp] in
let Ti1652.3862: Int =
15 in
Ta1651.3861.(Ti1652.3862) in
(Td1650.3859 * Td1653.3860) in
let Td1661.3852: Float =
let Td1657.3853: Float =
let Ta1655.3857: [Float] =
[cs_temp] in
let Ti1656.3858: Int =
11 in
Ta1655.3857.(Ti1656.3858) in
let Td1660.3854: Float =
let Ta1658.3855: [Float] =
[cs_temp] in
let Ti1659.3856: Int =
14 in
Ta1658.3855.(Ti1659.3856) in
(Td1657.3853 * Td1660.3854) in
(Td1654.3851 - Td1661.3852) in
Ta1642.3848.(Ti1643.3849) <- Td1662.3850 in
let Tu31.3669: Unit =
let Ta1663.3842: [Float] =
[cs_temp] in
let Ti1664.3843: Int =
6 in
let Td1668.3844: Float =
let Td1667.3845: Float =
let Ta1665.3846: [Float] =
[cs_temp] in
let Ti1666.3847: Int =
13 in
Ta1665.3846.(Ti1666.3847) in
-(Td1667.3845) in
Ta1663.3842.(Ti1664.3843) <- Td1668.3844 in
let Tu30.3670: Unit =
let Ta1669.3833: [Float] =
[cs_temp] in
let Ti1670.3834: Int =
7 in
let Td1677.3835: Float =
let Td1673.3836: Float =
let Ta1671.3840: [Float] =
[cs_temp] in
let Ti1672.3841: Int =
11 in
Ta1671.3840.(Ti1672.3841) in
let Td1676.3837: Float =
let Ta1674.3838: [Float] =
[cs_temp] in
let Ti1675.3839: Int =
12 in
Ta1674.3838.(Ti1675.3839) in
(Td1673.3836 * Td1676.3837) in
Ta1669.3833.(Ti1670.3834) <- Td1677.3835 in
let Tu29.3671: Unit =
let Ta1678.3824: [Float] =
[cs_temp] in
let Ti1679.3825: Int =
8 in
let Td1686.3826: Float =
let Td1682.3827: Float =
let Ta1680.3831: [Float] =
[cs_temp] in
let Ti1681.3832: Int =
10 in
Ta1680.3831.(Ti1681.3832) in
let Td1685.3828: Float =
let Ta1683.3829: [Float] =
[cs_temp] in
let Ti1684.3830: Int =
12 in
Ta1683.3829.(Ti1684.3830) in
(Td1682.3827 * Td1685.3828) in
Ta1678.3824.(Ti1679.3825) <- Td1686.3826 in
let ao.3672: Float =
let Ti1687.3823: Int =
0 in
abc.3633.(Ti1687.3823) in
let bo.3673: Float =
let Ti1688.3822: Int =
1 in
abc.3633.(Ti1688.3822) in
let co.3674: Float =
let Ti1689.3821: Int =
2 in
abc.3633.(Ti1689.3821) in
let Tu28.3675: Unit =
let Ti1690.3803: Int =
0 in
let Td1707.3804: Float =
let Td1701.3805: Float =
let Td1695.3811: Float =
let Td1694.3817: Float =
let Td1693.3818: Float =
let Ta1691.3819: [Float] =
[cs_temp] in
let Ti1692.3820: Int =
0 in
Ta1691.3819.(Ti1692.3820) in
fsqr.1980(Td1693.3818) in
(ao.3672 * Td1694.3817) in
let Td1700.3812: Float =
let Td1699.3813: Float =
let Td1698.3814: Float =
let Ta1696.3815: [Float] =
[cs_temp] in
let Ti1697.3816: Int =
3 in
Ta1696.3815.(Ti1697.3816) in
fsqr.1980(Td1698.3814) in
(bo.3673 * Td1699.3813) in
(Td1695.3811 + Td1700.3812) in
let Td1706.3806: Float =
let Td1705.3807: Float =
let Td1704.3808: Float =
let Ta1702.3809: [Float] =
[cs_temp] in
let Ti1703.3810: Int =
6 in
Ta1702.3809.(Ti1703.3810) in
fsqr.1980(Td1704.3808) in
(co.3674 * Td1705.3807) in
(Td1701.3805 + Td1706.3806) in
abc.3633.(Ti1690.3803) <- Td1707.3804 in
let Tu27.3676: Unit =
let Ti1708.3785: Int =
1 in
let Td1725.3786: Float =
let Td1719.3787: Float =
let Td1713.3793: Float =
let Td1712.3799: Float =
let Td1711.3800: Float =
let Ta1709.3801: [Float] =
[cs_temp] in
let Ti1710.3802: Int =
1 in
Ta1709.3801.(Ti1710.3802) in
fsqr.1980(Td1711.3800) in
(ao.3672 * Td1712.3799) in
let Td1718.3794: Float =
let Td1717.3795: Float =
let Td1716.3796: Float =
let Ta1714.3797: [Float] =
[cs_temp] in
let Ti1715.3798: Int =
4 in
Ta1714.3797.(Ti1715.3798) in
fsqr.1980(Td1716.3796) in
(bo.3673 * Td1717.3795) in
(Td1713.3793 + Td1718.3794) in
let Td1724.3788: Float =
let Td1723.3789: Float =
let Td1722.3790: Float =
let Ta1720.3791: [Float] =
[cs_temp] in
let Ti1721.3792: Int =
7 in
Ta1720.3791.(Ti1721.3792) in
fsqr.1980(Td1722.3790) in
(co.3674 * Td1723.3789) in
(Td1719.3787 + Td1724.3788) in
abc.3633.(Ti1708.3785) <- Td1725.3786 in
let Tu26.3677: Unit =
let Ti1726.3767: Int =
2 in
let Td1743.3768: Float =
let Td1737.3769: Float =
let Td1731.3775: Float =
let Td1730.3781: Float =
let Td1729.3782: Float =
let Ta1727.3783: [Float] =
[cs_temp] in
let Ti1728.3784: Int =
2 in
Ta1727.3783.(Ti1728.3784) in
fsqr.1980(Td1729.3782) in
(ao.3672 * Td1730.3781) in
let Td1736.3776: Float =
let Td1735.3777: Float =
let Td1734.3778: Float =
let Ta1732.3779: [Float] =
[cs_temp] in
let Ti1733.3780: Int =
5 in
Ta1732.3779.(Ti1733.3780) in
fsqr.1980(Td1734.3778) in
(bo.3673 * Td1735.3777) in
(Td1731.3775 + Td1736.3776) in
let Td1742.3770: Float =
let Td1741.3771: Float =
let Td1740.3772: Float =
let Ta1738.3773: [Float] =
[cs_temp] in
let Ti1739.3774: Int =
8 in
Ta1738.3773.(Ti1739.3774) in
fsqr.1980(Td1740.3772) in
(co.3674 * Td1741.3771) in
(Td1737.3769 + Td1742.3770) in
abc.3633.(Ti1726.3767) <- Td1743.3768 in
let Tu25.3678: Unit =
let Ti1744.3738: Int =
0 in
let Td1772.3739: Float =
let Td1745.3740: Float =
2. in
let Td1771.3741: Float =
let Td1762.3742: Float =
let Td1753.3751: Float =
let Td1749.3760: Float =
let Td1748.3764: Float =
let Ta1746.3765: [Float] =
[cs_temp] in
let Ti1747.3766: Int =
1 in
Ta1746.3765.(Ti1747.3766) in
(ao.3672 * Td1748.3764) in
let Td1752.3761: Float =
let Ta1750.3762: [Float] =
[cs_temp] in
let Ti1751.3763: Int =
2 in
Ta1750.3762.(Ti1751.3763) in
(Td1749.3760 * Td1752.3761) in
let Td1761.3752: Float =
let Td1757.3753: Float =
let Td1756.3757: Float =
let Ta1754.3758: [Float] =
[cs_temp] in
let Ti1755.3759: Int =
4 in
Ta1754.3758.(Ti1755.3759) in
(bo.3673 * Td1756.3757) in
let Td1760.3754: Float =
let Ta1758.3755: [Float] =
[cs_temp] in
let Ti1759.3756: Int =
5 in
Ta1758.3755.(Ti1759.3756) in
(Td1757.3753 * Td1760.3754) in
(Td1753.3751 + Td1761.3752) in
let Td1770.3743: Float =
let Td1766.3744: Float =
let Td1765.3748: Float =
let Ta1763.3749: [Float] =
[cs_temp] in
let Ti1764.3750: Int =
7 in
Ta1763.3749.(Ti1764.3750) in
(co.3674 * Td1765.3748) in
let Td1769.3745: Float =
let Ta1767.3746: [Float] =
[cs_temp] in
let Ti1768.3747: Int =
8 in
Ta1767.3746.(Ti1768.3747) in
(Td1766.3744 * Td1769.3745) in
(Td1762.3742 + Td1770.3743) in
(Td1745.3740 * Td1771.3741) in
rotation.3649.(Ti1744.3738) <- Td1772.3739 in
let Tu24.3679: Unit =
let Ti1773.3709: Int =
1 in
let Td1801.3710: Float =
let Td1774.3711: Float =
2. in
let Td1800.3712: Float =
let Td1791.3713: Float =
let Td1782.3722: Float =
let Td1778.3731: Float =
let Td1777.3735: Float =
let Ta1775.3736: [Float] =
[cs_temp] in
let Ti1776.3737: Int =
0 in
Ta1775.3736.(Ti1776.3737) in
(ao.3672 * Td1777.3735) in
let Td1781.3732: Float =
let Ta1779.3733: [Float] =
[cs_temp] in
let Ti1780.3734: Int =
2 in
Ta1779.3733.(Ti1780.3734) in
(Td1778.3731 * Td1781.3732) in
let Td1790.3723: Float =
let Td1786.3724: Float =
let Td1785.3728: Float =
let Ta1783.3729: [Float] =
[cs_temp] in
let Ti1784.3730: Int =
3 in
Ta1783.3729.(Ti1784.3730) in
(bo.3673 * Td1785.3728) in
let Td1789.3725: Float =
let Ta1787.3726: [Float] =
[cs_temp] in
let Ti1788.3727: Int =
5 in
Ta1787.3726.(Ti1788.3727) in
(Td1786.3724 * Td1789.3725) in
(Td1782.3722 + Td1790.3723) in
let Td1799.3714: Float =
let Td1795.3715: Float =
let Td1794.3719: Float =
let Ta1792.3720: [Float] =
[cs_temp] in
let Ti1793.3721: Int =
6 in
Ta1792.3720.(Ti1793.3721) in
(co.3674 * Td1794.3719) in
let Td1798.3716: Float =
let Ta1796.3717: [Float] =
[cs_temp] in
let Ti1797.3718: Int =
8 in
Ta1796.3717.(Ti1797.3718) in
(Td1795.3715 * Td1798.3716) in
(Td1791.3713 + Td1799.3714) in
(Td1774.3711 * Td1800.3712) in
rotation.3649.(Ti1773.3709) <- Td1801.3710 in
let Ti1802.3680: Int =
2 in
let Td1830.3681: Float =
let Td1803.3682: Float =
2. in
let Td1829.3683: Float =
let Td1820.3684: Float =
let Td1811.3693: Float =
let Td1807.3702: Float =
let Td1806.3706: Float =
let Ta1804.3707: [Float] =
[cs_temp] in
let Ti1805.3708: Int =
0 in
Ta1804.3707.(Ti1805.3708) in
(ao.3672 * Td1806.3706) in
let Td1810.3703: Float =
let Ta1808.3704: [Float] =
[cs_temp] in
let Ti1809.3705: Int =
1 in
Ta1808.3704.(Ti1809.3705) in
(Td1807.3702 * Td1810.3703) in
let Td1819.3694: Float =
let Td1815.3695: Float =
let Td1814.3699: Float =
let Ta1812.3700: [Float] =
[cs_temp] in
let Ti1813.3701: Int =
3 in
Ta1812.3700.(Ti1813.3701) in
(bo.3673 * Td1814.3699) in
let Td1818.3696: Float =
let Ta1816.3697: [Float] =
[cs_temp] in
let Ti1817.3698: Int =
4 in
Ta1816.3697.(Ti1817.3698) in
(Td1815.3695 * Td1818.3696) in
(Td1811.3693 + Td1819.3694) in
let Td1828.3685: Float =
let Td1824.3686: Float =
let Td1823.3690: Float =
let Ta1821.3691: [Float] =
[cs_temp] in
let Ti1822.3692: Int =
6 in
Ta1821.3691.(Ti1822.3692) in
(co.3674 * Td1823.3690) in
let Td1827.3687: Float =
let Ta1825.3688: [Float] =
[cs_temp] in
let Ti1826.3689: Int =
7 in
Ta1825.3688.(Ti1826.3689) in
(Td1824.3686 * Td1827.3687) in
(Td1820.3684 + Td1828.3685) in
(Td1803.3682 * Td1829.3683) in
rotation.3649.(Ti1802.3680) <- Td1830.3681 in
1 in 
let rec (read_object.2033: (Int) -> Unit) ((n.2034: Int)) =
let Ti1436.3623: Int =
61 in
if Ti1436.3623 <= n.2034 then
()
else
let Tb1437.3624: Bool =
read_nth_object.2031(n.2034) in
let Ti1438.3625: Int =
0 in
if Tb1437.3624 == Ti1438.3625 then
()
else
let Ti1440.3626: Int =
let Ti1439.3627: Int =
1 in
(n.2034 + Ti1439.3627) in
read_object.2033(Ti1440.3626) in 
let rec (read_all_object.2035: (Unit) -> Unit) ((Tu59.2036: Unit)) =
let Ti1435.3622: Int =
0 in
read_object.2033(Ti1435.3622) in 
let rec (read_net_item.2037: (Int) -> [Int]) ((length.2038: Int)) =
let item.3610: Int =
let Tu1426.3621: Unit =
() in
read_int(Tu1426.3621) in
let Ti1428.3611: Int =
let Ti1427.3620: Int =
1 in
-(Ti1427.3620) in
if item.3610 == Ti1428.3611 then
let Ti1430.3616: Int =
let Ti1429.3619: Int =
1 in
(length.2038 + Ti1429.3619) in
let Ti1432.3617: Int =
let Ti1431.3618: Int =
1 in
-(Ti1431.3618) in
create_array(Ti1430.3616, Ti1432.3617)
else
let v.3612: [Int] =
let Ti1434.3614: Int =
let Ti1433.3615: Int =
1 in
(length.2038 + Ti1433.3615) in
read_net_item.2037(Ti1434.3614) in
let Tu60.3613: Unit =
v.3612.(length.2038) <- item.3610 in
v.3612 in 
let rec (read_or_network.2039: (Int) -> [[Int]]) ((length.2040: Int)) =
let net.3598: [Int] =
let Ti1417.3609: Int =
0 in
read_net_item.2037(Ti1417.3609) in
let Ti1419.3599: Int =
let Ti1418.3608: Int =
0 in
net.3598.(Ti1418.3608) in
let Ti1421.3600: Int =
let Ti1420.3607: Int =
1 in
-(Ti1420.3607) in
if Ti1419.3599 == Ti1421.3600 then
let Ti1423.3605: Int =
let Ti1422.3606: Int =
1 in
(length.2040 + Ti1422.3606) in
create_array(Ti1423.3605, net.3598)
else
let v.3601: [[Int]] =
let Ti1425.3603: Int =
let Ti1424.3604: Int =
1 in
(length.2040 + Ti1424.3604) in
read_or_network.2039(Ti1425.3603) in
let Tu61.3602: Unit =
v.3601.(length.2040) <- net.3598 in
v.3601 in 
let rec (read_and_network.2041: (Int) -> Unit) ((n.2042: Int)) =
let net.3588: [Int] =
let Ti1409.3597: Int =
0 in
read_net_item.2037(Ti1409.3597) in
let Ti1411.3589: Int =
let Ti1410.3596: Int =
0 in
net.3588.(Ti1410.3596) in
let Ti1413.3590: Int =
let Ti1412.3595: Int =
1 in
-(Ti1412.3595) in
if Ti1411.3589 == Ti1413.3590 then
()
else
let Tu62.3591: Unit =
let Ta1414.3594: [[Int]] =
[and_net] in
Ta1414.3594.(n.2042) <- net.3588 in
let Ti1416.3592: Int =
let Ti1415.3593: Int =
1 in
(n.2042 + Ti1415.3593) in
read_and_network.2041(Ti1416.3592) in 
let rec (read_parameter.2043: (Unit) -> Unit) ((Tu63.2044: Unit)) =
let Tu66.3578: Unit =
let Tu1402.3587: Unit =
() in
read_environ.2029(Tu1402.3587) in
let Tu65.3579: Unit =
let Tu1403.3586: Unit =
() in
read_all_object.2035(Tu1403.3586) in
let Tu64.3580: Unit =
let Ti1404.3585: Int =
0 in
read_and_network.2041(Ti1404.3585) in
let Ta1405.3581: [[[Int]]] =
[or_net] in
let Ti1406.3582: Int =
0 in
let Ta1408.3583: [[Int]] =
let Ti1407.3584: Int =
0 in
read_or_network.2039(Ti1407.3584) in
Ta1405.3581.(Ti1406.3582) <- Ta1408.3583 in 
let rec (solver_rect.2045: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Int) ((m.2046: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l.2047: [Float])) =
let answera.3452: Bool =
let Td1288.3538: Float =
0. in
let Td1290.3539: Float =
let Ti1289.3577: Int =
0 in
l.2047.(Ti1289.3577) in
if Td1288.3538 == Td1290.3539 then
0
else
let d.3540: Float =
let Tb1296.3569: Bool =
let Tb1291.3572: Bool =
o_isinvert.1990(m.2046) in
let Ti1295.3573: Int =
let Td1292.3574: Float =
0. in
let Td1294.3575: Float =
let Ti1293.3576: Int =
0 in
l.2047.(Ti1293.3576) in
if Td1292.3574 <= Td1294.3575 then
0
else
1 in
xor.1977(Tb1291.3572, Ti1295.3573) in
let Ti1297.3570: Int =
0 in
if Tb1296.3569 == Ti1297.3570 then
let Td1298.3571: Float =
o_param_a.1994(m.2046) in
-(Td1298.3571)
else
o_param_a.1994(m.2046) in
let d2.3541: Float =
let Td1302.3563: Float =
let Td1301.3566: Float =
let Ta1299.3567: [Float] =
[solver_w_vec] in
let Ti1300.3568: Int =
0 in
Ta1299.3567.(Ti1300.3568) in
(d.3540 - Td1301.3566) in
let Td1304.3564: Float =
let Ti1303.3565: Int =
0 in
l.2047.(Ti1303.3565) in
(Td1302.3563 / Td1304.3564) in
let Td1305.3542: Float =
o_param_b.1996(m.2046) in
let Ti1313.3543: Int =
let Td1312.3556: Float =
let Td1308.3557: Float =
let Td1307.3561: Float =
let Ti1306.3562: Int =
1 in
l.2047.(Ti1306.3562) in
(d2.3541 * Td1307.3561) in
let Td1311.3558: Float =
let Ta1309.3559: [Float] =
[solver_w_vec] in
let Ti1310.3560: Int =
1 in
Ta1309.3559.(Ti1310.3560) in
(Td1308.3557 + Td1311.3558) in
abs_float(Td1312.3556) in
if Td1305.3542 <= Ti1313.3543 then
0
else
let Td1314.3544: Float =
o_param_c.1998(m.2046) in
let Ti1322.3545: Int =
let Td1321.3549: Float =
let Td1317.3550: Float =
let Td1316.3554: Float =
let Ti1315.3555: Int =
2 in
l.2047.(Ti1315.3555) in
(d2.3541 * Td1316.3554) in
let Td1320.3551: Float =
let Ta1318.3552: [Float] =
[solver_w_vec] in
let Ti1319.3553: Int =
2 in
Ta1318.3552.(Ti1319.3553) in
(Td1317.3550 + Td1320.3551) in
abs_float(Td1321.3549) in
if Td1314.3544 <= Ti1322.3545 then
0
else
let Tu67.3546: Unit =
let Ta1323.3547: [Int] =
[solver_dist] in
let Ti1324.3548: Int =
0 in
Ta1323.3547.(Ti1324.3548) <- d2.3541 in
1 in
let Ti1325.3453: Int =
0 in
if answera.3452 == Ti1325.3453 then
let answerb.3454: Bool =
let Td1326.3498: Float =
0. in
let Td1328.3499: Float =
let Ti1327.3537: Int =
1 in
l.2047.(Ti1327.3537) in
if Td1326.3498 == Td1328.3499 then
0
else
let d.3500: Float =
let Tb1334.3529: Bool =
let Tb1329.3532: Bool =
o_isinvert.1990(m.2046) in
let Ti1333.3533: Int =
let Td1330.3534: Float =
0. in
let Td1332.3535: Float =
let Ti1331.3536: Int =
1 in
l.2047.(Ti1331.3536) in
if Td1330.3534 <= Td1332.3535 then
0
else
1 in
xor.1977(Tb1329.3532, Ti1333.3533) in
let Ti1335.3530: Int =
0 in
if Tb1334.3529 == Ti1335.3530 then
let Td1336.3531: Float =
o_param_b.1996(m.2046) in
-(Td1336.3531)
else
o_param_b.1996(m.2046) in
let d2.3501: Float =
let Td1340.3523: Float =
let Td1339.3526: Float =
let Ta1337.3527: [Float] =
[solver_w_vec] in
let Ti1338.3528: Int =
1 in
Ta1337.3527.(Ti1338.3528) in
(d.3500 - Td1339.3526) in
let Td1342.3524: Float =
let Ti1341.3525: Int =
1 in
l.2047.(Ti1341.3525) in
(Td1340.3523 / Td1342.3524) in
let Td1343.3502: Float =
o_param_c.1998(m.2046) in
let Ti1351.3503: Int =
let Td1350.3516: Float =
let Td1346.3517: Float =
let Td1345.3521: Float =
let Ti1344.3522: Int =
2 in
l.2047.(Ti1344.3522) in
(d2.3501 * Td1345.3521) in
let Td1349.3518: Float =
let Ta1347.3519: [Float] =
[solver_w_vec] in
let Ti1348.3520: Int =
2 in
Ta1347.3519.(Ti1348.3520) in
(Td1346.3517 + Td1349.3518) in
abs_float(Td1350.3516) in
if Td1343.3502 <= Ti1351.3503 then
0
else
let Td1352.3504: Float =
o_param_a.1994(m.2046) in
let Ti1360.3505: Int =
let Td1359.3509: Float =
let Td1355.3510: Float =
let Td1354.3514: Float =
let Ti1353.3515: Int =
0 in
l.2047.(Ti1353.3515) in
(d2.3501 * Td1354.3514) in
let Td1358.3511: Float =
let Ta1356.3512: [Float] =
[solver_w_vec] in
let Ti1357.3513: Int =
0 in
Ta1356.3512.(Ti1357.3513) in
(Td1355.3510 + Td1358.3511) in
abs_float(Td1359.3509) in
if Td1352.3504 <= Ti1360.3505 then
0
else
let Tu68.3506: Unit =
let Ta1361.3507: [Int] =
[solver_dist] in
let Ti1362.3508: Int =
0 in
Ta1361.3507.(Ti1362.3508) <- d2.3501 in
1 in
let Ti1363.3455: Int =
0 in
if answerb.3454 == Ti1363.3455 then
let answerc.3456: Bool =
let Td1364.3458: Float =
0. in
let Td1366.3459: Float =
let Ti1365.3497: Int =
2 in
l.2047.(Ti1365.3497) in
if Td1364.3458 == Td1366.3459 then
0
else
let d.3460: Float =
let Tb1372.3489: Bool =
let Tb1367.3492: Bool =
o_isinvert.1990(m.2046) in
let Ti1371.3493: Int =
let Td1368.3494: Float =
0. in
let Td1370.3495: Float =
let Ti1369.3496: Int =
2 in
l.2047.(Ti1369.3496) in
if Td1368.3494 <= Td1370.3495 then
0
else
1 in
xor.1977(Tb1367.3492, Ti1371.3493) in
let Ti1373.3490: Int =
0 in
if Tb1372.3489 == Ti1373.3490 then
let Td1374.3491: Float =
o_param_c.1998(m.2046) in
-(Td1374.3491)
else
o_param_c.1998(m.2046) in
let d2.3461: Float =
let Td1378.3483: Float =
let Td1377.3486: Float =
let Ta1375.3487: [Float] =
[solver_w_vec] in
let Ti1376.3488: Int =
2 in
Ta1375.3487.(Ti1376.3488) in
(d.3460 - Td1377.3486) in
let Td1380.3484: Float =
let Ti1379.3485: Int =
2 in
l.2047.(Ti1379.3485) in
(Td1378.3483 / Td1380.3484) in
let Td1381.3462: Float =
o_param_a.1994(m.2046) in
let Ti1389.3463: Int =
let Td1388.3476: Float =
let Td1384.3477: Float =
let Td1383.3481: Float =
let Ti1382.3482: Int =
0 in
l.2047.(Ti1382.3482) in
(d2.3461 * Td1383.3481) in
let Td1387.3478: Float =
let Ta1385.3479: [Float] =
[solver_w_vec] in
let Ti1386.3480: Int =
0 in
Ta1385.3479.(Ti1386.3480) in
(Td1384.3477 + Td1387.3478) in
abs_float(Td1388.3476) in
if Td1381.3462 <= Ti1389.3463 then
0
else
let Td1390.3464: Float =
o_param_b.1996(m.2046) in
let Ti1398.3465: Int =
let Td1397.3469: Float =
let Td1393.3470: Float =
let Td1392.3474: Float =
let Ti1391.3475: Int =
1 in
l.2047.(Ti1391.3475) in
(d2.3461 * Td1392.3474) in
let Td1396.3471: Float =
let Ta1394.3472: [Float] =
[solver_w_vec] in
let Ti1395.3473: Int =
1 in
Ta1394.3472.(Ti1395.3473) in
(Td1393.3470 + Td1396.3471) in
abs_float(Td1397.3469) in
if Td1390.3464 <= Ti1398.3465 then
0
else
let Tu69.3466: Unit =
let Ta1399.3467: [Int] =
[solver_dist] in
let Ti1400.3468: Int =
0 in
Ta1399.3467.(Ti1400.3468) <- d2.3461 in
1 in
let Ti1401.3457: Int =
0 in
if answerc.3456 == Ti1401.3457 then
0
else
3
else
2
else
1 in 
let rec (solver_surface.2048: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Int) ((m.2049: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l.2050: [Float])) =
let q.3415: Float =
let Td1262.3439: Float =
let Td1257.3444: Float =
let Td1255.3449: Float =
let Ti1254.3451: Int =
0 in
l.2050.(Ti1254.3451) in
let Td1256.3450: Float =
o_param_a.1994(m.2049) in
(Td1255.3449 * Td1256.3450) in
let Td1261.3445: Float =
let Td1259.3446: Float =
let Ti1258.3448: Int =
1 in
l.2050.(Ti1258.3448) in
let Td1260.3447: Float =
o_param_b.1996(m.2049) in
(Td1259.3446 * Td1260.3447) in
(Td1257.3444 + Td1261.3445) in
let Td1266.3440: Float =
let Td1264.3441: Float =
let Ti1263.3443: Int =
2 in
l.2050.(Ti1263.3443) in
let Td1265.3442: Float =
o_param_c.1998(m.2049) in
(Td1264.3441 * Td1265.3442) in
(Td1262.3439 + Td1266.3440) in
let Td1267.3416: Float =
0. in
if q.3415 <= Td1267.3416 then
0
else
let t.3417: Float =
let Td1284.3422: Float =
let Td1278.3423: Float =
let Td1272.3429: Float =
let Td1270.3435: Float =
let Ta1268.3437: [Float] =
[solver_w_vec] in
let Ti1269.3438: Int =
0 in
Ta1268.3437.(Ti1269.3438) in
let Td1271.3436: Float =
o_param_a.1994(m.2049) in
(Td1270.3435 * Td1271.3436) in
let Td1277.3430: Float =
let Td1275.3431: Float =
let Ta1273.3433: [Float] =
[solver_w_vec] in
let Ti1274.3434: Int =
1 in
Ta1273.3433.(Ti1274.3434) in
let Td1276.3432: Float =
o_param_b.1996(m.2049) in
(Td1275.3431 * Td1276.3432) in
(Td1272.3429 + Td1277.3430) in
let Td1283.3424: Float =
let Td1281.3425: Float =
let Ta1279.3427: [Float] =
[solver_w_vec] in
let Ti1280.3428: Int =
2 in
Ta1279.3427.(Ti1280.3428) in
let Td1282.3426: Float =
o_param_c.1998(m.2049) in
(Td1281.3425 * Td1282.3426) in
(Td1278.3423 + Td1283.3424) in
(Td1284.3422 / q.3415) in
let Tu70.3418: Unit =
let Ta1285.3419: [Int] =
[solver_dist] in
let Ti1286.3420: Int =
0 in
let Td1287.3421: Float =
-(t.3417) in
Ta1285.3419.(Ti1286.3420) <- Td1287.3421 in
1 in 
let rec (in_prod_sqr_obj.2051: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Float) ((m.2052: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (v.2053: [Float])) =
let Td1248.3399: Float =
let Td1242.3405: Float =
let Td1240.3411: Float =
let Td1239.3413: Float =
let Ti1238.3414: Int =
0 in
v.2053.(Ti1238.3414) in
fsqr.1980(Td1239.3413) in
let Td1241.3412: Float =
o_param_a.1994(m.2052) in
(Td1240.3411 * Td1241.3412) in
let Td1247.3406: Float =
let Td1245.3407: Float =
let Td1244.3409: Float =
let Ti1243.3410: Int =
1 in
v.2053.(Ti1243.3410) in
fsqr.1980(Td1244.3409) in
let Td1246.3408: Float =
o_param_b.1996(m.2052) in
(Td1245.3407 * Td1246.3408) in
(Td1242.3405 + Td1247.3406) in
let Td1253.3400: Float =
let Td1251.3401: Float =
let Td1250.3403: Float =
let Ti1249.3404: Int =
2 in
v.2053.(Ti1249.3404) in
fsqr.1980(Td1250.3403) in
let Td1252.3402: Float =
o_param_c.1998(m.2052) in
(Td1251.3401 * Td1252.3402) in
(Td1248.3399 + Td1253.3400) in 
let rec (in_prod_co_objrot.2054: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Float) ((m.2055: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (v.2056: [Float])) =
let Td1230.3377: Float =
let Td1222.3385: Float =
let Td1220.3393: Float =
let Td1217.3395: Float =
let Ti1216.3398: Int =
1 in
v.2056.(Ti1216.3398) in
let Td1219.3396: Float =
let Ti1218.3397: Int =
2 in
v.2056.(Ti1218.3397) in
(Td1217.3395 * Td1219.3396) in
let Td1221.3394: Float =
o_param_r1.2016(m.2055) in
(Td1220.3393 * Td1221.3394) in
let Td1229.3386: Float =
let Td1227.3387: Float =
let Td1224.3389: Float =
let Ti1223.3392: Int =
0 in
v.2056.(Ti1223.3392) in
let Td1226.3390: Float =
let Ti1225.3391: Int =
2 in
v.2056.(Ti1225.3391) in
(Td1224.3389 * Td1226.3390) in
let Td1228.3388: Float =
o_param_r2.2018(m.2055) in
(Td1227.3387 * Td1228.3388) in
(Td1222.3385 + Td1229.3386) in
let Td1237.3378: Float =
let Td1235.3379: Float =
let Td1232.3381: Float =
let Ti1231.3384: Int =
0 in
v.2056.(Ti1231.3384) in
let Td1234.3382: Float =
let Ti1233.3383: Int =
1 in
v.2056.(Ti1233.3383) in
(Td1232.3381 * Td1234.3382) in
let Td1236.3380: Float =
o_param_r3.2020(m.2055) in
(Td1235.3379 * Td1236.3380) in
(Td1230.3377 + Td1237.3378) in 
let rec (solver2nd_mul_b.2057: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Float) ((m.2058: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l.2059: [Float])) =
let Td1207.3352: Float =
let Td1198.3361: Float =
let Td1196.3370: Float =
let Td1193.3372: Float =
let Ta1191.3375: [Float] =
[solver_w_vec] in
let Ti1192.3376: Int =
0 in
Ta1191.3375.(Ti1192.3376) in
let Td1195.3373: Float =
let Ti1194.3374: Int =
0 in
l.2059.(Ti1194.3374) in
(Td1193.3372 * Td1195.3373) in
let Td1197.3371: Float =
o_param_a.1994(m.2058) in
(Td1196.3370 * Td1197.3371) in
let Td1206.3362: Float =
let Td1204.3363: Float =
let Td1201.3365: Float =
let Ta1199.3368: [Float] =
[solver_w_vec] in
let Ti1200.3369: Int =
1 in
Ta1199.3368.(Ti1200.3369) in
let Td1203.3366: Float =
let Ti1202.3367: Int =
1 in
l.2059.(Ti1202.3367) in
(Td1201.3365 * Td1203.3366) in
let Td1205.3364: Float =
o_param_b.1996(m.2058) in
(Td1204.3363 * Td1205.3364) in
(Td1198.3361 + Td1206.3362) in
let Td1215.3353: Float =
let Td1213.3354: Float =
let Td1210.3356: Float =
let Ta1208.3359: [Float] =
[solver_w_vec] in
let Ti1209.3360: Int =
2 in
Ta1208.3359.(Ti1209.3360) in
let Td1212.3357: Float =
let Ti1211.3358: Int =
2 in
l.2059.(Ti1211.3358) in
(Td1210.3356 * Td1212.3357) in
let Td1214.3355: Float =
o_param_c.1998(m.2058) in
(Td1213.3354 * Td1214.3355) in
(Td1207.3352 + Td1215.3353) in 
let rec (solver2nd_rot_b.2060: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Float) ((m.2061: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l.2062: [Float])) =
let Td1175.3306: Float =
let Td1159.3322: Float =
let Td1157.3338: Float =
let Td1150.3340: Float =
let Td1147.3347: Float =
let Ta1145.3350: [Float] =
[solver_w_vec] in
let Ti1146.3351: Int =
2 in
Ta1145.3350.(Ti1146.3351) in
let Td1149.3348: Float =
let Ti1148.3349: Int =
1 in
l.2062.(Ti1148.3349) in
(Td1147.3347 * Td1149.3348) in
let Td1156.3341: Float =
let Td1153.3342: Float =
let Ta1151.3345: [Float] =
[solver_w_vec] in
let Ti1152.3346: Int =
1 in
Ta1151.3345.(Ti1152.3346) in
let Td1155.3343: Float =
let Ti1154.3344: Int =
2 in
l.2062.(Ti1154.3344) in
(Td1153.3342 * Td1155.3343) in
(Td1150.3340 + Td1156.3341) in
let Td1158.3339: Float =
o_param_r1.2016(m.2061) in
(Td1157.3338 * Td1158.3339) in
let Td1174.3323: Float =
let Td1172.3324: Float =
let Td1165.3326: Float =
let Td1162.3333: Float =
let Ta1160.3336: [Float] =
[solver_w_vec] in
let Ti1161.3337: Int =
0 in
Ta1160.3336.(Ti1161.3337) in
let Td1164.3334: Float =
let Ti1163.3335: Int =
2 in
l.2062.(Ti1163.3335) in
(Td1162.3333 * Td1164.3334) in
let Td1171.3327: Float =
let Td1168.3328: Float =
let Ta1166.3331: [Float] =
[solver_w_vec] in
let Ti1167.3332: Int =
2 in
Ta1166.3331.(Ti1167.3332) in
let Td1170.3329: Float =
let Ti1169.3330: Int =
0 in
l.2062.(Ti1169.3330) in
(Td1168.3328 * Td1170.3329) in
(Td1165.3326 + Td1171.3327) in
let Td1173.3325: Float =
o_param_r2.2018(m.2061) in
(Td1172.3324 * Td1173.3325) in
(Td1159.3322 + Td1174.3323) in
let Td1190.3307: Float =
let Td1188.3308: Float =
let Td1181.3310: Float =
let Td1178.3317: Float =
let Ta1176.3320: [Float] =
[solver_w_vec] in
let Ti1177.3321: Int =
0 in
Ta1176.3320.(Ti1177.3321) in
let Td1180.3318: Float =
let Ti1179.3319: Int =
1 in
l.2062.(Ti1179.3319) in
(Td1178.3317 * Td1180.3318) in
let Td1187.3311: Float =
let Td1184.3312: Float =
let Ta1182.3315: [Float] =
[solver_w_vec] in
let Ti1183.3316: Int =
1 in
Ta1182.3315.(Ti1183.3316) in
let Td1186.3313: Float =
let Ti1185.3314: Int =
0 in
l.2062.(Ti1185.3314) in
(Td1184.3312 * Td1186.3313) in
(Td1181.3310 + Td1187.3311) in
let Td1189.3309: Float =
o_param_r3.2020(m.2061) in
(Td1188.3308 * Td1189.3309) in
(Td1175.3306 + Td1190.3307) in 
let rec (solver_second.2063: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Int) ((m.2064: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (l.2065: [Float])) =
let aa0.3265: Float =
in_prod_sqr_obj.2051(m.2064, l.2065) in
let aa.3266: Float =
let Ti1116.3303: Int =
o_isrot.1992(m.2064) in
let Ti1117.3304: Int =
0 in
if Ti1116.3303 == Ti1117.3304 then
aa0.3265
else
let Td1118.3305: Float =
in_prod_co_objrot.2054(m.2064, l.2065) in
(aa0.3265 + Td1118.3305) in
let Td1119.3267: Float =
0. in
if Td1119.3267 == aa.3266 then
0
else
let bb0.3268: Float =
let Td1120.3301: Float =
2. in
let Td1121.3302: Float =
solver2nd_mul_b.2057(m.2064, l.2065) in
(Td1120.3301 * Td1121.3302) in
let bb.3269: Float =
let Ti1122.3298: Int =
o_isrot.1992(m.2064) in
let Ti1123.3299: Int =
0 in
if Ti1122.3298 == Ti1123.3299 then
bb0.3268
else
let Td1124.3300: Float =
solver2nd_rot_b.2060(m.2064, l.2065) in
(bb0.3268 + Td1124.3300) in
let cc0.3270: Float =
let Ta1125.3297: [Float] =
[solver_w_vec] in
in_prod_sqr_obj.2051(m.2064, Ta1125.3297) in
let cc1.3271: Float =
let Ti1126.3293: Int =
o_isrot.1992(m.2064) in
let Ti1127.3294: Int =
0 in
if Ti1126.3293 == Ti1127.3294 then
cc0.3270
else
let Td1129.3295: Float =
let Ta1128.3296: [Float] =
[solver_w_vec] in
in_prod_co_objrot.2054(m.2064, Ta1128.3296) in
(cc0.3270 + Td1129.3295) in
let cc.3272: Float =
let Ti1130.3290: Int =
o_form.1986(m.2064) in
let Ti1131.3291: Int =
3 in
if Ti1130.3290 == Ti1131.3291 then
let Td1132.3292: Float =
1. in
(cc1.3271 - Td1132.3292)
else
cc1.3271 in
let d.3273: Float =
let d2.3286: Float =
let Td1134.3288: Float =
let Td1133.3289: Float =
4. in
(Td1133.3289 * aa.3266) in
(Td1134.3288 * cc.3272) in
let Td1135.3287: Float =
fsqr.1980(bb.3269) in
(Td1135.3287 - d2.3286) in
let Td1136.3274: Float =
0. in
if d.3273 <= Td1136.3274 then
0
else
let sd.3275: Float =
sqrt(d.3273) in
let t1.3276: Float =
let Tb1137.3284: Bool =
o_isinvert.1990(m.2064) in
let Ti1138.3285: Int =
0 in
if Tb1137.3284 == Ti1138.3285 then
-(sd.3275)
else
sd.3275 in
let Tu71.3277: Unit =
let Ta1139.3278: [Int] =
[solver_dist] in
let Ti1140.3279: Int =
0 in
let Td1144.3280: Float =
let Td1143.3281: Float =
let Td1141.3282: Float =
(t1.3276 - bb.3269) in
let Td1142.3283: Float =
2. in
(Td1141.3282 / Td1142.3283) in
(Td1143.3281 / aa.3266) in
Ta1139.3278.(Ti1140.3279) <- Td1144.3280 in
1 in 
let rec (solver.2066: (Int, [Float], [Float]) -> Int) ((index.2067: Int), (l.2068: [Float]), (p.2069: [Float])) =
let m.3239: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta1095.3264: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta1095.3264.(index.2067) in
let Tu74.3240: Unit =
let Ta1096.3258: [Float] =
[solver_w_vec] in
let Ti1097.3259: Int =
0 in
let Td1101.3260: Float =
let Td1099.3261: Float =
let Ti1098.3263: Int =
0 in
p.2069.(Ti1098.3263) in
let Td1100.3262: Float =
o_param_x.2000(m.3239) in
(Td1099.3261 - Td1100.3262) in
Ta1096.3258.(Ti1097.3259) <- Td1101.3260 in
let Tu73.3241: Unit =
let Ta1102.3252: [Float] =
[solver_w_vec] in
let Ti1103.3253: Int =
1 in
let Td1107.3254: Float =
let Td1105.3255: Float =
let Ti1104.3257: Int =
1 in
p.2069.(Ti1104.3257) in
let Td1106.3256: Float =
o_param_y.2002(m.3239) in
(Td1105.3255 - Td1106.3256) in
Ta1102.3252.(Ti1103.3253) <- Td1107.3254 in
let Tu72.3242: Unit =
let Ta1108.3246: [Float] =
[solver_w_vec] in
let Ti1109.3247: Int =
2 in
let Td1113.3248: Float =
let Td1111.3249: Float =
let Ti1110.3251: Int =
2 in
p.2069.(Ti1110.3251) in
let Td1112.3250: Float =
o_param_z.2004(m.3239) in
(Td1111.3249 - Td1112.3250) in
Ta1108.3246.(Ti1109.3247) <- Td1113.3248 in
let m_shape.3243: Int =
o_form.1986(m.3239) in
let Ti1114.3244: Int =
1 in
if m_shape.3243 == Ti1114.3244 then
solver_rect.2045(m.3239, l.2068)
else
let Ti1115.3245: Int =
2 in
if m_shape.3243 == Ti1115.3245 then
solver_surface.2048(m.3239, l.2068)
else
solver_second.2063(m.3239, l.2068) in 
let rec (is_rect_outside.2070: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m.2071: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let Ti1091.3220: Int =
let Td1076.3224: Float =
o_param_a.1994(m.2071) in
let Ti1080.3225: Int =
let Td1079.3236: Float =
let Ta1077.3237: [Float] =
[isoutside_q] in
let Ti1078.3238: Int =
0 in
Ta1077.3237.(Ti1078.3238) in
abs_float(Td1079.3236) in
if Td1076.3224 <= Ti1080.3225 then
0
else
let Td1081.3226: Float =
o_param_b.1996(m.2071) in
let Ti1085.3227: Int =
let Td1084.3233: Float =
let Ta1082.3234: [Float] =
[isoutside_q] in
let Ti1083.3235: Int =
1 in
Ta1082.3234.(Ti1083.3235) in
abs_float(Td1084.3233) in
if Td1081.3226 <= Ti1085.3227 then
0
else
let Td1086.3228: Float =
o_param_c.1998(m.2071) in
let Ti1090.3229: Int =
let Td1089.3230: Float =
let Ta1087.3231: [Float] =
[isoutside_q] in
let Ti1088.3232: Int =
2 in
Ta1087.3231.(Ti1088.3232) in
abs_float(Td1089.3230) in
if Td1086.3228 <= Ti1090.3229 then
0
else
1 in
let Ti1092.3221: Int =
0 in
if Ti1091.3220 == Ti1092.3221 then
let Tb1093.3222: Bool =
o_isinvert.1990(m.2071) in
let Ti1094.3223: Int =
0 in
if Tb1093.3222 == Ti1094.3223 then
1
else
0
else
o_isinvert.1990(m.2071) in 
let rec (is_plane_outside.2072: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m.2073: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let w.3198: Float =
let Td1066.3204: Float =
let Td1060.3210: Float =
let Td1056.3216: Float =
o_param_a.1994(m.2073) in
let Td1059.3217: Float =
let Ta1057.3218: [Float] =
[isoutside_q] in
let Ti1058.3219: Int =
0 in
Ta1057.3218.(Ti1058.3219) in
(Td1056.3216 * Td1059.3217) in
let Td1065.3211: Float =
let Td1061.3212: Float =
o_param_b.1996(m.2073) in
let Td1064.3213: Float =
let Ta1062.3214: [Float] =
[isoutside_q] in
let Ti1063.3215: Int =
1 in
Ta1062.3214.(Ti1063.3215) in
(Td1061.3212 * Td1064.3213) in
(Td1060.3210 + Td1065.3211) in
let Td1071.3205: Float =
let Td1067.3206: Float =
o_param_c.1998(m.2073) in
let Td1070.3207: Float =
let Ta1068.3208: [Float] =
[isoutside_q] in
let Ti1069.3209: Int =
2 in
Ta1068.3208.(Ti1069.3209) in
(Td1067.3206 * Td1070.3207) in
(Td1066.3204 + Td1071.3205) in
let s.3199: Bool =
let Td1072.3203: Float =
0. in
if Td1072.3203 <= w.3198 then
0
else
1 in
let Tb1074.3200: Bool =
let Tb1073.3202: Bool =
o_isinvert.1990(m.2073) in
xor.1977(Tb1073.3202, s.3199) in
let Ti1075.3201: Int =
0 in
if Tb1074.3200 == Ti1075.3201 then
1
else
0 in 
let rec (is_second_outside.2074: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m.2075: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let w.3182: Float =
let Ta1044.3197: [Float] =
[isoutside_q] in
in_prod_sqr_obj.2051(m.2075, Ta1044.3197) in
let w2.3183: Float =
let Ti1045.3194: Int =
o_form.1986(m.2075) in
let Ti1046.3195: Int =
3 in
if Ti1045.3194 == Ti1046.3195 then
let Td1047.3196: Float =
1. in
(w.3182 - Td1047.3196)
else
w.3182 in
let w3.3184: Float =
let Ti1048.3190: Int =
o_isrot.1992(m.2075) in
let Ti1049.3191: Int =
0 in
if Ti1048.3190 == Ti1049.3191 then
w2.3183
else
let Td1051.3192: Float =
let Ta1050.3193: [Float] =
[isoutside_q] in
in_prod_co_objrot.2054(m.2075, Ta1050.3193) in
(w2.3183 + Td1051.3192) in
let s.3185: Bool =
let Td1052.3189: Float =
0. in
if Td1052.3189 <= w3.3184 then
0
else
1 in
let Tb1054.3186: Bool =
let Tb1053.3188: Bool =
o_isinvert.1990(m.2075) in
xor.1977(Tb1053.3188, s.3185) in
let Ti1055.3187: Int =
0 in
if Tb1054.3186 == Ti1055.3187 then
1
else
0 in 
let rec (is_outside.2076: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Bool) ((m.2077: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let Tu77.3155: Unit =
let Ta1021.3175: [Float] =
[isoutside_q] in
let Ti1022.3176: Int =
0 in
let Td1027.3177: Float =
let Ti1025.3178: Int =
let Ta1023.3180: [Int] =
[chkinside_p] in
let Ti1024.3181: Int =
0 in
Ta1023.3180.(Ti1024.3181) in
let Td1026.3179: Float =
o_param_x.2000(m.2077) in
(Ti1025.3178 - Td1026.3179) in
Ta1021.3175.(Ti1022.3176) <- Td1027.3177 in
let Tu76.3156: Unit =
let Ta1028.3168: [Float] =
[isoutside_q] in
let Ti1029.3169: Int =
1 in
let Td1034.3170: Float =
let Ti1032.3171: Int =
let Ta1030.3173: [Int] =
[chkinside_p] in
let Ti1031.3174: Int =
1 in
Ta1030.3173.(Ti1031.3174) in
let Td1033.3172: Float =
o_param_y.2002(m.2077) in
(Ti1032.3171 - Td1033.3172) in
Ta1028.3168.(Ti1029.3169) <- Td1034.3170 in
let Tu75.3157: Unit =
let Ta1035.3161: [Float] =
[isoutside_q] in
let Ti1036.3162: Int =
2 in
let Td1041.3163: Float =
let Ti1039.3164: Int =
let Ta1037.3166: [Int] =
[chkinside_p] in
let Ti1038.3167: Int =
2 in
Ta1037.3166.(Ti1038.3167) in
let Td1040.3165: Float =
o_param_z.2004(m.2077) in
(Ti1039.3164 - Td1040.3165) in
Ta1035.3161.(Ti1036.3162) <- Td1041.3163 in
let m_shape.3158: Int =
o_form.1986(m.2077) in
let Ti1042.3159: Int =
1 in
if m_shape.3158 == Ti1042.3159 then
is_rect_outside.2070(m.2077)
else
let Ti1043.3160: Int =
2 in
if m_shape.3158 == Ti1043.3160 then
is_plane_outside.2072(m.2077)
else
is_second_outside.2074(m.2077) in 
let rec (check_all_inside.2078: (Int, [Int]) -> Bool) ((ofs.2079: Int), (iand.2080: [Int])) =
let head.3146: Int =
iand.2080.(ofs.2079) in
let Ti1014.3147: Int =
let Ti1013.3154: Int =
1 in
-(Ti1013.3154) in
if head.3146 == Ti1014.3147 then
1
else
let Tb1017.3148: Bool =
let Tt1016.3152: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta1015.3153: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta1015.3153.(head.3146) in
is_outside.2076(Tt1016.3152) in
let Ti1018.3149: Int =
0 in
if Tb1017.3148 == Ti1018.3149 then
let Ti1020.3150: Int =
let Ti1019.3151: Int =
1 in
(ofs.2079 + Ti1019.3151) in
check_all_inside.2078(Ti1020.3150, iand.2080)
else
0 in 
let rec (shadow_check_and_group.2081: (Int, [Int], [Float]) -> Bool) ((iand_ofs.2082: Int), (and_group.2083: [Int]), (p.2084: [Float])) =
let Ti964.3090: Int =
and_group.2083.(iand_ofs.2082) in
let Ti966.3091: Int =
let Ti965.3145: Int =
1 in
-(Ti965.3145) in
if Ti964.3090 == Ti966.3091 then
0
else
let obj.3092: Int =
and_group.2083.(iand_ofs.2082) in
let t0.3093: Int =
let Ta967.3144: [Float] =
[light] in
solver.2066(obj.3092, Ta967.3144, p.2084) in
let t0p.3094: Float =
let Ta968.3142: [Int] =
[solver_dist] in
let Ti969.3143: Int =
0 in
Ta968.3142.(Ti969.3143) in
let Ti972.3095: Int =
let Ti970.3140: Int =
0 in
if t0.3093 == Ti970.3140 then
0
else
let Td971.3141: Float =
-0.2 in
if Td971.3141 <= t0p.3094 then
0
else
1 in
let Ti973.3096: Int =
0 in
if Ti972.3095 == Ti973.3096 then
let Tb976.3134: Bool =
let Tt975.3138: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta974.3139: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta974.3139.(obj.3092) in
o_isinvert.1990(Tt975.3138) in
let Ti977.3135: Int =
0 in
if Tb976.3134 == Ti977.3135 then
0
else
let Ti979.3136: Int =
let Ti978.3137: Int =
1 in
(iand_ofs.2082 + Ti978.3137) in
shadow_check_and_group.2081(Ti979.3136, and_group.2083, p.2084)
else
let t.3097: Float =
let Td980.3133: Float =
0.01 in
(t0p.3094 + Td980.3133) in
let Tu80.3098: Unit =
let Ta981.3124: [Int] =
[chkinside_p] in
let Ti982.3125: Int =
0 in
let Td989.3126: Float =
let Td986.3127: Float =
let Td985.3130: Float =
let Ta983.3131: [Float] =
[light] in
let Ti984.3132: Int =
0 in
Ta983.3131.(Ti984.3132) in
(Td985.3130 * t.3097) in
let Td988.3128: Float =
let Ti987.3129: Int =
0 in
p.2084.(Ti987.3129) in
(Td986.3127 + Td988.3128) in
Ta981.3124.(Ti982.3125) <- Td989.3126 in
let Tu79.3099: Unit =
let Ta990.3115: [Int] =
[chkinside_p] in
let Ti991.3116: Int =
1 in
let Td998.3117: Float =
let Td995.3118: Float =
let Td994.3121: Float =
let Ta992.3122: [Float] =
[light] in
let Ti993.3123: Int =
1 in
Ta992.3122.(Ti993.3123) in
(Td994.3121 * t.3097) in
let Td997.3119: Float =
let Ti996.3120: Int =
1 in
p.2084.(Ti996.3120) in
(Td995.3118 + Td997.3119) in
Ta990.3115.(Ti991.3116) <- Td998.3117 in
let Tu78.3100: Unit =
let Ta999.3106: [Int] =
[chkinside_p] in
let Ti1000.3107: Int =
2 in
let Td1007.3108: Float =
let Td1004.3109: Float =
let Td1003.3112: Float =
let Ta1001.3113: [Float] =
[light] in
let Ti1002.3114: Int =
2 in
Ta1001.3113.(Ti1002.3114) in
(Td1003.3112 * t.3097) in
let Td1006.3110: Float =
let Ti1005.3111: Int =
2 in
p.2084.(Ti1005.3111) in
(Td1004.3109 + Td1006.3110) in
Ta999.3106.(Ti1000.3107) <- Td1007.3108 in
let Tb1009.3101: Bool =
let Ti1008.3105: Int =
0 in
check_all_inside.2078(Ti1008.3105, and_group.2083) in
let Ti1010.3102: Int =
0 in
if Tb1009.3101 == Ti1010.3102 then
let Ti1012.3103: Int =
let Ti1011.3104: Int =
1 in
(iand_ofs.2082 + Ti1011.3104) in
shadow_check_and_group.2081(Ti1012.3103, and_group.2083, p.2084)
else
1 in 
let rec (shadow_check_one_or_group.2085: (Int, [Int], [Float]) -> Bool) ((ofs.2086: Int), (or_group.2087: [Int]), (p.2088: [Float])) =
let head.3080: Int =
or_group.2087.(ofs.2086) in
let Ti958.3081: Int =
let Ti957.3089: Int =
1 in
-(Ti957.3089) in
if head.3080 == Ti958.3081 then
0
else
let and_group.3082: [Int] =
let Ta959.3088: [[Int]] =
[and_net] in
Ta959.3088.(head.3080) in
let shadow_p.3083: Bool =
let Ti960.3087: Int =
0 in
shadow_check_and_group.2081(Ti960.3087, and_group.3082, p.2088) in
let Ti961.3084: Int =
0 in
if shadow_p.3083 == Ti961.3084 then
let Ti963.3085: Int =
let Ti962.3086: Int =
1 in
(ofs.2086 + Ti962.3086) in
shadow_check_one_or_group.2085(Ti963.3085, or_group.2087, p.2088)
else
1 in 
let rec (shadow_check_one_or_matrix.2089: (Int, [[Int]], [Float]) -> Bool) ((ofs.2090: Int), (or_matrix.2091: [[Int]]), (p.2092: [Float])) =
let head.3053: [Int] =
or_matrix.2091.(ofs.2090) in
let range_primitive.3054: Int =
let Ti933.3079: Int =
0 in
head.3053.(Ti933.3079) in
let Ti935.3055: Int =
let Ti934.3078: Int =
1 in
-(Ti934.3078) in
if range_primitive.3054 == Ti935.3055 then
0
else
let Ti936.3056: Int =
99 in
if range_primitive.3054 == Ti936.3056 then
let Tb938.3073: Bool =
let Ti937.3077: Int =
1 in
shadow_check_one_or_group.2085(Ti937.3077, head.3053, p.2092) in
let Ti939.3074: Int =
0 in
if Tb938.3073 == Ti939.3074 then
let Ti941.3075: Int =
let Ti940.3076: Int =
1 in
(ofs.2090 + Ti940.3076) in
shadow_check_one_or_matrix.2089(Ti941.3075, or_matrix.2091, p.2092)
else
1
else
let t.3057: Int =
let Ta942.3072: [Float] =
[light] in
solver.2066(range_primitive.3054, Ta942.3072, p.2092) in
let Ti943.3058: Int =
0 in
if t.3057 == Ti943.3058 then
let Ti945.3070: Int =
let Ti944.3071: Int =
1 in
(ofs.2090 + Ti944.3071) in
shadow_check_one_or_matrix.2089(Ti945.3070, or_matrix.2091, p.2092)
else
let Td946.3059: Float =
-0.1 in
let Ti949.3060: Int =
let Ta947.3068: [Int] =
[solver_dist] in
let Ti948.3069: Int =
0 in
Ta947.3068.(Ti948.3069) in
if Td946.3059 <= Ti949.3060 then
let Ti951.3066: Int =
let Ti950.3067: Int =
1 in
(ofs.2090 + Ti950.3067) in
shadow_check_one_or_matrix.2089(Ti951.3066, or_matrix.2091, p.2092)
else
let Tb953.3061: Bool =
let Ti952.3065: Int =
1 in
shadow_check_one_or_group.2085(Ti952.3065, head.3053, p.2092) in
let Ti954.3062: Int =
0 in
if Tb953.3061 == Ti954.3062 then
let Ti956.3063: Int =
let Ti955.3064: Int =
1 in
(ofs.2090 + Ti955.3064) in
shadow_check_one_or_matrix.2089(Ti956.3063, or_matrix.2091, p.2092)
else
1 in 
let rec (solve_each_element.2093: (Int, [Int]) -> Unit) ((iand_ofs.2094: Int), (and_group.2095: [Int])) =
let iobj.2961: Int =
and_group.2095.(iand_ofs.2094) in
let Ti855.2962: Int =
let Ti854.3052: Int =
1 in
-(Ti854.3052) in
if iobj.2961 == Ti855.2962 then
()
else
let t0.2963: Int =
let Ta856.3050: [Float] =
[vscan] in
let Ta857.3051: [Int] =
[viewpoint] in
solver.2066(iobj.2961, Ta856.3050, Ta857.3051) in
let Tu89.2964: Unit =
let Ti858.2971: Int =
0 in
if t0.2963 == Ti858.2971 then
let Tb861.3043: Bool =
let Tt860.3048: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta859.3049: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
Ta859.3049.(iobj.2961) in
o_isinvert.1990(Tt860.3048) in
let Ti862.3044: Int =
0 in
if Tb861.3043 == Ti862.3044 then
let Ta863.3045: [Bool] =
[end_flag] in
let Ti864.3046: Int =
0 in
let Ti865.3047: Int =
1 in
Ta863.3045.(Ti864.3046) <- Ti865.3047
else
()
else
let t0p.2972: Float =
let Ta866.3041: [Int] =
[solver_dist] in
let Ti867.3042: Int =
0 in
Ta866.3041.(Ti867.3042) in
let Td868.2973: Float =
-0.1 in
if t0p.2972 <= Td868.2973 then
()
else
let Td871.2974: Float =
let Ta869.3039: [Float] =
[tmin] in
let Ti870.3040: Int =
0 in
Ta869.3039.(Ti870.3040) in
if Td871.2974 <= t0p.2972 then
()
else
let t.2975: Float =
let Td872.3038: Float =
0.01 in
(t0p.2972 + Td872.3038) in
let Tu88.2976: Unit =
let Ta873.3028: [Int] =
[chkinside_p] in
let Ti874.3029: Int =
0 in
let Td882.3030: Float =
let Td878.3031: Float =
let Td877.3035: Float =
let Ta875.3036: [Float] =
[vscan] in
let Ti876.3037: Int =
0 in
Ta875.3036.(Ti876.3037) in
(Td877.3035 * t.2975) in
let Ti881.3032: Int =
let Ta879.3033: [Int] =
[viewpoint] in
let Ti880.3034: Int =
0 in
Ta879.3033.(Ti880.3034) in
(Td878.3031 + Ti881.3032) in
Ta873.3028.(Ti874.3029) <- Td882.3030 in
let Tu87.2977: Unit =
let Ta883.3018: [Int] =
[chkinside_p] in
let Ti884.3019: Int =
1 in
let Td892.3020: Float =
let Td888.3021: Float =
let Td887.3025: Float =
let Ta885.3026: [Float] =
[vscan] in
let Ti886.3027: Int =
1 in
Ta885.3026.(Ti886.3027) in
(Td887.3025 * t.2975) in
let Ti891.3022: Int =
let Ta889.3023: [Int] =
[viewpoint] in
let Ti890.3024: Int =
1 in
Ta889.3023.(Ti890.3024) in
(Td888.3021 + Ti891.3022) in
Ta883.3018.(Ti884.3019) <- Td892.3020 in
let Tu86.2978: Unit =
let Ta893.3008: [Int] =
[chkinside_p] in
let Ti894.3009: Int =
2 in
let Td902.3010: Float =
let Td898.3011: Float =
let Td897.3015: Float =
let Ta895.3016: [Float] =
[vscan] in
let Ti896.3017: Int =
2 in
Ta895.3016.(Ti896.3017) in
(Td897.3015 * t.2975) in
let Ti901.3012: Int =
let Ta899.3013: [Int] =
[viewpoint] in
let Ti900.3014: Int =
2 in
Ta899.3013.(Ti900.3014) in
(Td898.3011 + Ti901.3012) in
Ta893.3008.(Ti894.3009) <- Td902.3010 in
let Tb904.2979: Bool =
let Ti903.3007: Int =
0 in
check_all_inside.2078(Ti903.3007, and_group.2095) in
let Ti905.2980: Int =
0 in
if Tb904.2979 == Ti905.2980 then
()
else
let Tu85.2981: Unit =
let Ta906.3005: [Float] =
[tmin] in
let Ti907.3006: Int =
0 in
Ta906.3005.(Ti907.3006) <- t.2975 in
let Tu84.2982: Unit =
let Ta908.3000: [Int] =
[crashed_point] in
let Ti909.3001: Int =
0 in
let Ti912.3002: Int =
let Ta910.3003: [Int] =
[chkinside_p] in
let Ti911.3004: Int =
0 in
Ta910.3003.(Ti911.3004) in
Ta908.3000.(Ti909.3001) <- Ti912.3002 in
let Tu83.2983: Unit =
let Ta913.2995: [Int] =
[crashed_point] in
let Ti914.2996: Int =
1 in
let Ti917.2997: Int =
let Ta915.2998: [Int] =
[chkinside_p] in
let Ti916.2999: Int =
1 in
Ta915.2998.(Ti916.2999) in
Ta913.2995.(Ti914.2996) <- Ti917.2997 in
let Tu82.2984: Unit =
let Ta918.2990: [Int] =
[crashed_point] in
let Ti919.2991: Int =
2 in
let Ti922.2992: Int =
let Ta920.2993: [Int] =
[chkinside_p] in
let Ti921.2994: Int =
2 in
Ta920.2993.(Ti921.2994) in
Ta918.2990.(Ti919.2991) <- Ti922.2992 in
let Tu81.2985: Unit =
let Ta923.2988: [Int] =
[intsec_rectside] in
let Ti924.2989: Int =
0 in
Ta923.2988.(Ti924.2989) <- t0.2963 in
let Ta925.2986: [Int] =
[crashed_object] in
let Ti926.2987: Int =
0 in
Ta925.2986.(Ti926.2987) <- iobj.2961 in
let Tb929.2965: Bool =
let Ta927.2969: [Bool] =
[end_flag] in
let Ti928.2970: Int =
0 in
Ta927.2969.(Ti928.2970) in
let Ti930.2966: Int =
0 in
if Tb929.2965 == Ti930.2966 then
let Ti932.2967: Int =
let Ti931.2968: Int =
1 in
(iand_ofs.2094 + Ti931.2968) in
solve_each_element.2093(Ti932.2967, and_group.2095)
else
() in 
let rec (solve_one_or_network.2096: (Int, [Int]) -> Unit) ((ofs.2097: Int), (or_group.2098: [Int])) =
let head.2948: Int =
or_group.2098.(ofs.2097) in
let Ti846.2949: Int =
let Ti845.2960: Int =
1 in
-(Ti845.2960) in
if head.2948 == Ti846.2949 then
()
else
let and_group.2950: [Int] =
let Ta847.2959: [[Int]] =
[and_net] in
Ta847.2959.(head.2948) in
let Tu91.2951: Unit =
let Ta848.2956: [Bool] =
[end_flag] in
let Ti849.2957: Int =
0 in
let Ti850.2958: Int =
0 in
Ta848.2956.(Ti849.2957) <- Ti850.2958 in
let Tu90.2952: Unit =
let Ti851.2955: Int =
0 in
solve_each_element.2093(Ti851.2955, and_group.2950) in
let Ti853.2953: Int =
let Ti852.2954: Int =
1 in
(ofs.2097 + Ti852.2954) in
solve_one_or_network.2096(Ti853.2953, or_group.2098) in 
let rec (trace_or_matrix.2099: (Int, [[Int]]) -> Unit) ((ofs.2100: Int), (or_network.2101: [[Int]])) =
let head.2927: [Int] =
or_network.2101.(ofs.2100) in
let range_primitive.2928: Int =
let Ti829.2947: Int =
0 in
head.2927.(Ti829.2947) in
let Ti831.2929: Int =
let Ti830.2946: Int =
1 in
-(Ti830.2946) in
if range_primitive.2928 == Ti831.2929 then
()
else
let Tu92.2930: Unit =
let Ti832.2933: Int =
99 in
if range_primitive.2928 == Ti832.2933 then
let Ti833.2945: Int =
1 in
solve_one_or_network.2096(Ti833.2945, head.2927)
else
let t.2934: Int =
let Ta834.2943: [Float] =
[vscan] in
let Ta835.2944: [Int] =
[viewpoint] in
solver.2066(range_primitive.2928, Ta834.2943, Ta835.2944) in
let Ti836.2935: Int =
0 in
if t.2934 == Ti836.2935 then
()
else
let tp.2936: Int =
let Ta837.2941: [Int] =
[solver_dist] in
let Ti838.2942: Int =
0 in
Ta837.2941.(Ti838.2942) in
let Td841.2937: Float =
let Ta839.2939: [Float] =
[tmin] in
let Ti840.2940: Int =
0 in
Ta839.2939.(Ti840.2940) in
if Td841.2937 <= tp.2936 then
()
else
let Ti842.2938: Int =
1 in
solve_one_or_network.2096(Ti842.2938, head.2927) in
let Ti844.2931: Int =
let Ti843.2932: Int =
1 in
(ofs.2100 + Ti843.2932) in
trace_or_matrix.2099(Ti844.2931, or_network.2101) in 
let rec (tracer.2102: (Int, Int) -> Bool) ((viewpoint.2103: Int), (vscan.2104: Int)) =
let Tu94.2913: Unit =
let Ta818.2924: [Float] =
[tmin] in
let Ti819.2925: Int =
0 in
let Td820.2926: Float =
1000000000. in
Ta818.2924.(Ti819.2925) <- Td820.2926 in
let Tu93.2914: Unit =
let Ti821.2920: Int =
0 in
let Ta824.2921: [[Int]] =
let Ta822.2922: [[[Int]]] =
[or_net] in
let Ti823.2923: Int =
0 in
Ta822.2922.(Ti823.2923) in
trace_or_matrix.2099(Ti821.2920, Ta824.2921) in
let t.2915: Float =
let Ta825.2918: [Float] =
[tmin] in
let Ti826.2919: Int =
0 in
Ta825.2918.(Ti826.2919) in
let Td827.2916: Float =
-0.1 in
if t.2915 <= Td827.2916 then
0
else
let Td828.2917: Float =
100000000. in
if Td828.2917 <= t.2915 then
0
else
1 in 
let rec (get_nvector_rect.2105: (Unit) -> Unit) ((Tu95.2106: Unit)) =
let rectside.2862: Int =
let Ta774.2911: [Int] =
[intsec_rectside] in
let Ti775.2912: Int =
0 in
Ta774.2911.(Ti775.2912) in
let Ti776.2863: Int =
1 in
if rectside.2862 == Ti776.2863 then
let Tu97.2896: Unit =
let Ta777.2904: [Float] =
[nvector] in
let Ti778.2905: Int =
0 in
let Td783.2906: Float =
let Td782.2907: Float =
let Td781.2908: Float =
let Ta779.2909: [Float] =
[vscan] in
let Ti780.2910: Int =
0 in
Ta779.2909.(Ti780.2910) in
sgn.2025(Td781.2908) in
-(Td782.2907) in
Ta777.2904.(Ti778.2905) <- Td783.2906 in
let Tu96.2897: Unit =
let Ta784.2901: [Float] =
[nvector] in
let Ti785.2902: Int =
1 in
let Td786.2903: Float =
0. in
Ta784.2901.(Ti785.2902) <- Td786.2903 in
let Ta787.2898: [Float] =
[nvector] in
let Ti788.2899: Int =
2 in
let Td789.2900: Float =
0. in
Ta787.2898.(Ti788.2899) <- Td789.2900
else
let Ti790.2864: Int =
2 in
if rectside.2862 == Ti790.2864 then
let Tu99.2881: Unit =
let Ta791.2893: [Float] =
[nvector] in
let Ti792.2894: Int =
0 in
let Td793.2895: Float =
0. in
Ta791.2893.(Ti792.2894) <- Td793.2895 in
let Tu98.2882: Unit =
let Ta794.2886: [Float] =
[nvector] in
let Ti795.2887: Int =
1 in
let Td800.2888: Float =
let Td799.2889: Float =
let Td798.2890: Float =
let Ta796.2891: [Float] =
[vscan] in
let Ti797.2892: Int =
1 in
Ta796.2891.(Ti797.2892) in
sgn.2025(Td798.2890) in
-(Td799.2889) in
Ta794.2886.(Ti795.2887) <- Td800.2888 in
let Ta801.2883: [Float] =
[nvector] in
let Ti802.2884: Int =
2 in
let Td803.2885: Float =
0. in
Ta801.2883.(Ti802.2884) <- Td803.2885
else
let Ti804.2865: Int =
3 in
if rectside.2862 == Ti804.2865 then
let Tu101.2866: Unit =
let Ta805.2878: [Float] =
[nvector] in
let Ti806.2879: Int =
0 in
let Td807.2880: Float =
0. in
Ta805.2878.(Ti806.2879) <- Td807.2880 in
let Tu100.2867: Unit =
let Ta808.2875: [Float] =
[nvector] in
let Ti809.2876: Int =
1 in
let Td810.2877: Float =
0. in
Ta808.2875.(Ti809.2876) <- Td810.2877 in
let Ta811.2868: [Float] =
[nvector] in
let Ti812.2869: Int =
2 in
let Td817.2870: Float =
let Td816.2871: Float =
let Td815.2872: Float =
let Ta813.2873: [Float] =
[vscan] in
let Ti814.2874: Int =
2 in
Ta813.2873.(Ti814.2874) in
sgn.2025(Td815.2872) in
-(Td816.2871) in
Ta811.2868.(Ti812.2869) <- Td817.2870
else
() in 
let rec (get_nvector_plane.2107: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])) -> Unit) ((m.2108: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]))) =
let Tu103.2848: Unit =
let Ta762.2858: [Float] =
[nvector] in
let Ti763.2859: Int =
0 in
let Td765.2860: Float =
let Td764.2861: Float =
o_param_a.1994(m.2108) in
-(Td764.2861) in
Ta762.2858.(Ti763.2859) <- Td765.2860 in
let Tu102.2849: Unit =
let Ta766.2854: [Float] =
[nvector] in
let Ti767.2855: Int =
1 in
let Td769.2856: Float =
let Td768.2857: Float =
o_param_b.1996(m.2108) in
-(Td768.2857) in
Ta766.2854.(Ti767.2855) <- Td769.2856 in
let Ta770.2850: [Float] =
[nvector] in
let Ti771.2851: Int =
2 in
let Td773.2852: Float =
let Td772.2853: Float =
o_param_c.1998(m.2108) in
-(Td772.2853) in
Ta770.2850.(Ti771.2851) <- Td773.2852 in 
let rec (get_nvector_second_norot.2109: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Unit) ((m.2110: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (p.2111: [Float])) =
let Tu106.2819: Unit =
let Ta736.2840: [Float] =
[nvector] in
let Ti737.2841: Int =
0 in
let Td743.2842: Float =
let Td741.2843: Float =
let Td739.2845: Float =
let Ti738.2847: Int =
0 in
p.2111.(Ti738.2847) in
let Td740.2846: Float =
o_param_x.2000(m.2110) in
(Td739.2845 - Td740.2846) in
let Td742.2844: Float =
o_param_a.1994(m.2110) in
(Td741.2843 * Td742.2844) in
Ta736.2840.(Ti737.2841) <- Td743.2842 in
let Tu105.2820: Unit =
let Ta744.2832: [Float] =
[nvector] in
let Ti745.2833: Int =
1 in
let Td751.2834: Float =
let Td749.2835: Float =
let Td747.2837: Float =
let Ti746.2839: Int =
1 in
p.2111.(Ti746.2839) in
let Td748.2838: Float =
o_param_y.2002(m.2110) in
(Td747.2837 - Td748.2838) in
let Td750.2836: Float =
o_param_b.1996(m.2110) in
(Td749.2835 * Td750.2836) in
Ta744.2832.(Ti745.2833) <- Td751.2834 in
let Tu104.2821: Unit =
let Ta752.2824: [Float] =
[nvector] in
let Ti753.2825: Int =
2 in
let Td759.2826: Float =
let Td757.2827: Float =
let Td755.2829: Float =
let Ti754.2831: Int =
2 in
p.2111.(Ti754.2831) in
let Td756.2830: Float =
o_param_z.2004(m.2110) in
(Td755.2829 - Td756.2830) in
let Td758.2828: Float =
o_param_c.1998(m.2110) in
(Td757.2827 * Td758.2828) in
Ta752.2824.(Ti753.2825) <- Td759.2826 in
let Ta760.2822: [Float] =
[nvector] in
let Tb761.2823: Bool =
o_isinvert.1990(m.2110) in
normalize_vector.2022(Ta760.2822, Tb761.2823) in 
let rec (get_nvector_second_rot.2112: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Unit) ((m.2113: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (p.2114: [Float])) =
let Tu112.2733: Unit =
let Ta656.2813: [Float] =
[nvector_w] in
let Ti657.2814: Int =
0 in
let Td661.2815: Float =
let Td659.2816: Float =
let Ti658.2818: Int =
0 in
p.2114.(Ti658.2818) in
let Td660.2817: Float =
o_param_x.2000(m.2113) in
(Td659.2816 - Td660.2817) in
Ta656.2813.(Ti657.2814) <- Td661.2815 in
let Tu111.2734: Unit =
let Ta662.2807: [Float] =
[nvector_w] in
let Ti663.2808: Int =
1 in
let Td667.2809: Float =
let Td665.2810: Float =
let Ti664.2812: Int =
1 in
p.2114.(Ti664.2812) in
let Td666.2811: Float =
o_param_y.2002(m.2113) in
(Td665.2810 - Td666.2811) in
Ta662.2807.(Ti663.2808) <- Td667.2809 in
let Tu110.2735: Unit =
let Ta668.2801: [Float] =
[nvector_w] in
let Ti669.2802: Int =
2 in
let Td673.2803: Float =
let Td671.2804: Float =
let Ti670.2806: Int =
2 in
p.2114.(Ti670.2806) in
let Td672.2805: Float =
o_param_z.2004(m.2113) in
(Td671.2804 - Td672.2805) in
Ta668.2801.(Ti669.2802) <- Td673.2803 in
let Tu109.2736: Unit =
let Ta674.2781: [Float] =
[nvector] in
let Ti675.2782: Int =
0 in
let Td693.2783: Float =
let Td680.2784: Float =
let Td678.2797: Float =
let Ta676.2799: [Float] =
[nvector_w] in
let Ti677.2800: Int =
0 in
Ta676.2799.(Ti677.2800) in
let Td679.2798: Float =
o_param_a.1994(m.2113) in
(Td678.2797 * Td679.2798) in
let Td692.2785: Float =
let Td691.2786: Float =
let Td685.2787: Float =
let Td683.2793: Float =
let Ta681.2795: [Float] =
[nvector_w] in
let Ti682.2796: Int =
1 in
Ta681.2795.(Ti682.2796) in
let Td684.2794: Float =
o_param_r3.2020(m.2113) in
(Td683.2793 * Td684.2794) in
let Td690.2788: Float =
let Td688.2789: Float =
let Ta686.2791: [Float] =
[nvector_w] in
let Ti687.2792: Int =
2 in
Ta686.2791.(Ti687.2792) in
let Td689.2790: Float =
o_param_r2.2018(m.2113) in
(Td688.2789 * Td689.2790) in
(Td685.2787 + Td690.2788) in
fhalf.1982(Td691.2786) in
(Td680.2784 + Td692.2785) in
Ta674.2781.(Ti675.2782) <- Td693.2783 in
let Tu108.2737: Unit =
let Ta694.2761: [Float] =
[nvector] in
let Ti695.2762: Int =
1 in
let Td713.2763: Float =
let Td700.2764: Float =
let Td698.2777: Float =
let Ta696.2779: [Float] =
[nvector_w] in
let Ti697.2780: Int =
1 in
Ta696.2779.(Ti697.2780) in
let Td699.2778: Float =
o_param_b.1996(m.2113) in
(Td698.2777 * Td699.2778) in
let Td712.2765: Float =
let Td711.2766: Float =
let Td705.2767: Float =
let Td703.2773: Float =
let Ta701.2775: [Float] =
[nvector_w] in
let Ti702.2776: Int =
0 in
Ta701.2775.(Ti702.2776) in
let Td704.2774: Float =
o_param_r3.2020(m.2113) in
(Td703.2773 * Td704.2774) in
let Td710.2768: Float =
let Td708.2769: Float =
let Ta706.2771: [Float] =
[nvector_w] in
let Ti707.2772: Int =
2 in
Ta706.2771.(Ti707.2772) in
let Td709.2770: Float =
o_param_r1.2016(m.2113) in
(Td708.2769 * Td709.2770) in
(Td705.2767 + Td710.2768) in
fhalf.1982(Td711.2766) in
(Td700.2764 + Td712.2765) in
Ta694.2761.(Ti695.2762) <- Td713.2763 in
let Tu107.2738: Unit =
let Ta714.2741: [Float] =
[nvector] in
let Ti715.2742: Int =
2 in
let Td733.2743: Float =
let Td720.2744: Float =
let Td718.2757: Float =
let Ta716.2759: [Float] =
[nvector_w] in
let Ti717.2760: Int =
2 in
Ta716.2759.(Ti717.2760) in
let Td719.2758: Float =
o_param_c.1998(m.2113) in
(Td718.2757 * Td719.2758) in
let Td732.2745: Float =
let Td731.2746: Float =
let Td725.2747: Float =
let Td723.2753: Float =
let Ta721.2755: [Float] =
[nvector_w] in
let Ti722.2756: Int =
0 in
Ta721.2755.(Ti722.2756) in
let Td724.2754: Float =
o_param_r2.2018(m.2113) in
(Td723.2753 * Td724.2754) in
let Td730.2748: Float =
let Td728.2749: Float =
let Ta726.2751: [Float] =
[nvector_w] in
let Ti727.2752: Int =
1 in
Ta726.2751.(Ti727.2752) in
let Td729.2750: Float =
o_param_r1.2016(m.2113) in
(Td728.2749 * Td729.2750) in
(Td725.2747 + Td730.2748) in
fhalf.1982(Td731.2746) in
(Td720.2744 + Td732.2745) in
Ta714.2741.(Ti715.2742) <- Td733.2743 in
let Ta734.2739: [Float] =
[nvector] in
let Tb735.2740: Bool =
o_isinvert.1990(m.2113) in
normalize_vector.2022(Ta734.2739, Tb735.2740) in 
let rec (get_nvector.2115: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Unit) ((m.2116: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (p.2117: [Float])) =
let m_shape.2727: Int =
o_form.1986(m.2116) in
let Ti651.2728: Int =
1 in
if m_shape.2727 == Ti651.2728 then
let Tu652.2732: Unit =
() in
get_nvector_rect.2105(Tu652.2732)
else
let Ti653.2729: Int =
2 in
if m_shape.2727 == Ti653.2729 then
get_nvector_plane.2107(m.2116)
else
let Ti654.2730: Int =
o_isrot.1992(m.2116) in
let Ti655.2731: Int =
0 in
if Ti654.2730 == Ti655.2731 then
get_nvector_second_norot.2109(m.2116, p.2117)
else
get_nvector_second_rot.2112(m.2116, p.2117) in 
let rec (utexture.2118: ((Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]), [Float]) -> Unit) ((m.2119: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])), (p.2120: [Float])) =
let m_tex.2569: Int =
o_texturetype.1984(m.2119) in
let Tu117.2570: Unit =
let Ta522.2724: [Float] =
[texture_color] in
let Ti523.2725: Int =
0 in
let Ti524.2726: Int =
o_color_red.2010(m.2119) in
Ta522.2724.(Ti523.2725) <- Ti524.2726 in
let Tu116.2571: Unit =
let Ta525.2721: [Float] =
[texture_color] in
let Ti526.2722: Int =
1 in
let Ti527.2723: Int =
o_color_green.2012(m.2119) in
Ta525.2721.(Ti526.2722) <- Ti527.2723 in
let Tu115.2572: Unit =
let Ta528.2718: [Float] =
[texture_color] in
let Ti529.2719: Int =
2 in
let Ti530.2720: Int =
o_color_blue.2014(m.2119) in
Ta528.2718.(Ti529.2719) <- Ti530.2720 in
let Ti531.2573: Int =
1 in
if m_tex.2569 == Ti531.2573 then
let w1.2688: Float =
let Td533.2715: Float =
let Ti532.2717: Int =
0 in
p.2120.(Ti532.2717) in
let Td534.2716: Float =
o_param_x.2000(m.2119) in
(Td533.2715 - Td534.2716) in
let flag1.2689: Bool =
let d1.2708: Float =
let Td537.2711: Float =
let Td536.2713: Float =
let Td535.2714: Float =
0.05 in
(w1.2688 * Td535.2714) in
floor(Td536.2713) in
let Td538.2712: Float =
20. in
(Td537.2711 * Td538.2712) in
let Td539.2709: Float =
10. in
let Td540.2710: Float =
(w1.2688 - d1.2708) in
if Td539.2709 <= Td540.2710 then
0
else
1 in
let w3.2690: Float =
let Td542.2705: Float =
let Ti541.2707: Int =
2 in
p.2120.(Ti541.2707) in
let Td543.2706: Float =
o_param_z.2004(m.2119) in
(Td542.2705 - Td543.2706) in
let flag2.2691: Bool =
let d2.2698: Float =
let Td546.2701: Float =
let Td545.2703: Float =
let Td544.2704: Float =
0.05 in
(w3.2690 * Td544.2704) in
floor(Td545.2703) in
let Td547.2702: Float =
20. in
(Td546.2701 * Td547.2702) in
let Td548.2699: Float =
10. in
let Td549.2700: Float =
(w3.2690 - d2.2698) in
if Td548.2699 <= Td549.2700 then
0
else
1 in
let Ta550.2692: [Float] =
[texture_color] in
let Ti551.2693: Int =
1 in
let Td555.2694: Float =
let Ti552.2695: Int =
0 in
if flag1.2689 == Ti552.2695 then
let Ti553.2697: Int =
0 in
if flag2.2691 == Ti553.2697 then
255.
else
0.
else
let Ti554.2696: Int =
0 in
if flag2.2691 == Ti554.2696 then
0.
else
255. in
Ta550.2692.(Ti551.2693) <- Td555.2694
else
let Ti556.2574: Int =
2 in
if m_tex.2569 == Ti556.2574 then
let w2.2671: Float =
let Td561.2683: Float =
let Td560.2684: Float =
let Td558.2685: Float =
let Ti557.2687: Int =
1 in
p.2120.(Ti557.2687) in
let Td559.2686: Float =
0.25 in
(Td558.2685 * Td559.2686) in
sin(Td560.2684) in
fsqr.1980(Td561.2683) in
let Tu113.2672: Unit =
let Ta562.2679: [Float] =
[texture_color] in
let Ti563.2680: Int =
0 in
let Td565.2681: Float =
let Td564.2682: Float =
255. in
(Td564.2682 * w2.2671) in
Ta562.2679.(Ti563.2680) <- Td565.2681 in
let Ta566.2673: [Float] =
[texture_color] in
let Ti567.2674: Int =
1 in
let Td571.2675: Float =
let Td568.2676: Float =
255. in
let Td570.2677: Float =
let Td569.2678: Float =
1. in
(Td569.2678 - w2.2671) in
(Td568.2676 * Td570.2677) in
Ta566.2673.(Ti567.2674) <- Td571.2675
else
let Ti572.2575: Int =
3 in
if m_tex.2569 == Ti572.2575 then
let w1.2640: Float =
let Td574.2668: Float =
let Ti573.2670: Int =
0 in
p.2120.(Ti573.2670) in
let Td575.2669: Float =
o_param_x.2000(m.2119) in
(Td574.2668 - Td575.2669) in
let w3.2641: Float =
let Td577.2665: Float =
let Ti576.2667: Int =
2 in
p.2120.(Ti576.2667) in
let Td578.2666: Float =
o_param_z.2004(m.2119) in
(Td577.2665 - Td578.2666) in
let w2.2642: Float =
let Td582.2660: Float =
let Td581.2662: Float =
let Td579.2663: Float =
fsqr.1980(w1.2640) in
let Td580.2664: Float =
fsqr.1980(w3.2641) in
(Td579.2663 + Td580.2664) in
sqrt(Td581.2662) in
let Td583.2661: Float =
10. in
(Td582.2660 / Td583.2661) in
let w4.2643: Float =
let Td585.2657: Float =
let Td584.2659: Float =
floor(w2.2642) in
(w2.2642 - Td584.2659) in
let Td586.2658: Float =
3.1415927 in
(Td585.2657 * Td586.2658) in
let cws.2644: Float =
let Td587.2656: Float =
cos(w4.2643) in
fsqr.1980(Td587.2656) in
let Tu114.2645: Unit =
let Ta588.2652: [Float] =
[texture_color] in
let Ti589.2653: Int =
1 in
let Td591.2654: Float =
let Td590.2655: Float =
255. in
(cws.2644 * Td590.2655) in
Ta588.2652.(Ti589.2653) <- Td591.2654 in
let Ta592.2646: [Float] =
[texture_color] in
let Ti593.2647: Int =
2 in
let Td597.2648: Float =
let Td595.2649: Float =
let Td594.2651: Float =
1. in
(Td594.2651 - cws.2644) in
let Td596.2650: Float =
255. in
(Td595.2649 * Td596.2650) in
Ta592.2646.(Ti593.2647) <- Td597.2648
else
let Ti598.2576: Int =
4 in
if m_tex.2569 == Ti598.2576 then
let w1.2577: Float =
let Td602.2634: Float =
let Td600.2637: Float =
let Ti599.2639: Int =
0 in
p.2120.(Ti599.2639) in
let Td601.2638: Float =
o_param_x.2000(m.2119) in
(Td600.2637 - Td601.2638) in
let Td604.2635: Float =
let Td603.2636: Float =
o_param_a.1994(m.2119) in
sqrt(Td603.2636) in
(Td602.2634 * Td604.2635) in
let w3.2578: Float =
let Td608.2628: Float =
let Td606.2631: Float =
let Ti605.2633: Int =
2 in
p.2120.(Ti605.2633) in
let Td607.2632: Float =
o_param_z.2004(m.2119) in
(Td606.2631 - Td607.2632) in
let Td610.2629: Float =
let Td609.2630: Float =
o_param_c.1998(m.2119) in
sqrt(Td609.2630) in
(Td608.2628 * Td610.2629) in
let w4.2579: Float =
let Td613.2625: Float =
let Td611.2626: Float =
fsqr.1980(w1.2577) in
let Td612.2627: Float =
fsqr.1980(w3.2578) in
(Td611.2626 + Td612.2627) in
sqrt(Td613.2625) in
let w7.2580: Float =
let Td614.2617: Float =
0.0001 in
let Ti615.2618: Int =
abs_float(w1.2577) in
if Td614.2617 <= Ti615.2618 then
let w5.2619: Int =
let Td616.2624: Float =
(w3.2578 / w1.2577) in
abs_float(Td616.2624) in
let Td617.2620: Float =
atan(w5.2619) in
let Td620.2621: Float =
let Td618.2622: Float =
30. in
let Td619.2623: Float =
3.1415927 in
(Td618.2622 / Td619.2623) in
(Td617.2620 * Td620.2621)
else
15. in
let w9.2581: Float =
let Td621.2616: Float =
floor(w7.2580) in
(w7.2580 - Td621.2616) in
let w2.2582: Float =
let Td625.2610: Float =
let Td623.2613: Float =
let Ti622.2615: Int =
1 in
p.2120.(Ti622.2615) in
let Td624.2614: Float =
o_param_y.2002(m.2119) in
(Td623.2613 - Td624.2614) in
let Td627.2611: Float =
let Td626.2612: Float =
o_param_b.1996(m.2119) in
sqrt(Td626.2612) in
(Td625.2610 * Td627.2611) in
let w8.2583: Float =
let Td628.2602: Float =
0.0001 in
let Ti629.2603: Int =
abs_float(w7.2580) in
if Td628.2602 <= Ti629.2603 then
let w6.2604: Int =
let Td630.2609: Float =
(w2.2582 / w4.2579) in
abs_float(Td630.2609) in
let Td631.2605: Float =
atan(w6.2604) in
let Td634.2606: Float =
let Td632.2607: Float =
30. in
let Td633.2608: Float =
3.1415927 in
(Td632.2607 / Td633.2608) in
(Td631.2605 * Td634.2606)
else
15. in
let w10.2584: Float =
let Td635.2601: Float =
floor(w8.2583) in
(w8.2583 - Td635.2601) in
let w11.2585: Float =
let Td640.2593: Float =
let Td636.2597: Float =
0.15 in
let Td639.2598: Float =
let Td638.2599: Float =
let Td637.2600: Float =
0.5 in
(Td637.2600 - w9.2581) in
fsqr.1980(Td638.2599) in
(Td636.2597 - Td639.2598) in
let Td643.2594: Float =
let Td642.2595: Float =
let Td641.2596: Float =
0.5 in
(Td641.2596 - w10.2584) in
fsqr.1980(Td642.2595) in
(Td640.2593 - Td643.2594) in
let Ta644.2586: [Float] =
[texture_color] in
let Ti645.2587: Int =
2 in
let Td650.2588: Float =
let Td646.2589: Float =
0. in
if w11.2585 <= Td646.2589 then
0.
else
let Td649.2590: Float =
let Td647.2591: Float =
255. in
let Td648.2592: Float =
0.3 in
(Td647.2591 / Td648.2592) in
(w11.2585 * Td649.2590) in
Ta644.2586.(Ti645.2587) <- Td650.2588
else
() in 
let rec (in_prod.2121: ([Float], [Float]) -> Float) ((v1.2122: [Float]), (v2.2123: [Float])) =
let Td516.2553: Float =
let Td510.2559: Float =
let Td507.2565: Float =
let Ti506.2568: Int =
0 in
v1.2122.(Ti506.2568) in
let Td509.2566: Float =
let Ti508.2567: Int =
0 in
v2.2123.(Ti508.2567) in
(Td507.2565 * Td509.2566) in
let Td515.2560: Float =
let Td512.2561: Float =
let Ti511.2564: Int =
1 in
v1.2122.(Ti511.2564) in
let Td514.2562: Float =
let Ti513.2563: Int =
1 in
v2.2123.(Ti513.2563) in
(Td512.2561 * Td514.2562) in
(Td510.2559 + Td515.2560) in
let Td521.2554: Float =
let Td518.2555: Float =
let Ti517.2558: Int =
2 in
v1.2122.(Ti517.2558) in
let Td520.2556: Float =
let Ti519.2557: Int =
2 in
v2.2123.(Ti519.2557) in
(Td518.2555 * Td520.2556) in
(Td516.2553 + Td521.2554) in 
let rec (accumulate_vec_mul.2124: ([Float], [Float], Float) -> Unit) ((v1.2125: [Float]), (v2.2126: [Float]), (w.2127: Float)) =
let Tu119.2530: Unit =
let Ti485.2546: Int =
0 in
let Td491.2547: Float =
let Td487.2548: Float =
let Ti486.2552: Int =
0 in
v1.2125.(Ti486.2552) in
let Td490.2549: Float =
let Td489.2550: Float =
let Ti488.2551: Int =
0 in
v2.2126.(Ti488.2551) in
(w.2127 * Td489.2550) in
(Td487.2548 + Td490.2549) in
v1.2125.(Ti485.2546) <- Td491.2547 in
let Tu118.2531: Unit =
let Ti492.2539: Int =
1 in
let Td498.2540: Float =
let Td494.2541: Float =
let Ti493.2545: Int =
1 in
v1.2125.(Ti493.2545) in
let Td497.2542: Float =
let Td496.2543: Float =
let Ti495.2544: Int =
1 in
v2.2126.(Ti495.2544) in
(w.2127 * Td496.2543) in
(Td494.2541 + Td497.2542) in
v1.2125.(Ti492.2539) <- Td498.2540 in
let Ti499.2532: Int =
2 in
let Td505.2533: Float =
let Td501.2534: Float =
let Ti500.2538: Int =
2 in
v1.2125.(Ti500.2538) in
let Td504.2535: Float =
let Td503.2536: Float =
let Ti502.2537: Int =
2 in
v2.2126.(Ti502.2537) in
(w.2127 * Td503.2536) in
(Td501.2534 + Td504.2535) in
v1.2125.(Ti499.2532) <- Td505.2533 in 
let rec (raytracing.2128: (Int, Float) -> Unit) ((nref.2129: Int), (energy.2130: Float)) =
let crashed_p.2392: Bool =
let Ta371.2528: [Int] =
[viewpoint] in
let Ta372.2529: [Float] =
[vscan] in
tracer.2102(Ta371.2528, Ta372.2529) in
let Tu131.2393: Unit =
let Ti373.2494: Int =
0 in
if crashed_p.2392 == Ti373.2494 then
let Ti374.2495: Int =
0 in
if nref.2129 == Ti374.2495 then
()
else
let hl.2496: Float =
let Td377.2525: Float =
let Ta375.2526: [Float] =
[vscan] in
let Ta376.2527: [Float] =
[light] in
in_prod.2121(Ta375.2526, Ta376.2527) in
-(Td377.2525) in
let Td378.2497: Float =
0. in
if hl.2496 <= Td378.2497 then
()
else
let ihl.2498: Float =
let Td381.2519: Float =
let Td380.2523: Float =
let Td379.2524: Float =
fsqr.1980(hl.2496) in
(Td379.2524 * hl.2496) in
(Td380.2523 * energy.2130) in
let Td384.2520: Float =
let Ta382.2521: [Float] =
[beam] in
let Ti383.2522: Int =
0 in
Ta382.2521.(Ti383.2522) in
(Td381.2519 * Td384.2520) in
let Tu121.2499: Unit =
let Ta385.2513: [Float] =
[rgb] in
let Ti386.2514: Int =
0 in
let Td390.2515: Float =
let Td389.2516: Float =
let Ta387.2517: [Float] =
[rgb] in
let Ti388.2518: Int =
0 in
Ta387.2517.(Ti388.2518) in
(Td389.2516 + ihl.2498) in
Ta385.2513.(Ti386.2514) <- Td390.2515 in
let Tu120.2500: Unit =
let Ta391.2507: [Float] =
[rgb] in
let Ti392.2508: Int =
1 in
let Td396.2509: Float =
let Td395.2510: Float =
let Ta393.2511: [Float] =
[rgb] in
let Ti394.2512: Int =
1 in
Ta393.2511.(Ti394.2512) in
(Td395.2510 + ihl.2498) in
Ta391.2507.(Ti392.2508) <- Td396.2509 in
let Ta397.2501: [Float] =
[rgb] in
let Ti398.2502: Int =
2 in
let Td402.2503: Float =
let Td401.2504: Float =
let Ta399.2505: [Float] =
[rgb] in
let Ti400.2506: Int =
2 in
Ta399.2505.(Ti400.2506) in
(Td401.2504 + ihl.2498) in
Ta397.2501.(Ti398.2502) <- Td402.2503
else
() in
let Ti403.2394: Int =
0 in
if crashed_p.2392 == Ti403.2394 then
()
else
let cobj.2395: (Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float]) =
let Ta404.2490: [(Int, Int, Int, Int, [Float], [Float], Bool, [Float], [Int], [Float])] =
[objects] in
let Ti407.2491: Int =
let Ta405.2492: [Int] =
[crashed_object] in
let Ti406.2493: Int =
0 in
Ta405.2492.(Ti406.2493) in
Ta404.2490.(Ti407.2491) in
let Tu130.2396: Unit =
let Ta408.2489: [Int] =
[crashed_point] in
get_nvector.2115(cobj.2395, Ta408.2489) in
let bright.2397: Float =
let Tb414.2473: Bool =
let Ti409.2484: Int =
0 in
let Ta412.2485: [[Int]] =
let Ta410.2487: [[[Int]]] =
[or_net] in
let Ti411.2488: Int =
0 in
Ta410.2487.(Ti411.2488) in
let Ta413.2486: [Int] =
[crashed_point] in
shadow_check_one_or_matrix.2089(Ti409.2484, Ta412.2485, Ta413.2486) in
let Ti415.2474: Int =
0 in
if Tb414.2473 == Ti415.2474 then
let br.2475: Float =
let Td418.2481: Float =
let Ta416.2482: [Float] =
[nvector] in
let Ta417.2483: [Float] =
[light] in
in_prod.2121(Ta416.2482, Ta417.2483) in
-(Td418.2481) in
let br1.2476: Float =
let Td419.2479: Float =
0. in
if Td419.2479 <= br.2475 then
let Td420.2480: Float =
0.2 in
(br.2475 + Td420.2480)
else
0.2 in
let Td421.2477: Float =
(br1.2476 * energy.2130) in
let Td422.2478: Float =
o_diffuse.2006(cobj.2395) in
(Td421.2477 * Td422.2478)
else
0. in
let Tu129.2398: Unit =
let Ta423.2472: [Int] =
[crashed_point] in
utexture.2118(cobj.2395, Ta423.2472) in
let Tu128.2399: Unit =
let Ta424.2470: [Float] =
[rgb] in
let Ta425.2471: [Float] =
[texture_color] in
accumulate_vec_mul.2124(Ta424.2470, Ta425.2471, bright.2397) in
let Ti426.2400: Int =
4 in
if nref.2129 <= Ti426.2400 then
let Td427.2401: Float =
0.1 in
if energy.2130 <= Td427.2401 then
()
else
let w.2402: Float =
let Td428.2466: Float =
-2. in
let Td431.2467: Float =
let Ta429.2468: [Float] =
[vscan] in
let Ta430.2469: [Float] =
[nvector] in
in_prod.2121(Ta429.2468, Ta430.2469) in
(Td428.2466 * Td431.2467) in
let Tu127.2403: Unit =
let Ta432.2464: [Float] =
[vscan] in
let Ta433.2465: [Float] =
[nvector] in
accumulate_vec_mul.2124(Ta432.2464, Ta433.2465, w.2402) in
let m_surface.2404: Int =
o_reflectiontype.1988(cobj.2395) in
let Ti434.2405: Int =
1 in
if m_surface.2404 == Ti434.2405 then
let Td435.2431: Float =
0. in
let Td436.2432: Float =
o_hilight.2008(cobj.2395) in
if Td435.2431 == Td436.2432 then
()
else
let hl.2433: Float =
let Td439.2461: Float =
let Ta437.2462: [Float] =
[vscan] in
let Ta438.2463: [Float] =
[light] in
in_prod.2121(Ta437.2462, Ta438.2463) in
-(Td439.2461) in
let Td440.2434: Float =
0. in
if hl.2433 <= Td440.2434 then
()
else
let ihl.2435: Float =
let Td444.2456: Float =
let Td443.2458: Float =
let Td442.2459: Float =
let Td441.2460: Float =
fsqr.1980(hl.2433) in
fsqr.1980(Td441.2460) in
(Td442.2459 * energy.2130) in
(Td443.2458 * bright.2397) in
let Td445.2457: Float =
o_hilight.2008(cobj.2395) in
(Td444.2456 * Td445.2457) in
let Tu123.2436: Unit =
let Ta446.2450: [Float] =
[rgb] in
let Ti447.2451: Int =
0 in
let Td451.2452: Float =
let Td450.2453: Float =
let Ta448.2454: [Float] =
[rgb] in
let Ti449.2455: Int =
0 in
Ta448.2454.(Ti449.2455) in
(Td450.2453 + ihl.2435) in
Ta446.2450.(Ti447.2451) <- Td451.2452 in
let Tu122.2437: Unit =
let Ta452.2444: [Float] =
[rgb] in
let Ti453.2445: Int =
1 in
let Td457.2446: Float =
let Td456.2447: Float =
let Ta454.2448: [Float] =
[rgb] in
let Ti455.2449: Int =
1 in
Ta454.2448.(Ti455.2449) in
(Td456.2447 + ihl.2435) in
Ta452.2444.(Ti453.2445) <- Td457.2446 in
let Ta458.2438: [Float] =
[rgb] in
let Ti459.2439: Int =
2 in
let Td463.2440: Float =
let Td462.2441: Float =
let Ta460.2442: [Float] =
[rgb] in
let Ti461.2443: Int =
2 in
Ta460.2442.(Ti461.2443) in
(Td462.2441 + ihl.2435) in
Ta458.2438.(Ti459.2439) <- Td463.2440
else
let Ti464.2406: Int =
2 in
if m_surface.2404 == Ti464.2406 then
let Tu126.2407: Unit =
let Ta465.2426: [Int] =
[viewpoint] in
let Ti466.2427: Int =
0 in
let Ti469.2428: Int =
let Ta467.2429: [Int] =
[crashed_point] in
let Ti468.2430: Int =
0 in
Ta467.2429.(Ti468.2430) in
Ta465.2426.(Ti466.2427) <- Ti469.2428 in
let Tu125.2408: Unit =
let Ta470.2421: [Int] =
[viewpoint] in
let Ti471.2422: Int =
1 in
let Ti474.2423: Int =
let Ta472.2424: [Int] =
[crashed_point] in
let Ti473.2425: Int =
1 in
Ta472.2424.(Ti473.2425) in
Ta470.2421.(Ti471.2422) <- Ti474.2423 in
let Tu124.2409: Unit =
let Ta475.2416: [Int] =
[viewpoint] in
let Ti476.2417: Int =
2 in
let Ti479.2418: Int =
let Ta477.2419: [Int] =
[crashed_point] in
let Ti478.2420: Int =
2 in
Ta477.2419.(Ti478.2420) in
Ta475.2416.(Ti476.2417) <- Ti479.2418 in
let energy2.2410: Float =
let Td482.2413: Float =
let Td480.2414: Float =
1. in
let Td481.2415: Float =
o_diffuse.2006(cobj.2395) in
(Td480.2414 - Td481.2415) in
(energy.2130 * Td482.2413) in
let Ti484.2411: Int =
let Ti483.2412: Int =
1 in
(nref.2129 + Ti483.2412) in
raytracing.2128(Ti484.2411, energy2.2410)
else
()
else
() in 
let rec (write_rgb.2131: (Unit) -> Unit) ((Tu132.2132: Unit)) =
let red.2372: Int =
let Td361.2389: Float =
let Ta359.2390: [Float] =
[rgb] in
let Ti360.2391: Int =
0 in
Ta359.2390.(Ti360.2391) in
int_of_float(Td361.2389) in
let red.2373: Int =
let Ti362.2388: Int =
255 in
if red.2372 <= Ti362.2388 then
red.2372
else
255 in
let Tu134.2374: Unit =
print_byte(red.2373) in
let green.2375: Int =
let Td365.2385: Float =
let Ta363.2386: [Float] =
[rgb] in
let Ti364.2387: Int =
1 in
Ta363.2386.(Ti364.2387) in
int_of_float(Td365.2385) in
let green.2376: Int =
let Ti366.2384: Int =
255 in
if green.2375 <= Ti366.2384 then
green.2375
else
255 in
let Tu133.2377: Unit =
print_byte(green.2376) in
let blue.2378: Int =
let Td369.2381: Float =
let Ta367.2382: [Float] =
[rgb] in
let Ti368.2383: Int =
2 in
Ta367.2382.(Ti368.2383) in
int_of_float(Td369.2381) in
let blue.2379: Int =
let Ti370.2380: Int =
255 in
if blue.2378 <= Ti370.2380 then
blue.2378
else
255 in
print_byte(blue.2379) in 
let rec (write_ppm_header.2133: (Unit) -> Unit) ((Tu135.2134: Unit)) =
let Tu143.2349: Unit =
let Ti344.2371: Int =
80 in
print_byte(Ti344.2371) in
let Tu142.2350: Unit =
let Ti347.2368: Int =
let Ti345.2369: Int =
48 in
let Ti346.2370: Int =
6 in
(Ti345.2369 + Ti346.2370) in
print_byte(Ti347.2368) in
let Tu141.2351: Unit =
let Ti348.2367: Int =
10 in
print_byte(Ti348.2367) in
let Tu140.2352: Unit =
let Ti351.2364: Int =
let Ta349.2365: [Int] =
[size] in
let Ti350.2366: Int =
0 in
Ta349.2365.(Ti350.2366) in
print_int(Ti351.2364) in
let Tu139.2353: Unit =
let Ti352.2363: Int =
32 in
print_byte(Ti352.2363) in
let Tu138.2354: Unit =
let Ti355.2360: Int =
let Ta353.2361: [Int] =
[size] in
let Ti354.2362: Int =
1 in
Ta353.2361.(Ti354.2362) in
print_int(Ti355.2360) in
let Tu137.2355: Unit =
let Ti356.2359: Int =
10 in
print_byte(Ti356.2359) in
let Tu136.2356: Unit =
let Ti357.2358: Int =
255 in
print_int(Ti357.2358) in
let Ti358.2357: Int =
10 in
print_byte(Ti358.2357) in 
let rec (scan_point.2135: (Int) -> Unit) ((scanx.2136: Int)) =
let Ti249.2236: Int =
let Ta247.2347: [Int] =
[size] in
let Ti248.2348: Int =
0 in
Ta247.2347.(Ti248.2348) in
if Ti249.2236 <= scanx.2136 then
()
else
let sscanx.2237: Float =
let Td254.2339: Float =
let Td250.2343: Float =
float_of_int(scanx.2136) in
let Td253.2344: Float =
let Ta251.2345: [Float] =
[scan_offset] in
let Ti252.2346: Int =
0 in
Ta251.2345.(Ti252.2346) in
(Td250.2343 - Td253.2344) in
let Td257.2340: Float =
let Ta255.2341: [Float] =
[scan_d] in
let Ti256.2342: Int =
0 in
Ta255.2341.(Ti256.2342) in
(Td254.2339 * Td257.2340) in
let Tu157.2238: Unit =
let Ta258.2329: [Float] =
[vscan] in
let Ti259.2330: Int =
0 in
let Td267.2331: Float =
let Td263.2332: Float =
let Td262.2336: Float =
let Ta260.2337: [Float] =
[cos_v] in
let Ti261.2338: Int =
1 in
Ta260.2337.(Ti261.2338) in
(sscanx.2237 * Td262.2336) in
let Td266.2333: Float =
let Ta264.2334: [Float] =
[wscan] in
let Ti265.2335: Int =
0 in
Ta264.2334.(Ti265.2335) in
(Td263.2332 + Td266.2333) in
Ta258.2329.(Ti259.2330) <- Td267.2331 in
let Tu156.2239: Unit =
let Ta268.2316: [Float] =
[vscan] in
let Ti269.2317: Int =
1 in
let Td280.2318: Float =
let Td276.2319: Float =
let Td272.2323: Float =
let Ta270.2327: [Float] =
[scan_sscany] in
let Ti271.2328: Int =
0 in
Ta270.2327.(Ti271.2328) in
let Td275.2324: Float =
let Ta273.2325: [Float] =
[cos_v] in
let Ti274.2326: Int =
0 in
Ta273.2325.(Ti274.2326) in
(Td272.2323 * Td275.2324) in
let Td279.2320: Float =
let Ta277.2321: [Float] =
[vp] in
let Ti278.2322: Int =
1 in
Ta277.2321.(Ti278.2322) in
(Td276.2319 - Td279.2320) in
Ta268.2316.(Ti269.2317) <- Td280.2318 in
let Tu155.2240: Unit =
let Ta281.2305: [Float] =
[vscan] in
let Ti282.2306: Int =
2 in
let Td291.2307: Float =
let Td287.2308: Float =
let Td283.2312: Float =
-(sscanx.2237) in
let Td286.2313: Float =
let Ta284.2314: [Float] =
[sin_v] in
let Ti285.2315: Int =
1 in
Ta284.2314.(Ti285.2315) in
(Td283.2312 * Td286.2313) in
let Td290.2309: Float =
let Ta288.2310: [Float] =
[wscan] in
let Ti289.2311: Int =
2 in
Ta288.2310.(Ti289.2311) in
(Td287.2308 + Td290.2309) in
Ta281.2305.(Ti282.2306) <- Td291.2307 in
let metric.2241: Float =
let Td296.2300: Float =
let Td292.2301: Float =
fsqr.1980(sscanx.2237) in
let Td295.2302: Float =
let Ta293.2303: [Float] =
[scan_met1] in
let Ti294.2304: Int =
0 in
Ta293.2303.(Ti294.2304) in
(Td292.2301 + Td295.2302) in
sqrt(Td296.2300) in
let Tu154.2242: Unit =
let Ta297.2294: [Float] =
[vscan] in
let Ti298.2295: Int =
0 in
let Td302.2296: Float =
let Td301.2297: Float =
let Ta299.2298: [Float] =
[vscan] in
let Ti300.2299: Int =
0 in
Ta299.2298.(Ti300.2299) in
(Td301.2297 / metric.2241) in
Ta297.2294.(Ti298.2295) <- Td302.2296 in
let Tu153.2243: Unit =
let Ta303.2288: [Float] =
[vscan] in
let Ti304.2289: Int =
1 in
let Td308.2290: Float =
let Td307.2291: Float =
let Ta305.2292: [Float] =
[vscan] in
let Ti306.2293: Int =
1 in
Ta305.2292.(Ti306.2293) in
(Td307.2291 / metric.2241) in
Ta303.2288.(Ti304.2289) <- Td308.2290 in
let Tu152.2244: Unit =
let Ta309.2282: [Float] =
[vscan] in
let Ti310.2283: Int =
2 in
let Td314.2284: Float =
let Td313.2285: Float =
let Ta311.2286: [Float] =
[vscan] in
let Ti312.2287: Int =
2 in
Ta311.2286.(Ti312.2287) in
(Td313.2285 / metric.2241) in
Ta309.2282.(Ti310.2283) <- Td314.2284 in
let Tu151.2245: Unit =
let Ta315.2277: [Int] =
[viewpoint] in
let Ti316.2278: Int =
0 in
let Ti319.2279: Int =
let Ta317.2280: [Int] =
[view] in
let Ti318.2281: Int =
0 in
Ta317.2280.(Ti318.2281) in
Ta315.2277.(Ti316.2278) <- Ti319.2279 in
let Tu150.2246: Unit =
let Ta320.2272: [Int] =
[viewpoint] in
let Ti321.2273: Int =
1 in
let Ti324.2274: Int =
let Ta322.2275: [Int] =
[view] in
let Ti323.2276: Int =
1 in
Ta322.2275.(Ti323.2276) in
Ta320.2272.(Ti321.2273) <- Ti324.2274 in
let Tu149.2247: Unit =
let Ta325.2267: [Int] =
[viewpoint] in
let Ti326.2268: Int =
2 in
let Ti329.2269: Int =
let Ta327.2270: [Int] =
[view] in
let Ti328.2271: Int =
2 in
Ta327.2270.(Ti328.2271) in
Ta325.2267.(Ti326.2268) <- Ti329.2269 in
let Tu148.2248: Unit =
let Ta330.2264: [Float] =
[rgb] in
let Ti331.2265: Int =
0 in
let Td332.2266: Float =
0. in
Ta330.2264.(Ti331.2265) <- Td332.2266 in
let Tu147.2249: Unit =
let Ta333.2261: [Float] =
[rgb] in
let Ti334.2262: Int =
1 in
let Td335.2263: Float =
0. in
Ta333.2261.(Ti334.2262) <- Td335.2263 in
let Tu146.2250: Unit =
let Ta336.2258: [Float] =
[rgb] in
let Ti337.2259: Int =
2 in
let Td338.2260: Float =
0. in
Ta336.2258.(Ti337.2259) <- Td338.2260 in
let Tu145.2251: Unit =
let Ti339.2256: Int =
0 in
let Td340.2257: Float =
1. in
raytracing.2128(Ti339.2256, Td340.2257) in
let Tu144.2252: Unit =
let Tu341.2255: Unit =
() in
write_rgb.2131(Tu341.2255) in
let Ti343.2253: Int =
let Ti342.2254: Int =
1 in
(scanx.2136 + Ti342.2254) in
scan_point.2135(Ti343.2253) in 
let rec (scan_line.2137: (Int) -> Unit) ((scany.2138: Int)) =
let Ti197.2177: Int =
let Ta195.2234: [Int] =
[size] in
let Ti196.2235: Int =
0 in
Ta195.2234.(Ti196.2235) in
if Ti197.2177 <= scany.2138 then
()
else
let Tu162.2178: Unit =
let Ta198.2221: [Float] =
[scan_sscany] in
let Ti199.2222: Int =
0 in
let Td209.2223: Float =
let t.2224: Float =
let Td204.2228: Float =
let Td202.2230: Float =
let Ta200.2232: [Float] =
[scan_offset] in
let Ti201.2233: Int =
0 in
Ta200.2232.(Ti201.2233) in
let Td203.2231: Float =
1. in
(Td202.2230 - Td203.2231) in
let Td205.2229: Float =
float_of_int(scany.2138) in
(Td204.2228 - Td205.2229) in
let Td208.2225: Float =
let Ta206.2226: [Float] =
[scan_d] in
let Ti207.2227: Int =
0 in
Ta206.2226.(Ti207.2227) in
(Td208.2225 * t.2224) in
Ta198.2221.(Ti199.2222) <- Td209.2223 in
let Tu161.2179: Unit =
let Ta210.2213: [Float] =
[scan_met1] in
let Ti211.2214: Int =
0 in
let Td217.2215: Float =
let Td215.2216: Float =
let Td214.2218: Float =
let Ta212.2219: [Float] =
[scan_sscany] in
let Ti213.2220: Int =
0 in
Ta212.2219.(Ti213.2220) in
fsqr.1980(Td214.2218) in
let Td216.2217: Float =
40000. in
(Td215.2216 + Td216.2217) in
Ta210.2213.(Ti211.2214) <- Td217.2215 in
let t1.2180: Float =
let Td220.2207: Float =
let Ta218.2211: [Float] =
[scan_sscany] in
let Ti219.2212: Int =
0 in
Ta218.2211.(Ti219.2212) in
let Td223.2208: Float =
let Ta221.2209: [Float] =
[sin_v] in
let Ti222.2210: Int =
0 in
Ta221.2209.(Ti222.2210) in
(Td220.2207 * Td223.2208) in
let Tu160.2181: Unit =
let Ta224.2197: [Float] =
[wscan] in
let Ti225.2198: Int =
0 in
let Td233.2199: Float =
let Td229.2200: Float =
let Td228.2204: Float =
let Ta226.2205: [Float] =
[sin_v] in
let Ti227.2206: Int =
1 in
Ta226.2205.(Ti227.2206) in
(t1.2180 * Td228.2204) in
let Td232.2201: Float =
let Ta230.2202: [Float] =
[vp] in
let Ti231.2203: Int =
0 in
Ta230.2202.(Ti231.2203) in
(Td229.2200 - Td232.2201) in
Ta224.2197.(Ti225.2198) <- Td233.2199 in
let Tu159.2182: Unit =
let Ta234.2187: [Float] =
[wscan] in
let Ti235.2188: Int =
2 in
let Td243.2189: Float =
let Td239.2190: Float =
let Td238.2194: Float =
let Ta236.2195: [Float] =
[cos_v] in
let Ti237.2196: Int =
1 in
Ta236.2195.(Ti237.2196) in
(t1.2180 * Td238.2194) in
let Td242.2191: Float =
let Ta240.2192: [Float] =
[vp] in
let Ti241.2193: Int =
2 in
Ta240.2192.(Ti241.2193) in
(Td239.2190 - Td242.2191) in
Ta234.2187.(Ti235.2188) <- Td243.2189 in
let Tu158.2183: Unit =
let Ti244.2186: Int =
0 in
scan_point.2135(Ti244.2186) in
let Ti246.2184: Int =
let Ti245.2185: Int =
1 in
(scany.2138 + Ti245.2185) in
scan_line.2137(Ti246.2184) in 
let rec (scan_start.2139: (Unit) -> Unit) ((Tu163.2140: Unit)) =
let Tu166.2160: Unit =
let Tu182.2176: Unit =
() in
write_ppm_header.2133(Tu182.2176) in
let sizex.2161: Float =
let Ti185.2173: Int =
let Ta183.2174: [Int] =
[size] in
let Ti184.2175: Int =
0 in
Ta183.2174.(Ti184.2175) in
float_of_int(Ti185.2173) in
let Tu165.2162: Unit =
let Ta186.2169: [Float] =
[scan_d] in
let Ti187.2170: Int =
0 in
let Td189.2171: Float =
let Td188.2172: Float =
128. in
(Td188.2172 / sizex.2161) in
Ta186.2169.(Ti187.2170) <- Td189.2171 in
let Tu164.2163: Unit =
let Ta190.2165: [Float] =
[scan_offset] in
let Ti191.2166: Int =
0 in
let Td193.2167: Float =
let Td192.2168: Float =
2. in
(sizex.2161 / Td192.2168) in
Ta190.2165.(Ti191.2166) <- Td193.2167 in
let Ti194.2164: Int =
0 in
scan_line.2137(Ti194.2164) in 
let rec (rt.2141: (Int, Int, Bool) -> Unit) ((size_x.2142: Int), (size_y.2143: Int), (debug_p.2144: Bool)) =
let Tu170.2148: Unit =
let Ta174.2158: [Int] =
[size] in
let Ti175.2159: Int =
0 in
Ta174.2158.(Ti175.2159) <- size_x.2142 in
let Tu169.2149: Unit =
let Ta176.2156: [Int] =
[size] in
let Ti177.2157: Int =
1 in
Ta176.2156.(Ti177.2157) <- size_y.2143 in
let Tu168.2150: Unit =
let Ta178.2154: [Bool] =
[dbg] in
let Ti179.2155: Int =
0 in
Ta178.2154.(Ti179.2155) <- debug_p.2144 in
let Tu167.2151: Unit =
let Tu180.2153: Unit =
() in
read_parameter.2043(Tu180.2153) in
let Tu181.2152: Unit =
() in
scan_start.2139(Tu181.2152) in 
let Ti171.2145: Int =
768 in
let Ti172.2146: Int =
768 in
let Ti173.2147: Int =
0 in
rt.2141(Ti171.2145, Ti172.2146, Ti173.2147)

